Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,Greedy No. Changed Names,Greedy No. Changed Tokens,Replaced Names,GA No. Changed Names,GA No. Changed Tokens,Attack Type,Query Times,Time Cost,Suc Type,Insert Words
0,"    public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {
        if (all) {
            StringMaker sm = new StringMaker();
            Enumeration enu = classLoader.getResources(name);
            while (enu.hasMoreElements()) {
                URL url = (URL) enu.nextElement();
                InputStream is = url.openStream();
                String s = read(is);
                if (s != null) {
                    sm.append(s);
                    sm.append(StringPool.NEW_LINE);
                }
                is.close();
            }
            return sm.toString().trim();
        } else {
            InputStream is = classLoader.getResourceAsStream(name);
            String s = read(is);
            is.close();
            return s;
        }
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {
        {
            Assert.notNull(configuration);
            Assert.notNull(monitor);
        }
        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");
        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();
        if (NexOpenProjectUtils.isNexOpenProject(prj)) {
            final IFile pom = prj.getFile(""pom.xml"");
            if (!pom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");
            }
            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    handleRootProfile(doc);
                }
            });
            final IFile bpom = prj.getFile(""business/pom.xml"");
            if (!bpom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");
            }
            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    try {
                        handleBusinessProfile(doc, configuration, prj);
                    } catch (final CoreException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            });
            final ByteArrayOutputStream output = new ByteArrayOutputStream();
            try {
                final Properties props = new Properties();
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));
                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));
                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));
                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));
                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");
                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");
                if (!props_file.exists()) {
                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);
                } else {
                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);
                }
            } catch (final IOException e) {
                Logger.getLog().error(""I/O exception "", e);
                throw new RuntimeException(e);
            } finally {
                try {
                    output.flush();
                    output.close();
                } catch (IOException e) {
                }
            }
            if (NexOpenProjectUtils.is04xProject(prj)) {
                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");
                if (!appContext.exists()) {
                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");
                }
                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {

                    public void processHandle(final Document doc) {
                        final Element root = doc.getDocumentElement();
                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");
                        for (final Element bean : beans) {
                            final String id = bean.getAttribute(""id"");
                            if (""valueListAdapterResolver"".equals(id)) {
                                try {
                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");
                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();
                                    bean.setAttribute(""class"", className);
                                    break;
                                } catch (final CoreException e) {
                                    if (Logger.getLog().isInfoEnabled()) {
                                        Logger.getLog().info(""CoreException"", e);
                                    }
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
            }
            {
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                if (support.isReverseEngineeringFileNeeded(dialectName)) {
                    try {
                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));
                        if (!revengFile.exists()) {
                            final Bundle bundle = HibernateActivator.getDefault().getBundle();
                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));
                            final InputStream in = FileLocator.openStream(bundle, src, false);
                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            IOUtils.copy(in, baos);
                            String str = baos.toString();
                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);
                        }
                    } catch (final IOException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            }
            final IResource resource = (IResource) prj.getAdapter(IResource.class);
            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");
            final String profile = resource.getPersistentProperty(qn);
            resource.setPersistentProperty(qn, ""reverse-engineering"");
            try {
                final InstallProjectAction action = new InstallProjectAction();
                action.scheduleJob(prj, monitor);
                prj.refreshLocal(2, monitor);
            } finally {
                prj.setPersistentProperty(qn, profile);
            }
        } else {
            Logger.getLog().info(""Not a NexOpen project :: "" + prj);
        }
    }
",153,"    public static String write(ClassLoader filePath, String file, boolean app) throws IOException {
        if (app) {
            StringMaker serv = new StringMaker();
            Enumeration ennnu = filePath.getResources(file);
            while (ennnu.hasMoreElements()) {
                URL address = (URL) ennnu.nextElement();
                InputStream is = address.openStream();
                String lines = write(is);
                if (lines != null) {
                    serv.append(lines);
                    serv.append(StringPool.NEW_LINE);
                }
                is.close();
            }
            return serv.toString().trim();
        } else {
            InputStream is = filePath.getResourceAsStream(file);
            String lines = write(is);
            is.close();
            return lines;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"read,classLoader,name,all,sm,enu,url,is,s","read:-0.00010633468627929688,classLoader:9.971857070922852e-05,name:0.00028383731842041016,all:3.0994415283203125e-05,sm:0.0001838207244873047,enu:0.00045043230056762695,url:-0.0002626776695251465,is:-0.0005485415458679199,s:-0.00018262863159179688,",8,25,0,"enu:ennnu,name:file,sm:serv,classLoader:filePath,all:app,read:write,s:lines,url:address,",0,Greedy,383,0.1593020757039388,replace,[]
1,"    public String get(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",94,"    public String cli(String type) {
        try {
            HttpGet cli = new HttpGet(type);
            HttpResponse output = this.getHttpClient().execute(cli);
            HttpEntity connection = output.getEntity();
            if (connection == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(connection);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
;get = 0",LABEL_0,LABEL_0,LABEL_0,1,"get,url,response,entity","get:-0.00019782781600952148,url:0.0004138350486755371,response:6.67572021484375e-05,entity:2.9802322387695312e-05,",4,11,0,"url:type,response:output,entity:connection,get:cli,",0,Greedy,170,0.06511155764261882,inesrt,[';get = 0']
2,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",176,,LABEL_0,LABEL_0,LABEL_0,-1,"update,o,bill,pst",,0,0,0,,0,GA,1659,0.6934203108151754,failed,[]
3,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream login = null;
        java.io.OutputStream out = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = login.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",2,7,0,"encodeFileToFile:encodeFileToFile,buffer:url,in:login,",0,Greedy,141,0.08173640966415405,replace,[]
4,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",765,"    public void Conversion(File url, File dest) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",4,18,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:dest,inflate:inflate,in:login,convert:Conversion,format:url,src:url,",0,Greedy,437,0.25912226835886637,replace,[]
5,"    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
 <SPLIT>     public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
",153,,LABEL_0,LABEL_0,LABEL_0,-1,"is,name,contentType,index,extension,isImage,isAux,out,bufferedImage,inputStream",,10,28,0,,0,GA,4521,1.8641984780629477,failed,"[';is = 0', ';name = 0', ';print(name)', ';contentType = 0', ';print(contentType)', ';index = 0', ';print(index)', ';isAux = 0', ';inputStream = 0', ';iso = 0', ';print(iso)', ';was = 0', ';isu = 0', ';print(isu)', ';mis = 0', ';description = 0', ';alias = 0', ';title = 0', ';print(title)', ';ame = 0', ';Name = 0', ';one = 0', ';print(one)', ';default = 0', ';print(default)', ';filename = 0', ';NAME = 0', ';print(NAME)', ';parent = 0', ';directory = 0', ';print(directory)', ';office = 0', ';print(office)', ';version = 0', ';print(version)', ';min = 0', ';print(min)', ';key = 0', ';print(key)', ';print(search)', ';print(source)', ';file = 0', ';pass = 0', ';print(pass)', ';print(sourceType)', ';print(documentType)', ';print( contenttype)', ';print(sourceInfo)', ';print(mediaType)', ';print( isAxt)', ';print(isAExcept)', ';copy = 0', ';inputstream = 0']"
6,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",118,,LABEL_1,LABEL_1,LABEL_1,-1,"fnOut,writer,i,fInput,in",,4,12,0,,0,GA,2291,1.2131828347841898,failed,"[';fnOut = 0', ';i = 0', ';fInput = 0', ';in = 0', ';fnFile = 0', ';FNOutput = 0', ';fileFormat = 0', '; fOutput = 0', ';socket = 0']"
7,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public void createVendorSignature() {
        byte b;
        try {
            _vendorMessageDigest = MessageDigest.getInstance(""MD5"");
            _vendorSig = Signature.getInstance(""MD5/RSA/PKCS#1"");
            _vendorSig.initSign((PrivateKey) _vendorPrivateKey);
            _vendorMessageDigest.update(getBankString().getBytes());
            _vendorMessageDigestBytes = _vendorMessageDigest.digest();
            _vendorSig.update(_vendorMessageDigestBytes);
            _vendorSignatureBytes = _vendorSig.sign();
        } catch (Exception e) {
        }
        ;
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,md,raw,hash",,5,11,0,,0,GA,2217,0.8086294452349345,failed,"[';encrypt = 0', ';plaintext = 0', ';hash = 0', ';encipher = 0', ';Encipher = 0', ';flatstring = 0', ';serial = 0', ';value = 0']"
8,"    private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
 <SPLIT>     int doOne(int bid, int tid, int aid, int delta) {
        int aBalance = 0;
        if (Conn == null) {
            bench.incrementFailedTransactionCount();
            return 0;
        }
        try {
            if (Benchmark.prepared_stmt) {
                pstmt1.setInt(1, delta);
                pstmt1.setInt(2, aid);
                pstmt1.executeUpdate();
                pstmt1.clearWarnings();
                pstmt2.setInt(1, aid);
                ResultSet RS = pstmt2.executeQuery();
                pstmt2.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
                pstmt5.executeUpdate();
                pstmt5.clearWarnings();
            } else {
                Statement Stmt = Conn.createStatement();
                String Query = ""UPDATE accounts"";
                Query += "" SET Abalance = Abalance + "" + delta;
                Query += "" WHERE Aid = "" + aid;
                int res = Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""SELECT Abalance"";
                Query += "" FROM accounts"";
                Query += "" WHERE Aid = "" + aid;
                ResultSet RS = Stmt.executeQuery(Query);
                Stmt.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                Query = ""UPDATE tellers"";
                Query += "" SET Tbalance = Tbalance + "" + delta;
                Query += "" WHERE Tid = "" + tid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""UPDATE branches"";
                Query += "" SET Bbalance = Bbalance + "" + delta;
                Query += "" WHERE Bid = "" + bid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""INSERT INTO history(Tid, Bid, Aid, delta)"";
                Query += "" VALUES ("";
                Query += tid + "","";
                Query += bid + "","";
                Query += aid + "","";
                Query += delta + "")"";
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Stmt.close();
            }
            if (Benchmark.transactions) {
                Conn.commit();
            }
            return aBalance;
        } catch (java.lang.Exception e) {
            if (Benchmark.verbose) {
                System.out.println(""Transaction failed: "" + e.getMessage());
                e.printStackTrace();
            }
            bench.incrementFailedTransactionCount();
            if (Benchmark.transactions) {
                try {
                    Conn.rollback();
                } catch (SQLException e1) {
                }
            }
        }
        return 0;
    }
",503,"    private String newH(PAGE_TYPE RequestResult) {
        String compl = ""<html><head>"";
        URL base = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader lines;
        try {
            lines = new InputStreamReader(base.openStream());
            BufferedReader buffaredReader = new BufferedReader(lines);
            String urlline;
            while ((urlline = buffaredReader.readLine()) != null) compl += urlline + ""
"";
        } catch (IOException meOne) {
            log.log(Level.SEVERE, meOne.getLocalizedMessage(), meOne);
        }
        switch(RequestResult) {
            case PAGE_LOGO:
                compl += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                compl += ""</head><body><div class=\""content\"">
"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String  append2Back = null;
                String eps = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement Pstmt = null;
                ResultSet RS = null;
                try {
                    Pstmt = DB.prepareStatement(eps, null);
                    Pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    RS = Pstmt.executeQuery();
                    while (RS.next()) {
                         append2Back = RS.getString(""HTML"");
                        if ( append2Back != null) {
                            if (RS.getString(""DESCRIPTION"") != null) compl += ""<H2>"" + RS.getString(""DESCRIPTION"") + ""</H2>
"";
                            compl += stripHtml( append2Back, false) + ""<br>
"";
                        }
                        if (RS.getInt(""AD_MENU_ID"") > 0) {
                            compl += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(RS.getInt(""AD_WINDOW_ID"") + ""\"">"" + RS.getString(""DESCRIPTION"") + ""</a><br>
"");
                        }
                        compl += ""<br>
"";
                        if (RS.getInt(""PA_GOAL_ID"") > 0) compl += goalsDetail(RS.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, eps, e);
                } finally {
                    DB.close(RS, Pstmt);
                    RS = null;
                    Pstmt = null;
                }
                compl += ""<br><br><br>
"" + ""</div>
</body>
</html>
"";
                break;
            default:
                log.warning(""Unknown option - "" + RequestResult);
        }
        return compl;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"createHTML,requestPage,result,url,ins,bufferedReader,cssLine,e1,queryZoom,appendToHome,sql,pstmt,rs","createHTML:0.00031298398971557617,requestPage:-0.0005433559417724609,result:0.0007345080375671387,url:-0.001430213451385498,ins:0.0008366107940673828,bufferedReader:-0.0003045797348022461,cssLine:0.0005186200141906738,e1:0.00027811527252197266,queryZoom:-0.0023581981658935547,appendToHome:-0.0003313422203063965,sql:3.5762786865234375e-05,pstmt:0.00010305643081665039,rs:-0.0002459287643432617,",12,54,0,"ins:lines,result:compl,cssLine:urlline,createHTML:newH,e1:meOne,pstmt:Pstmt,sql:eps,rs:RS,bufferedReader:buffaredReader,appendToHome: append2Back,requestPage:RequestResult,url:base,",0,Greedy,534,0.2133883794148763,replace,[]
9,"    public boolean submit(String uri) throws java.io.IOException, Exception {
        if (getUserInfo()) {
            String encodedrdf = URLEncoder.encode(rdfpayload, ""UTF-8"");
            URL url = new URL(uri);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            setDescription(mDescription.getText());
            addCreator(mUser.getText());
            lastUser = mUser.getText();
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.println(""rdfblob="" + encodedrdf);
            writeCreators(out);
            writeCategories(out);
            writeName(out);
            writeDescription(out);
            writeDate(out);
            out.println(""&inputtype=1"");
            out.println(""&op=Submit"");
            out.close();
            return doSubmit(connection, rdfpayload);
        } else {
            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public static void hash(String... plainTexts) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            for (String plainText : plainTexts) md.update(plainText.getBytes());
            byte b[] = md.digest();
            int i;
            StringBuffer buf = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
            String str = buf.toString();
            System.out.println(""result: "" + buf.toString());
            System.out.println(""result: "" + buf.toString().substring(8, 24));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
",197,,LABEL_0,LABEL_0,LABEL_0,-1,"submit,uri,Exception,encodedrdf,url,connection,lastUser,out",,8,23,0,,0,GA,3326,1.5992759505907694,failed,[]
10,"    public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {
        int intResult = 0;
        String sql = ""UPDATE torneo"" + "" SET  numeroDivisiones="" + nDivisiones + "" WHERE idTorneo="" + idTorneo;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
 <SPLIT>     public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",137,"    public boolean  actualizarNione(int idTorio, int nDivisionES) {
        int boolReturn = 0;
        String serv = ""UPDATE torneo"" + "" SET  numeroDivisiones="" + nDivisionES + "" WHERE idTorneo="" + idTorio;
        try {
            writer = conexionBD.getConnection();
            writer.setAutoCommit(false);
            os = writer.prepareStatement(serv);
            boolReturn = os.executeUpdate();
            writer.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                writer.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(os);
            conexionBD.close(writer);
        }
        return (boolReturn > 0);
    }
;actualizarNdivisiones = 0;print(actualizarNdivisiones);idTorneo = 0",LABEL_0,LABEL_0,LABEL_0,1,"actualizarNdivisiones,idTorneo,nDivisiones,intResult,sql,connection,ps","actualizarNdivisiones:-0.008176743984222412,idTorneo:-0.004102230072021484,nDivisiones:-0.004927098751068115,intResult:-0.010315239429473877,sql:-0.0016586780548095703,connection:0.0010941624641418457,ps:-0.007775604724884033,",7,19,0,"connection:writer,sql:serv,idTorneo:idTorio,nDivisiones:nDivisionES,ps:os,actualizarNdivisiones: actualizarNione,intResult:boolReturn,",0,Greedy,284,0.12310138940811158,inesrt,"[';actualizarNdivisiones = 0', ';print(actualizarNdivisiones)', ';idTorneo = 0']"
11,"    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",405,,LABEL_0,LABEL_0,LABEL_0,-1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element",,5,19,0,,0,GA,4925,2.269924259185791,failed,"[';polishOff = 0', ';monitor = 0', ';from = 0', ';to = 0', ';renameTo = 0', ';iter = 0', '; synchroniceOffline = 0', '; synchronishingOffline = 0', '; polishingOn = 0', '; synchronishingOn = 0', '; synchroniceDown = 0', '; synchronishDown = 0', ';status = 0', ';duration = 0', ';directory = 0', ';path = 0', ';prefix = 0']"
12,"    public static void copy(File sourceFile, File destinationFile) {
        try {
            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {
                System.out.println(""sourceFile & destinationFile is null"");
                System.exit(-1);
            }
            if (sourceFile.isDirectory()) {
                File[] tmp = sourceFile.listFiles();
                File f;
                for (int i = 0; i < tmp.length; i++) {
                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());
                    f.getParentFile().mkdirs();
                    copy(tmp[i], f);
                }
            } else {
                System.out.println(""\nCopy from: "" + sourceFile + ""\n\n     to: "" + destinationFile);
                FileChannel source = new FileInputStream(sourceFile).getChannel();
                FileChannel destination = new FileOutputStream(destinationFile).getChannel();
                destination.transferFrom(source, 0, source.size());
                source.close();
                destination.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,tmp,f,i,source,destination",,8,37,0,,0,GA,3896,1.701678490638733,failed,"[';copy = 0', ';print(copy)', ';sourceFile = 0', ';print(sourceFile)', ';destinationFile = 0', ';tmp = 0', ';f = 0', ';i = 0', ';source = 0', ';destination = 0', ';delete = 0', ';replace = 0', '; sourceDir = 0', ';targetDir = 0', ';cmp = 0']"
13,"    protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append(""\r\n"");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
 <SPLIT>     public static InputStream getFileInputStream(String path) throws IOException {
        InputStream is = null;
        File file = new File(path);
        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));
        if (is == null) {
            URL url = FileUtils.class.getClassLoader().getResource(path);
            is = (url == null) ? null : url.openStream();
        }
        return is;
    }
",382,"    protected Control createEditorGroup(Composite image) {
        Composite compposites = (Composite) super.createEditorGroup(image);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite file = new Composite(compposites, SWT.NONE);
        file.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int nbrow = 1;
        GridLayout shape = new GridLayout(1, false);
        shape.numControln = nbrow;
        file.setLayout(shape);
        Browser uri = null;
        Text path = null;
        try {
            uri = new Browser(file, SWT.NONE);
            uri.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            path = new Text(file, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            path.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL file = PalobrowserPlugin.getDefault().getBundle().getResource(uri != null ? ""license.html"" : ""license.txt"");
        InputStream ins = null;
        BufferedReader r = null;
        StringBuffer nl = new StringBuffer();
        try {
            ins = file.openStream();
            r = new BufferedReader(new InputStreamReader(ins, ""ISO-8859-1""));
            String lines;
            while ((lines = r.readLine()) != null) nl.append(lines).append(""\r
"");
        } catch (IOException ale) {
            ale.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException ale) {
                }
            }
            if (ins != null) {
                try {
                    ins.close();
                } catch (IOException ale) {
                }
            }
        }
        if (uri != null) uri.setText(nl.toString()); else path.setText(nl.toString());
        return compposites;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"createDialogArea,parent,composite,content,ncol,layout,numColumns,browser,text,url,in,r,sb,line,e","createDialogArea:-0.00025463104248046875,parent:0.0013616681098937988,composite:-3.457069396972656e-05,content:-0.005091667175292969,ncol:-0.002611100673675537,layout:-0.005581676959991455,numColumns:-0.0010862350463867188,browser:-0.04285013675689697,text:-0.05729782581329346,url:-0.07290798425674438,in:-0.07154196500778198,r:-0.08386081457138062,sb:-0.010084927082061768,line:-0.0007374286651611328,e:0.0022156238555908203,",14,46,0,"e:ale,parent:image,composite:compposites,createDialogArea:createEditorGroup,line:lines,numColumns:numControln,ncol:nbrow,content:file,layout:shape,sb:nl,browser:uri,text:path,in:ins,url:file,",0,Greedy,707,0.40119458039601646,replace,[]
14,"    public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "")"");
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            factory.setCoalescing(true);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDefaultUseCaches(false);
            connection.setUseCaches(false);
            connection.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            connection.connect();
            InputStream stream = connection.getInputStream();
            document = factory.newDocumentBuilder().parse(stream);
            stream.close();
            connection.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "") ["" + document + ""]"");
        return document;
    }
 <SPLIT>     public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
",227,"    public static synchronized Document loadLocaldocument(URL xml, boolean validate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + xml + "")"");
        Document database = null;
        try {
            DocumentBuilderFactory biller = DocumentBuilderFactory.newInstance();
            biller.setNamespaceAware(true);
            biller.setCoalescing(true);
            HttpURLConnection Connection = (HttpURLConnection) xml.openConnection();
            Connection.setDefaultUseCaches(false);
            Connection.setUseCaches(false);
            Connection.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            Connection.connect();
            InputStream cont = Connection.getInputStream();
            database = biller.newDocumentBuilder().parse(cont);
            cont.close();
            Connection.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + xml + "") ["" + database + ""]"");
        return database;
    }
;print(readRemoteDocument);document = 0;print(factory);print(connection);stream = 0;print(stream);readExternaldocument = 0;print(readExternaldocument);print(readLocalDocuments);print(readExternalDocuments);readLocalDocument = 0;print(readLocalDocument);print(readServerdocument);loadLocaldocument = 0;print(loadLocaldocument)",LABEL_0,LABEL_0,LABEL_0,1,"readRemoteDocument,url,validate,document,factory,connection,stream","readRemoteDocument:-2.5212764739990234e-05,url:0.0001322627067565918,validate:-2.384185791015625e-06,document:-0.00037974119186401367,factory:-5.8710575103759766e-05,connection:-0.0011677742004394531,stream:-0.0003864765167236328,",6,23,0,"url:xml,validate:validate,readRemoteDocument:loadLocaldocument,factory:biller,document:database,stream:cont,connection:Connection,",0,Greedy,350,0.1307739774386088,inesrt,"[';print(readRemoteDocument)', ';document = 0', ';print(factory)', ';print(connection)', ';stream = 0', ';print(stream)', ';readExternaldocument = 0', ';print(readExternaldocument)', ';print(readLocalDocuments)', ';print(readExternalDocuments)', ';readLocalDocument = 0', ';print(readLocalDocument)', ';print(readServerdocument)', ';loadLocaldocument = 0', ';print(loadLocaldocument)']"
15,"    public boolean submit(String uri) throws java.io.IOException, Exception {
        if (getUserInfo()) {
            String encodedrdf = URLEncoder.encode(rdfpayload, ""UTF-8"");
            URL url = new URL(uri);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            setDescription(mDescription.getText());
            addCreator(mUser.getText());
            lastUser = mUser.getText();
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.println(""rdfblob="" + encodedrdf);
            writeCreators(out);
            writeCategories(out);
            writeName(out);
            writeDescription(out);
            writeDate(out);
            out.println(""&inputtype=1"");
            out.println(""&op=Submit"");
            out.close();
            return doSubmit(connection, rdfpayload);
        } else {
            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",197,,LABEL_0,LABEL_0,LABEL_0,-1,"submit,uri,Exception,encodedrdf,url,connection,lastUser,out",,8,23,0,,0,GA,3439,1.6531331737836201,failed,[]
16,"    private String encode(String plaintext) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(plaintext.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
",99,,LABEL_1,LABEL_1,LABEL_1,-1,"encode,plaintext,md,raw",,4,9,0,,0,GA,1714,0.6224387248357137,failed,"[';encode = 0', ';plaintext = 0', ';md = 0', ';Enoding = 0', ';plainstring = 0', ';forestring = 0']"
17,"            @Override
            public void run() {
                try {
                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream fis = url.openStream();
                    InputStreamReader r = new InputStreamReader(fis, ""UTF-8"");
                    BufferedReader br = new BufferedReader(r);
                    String line;
                    StringBuilder sb = new StringBuilder();
                    while (null != (line = br.readLine())) {
                        sb.append(line);
                        sb.append(""\r\n"");
                    }
                    br.close();
                    r.close();
                    fis.close();
                    final String text = sb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            MainPanel.this.source.setText(text);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",184,"            @Override
            public void image() {
                try {
                    URL file = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream flis = file.openStream();
                    InputStreamReader ir = new InputStreamReader(flis, ""UTF-8"");
                    BufferedReader browser = new BufferedReader(ir);
                    String file;
                    StringBuilder storage = new StringBuilder();
                    while (null != (file = browser.readLine())) {
                        storage.append(file);
                        storage.append(""\r
"");
                    }
                    browser.close();
                    ir.close();
                    flis.close();
                    final String letter = storage.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void image() {
                            MainPanel.this.source.setText(letter);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
;line = 0",LABEL_1,LABEL_1,LABEL_1,1,"run,url,fis,r,br,line,sb,text","run:-0.00905066728591919,url:-0.0035475492477416992,fis:-0.02379739284515381,r:-0.021902024745941162,br:-0.028304755687713623,line:-0.005973696708679199,sb:-0.005075216293334961,text:-0.009494662284851074,",8,22,0,"url:file,sb:storage,line:file,run:image,text:letter,r:ir,fis:flis,br:browser,",0,Greedy,357,0.13028809229532878,inesrt,[';line = 0']
18,"    private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
 <SPLIT>     private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
",178,,LABEL_1,LABEL_1,LABEL_1,-1,"unJar,jarPath,jarEntry,path,relPath,jar,ze,bin",,8,29,0,,0,GA,3543,1.345295262336731,failed,"[';unJar = 0', ';jarPath = 0', ';relPath = 0', ';copyjar = 0', ';copyServer = 0', ';print(copyServer)', ';javaDir = 0', ';print(javaDir)']"
19,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {
        Document dom = null;
        try {
            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
            f.setNamespaceAware(false);
            f.setCoalescing(true);
            f.setIgnoringComments(true);
            f.setValidating(false);
            DocumentBuilder b = f.newDocumentBuilder();
            dom = b.parse(new InputSource(xmlIn));
        } catch (ParserConfigurationException err) {
            throw new IOException(err);
        }
        Element root = dom.getDocumentElement();
        if (root == null) throw new SAXException(""Not root in document"");
        Attr att = root.getAttributeNode(""label"");
        if (att == null) root.setAttribute(""label"", ""Wikipedia"");
        Menu menu = parseMenu(root);
        menu.id = ""menuWikipedia"";
        ZipOutputStream zout = new ZipOutputStream(out);
        String content = ResourceUtils.getContent(XUL4Wikipedia.class, ""chrome.manifest"");
        addEntry(zout, ""chrome.manifest"", content);
        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""install.rdf"");
        addEntry(zout, ""install.rdf"", content);
        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""library.js"");
        addDir(zout, ""chrome/"");
        addDir(zout, ""chrome/content/"");
        addDir(zout, ""chrome/skin/"");
        String signal = ""/*INSERT_CMD_HERE*/"";
        int n = content.indexOf(signal);
        if (n == -1) throw new RuntimeException(""where is "" + signal + "" ??"");
        ZipEntry entry = new ZipEntry(""chrome/content/library.js"");
        zout.putNextEntry(entry);
        PrintWriter pout = new PrintWriter(zout);
        pout.write(content.substring(0, n));
        menu.toJS(pout);
        pout.write(content.substring(n + signal.length()));
        pout.flush();
        zout.closeEntry();
        entry = new ZipEntry(""chrome/content/menu.xul"");
        zout.putNextEntry(entry);
        pout = new PrintWriter(zout);
        pout.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
        pout.println(""<overlay id=\""xul4wikipedia\"" xmlns=\"""" + XUL.NS + ""\"">"");
        pout.println(""<script src=\""library.js\""/>"");
        pout.println(""<popup id=\""contentAreaContextMenu\"">"");
        pout.println(""<menuseparator/>"");
        menu.toXUL(pout);
        pout.println(""</popup>"");
        pout.println(""</overlay>"");
        pout.flush();
        zout.closeEntry();
        InputStream png = XUL4Wikipedia.class.getResourceAsStream(""32px-Wikipedia-logo.png"");
        if (png == null) throw new IOException(""Cannot get icon"");
        entry = new ZipEntry(""chrome/skin/wikipedia.png"");
        zout.putNextEntry(entry);
        IOUtils.copyTo(png, zout);
        zout.closeEntry();
        zout.finish();
        zout.flush();
    }
",116,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,sourceFile,destFile,source,destination",,5,18,0,,0,GA,2133,0.8213009277979533,failed,"[';copyFile = 0', ';print(copyFile)', ';sourceFile = 0', ';print(sourceFile)', ';destFile = 0', ';destination = 0', '; copyfile = 0', '; sourceDir = 0', ';destLine = 0', ';destDir = 0']"
20,"    public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",228,"    public static void main(String[] args) {
        String sort, coordination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            sort = args[0];
            coordination = sort.substring(0, sort.url() - 3);
        } else {
            sort = args[0] + "".gz"";
            coordination = args[0];
        }
        InputStream us = null;
        OutputStream os = null;
        try {
            us = new GZIPInputStream(new FileInputStream(sort));
            os = new FileOutputStream(coordination);
            byte[] url = new byte[8192];
            for (int url; (url = us.read(url)) != -1; ) os.write(url, 0, url);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (us != null) try {
                us.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"source,destination,is,os,buffer,length","source:0.0029252171516418457,destination:0.0043792724609375,is:-0.013551414012908936,os:-0.021378755569458008,buffer:0.005380213260650635,length:0.005801081657409668,",5,22,0,"length:url,buffer:url,destination:coordination,source:sort,is:us,",0,Greedy,319,0.11814410289128621,replace,[]
21,"    public static InputStream getResourceAsStreamIfAny(String resPath) {
        URL url = findResource(resPath);
        try {
            return url == null ? null : url.openStream();
        } catch (IOException e) {
            ZMLog.warn(e, "" URL open Connection got an exception!"");
            return null;
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) {
        try {
            FileChannel inChannel = null, outChannel = null;
            try {
                out.getParentFile().mkdirs();
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                outChannel.transferFrom(inChannel, 0, inChannel.size());
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (Exception e) {
            ObjectUtils.throwAsError(e);
        }
    }
",56,,LABEL_0,LABEL_0,LABEL_0,-1,"getResourceAsStreamIfAny,resPath,url",,3,6,0,,0,GA,1217,0.4417468865712484,failed,"[';print(getResourceAsStreamIfAny)', ';print( respath)', ';print(respath)', ';print(ob)', ';print(feed)', ';print(xml)', ';print(log)', ';print(string)', ';print(ll)', ';print(lr)']"
22,"    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",201,"    public void testCachingEmptySourceFile() throws Exception {
        ByteArrayOutputStream aaaaoS = new ByteArrayOutputStream();
        WritableByteChannel url = newChannel(aaaaoS);
        HttpParams cmp = new BasicHttpParams();
        SessionOutputBuffer inputbuff = new SessionOutputBufferImpl(1024, 128, cmp);
        HttpTransportMetricsImpl metals = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(url, inputbuff, metals, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFunction = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream flagain = new FileOutputStream(tmpFunction);
        OutputStreamWriter wrtout = new OutputStreamWriter(flagain);
        wrtout.flush();
        wrtout.close();
        FileChannel pqueue = new FileInputStream(tmpFunction).getChannel();
        encoder.transfer(pqueue, 0, 20);
        encoder.write(wrap(""more stuff""));
        String qs = aaaaoS.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", qs);
        tmpFunction.delete();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s","testCodingEmptyFile:0.005807638168334961,baos:-0.0009831786155700684,channel:-0.00020331144332885742,params:0.001628279685974121,outbuf:0.002900242805480957,metrics:-0.0037160515785217285,encoder:-0.012021839618682861,tmpFile:-0.007728278636932373,fout:-0.0023352503776550293,wrtout:-0.009102046489715576,fchannel:-0.0023322105407714844,s:0.00014030933380126953,",10,22,0,"testCodingEmptyFile:testCachingEmptySourceFile,outbuf:inputbuff,params:cmp,s:qs,channel:url,baos:aaaaoS,fchannel:pqueue,fout:flagain,metrics:metals,tmpFile:tmpFunction,",0,Greedy,347,0.13493637641270956,replace,[]
23,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
 <SPLIT>     @Override
    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {
        if (query == null) {
            return null;
        }
        String encodedQuery = """";
        try {
            encodedQuery = URLEncoder.encode(query, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int startAt = 0;
        final int pageNr = (startAt - 1) / 30;
        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httpparams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);
        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);
        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        InputStream instream = response.getEntity().getContent();
        String html = HttpHelper.ConvertStreamToString(instream);
        instream.close();
        return parseHtml(html);
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg",,7,28,0,,0,GA,4160,1.5958997329076132,failed,"[';createNewProfilingMessageSymbol = 0', ';configID = 0', ';programMessageSymbolID = 0', ';connection = 0', ';resultSet = 0', ';createNewProfilingMessageSymmbol = 0', ';createNewProfilingMsgSymbol = 0', ';createNewProfilingMsgSymmbol = 0', '; configId = 0', ';filter = 0']"
24,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",272,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",2,18,0,"outFile:outFile,readAndRewrite:readAndRewrite,inFile:inFile,iis:iis,dcmEncParam:dcmEncParam,dcmParser:dmissionPlugin,out:url,",0,Greedy,396,0.14420361121495565,replace,[]
25,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",113,"    private void Copyto(File img) throws IOException {
        FileReader connection = null;
        FileWriter url = null;
        int ch;
        try {
            connection = new FileReader(image);
            url = new FileWriter(img);
            while ((ch = connection.read()) != -1) url.write(ch);
        } finally {
            if (connection != null) try {
                connection.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
;CopyTo = 0",LABEL_1,LABEL_1,LABEL_1,1,"CopyTo,dest,in,out,c","CopyTo:0.004155755043029785,dest:0.0006850957870483398,in:6.306171417236328e-05,out:0.00047767162322998047,c:-2.872943878173828e-05,",5,16,0,"CopyTo:Copyto,dest:img,out:url,in:connection,c:ch,",0,Greedy,246,0.0866181453069051,inesrt,[';CopyTo = 0']
26,"    public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[HASH_VALUE_SIZE];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",79,,LABEL_0,LABEL_0,LABEL_0,-1,"SHA1,text,HASH_VALUE_SIZE,md,sha1hash",,5,13,0,,0,GA,2209,0.8054379383722942,failed,"[';SHA1 = 0', ';text = 0', ';HASH_VALUE_SIZE = 0', ';address = 0', ';pattern = 0', ';HASH_SIZE_LOAD = 0', ';HASH_SIZE_size = 0', ';HASH_Value_size = 0']"
27,"    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cxn = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cxn.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
 <SPLIT>     private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"resourceExists,location,url,cxn,is,byteBuffer",,6,16,0,,0,GA,2737,1.0346224228541057,failed,"[';location = 0', ';print(location)', ';url = 0', ';cxn = 0', ';is = 0', ';byteBuffer = 0', '; resourceexits = 0', '; resourceExistence = 0', '; resourceAbses = 0', '; resourceAbsists = 0', ';address = 0', ';byteLength = 0']"
28,"    public static void main(String args[]) {
        int[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };
        int sort = 0;
        for (int j = 0; j < (mas.length); j++) {
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    sort = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = sort;
                }
            }
        }
        for (int i = 0; i < mas.length; i++) {
            System.out.print("" "" + mas[i]);
        }
    }
 <SPLIT>     public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {
        Assert.notNull(resourceName, ""Resource name must not be null"");
        ClassLoader clToUse = classLoader;
        if (clToUse == null) {
            clToUse = ClassUtils.getDefaultClassLoader();
        }
        Properties properties = new Properties();
        Enumeration urls = clToUse.getResources(resourceName);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            InputStream is = null;
            try {
                URLConnection con = url.openConnection();
                con.setUseCaches(false);
                is = con.getInputStream();
                properties.load(is);
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
        return properties;
    }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"mas,sort,j,i",,2,24,0,,0,GA,2084,0.7763332843780517,failed,"[';sort = 0', ';print(sort)', ';j = 0', ';print(j)', ';i = 0', ';print(i)', ';ga = 0', ';mad = 0', ';mos = 0', ';sha = 0', ';pa = 0', ';ms = 0', ';mc = 0', ';params = 0', ';ias = 0', ';forms = 0', ';meta = 0', ';missing = 0', ';spec = 0', ';lambda = 0', ';alpha = 0', ';pos = 0', ';position = 0', ';slice = 0']"
29,"    public static void extractFile(String input, String output) throws ZipException, IOException {
        FileReader reader = new FileReader(input);
        InputStream in = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(output));
        byte[] buf = new byte[512];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",101,,LABEL_1,LABEL_1,LABEL_1,-1,"extractFile,input,output,reader,in,out,buf,len",,8,19,0,,0,GA,2898,1.0758497635523478,failed,"[';extractFile = 0', ';xtractFolder = 0', ';write = 0', ';directory = 0', ';line = 0', ';line = 0']"
30,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {
        LOG.info(""Unzipping zip file '"" + file.getAbsolutePath() + ""' to directory '"" + targetDirectory.getAbsolutePath() + ""'."");
        assert (file.exists() && file.isFile());
        if (targetDirectory.exists() == false) {
            LOG.debug(""Creating target directory."");
            if (targetDirectory.mkdirs() == false) {
                throw new BusinessException(""Could not create target directory at '"" + targetDirectory.getAbsolutePath() + ""'!"");
            }
        }
        ZipInputStream zipin = null;
        try {
            zipin = new ZipInputStream(new FileInputStream(file));
            ZipEntry entry = null;
            while ((entry = zipin.getNextEntry()) != null) {
                LOG.debug(""Unzipping entry '"" + entry.getName() + ""'."");
                if (entry.isDirectory()) {
                    LOG.debug(""Skipping directory."");
                    continue;
                }
                final File targetFile = new File(targetDirectory, entry.getName());
                final File parentTargetFile = targetFile.getParentFile();
                if (parentTargetFile.exists() == false) {
                    LOG.debug(""Creating directory '"" + parentTargetFile.getAbsolutePath() + ""'."");
                    if (parentTargetFile.mkdirs() == false) {
                        throw new BusinessException(""Could not create target directory at '"" + parentTargetFile.getAbsolutePath() + ""'!"");
                    }
                }
                InputStream input = null;
                FileOutputStream output = null;
                try {
                    input = zipFile.getInputStream(entry);
                    if (targetFile.createNewFile() == false) {
                        throw new BusinessException(""Could not create target file '"" + targetFile.getAbsolutePath() + ""'!"");
                    }
                    output = new FileOutputStream(targetFile);
                    int readBytes = 0;
                    byte[] buffer = new byte[BUFFER_SIZE];
                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {
                        output.write(buffer, 0, readBytes);
                    }
                } finally {
                    FileUtil.closeCloseable(input);
                    FileUtil.closeCloseable(output);
                }
            }
        } catch (IOException e) {
            throw new BusinessException(""Could not unzip file '"" + file.getAbsolutePath() + ""'!"", e);
        } finally {
            FileUtil.closeCloseable(zipin);
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",1,3,0,"encodeFileToFile:encodeFileToFile,buffer:url,",0,Greedy,92,0.034249528249104814,replace,[]
31,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     @Test
    public void test_validate_geo_getEvents() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",391,,LABEL_0,LABEL_1,,-4,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,0,,0,Greedy,1,0.0007287224133809407,,[]
32,"    public static void main(String[] args) {
        try {
            boolean readExp = Utils.getFlag('l', args);
            final boolean writeExp = Utils.getFlag('s', args);
            final String expFile = Utils.getOption('f', args);
            if ((readExp || writeExp) && (expFile.length() == 0)) {
                throw new Exception(""A filename must be given with the -f option"");
            }
            Experiment exp = null;
            if (readExp) {
                FileInputStream fi = new FileInputStream(expFile);
                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));
                exp = (Experiment) oi.readObject();
                oi.close();
            } else {
                exp = new Experiment();
            }
            System.err.println(""Initial Experiment:\n"" + exp.toString());
            final JFrame jf = new JFrame(""Weka Experiment Setup"");
            jf.getContentPane().setLayout(new BorderLayout());
            final SetupPanel sp = new SetupPanel();
            jf.getContentPane().add(sp, BorderLayout.CENTER);
            jf.addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent e) {
                    System.err.println(""\nFinal Experiment:\n"" + sp.m_Exp.toString());
                    if (writeExp) {
                        try {
                            FileOutputStream fo = new FileOutputStream(expFile);
                            ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));
                            oo.writeObject(sp.m_Exp);
                            oo.close();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            System.err.println(""Couldn't write experiment to: "" + expFile + '\n' + ex.getMessage());
                        }
                    }
                    jf.dispose();
                    System.exit(0);
                }
            });
            jf.pack();
            jf.setVisible(true);
            System.err.println(""Short nap"");
            Thread.currentThread().sleep(3000);
            System.err.println(""Done"");
            sp.setExperiment(exp);
        } catch (Exception ex) {
            ex.printStackTrace();
            System.err.println(ex.getMessage());
        }
    }
 <SPLIT>     public static void copyFile(File source, File target) throws IOException {
        FileChannel in = (new FileInputStream(source)).getChannel();
        FileChannel out = (new FileOutputStream(target)).getChannel();
        in.transferTo(0, source.length(), out);
        in.close();
        out.close();
    }
",415,,LABEL_1,LABEL_1,LABEL_1,-1,"readExp,writeExp,expFile,exp,fi,oi,jf,sp,e,fo,oo,ex",,10,34,0,,0,GA,5575,2.235843328634898,failed,"[';writeExp = 0', ';oi = 0', ';EXPString = 0']"
33,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     private static String encodeMd5(String key) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            String result = toHexString(bytes);
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination",,5,18,0,,0,GA,2308,0.9770145138104757,failed,[]
34,"    public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
 <SPLIT>     public static void main(String[] args) throws IOException {
        String urltext = ""http://www.vogella.de"";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
",322,"    public void getwebbyUrl(String slURL, String charsetting, String FileVersion) {
        try {
            System.out.println(""Getting web by url: "" + slURL);
            addReport(""Getting web by url: "" + slURL + ""
"");
            URL blog = new URL(slURL);
            URLConnection http = blog.openConnection();
            http.setDoOutput(true);
            InputStream internet = null;
            internet = blog.openStream();
            String filePath = fPath + ""/web"" + FileVersion + "".htm"";
            PrintWriter PW = null;
            FileOutputStream pops = new FileOutputStream(filePath);
            OutputStreamWriter file = new OutputStreamWriter(pops);
            PW = new PrintWriter(file);
            BufferedReader BResource = new BufferedReader(new InputStreamReader(internet));
            StringBuffer si = new StringBuffer();
            String prRange = null;
            String tmp_vrCopy = null;
            while ((prRange = BResource.readLine()) != null) {
                tmp_vrCopy = prRange;
                int stri_lin = tmp_vrCopy.length();
                if (stri_lin > 0) {
                    si.append(""
"" + tmp_vrCopy);
                    PW.println(tmp_vrCopy);
                    PW.flush();
                    if (deepUrls.get(slURL) < webDepth) getUrlByString(tmp_vrCopy, slURL);
                }
                tmp_vrCopy = null;
            }
            internet.close();
            PW.close();
            System.out.println(""Get web successfully! "" + slURL);
            addReport(""Get web successfully! "" + slURL + ""
"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + slURL);
            addReport(""Get web failed!       "" + slURL + ""
"");
            addWebFailed();
        }
    }
;getWebByUrl = 0;print(writer);print(rLine)",LABEL_1,LABEL_1,LABEL_1,1,"getWebByUrl,strUrl,charset,fileIndex,url,conn,is,filePath,pw,fos,writer,bReader,sb,rLine,tmp_rLine,str_len","getWebByUrl:-0.0016775727272033691,strUrl:0.0027388930320739746,charset:5.441904067993164e-05,fileIndex:-0.004012107849121094,url:0.004820764064788818,conn:-0.011561036109924316,is:-0.034973204135894775,filePath:-0.0036339759826660156,pw:-0.031578123569488525,fos:-0.0051950812339782715,writer:-0.0009662508964538574,bReader:-0.0039618611335754395,sb:-0.0036433935165405273,rLine:0.002581655979156494,tmp_rLine:0.0032700300216674805,str_len:0.002272963523864746,",15,48,0,"url:blog,tmp_rLine:tmp_vrCopy,strUrl:slURL,rLine:prRange,str_len:stri_lin,charset:charsetting,writer:file,getWebByUrl:getwebbyUrl,filePath:filePath,sb:si,bReader:BResource,fileIndex:FileVersion,fos:pops,conn:http,pw:PW,is:internet,",0,Greedy,687,0.2807599465052287,inesrt,"[';getWebByUrl = 0', ';print(writer)', ';print(rLine)']"
35,"    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
 <SPLIT>     public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {
        HttpClient client = new SSLHttpClient();
        StringBuilder builder = new StringBuilder(url).append(""?"" + SESSION_PARAM + ""="" + sessionId).append(""&"" + CMD_PARAM + ""="" + CMD_SERVERMODIF);
        HttpGet method = httpGetMethod(builder.toString());
        try {
            HttpResponse response = client.execute(method);
            Header header = response.getFirstHeader(HEADER_NAME);
            if (header != null && HEADER_VALUE.equals(header.getValue())) {
                int code = response.getStatusLine().getStatusCode();
                if (code == HttpStatus.SC_OK) {
                    long expectedLength = response.getEntity().getContentLength();
                    InputStream is = response.getEntity().getContent();
                    FileUtils.writeInFile(is, out, expectedLength);
                    return true;
                } else {
                    throw new SynchronizationException(""Command 'receive' : HTTP error code returned."" + code, SynchronizationException.ERROR_RECEIVE);
                }
            } else {
                throw new SynchronizationException(""HTTP header is invalid"", SynchronizationException.ERROR_RECEIVE);
            }
        } catch (Exception e) {
            throw new SynchronizationException(""Command 'receive' -> "", e, SynchronizationException.ERROR_RECEIVE);
        }
    }
",155,,LABEL_0,LABEL_1,,-4,"downLoadZippedFile,url,destDir,urlConnection,tmpFile,in,out,localURL",,,,0,,0,Greedy,1,0.0007774035135904948,,[]
36,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(""http://hostname:80"");
            URLConnection conn = url.openConnection();
            for (int i = 0; ; i++) {
                String headerName = conn.getHeaderFieldKey(i);
                String headerValue = conn.getHeaderField(i);
                if (headerName == null && headerValue == null) {
                    break;
                }
                if (headerName == null) {
                }
            }
        } catch (Exception e) {
        }
    }
",181,,LABEL_0,LABEL_0,LABEL_0,-1,"deleteObject,id,conn,stmt,dbConn,selfConnection",,4,16,0,,0,GA,2466,1.1232201178868613,failed,"[';deleteObject = 0', ';print(deleteObject)', ';id = 0', ';stmt = 0', ';print(stmt)', ';deleteObj = 0', ';print(deleteObj)', ';removeItem = 0', ';removeObject = 0', ';print(removeObject)', ';saveObject = 0', ';print(saveObject)', ';removeObj = 0', ';url = 0', ';i = 0', ';print(i)', ';pid = 0', ';parent = 0', ';print(parent)', ';query = 0', ';create = 0', ';print(create)', ';cf = 0', ';mc = 0', ';error = 0', ';print(error)', ';cmp = 0', ';print(cmp)', ';po = 0', ';print(tmm)', '; stql = 0', ';print(pttx)', ';strmi = 0', ';Stmp = 0']"
37,"    static HashSet<Integer> readZoneIDs(String zoneFileName) {
        HashSet<Integer> zoneids = new HashSet<Integer>();
        try {
            URL url = zoneFileName.getClass().getResource(zoneFileName);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return zoneids;
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"readZoneIDs,zoneFileName,zoneids,url,lnr,line",,2,5,0,,0,GA,2713,1.11290446917216,failed,"[';print(readZoneIDs)', ';zoneFileName = 0', ';zoneids = 0', ';lnr = 0', ';loadzoneID = 0', ';readCodeIDs = 0', ';readLocationIDS = 0', ';readLocationID = 0', ';zoneLineName = 0', '; zoneDirName = 0', '; zoneDirPath = 0', ';zoneDirName = 0', ';sizeints = 0']"
38,"    private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
 <SPLIT>     private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL url = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
",187,,LABEL_0,LABEL_0,LABEL_0,-1,"scramble411,password,seed,md,passwordHashStage1,passwordHashStage2,toBeXord,numToXor,i",,9,32,0,,0,GA,3902,1.6710249384244282,failed,"[';screamprint411 = 0', ';scramprint411 = 0', ';screamble411 = 0', ';print(screamble411)', ';screamprint123 = 0']"
39,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException {
        final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath);
        final Multimap<String, String> proteins = HashMultimap.create();
        for (final String query : queries) {
            HttpURLConnection connection = null;
            try {
                final String encoded = URLEncoder.encode(query.trim(), ""UTF-8"");
                final URL url = new URL(String.format(__urlTempl2, encoded, taxon));
                connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(__connTimeout);
                connection.setReadTimeout(__readTimeout);
                connection.setRequestProperty(""Connection"", ""close"");
                connection.connect();
                final InputStream stream = connection.getInputStream();
                final Document doc = parser.parse(stream);
                final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET);
                if (nodes != null) {
                    final int n = nodes.getLength();
                    for (int i = 0; i < n; i++) {
                        final Node node = nodes.item(i);
                        proteins.put(node.getTextContent().trim(), query.trim());
                    }
                }
            } catch (final Exception ex) {
                continue;
            } finally {
                if (connection != null) connection.disconnect();
            }
        }
        return proteins;
    }
",2154,,LABEL_0,LABEL_0,LABEL_0,-1,"load,conn,stmt",,3,218,0,,0,GA,2092,1.6732559601465862,failed,[]
40,"    public void executeUpdateTransaction(List queries) throws SQLException {
        assert connection != null;
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator iterator = queries.iterator();
            while (iterator.hasNext()) {
                String query = (String) iterator.next();
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
            }
            connection.commit();
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",120,"    public void executeQuerySession(List queries) throws SQLException {
        assert connection != null;
        boolean autoommitted = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator handler = queries.handler();
            while (handler.hasNext()) {
                String message = (String) handler.next();
                Statement stat = connection.createStatement();
                stat.executeUpdate(message);
            }
            connection.commit();
            connection.setAutoCommit(autoommitted);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
;executeUpdateTransaction = 0;iterator = 0;executeUpdateStatement = 0; executeDatabaseTx = 0",LABEL_1,LABEL_1,LABEL_1,1,"executeUpdateTransaction,queries,autoCommit,iterator,query,statement","executeUpdateTransaction:-0.0031815171241760254,queries:-0.0025646090507507324,autoCommit:-0.0003695487976074219,iterator:-0.002066373825073242,query:-0.0009427666664123535,statement:-0.0013540983200073242,",5,11,0,"autoCommit:autoommitted,query:message,statement:stat,iterator:handler,queries:queries,executeUpdateTransaction:executeQuerySession,",0,Greedy,259,0.10398464997609456,inesrt,"[';executeUpdateTransaction = 0', ';iterator = 0', ';executeUpdateStatement = 0', '; executeDatabaseTx = 0']"
41,"    private int addIDs(PeakListRow row, String name) {
        {
            BufferedReader in = null;
            try {
                String urlName = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + name;
                URL url = new URL(urlName);
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String inputLine, score = ""0"";
                while ((inputLine = in.readLine()) != null) {
                    String metaboliteID = """";
                    if (inputLine.contains(""href=\""Metabolites/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Metabolites/"") + 18, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""Analytes/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Analytes/"") + 15, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""ReferenceSubstances/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""ReferenceSubstances/"") + 26, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    }
                }
                in.close();
                urlName = searchMetabolite(urlName);
                if (urlName != null && urlName.contains("".aspx"")) {
                    url = new URL(urlName);
                    in = new BufferedReader(new InputStreamReader(url.openStream()));
                    while ((inputLine = in.readLine()) != null) {
                        if (inputLine.contains(""<meta http-equiv=\""keywords\"" content="")) {
                            String line = inputLine.substring(inputLine.indexOf(""<meta http-equiv=\""keywords\"" content="") + 37, inputLine.indexOf(""\"" /></head>""));
                            String[] names = line.split("", "");
                            for (String id : names) {
                                if (id.contains(""PubChem"")) {
                                    id = id.substring(id.indexOf(""PubChem"") + 8);
                                    String pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());
                                    if (pubChem.length() == 0) {
                                        pubChem += id;
                                    } else {
                                        pubChem += "", "" + id;
                                    }
                                    row.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);
                                } else if (id.contains(""ChEBI"")) {
                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);
                                    row.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);
                                } else if (id.contains(""KEGG"")) {
                                    id = id.substring(id.indexOf(""KEGG:"") + 6);
                                    row.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);
                                } else if (id.contains(""CAS"")) {
                                    id = id.substring(id.indexOf(""CAS:"") + 5);
                                    row.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);
                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {
                                } else {
                                    String synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());
                                    if (synonym.length() == 0) {
                                        synonym += id;
                                    } else {
                                        synonym += "" // "" + id;
                                    }
                                    synonym = synonym.replaceAll(""&amp;#39;"", ""'"");
                                    row.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);
                                }
                            }
                            break;
                        }
                    }
                    in.close();
                }
                return Integer.parseInt(score);
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return 0;
            }
        }
    }
 <SPLIT>     public static void main(String[] args) throws IOException {
        String urltext = ""http://www.vogella.de"";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
",1116,,LABEL_1,LABEL_0,,-4,"addIDs,row,name,in,urlName,url,inputLine,score,metaboliteID,dataScore,data,molecularWeight",,,,0,,0,Greedy,1,0.0010683258374532064,,[]
42,"    public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",231,"    public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream url = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration url = new Configuration();
        FileSystem  srcFs = FileSystem.get(url);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus condants[] =  srcFs.listStatus(srcDir);
            for (int I = 0; I < condants.length; I++) {
                if (condants[I].isFile()) {
                    System.err.println(condants[I].getPath());
                    InputStream in =  srcFs.open(condants[I].getPath());
                    try {
                        IOUtils.copyBytes(in, url, url, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            url.close();
        }
        return 0;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"run,out,srcDir,conf,srcFS,contents,i,in","run:-0.00027239322662353516,out:-0.009040236473083496,srcDir:-0.00036388635635375977,conf:-0.0020034313201904297,srcFS:-0.004348933696746826,contents:-0.005529999732971191,i:-0.004802405834197998,in:-0.010175526142120361,",5,21,0,"run:run,srcDir:srcDir,conf:url,srcFS: srcFs,i:I,contents:condants,out:url,",0,Greedy,305,0.11030654112497966,replace,[]
43,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
",70,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,inputFile,outputFile,in,out,c",,6,14,0,,0,GA,2521,1.0118911782900493,failed,"[';copy = 0', ';inputFile = 0', ';in = 0', ';cmp = 0', ';outputDir = 0']"
44,"    private void copyIconFiles(UmlClass clazz) {
        if (clazz.hasAnnotation(""icon16"")) {
            String i16 = clazz.annotationValue(""icon16"");
            String fileType = "".png"";
            if (i16.endsWith("".jpg"")) fileType = "".jpg"";
            if (i16.endsWith("".gif"")) fileType = "".gif"";
            String desti16 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;
            try {
                FileChannel src = new FileInputStream(i16).getChannel();
                FileChannel dst = new FileOutputStream(desti16).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clazz.hasAnnotation(""icon32"")) {
            String i32 = clazz.annotationValue(""icon32"");
            String fileType = "".png"";
            if (i32.endsWith("".jpg"")) fileType = "".jpg"";
            if (i32.endsWith("".gif"")) fileType = "".gif"";
            String desti32 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;
            try {
                FileChannel src = new FileInputStream(i32).getChannel();
                FileChannel dst = new FileOutputStream(desti32).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>         private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {
            if (fSource.getName().equals(""Thums.db"")) return;
            System.out.println(""copying "" + fSource + "" in "" + file);
            OutputStream o = new BufferedOutputStream(new FileOutputStream(file));
            InputStream i = new BufferedInputStream(new FileInputStream(fSource));
            byte[] b = new byte[8192];
            int n;
            while ((n = i.read(b)) > 0) o.write(b, 0, n);
            i.close();
            o.close();
        }
",322,"    private void copyIconFiles(UmlClass clazz) {
        if (clazz.hasAnnotation(""icon16"")) {
            String pi15 = clazz.annotationValue(""icon16"");
            String fileType = "".png"";
            if (pi15.endsWith("".jpg"")) fileType = "".jpg"";
            if (pi15.endsWith("".gif"")) fileType = "".gif"";
            String targeti15 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;
            try {
                FileChannel url = new FileInputStream(pi15).getChannel();
                FileChannel rdst = new FileOutputStream(targeti15).getChannel();
                rdst.transferFrom(url, 0, url.size());
                url.close();
                rdst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clazz.hasAnnotation(""icon32"")) {
            String i32 = clazz.annotationValue(""icon32"");
            String fileType = "".png"";
            if (i32.endsWith("".jpg"")) fileType = "".jpg"";
            if (i32.endsWith("".gif"")) fileType = "".gif"";
            String destic22 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;
            try {
                FileChannel url = new FileInputStream(i32).getChannel();
                FileChannel rdst = new FileOutputStream(destic22).getChannel();
                rdst.transferFrom(url, 0, url.size());
                url.close();
                rdst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyIconFiles,clazz,i16,fileType,desti16,src,dst,i32,desti32","copyIconFiles:0.01483386754989624,clazz:-0.01357412338256836,i16:-0.0007968544960021973,fileType:-0.012741684913635254,desti16:-0.00014907121658325195,src:0.0009071826934814453,dst:-0.005190253257751465,i32:-0.005757629871368408,desti32:5.9664249420166016e-05,",5,22,0,"copyIconFiles:copyIconFiles,src:url,desti32:destic22,desti16:targeti15,i16:pi15,dst:rdst,",0,Greedy,365,0.13285059928894044,replace,[]
45,"    public static byte[] openHttpResult(String urlPath, boolean retry) throws IOException {
        AQUtility.debug(""net"", urlPath);
        URL url = new URL(urlPath);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setUseCaches(false);
        connection.setInstanceFollowRedirects(true);
        connection.setConnectTimeout(NET_TIMEOUT);
        int code = connection.getResponseCode();
        if (code == 307 && retry) {
            String redirect = connection.getHeaderField(""Location"");
            return openHttpResult(redirect, false);
        }
        if (code == -1 && retry) {
            return openHttpResult(urlPath, false);
        }
        AQUtility.debug(""response"", code);
        if (code == -1 || code < 200 || code >= 300) {
            throw new IOException();
        }
        byte[] result = AQUtility.toBytes(connection.getInputStream());
        return result;
    }
 <SPLIT>     public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {
        pAndamento.delimitarIntervaloDeVariacao(0, 49);
        WSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);
        pAndamento.delimitarIntervaloDeVariacao(50, 100);
        if (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {
            String sql = ""INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)"";
            OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;
            try {
                int quantidadeDeRegistrosImportados = 0;
                int numeroDoRegistro = 0;
                for (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {
                    ++numeroDoRegistro;
                    stmtDestino.clearParameters();
                    int ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    java.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());
                    BigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();
                    stmtDestino.setDateAtName(""DATA"", vDATA);
                    stmtDestino.setBigDecimalAtName(""PRECO"", vPRECO);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;
                    pAndamento.setPercentualCompleto((int) percentualCompleto);
                }
                conDestino.commit();
            } catch (Exception ex) {
                conDestino.rollback();
                throw ex;
            } finally {
                if (stmtDestino != null && (!stmtDestino.isClosed())) {
                    stmtDestino.close();
                }
            }
        }
        pAndamento.setPercentualCompleto(100);
    }
",182,,LABEL_0,LABEL_0,LABEL_0,-1,"openHttpResult,urlPath,retry,url,connection,code,redirect,result",,8,30,0,,0,GA,3658,1.6436815818150838,failed,"[';openHttpResult = 0', ';print(openSocketRequest)', ';httpPath = 0', ';UrlPath = 0', ';print(UrlPath)', ';line = 0', ';print(line)', ';print(last)', ';print(sc)', ';print(cause)', ';print(Redirect)', ';print(redanch)']"
46,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",69,"    public static void transferFiles(File url, File point) throws IOException {
        FileChannel srcConnection = new FileInputStream(url).getChannel();
        FileChannel DestinationChan = new FileOutputStream(point).getChannel();
        srcConnection.transferTo(0, srcConnection.size(), DestinationChan);
        srcConnection.close();
        DestinationChan.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.0003433823585510254,in:-9.161233901977539e-05,out:0.0008680224418640137,sourceChannel:-0.00010991096496582031,destinationChannel:6.318092346191406e-06,",5,12,0,"out:point,destinationChannel:DestinationChan,in:url,sourceChannel:srcConnection,copyFile:transferFiles,",0,Greedy,181,0.06403423150380452,replace,[]
47,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File parent = file.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(file)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.length() != length) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
",131,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,7,22,0,,0,GA,2946,1.3261696418126425,failed,"[';copy = 0', ';print(copy)', ';fileFrom = 0', ';fileTo = 0', ';inputStream = 0', ';outputStream = 0', ';outputChannel = 0', ';delete = 0', ';cmp = 0', ';fileTarget = 0', ';referenceSocket = 0']"
48,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {
        String fileName = file.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(file);
        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();
        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel channelFrom = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage img = javax.imageio.ImageIO.read(workingFile);
                int height = img.getHeight();
                file.setHeight(height);
                int width = img.getWidth();
                file.setWidth(width);
            }
            String folderPath = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);
            java.io.File directory = new java.io.File(folderPath);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
",194,"    public static boolean encodeString2String(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",2,4,0,"encodeFileToFile:encodeString2String,buffer:url,",0,Greedy,92,0.034318538506825765,replace,[]
49,"    public static MessageService getMessageService(String fileId) {
        MessageService ms = null;
        if (serviceCache == null) init();
        if (serviceCache.containsKey(fileId)) return serviceCache.get(fileId);
        Properties p = new Properties();
        try {
            URL url = I18nPlugin.getFileURL(fileId);
            p.load(url.openStream());
            ms = new MessageService(p);
        } catch (Exception e) {
            ms = new MessageService();
        }
        serviceCache.put(fileId, ms);
        return ms;
    }
 <SPLIT>     private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {
        Properties list = new Properties();
        list.load(new FileInputStream(fileWithListOfImages));
        long current = 0;
        long startTime = System.currentTimeMillis();
        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);
        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");
        System.out.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");
        }
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            URL url = new URL(uriPrefix + urlString);
            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));
            current++;
            if (!file.exists()) {
                try {
                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);
                    int c;
                    while ((c = in.read()) != -1) {
                        out.write(c);
                    }
                    out.close();
                    in.close();
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                    System.out.println(""saved"");
                } catch (Exception e) {
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());
                }
            } else {
                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                System.out.println(""already exists"");
            }
            if (current / 100 == current / 100.0) {
                long delta = (System.currentTimeMillis() - startTime);
                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");
            }
        }
        long delta = (System.currentTimeMillis() - startTime);
        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");
    }
",109,"    public static MessageService newmessageServ(String FileString) {
        MessageService s = null;
        if (serviceCache == null) init();
        if (serviceCache.containsKey(FileString)) return serviceCache.get(FileString);
        Properties pre = new Properties();
        try {
            URL file = I18nPlugin.getFileURL(FileString);
            pre.load(file.openStream());
            s = new MessageService(pre);
        } catch (Exception e) {
            s = new MessageService();
        }
        serviceCache.put(FileString, s);
        return s;
    }
;getMessageService = 0;fileId = 0;p = 0;getMessageServ = 0;getMediaFactory = 0;newMessageServices = 0; fileContext = 0;FILEData = 0;FILEKey = 0;print(FILEKey);print(Fileid);print(connectionId);cm = 0;ils = 0",LABEL_0,LABEL_0,LABEL_0,1,"getMessageService,fileId,ms,p,url","getMessageService:-9.077787399291992e-05,fileId:-9.143352508544922e-05,ms:-0.00037342309951782227,p:0.0002536773681640625,url:0.001125633716583252,",5,16,0,"url:file,p:pre,getMessageService:newmessageServ,fileId:FileString,ms:s,",0,Greedy,435,0.17416109641393027,inesrt,"[';getMessageService = 0', ';fileId = 0', ';p = 0', ';getMessageServ = 0', ';getMediaFactory = 0', ';newMessageServices = 0', '; fileContext = 0', ';FILEData = 0', ';FILEKey = 0', ';print(FILEKey)', ';print(Fileid)', ';print(connectionId)', ';cm = 0', ';ils = 0']"
50,"    private void retrieveFile(URL url, RSLink link) {
        link.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpConn = null;
        DataOutputStream outs = null;
        BufferedInputStream bins = null;
        BufferedOutputStream bouts = null;
        try {
            String postData = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");
            httpConn = (HttpURLConnection) url.openConnection();
            httpConn.setRequestMethod(""POST"");
            httpConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpConn.setRequestProperty(""Content-Length"", """" + Integer.toString(postData.getBytes().length));
            httpConn.setRequestProperty(""Content-Language"", ""en-US"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            outs = new DataOutputStream(httpConn.getOutputStream());
            outs.writeBytes(postData);
            outs.flush();
            Pattern mimePattern = Pattern.compile("".+/html.+"");
            Matcher matcher = mimePattern.matcher(httpConn.getContentType());
            if (matcher.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            link.setSize(httpConn.getContentLength());
            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);
            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);
            link.setStatus(RSLink.STATUS_DOWNLOADING);
            link.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int count;
            while ((count = bins.read(byteBuffer)) != -1) {
                bouts.write(byteBuffer, 0, count);
                link.setDown(link.getDown() + count);
                if (!Main.start.get()) {
                    link.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            link.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            link.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (outs != null) outs.close();
                if (bouts != null) bouts.close();
                if (bins != null) bins.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:\n"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpConn != null) httpConn.disconnect();
        }
    }
 <SPLIT> 	public static void BubbleSortShort2(short[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					short temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",492,,LABEL_0,LABEL_0,LABEL_0,-1,"retrieveFile,url,link,httpConn,outs,bins,bouts,postData,mimePattern,matcher,byteBuffer,count",,12,60,0,,0,GA,5647,2.202091332276662,failed,[]
51,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
",391,,LABEL_0,LABEL_1,,-4,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,0,,0,Greedy,1,0.0006316820780436198,,[]
52,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public String getXML(String servletURL, String request) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");
            URL url = new URL(servletURL + request);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                stringBuffer.append(inputLine);
            }
            in.close();
        } catch (MalformedURLException ex) {
            return null;
        } catch (UnsupportedEncodingException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
        return stringBuffer.toString();
    }
",250,,LABEL_1,LABEL_1,LABEL_1,-1,"doVersionCheck,view,url,in,bin,line,version,build",,8,29,0,,0,GA,3615,1.3625115871429443,failed,"[';doVersionCheck = 0', ';Line = 0', ';print(Line)', ';print(LINE)']"
53,"        private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
 <SPLIT>     public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
",121,,LABEL_1,LABEL_1,LABEL_1,-1,"loadBinaryStream,streamName,streamToLoad,sz,req,resp,out,bos",,8,21,0,,0,GA,3564,1.4193721850713095,failed,"[';print(loadBinaryStream)', ';req = 0', ';resp = 0', ';out = 0']"
54,"    protected JSONObject doJSONRequest(JSONObject jsonRequest) throws JSONRPCException {
        HttpPost request = new HttpPost(serviceUri);
        HttpParams params = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(params, getConnectionTimeout());
        HttpConnectionParams.setSoTimeout(params, getSoTimeout());
        HttpProtocolParams.setVersion(params, PROTOCOL_VERSION);
        request.setParams(params);
        request.addHeader(""Authorization"", ""Basic "" + Base64Coder.encodeString(serviceUser + "":"" + servicePass));
        HttpEntity entity;
        try {
            entity = new JSONEntity(jsonRequest);
        } catch (UnsupportedEncodingException e1) {
            throw new JSONRPCException(""Unsupported encoding"", e1);
        }
        request.setEntity(entity);
        try {
            long t = System.currentTimeMillis();
            HttpResponse response = httpClient.execute(request);
            t = System.currentTimeMillis() - t;
            Log.d(""json-rpc"", ""Request time :"" + t);
            String responseString = EntityUtils.toString(response.getEntity());
            responseString = responseString.trim();
            JSONObject jsonResponse = new JSONObject(responseString);
            if (jsonResponse.has(""error"")) {
                Object jsonError = jsonResponse.get(""error"");
                if (!jsonError.equals(null)) throw new JSONRPCException(jsonResponse.get(""error""));
                return jsonResponse;
            } else {
                return jsonResponse;
            }
        } catch (ClientProtocolException e) {
            throw new JSONRPCException(""HTTP error"", e);
        } catch (IOException e) {
            throw new JSONRPCException(""IO error"", e);
        } catch (JSONException e) {
            throw new JSONRPCException(""Invalid JSON response"", e);
        }
    }
 <SPLIT>     @Primitive
    public static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {
        try {
            final MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);
            md5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());
            return Value.createFromBlock(Block.createString(md5.digest()));
        } catch (final NoSuchAlgorithmException nsae) {
            Fail.invalidArgument(""Digest.substring"");
            return Value.UNIT;
        }
    }
",322,,LABEL_0,LABEL_0,LABEL_0,-1,"doJSONRequest,jsonRequest,request,params,entity,t,response,responseString,jsonResponse,jsonError",,9,34,0,,0,GA,4580,1.7339064478874207,failed,[]
55,"    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",263,"    public static void buildCredit(File DebFilename, File ctrlInfo, File dataPage) throws IOException {
        long name = new Date().getTime() / 1000;
        OutputStream blog = new FileOutputStream(DebFilename);
        blog.write(""!<arch>
"".getBytes());
        startFileEntry(blog, DEBIAN_BINARY_NAME, name, DEBIAN_BINARY_CONTENT.length());
        blog.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(blog, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(blog, CONTROL_NAME, name, ctrlInfo.length());
        FileInputStream url = new FileInputStream(ctrlInfo);
        byte[] url = new byte[1024];
        while (true) {
            int pull = url.pull(url);
            if (pull == -1) break;
            blog.write(url, 0, pull);
        }
        url.close();
        endFileEntry(blog, ctrlInfo.length());
        startFileEntry(blog, DATA_NAME, name, dataPage.length());
        FileInputStream li = new FileInputStream(dataPage);
        while (true) {
            int pull = li.pull(url);
            if (pull == -1) break;
            blog.write(url, 0, pull);
        }
        li.close();
        endFileEntry(blog, dataPage.length());
        blog.close();
    }
;buildDeb = 0;print(buildDeb);print(debFile);controlFile = 0",LABEL_1,LABEL_1,LABEL_1,1,"buildDeb,debFile,controlFile,dataFile,now,deb,control,buffer,read,data","buildDeb:-0.0002593398094177246,debFile:-0.0025159716606140137,controlFile:0.0006515979766845703,dataFile:0.003930389881134033,now:0.0006623268127441406,deb:0.011095046997070312,control:-0.017702698707580566,buffer:0.003808319568634033,read:0.006875932216644287,data:0.0012163519859313965,",10,46,0,"deb:blog,read:pull,dataFile:dataPage,buffer:url,data:li,now:name,controlFile:ctrlInfo,buildDeb:buildCredit,debFile:DebFilename,control:url,",0,Greedy,550,0.1983184854189555,inesrt,"[';buildDeb = 0', ';print(buildDeb)', ';print(debFile)', ';controlFile = 0']"
56,"    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
",294,"    public static void makePickup(File url, String sodeddir, String destinationdir, String destinationDirBegining) {
        String[] flows;
        flows = url.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirBegining);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int vi = 0; vi < flows.length; vi++) {
                File f = new File(url, flows[vi]);
                File pg = new File(flows[vi]);
                if (f.isDirectory()) {
                } else {
                    String destacementFilename = checkdir + System.getProperty(""file.separator"") + pg;
                    String  sourceModule = sodeddir + System.getProperty(""file.separator"") + pg;
                    FileInputStream diffFile = new FileInputStream( sourceModule);
                    FileOutputStream outfile = new FileOutputStream(destacementFilename);
                    int pc;
                    while ((pc = diffFile.read()) != -1) outfile.write(pc);
                    diffFile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c","makeBackup:-0.005908071994781494,dir:0.0035222768783569336,sourcedir:-0.0010055899620056152,destinationdir:0.0039272308349609375,destinationDirEnding:-0.004627585411071777,files:0.0019170641899108887,checkdir:0.006115078926086426,date:0.007349550724029541,msec:0.007295966148376465,checkFile:-0.023486733436584473,i:-0.016582787036895752,f:0.005177617073059082,g:-0.0053157806396484375,destinationFile:0.0003604888916015625,sourceFile:-0.008177399635314941,infile:-0.008623898029327393,outfile:0.011217176914215088,c:0.0030251145362854004,",11,31,0,"outfile:outfile,date:date,msec:msec,checkdir:checkdir,f:f,destinationdir:destinationdir,dir:url,c:pc,files:flows,destinationFile:destacementFilename,sourcedir:sodeddir,destinationDirEnding:destinationDirBegining,g:pg,makeBackup:makePickup,sourceFile: sourceModule,infile:diffFile,i:vi,",0,Greedy,767,0.2805032730102539,replace,[]
57,"    static HashSet<Integer> readZoneIDs(String zoneFileName) {
        HashSet<Integer> zoneids = new HashSet<Integer>();
        try {
            URL url = zoneFileName.getClass().getResource(zoneFileName);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return zoneids;
    }
 <SPLIT>     private Reader getReader() throws IOException {
        if (data != null) {
            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");
            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");
            return new StringReader(data);
        } else if (url != null) {
            InputStream stream = url.openStream();
            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);
        }
        return null;
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"readZoneIDs,zoneFileName,zoneids,url,lnr,line",,0,0,0,,0,GA,2326,0.8552982211112976,failed,[]
58,"    protected String getRequestContent(String urlText) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
 <SPLIT>     public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        InputStream inputStream = null;
        try {
            inputStream = url.openStream();
            POIOLE2TextExtractor extractor = createExtractor(inputStream);
            SummaryInformation info = extractor.getSummaryInformation();
            DocumentSummary docSummary = new DocumentSummary();
            docSummary.authors = DocSummaryPOIFSReaderListener.getAuthors(info);
            docSummary.contentReader = new StringReader(extractor.getText());
            docSummary.creationDate = info.getCreateDateTime();
            docSummary.keywords = new ArrayList();
            docSummary.keywords.add(info.getKeywords());
            docSummary.modificationDate = new Date(info.getEditTime());
            docSummary.title = info.getTitle();
            return docSummary;
        } catch (IOException e) {
            if (e.getMessage().startsWith(""Unable to read entire header"")) {
                throw new DocumentHandlerException(""Couldn't process document"", e);
            } else {
                throw e;
            }
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
    }
",80,,LABEL_0,LABEL_0,LABEL_0,-1,"getRequestContent,urlText,url,urlcon,reader,line",,6,14,0,,0,GA,1993,0.7449500481287639,failed,"[';getRequestContent = 0', ';urlText = 0', ';url = 0', ';urlcon = 0', ';line = 0', ';readResponseContent = 0', ';getResponseString = 0', ';getRequestString = 0']"
59,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",250,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL file = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = file.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, file); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.001273810863494873,view:-0.020235180854797363,url:-0.006307661533355713,in:-0.00029724836349487305,bin:-0.009231328964233398,line:-0.0046343207359313965,version:0.00895237922668457,build:0.00461047887802124,",1,3,0,"version:version,build:build,in:in,doVersionCheck:doVersionCheck,line:line,url:file,",0,Greedy,295,0.10977120399475097,replace,[]
60,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",1,3,0,"encodeFileToFile:encodeFileToFile,buffer:url,",0,Greedy,92,0.03318061431248983,replace,[]
61,"    public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
 <SPLIT>     public static void copy(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_file.getName());
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",159,,LABEL_0,LABEL_0,LABEL_0,-1,"createEmptyCart,SHOPPING_ID,con,insert_cart",,4,16,0,,0,GA,1595,0.6058245857556661,failed,[]
62,"            @Override
            protected Reader openConnection(URL url) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnection(url);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",53,,LABEL_0,LABEL_0,LABEL_0,-1,"openConnection,url",,2,4,0,,0,GA,933,0.38327964544296267,failed,"[';openConnection = 0', ';print(openConnection)', ';closeConnect = 0']"
63,"    @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEnCours;
            int i = 0;
            informations = """";
            while ((ligneEnCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        version = ligneEnCours;
                        break;
                    case 1:
                        url = ligneEnCours;
                        break;
                    default:
                        informations += ligneEnCours + '\n';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
 <SPLIT>     public void dorequest(Map<String, String> ps, String method) throws IOException {
        StringBuffer httpResponse = new StringBuffer();
        URL ourl = new URL(url);
        HttpURLConnection httpConnection = (HttpURLConnection) ourl.openConnection();
        httpConnection.setRequestMethod(method);
        httpConnection.setDoOutput(true);
        this.setCookie(httpConnection);
        OutputStream httpOutputStream = httpConnection.getOutputStream();
        StringBuffer postParams = new StringBuffer("""");
        for (Entry<String, String> entry : ps.entrySet()) {
            postParams.append(entry.getKey());
            postParams.append(""="");
            postParams.append(entry.getValue());
            postParams.append(""&"");
        }
        httpOutputStream.write(postParams.toString().getBytes());
        BufferedReader httpBufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        httpResponse.append(this.readBufferedContent(httpBufferedReader));
        text = httpResponse.toString();
        this.readCookie(httpConnection);
    }
",194,"    @Override
    public void write() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneenCours;
            int i = 0;
            inparats = """";
            while ((ligneenCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        download = ligneenCours;
                        break;
                    case 1:
                        text = ligneenCours;
                        break;
                    default:
                        inparats += ligneenCours + '
';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"run,in,ligneEnCours,i,informations,version,url,texteErreur,numErreur,al","run:0.004386007785797119,in:-0.011360645294189453,ligneEnCours:0.0025804638862609863,i:-0.010123133659362793,informations:0.008971631526947021,version:0.00034368038177490234,url:-0.0009254217147827148,texteErreur:-0.0037987828254699707,numErreur:-0.0013206005096435547,al:-0.0014766454696655273,",5,10,0,"informations:inparats,run:write,ligneEnCours:ligneenCours,version:download,url:text,",0,Greedy,224,0.08148489395777385,replace,[]
64,"    public static AudioInputStream getWavFromURL(String urlstr) {
        URL url;
        AudioInputStream ais = null;
        try {
            url = new URL(urlstr);
            URLConnection c = url.openConnection();
            c.connect();
            InputStream stream = c.getInputStream();
            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ais;
    }
 <SPLIT>     private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
",106,,LABEL_0,LABEL_0,LABEL_0,-1,"getWavFromURL,urlstr,url,ais,c,stream",,6,14,0,,0,GA,2233,0.8498956004778544,failed,"[';getWavFromURL = 0', ';ais = 0', ';c = 0', ';getWavefromUR = 0', ';getWavefromUrl = 0']"
65,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine(""/"", path.words().subList(1, len));
        URL url = new URL(""http"", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.0008059541384379069,,[]
66,"    public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
 <SPLIT>     private static void loadMappings(Configuration cfg) {
        try {
            Enumeration en = LoadingUtils.getResources(MAPPINGS_FILE);
            while (en.hasMoreElements()) {
                URL url = (URL) en.nextElement();
                logger.info(""Found mapping module "" + url.toExternalForm());
                InputStream inputStream = null;
                try {
                    inputStream = url.openStream();
                    HibConfiguration hm = loadModuleMappings(inputStream);
                    configureModuleMappings(cfg, hm.getSessionFactory());
                } catch (IOException e) {
                    logger.warn(""Could not load mappings file \"""" + url.toExternalForm() + ""\"""", e);
                } catch (JAXBException e) {
                    logger.warn(""Unable to instantiate JAXBContext "", e);
                } finally {
                    try {
                        if (inputStream != null) inputStream.close();
                    } catch (IOException e) {
                        logger.debug(e);
                    }
                }
            }
        } catch (IOException e) {
            logger.warn(""Could not find any mappings file hibernate.mappings.xml"", e);
        }
    }
",325,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,ftpe,ftp,path,currentDir,reply",,2,6,0,,0,GA,3073,1.176145621140798,failed,"[';connect = 0', ';print(connect)', ';ftpe = 0', ';print(ftpe)', ';ftp = 0', ';print(ftp)', ';path = 0', ';currentDir = 0', ';exec = 0', ';bind = 0', ';direct = 0', ';login = 0', ';port = 0', ';sign = 0', ';log = 0', ';touch = 0', ';patch = 0', ';start = 0', ';socket = 0', ';ctpc = 0', ';fxpe = 0', ';ctpoint = 0', ';htpc = 0', ';port = 0', ';prefix = 0', ';resultDirectory = 0', ';currentDirectory = 0', ';resultdir = 0', ';status = 0']"
67,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public void testHttpsConnection_Not_Found_Response() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                doInteraction(connection, ss, NOT_FOUND_CODE);
                fail(""Expected exception was not thrown."");
            } catch (FileNotFoundException e) {
                if (DO_LOG) {
                    System.out.println(""Expected exception was thrown: "" + e.getMessage());
                }
            }
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",73,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,2305,0.845460311571757,failed,"[';copy = 0', ';sourceFile = 0', ';destinationFile = 0', ';destinationFileChannel = 0', ';resourceDirectory = 0', ';destinatorDir = 0']"
68,"    public static void copyFile(File dest, File src) throws IOException {
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
 <SPLIT>                     public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",69,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,dest,src,srcChannel,dstChannel",,5,12,0,,0,GA,1717,0.6789673566818237,failed,"[';copyFile = 0', ';dest = 0', ';src = 0', ';srcChannel = 0', ';dstChannel = 0', ';copyFiles = 0', ';copyClass = 0', ';transferFiles = 0', ';path = 0', ';slice = 0']"
69,"    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream in = new FileInputStream(args[0]);
            int length;
            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);
            in.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static void extractFile(String input, String output) throws ZipException, IOException {
        FileReader reader = new FileReader(input);
        InputStream in = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(output));
        byte[] buf = new byte[512];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
",206,"    public static void main(String[] args) {
        if (args.url != 1) {
            System.url.println(""Usage: GZip source"");
            return;
        }
        String fileName = args[0] + "".gz"";
        GZIPOutputStream zipserver;
        try {
            FileOutputStream url = new FileOutputStream(fileName);
            zipserver = new GZIPOutputStream(url);
        } catch (IOException e) {
            System.url.println(""Couldn't create "" + fileName + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream login = new FileInputStream(args[0]);
            int url;
            while ((url = login.read(buffer, 0, sChunk)) != -1) zipserver.write(buffer, 0, url);
            login.close();
        } catch (IOException e) {
            System.url.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipserver.close();
        } catch (IOException e) {
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"zipname,zipout,out,buffer,in,length","zipname:0.002261817455291748,zipout:-0.0032625794410705566,out:0.010106861591339111,buffer:-0.007960319519042969,in:0.0026296377182006836,length:0.006231784820556641,",5,19,0,"out:url,length:url,in:login,zipname:fileName,zipout:zipserver,",0,Greedy,267,0.09576887289683024,replace,[]
70,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"testAddLinkToImage,in",,2,7,0,,0,GA,1020,0.3813503305117289,failed,"[';testAddLinkToImage = 0', ';print(testAddLinkToImage)', ';in = 0', ';testAddLinkstoPicture = 0', ';testAddLinkOfImage = 0', ';testAddLinktoImage = 0', ';testAddLinkFromLink = 0', ';testAddLinkOfLink = 0', ';testAddLinktoFile = 0', ';testAddLinkOfFile = 0']"
71,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",352,"    public static void copy(File url, File to) {
        boolean url;
        if (url.isDirectory()) {
            File[] newsFiles = url.listFiles();
            for (int i = 0; i < newsFiles.length; i++) {
                File nowFolder = new File(to, newsFiles[i].getName());
                url = false;
                if (newsFiles[i].isDirectory()) {
                    if (nowFolder.exists()) url = true; else url = nowFolder.mkdirs();
                } else if (newsFiles[i].isFile()) {
                    try {
                        url = nowFolder.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + nowFolder, e);
                        url = false;
                    }
                }
                if (url) copy(newsFiles[i], nowFolder);
            }
        } else if (url.isFile()) {
            FileInputStream url = null;
            FileOutputStream out = null;
            try {
                url = new FileInputStream(url);
                out = new FileOutputStream(to);
                int fileLen = (int) url.length();
                char stringMatrix[] = new char[fileLen];
                int val;
                int oneChar;
                while ((oneChar = url.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (url != null) url.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
;copy = 0;print(copy);from = 0;to = 0;result = 0",LABEL_1,LABEL_1,LABEL_1,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:0.009539902210235596,from:-0.006477534770965576,to:0.00048363208770751953,result:-0.008753955364227295,subFiles:-0.00022846460342407227,i:0.0007169246673583984,newDir:5.3882598876953125e-05,in:-0.002238929271697998,out:0.0019382238388061523,fileLength:0.00019603967666625977,charBuff:0.0003020167350769043,len:0.00029850006103515625,oneChar:0.0011864900588989258,",8,35,0,"copy:copy,out:out,oneChar:oneChar,i:i,to:to,charBuff:stringMatrix,len:val,fileLength:fileLen,newDir:nowFolder,subFiles:newsFiles,in:url,from:url,result:url,",0,Greedy,658,0.24061499834060668,inesrt,"[';copy = 0', ';print(copy)', ';from = 0', ';to = 0', ';result = 0']"
72,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",194,"    public static boolean decodeFileToFile(String infile, String  outdatabase) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream conn = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream( outdatabase));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                conn.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.007184386253356934,infile:0.0011181831359863281,outfile:0.0008675456047058105,in:-0.00516819953918457,out:-0.003252744674682617,buffer:-0.0038095712661743164,read:-0.008160889148712158,success:-0.011601448059082031,",3,9,0,"decodeFileToFile:decodeFileToFile,infile:infile,outfile: outdatabase,out:conn,buffer:url,",0,Greedy,194,0.06997011105219524,replace,[]
73,"        @Override
        protected String doInBackground(Void... params) {
            HttpClient httpClient = new DefaultHttpClient();
            HttpContext localContext = new BasicHttpContext();
            HttpPost httpPost = new HttpPost(urlFormated);
            try {
                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
                for (int index = 0; index < POSTparamList.size(); index++) {
                    if (POSTparamList.get(index).getName().equalsIgnoreCase(""image"")) {
                        entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));
                    } else {
                        entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));
                    }
                }
                httpPost.setEntity(entity);
                HttpResponse response = httpClient.execute(httpPost, localContext);
                return processAnswer(response);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values ('"" + language + ""', "" + row + "", '"" + root + ""', '"" + surface + ""', '"" + tag + ""', "";
                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",204,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,httpClient,localContext,httpPost,entity,index,response",,8,23,0,,0,GA,3117,1.189533797899882,failed,[';print(localContext)']
74,"    public Document getContentAsDocument() {
        synchronized (this.url) {
            URLConnection connection = this.url.openConnection();
            if (doReload(connection)) {
                InputSource inputSource = new InputSource(connection.getInputStream());
                DocumentBuilderFactory factory = new DocumentBuilderFactoryImpl();
                this.document = factory.newDocumentBuilder().parse(inputSource);
            }
            return this.document;
        }
    }
 <SPLIT>         public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                BufferedInputStream in = new BufferedInputStream(con.getInputStream());
                FileOutputStream fos = new FileOutputStream(toFile);
                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);
                byte[] data = new byte[1024];
                int x = 0;
                while ((x = in.read(data, 0, 1024)) >= 0) {
                    bout.write(data, 0, x);
                    lastIteraction = System.currentTimeMillis();
                }
                bout.flush();
                bout.close();
                fos.flush();
                fos.close();
                in.close();
                con.disconnect();
                finish = true;
            } catch (Exception e) {
                this.e = e;
            }
        }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"getContentAsDocument,connection,inputSource,factory,document",,5,10,0,,0,GA,1900,0.7012503345807394,failed,"[';factory = 0', ';print(getContentInDoc)', ';url = 0', ';print(url)', ';lc = 0', ';client = 0', ';print(client)', ';reader = 0', ';function = 0', ';session = 0', ';conn = 0', ';context = 0', ';version = 0', ';content = 0', ';collection = 0']"
75,"    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
 <SPLIT>     @Test
    public void testLoadSource() throws IOException {
        ArticleMetadata metadata = new ArticleMetadata();
        metadata.setId(""http://arxiv.org/abs/math/0205003v1"");
        InputStream inputStream = arxivDAOFacade.loadSource(metadata);
        Assert.assertNotNull(inputStream);
        StringWriter writer = new StringWriter();
        IOUtils.copy(inputStream, writer, ""utf8"");
        String contents = writer.toString();
        Assert.assertTrue(contents.contains(""A strengthening of the Nyman""));
        inputStream.close();
    }
",197,,LABEL_1,LABEL_1,LABEL_1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse",,5,17,0,,0,GA,3126,1.1693797945976256,failed,"[';testTrainingBackprop = 0', ';print(testTrainingBackprop)', ';temp = 0', ';layers = 0', ';desiredError = 0', ';mse = 0', ';testTrainBACKpointer = 0', ';testTrainBACKprop = 0', ';testTrainBACKpressure = 0', ';testTrainBackprop = 0', ';testTrainingBackpointer = 0', ';testTrainingBackpressure = 0', ';testTrainBackpressure = 0', ';testTrainingBackdrop = 0', ';testTrainBackpointer = 0', ';current = 0', ';strayer = 0', ';striner = 0', ';racker = 0', '; train = 0', ';tracker = 0', ';trayer = 0', ';retayer = 0', '; tracer = 0', ';stracer = 0', ';strainer = 0', ';strain = 0', ';racer = 0', ';desciredFailure = 0', ';reservedSize = 0', ';descirederror = 0', ';desizedError = 0', ';desizedSize = 0', ';despectederror = 0', ';resiredSize = 0']"
76,"    public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine(""/"", path.words().subList(1, len));
        URL url = new URL(""http"", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
 <SPLIT>     @Override
    public URLConnection openConnection(URL url) throws IOException {
        if (!url.getProtocol().equals(""file"")) {
            String name = url.getFile();
            File f = new File(cacheFolder, ((name.charAt(0) == '/') ? name.substring(1) : name).replace('/', File.separatorChar));
            if (!f.exists()) {
                File f2 = new File(f.getParentFile(), f.getName() + ""-not_found"");
                if (!f2.exists()) {
                    try {
                        f.getParentFile().mkdirs();
                        downloadFile(url, f);
                    } catch (IOException e) {
                        f.delete();
                        throw e;
                    }
                }
            }
            return f.toURI().toURL().openConnection();
        }
        return super.openConnection(url);
    }
",86,,LABEL_0,LABEL_0,LABEL_0,-1,"openInput,path,len,p,url,result",,6,13,0,,0,GA,2501,1.1619183659553527,failed,"[';openInput = 0', ';path = 0', ';len = 0', ';result = 0', ';createContent = 0', ';createInput = 0', ';getContent = 0', ';PATH = 0', ';pattern = 0', ';string = 0', ';method = 0', ';list = 0']"
77,"    public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {
        File destFile = new File(dest);
        InputStream in = new FileInputStream(new File(src));
        OutputStream out = new FileOutputStream(destFile);
        byte buf[] = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {
        InputStream in = downloadData(s3key);
        if (in == null) {
            throw new IOException(""No data found"");
        }
        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));
        File temp = File.createTempFile(""dirsync"", null);
        FileOutputStream fout = new FileOutputStream(temp);
        try {
            IOUtils.copy(in, fout);
            if (target.exists()) {
                target.delete();
            }
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
            FileUtils.moveFile(temp, target);
        } catch (IOException e) {
            fetchStream(in);
            throw e;
        } finally {
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
        }
    }
",101,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFileTo,src,dest,destFile,in,out,buf,len",,8,19,0,,0,GA,3495,1.2801990350087484,failed,[';print(copySourceFileTo)']
78,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,6,16,0,,0,GA,2717,1.1210962136586506,failed,"[';copyFile = 0', ';_file1 = 0', ';_file2 = 0', ';fis = 0', ';fos = 0', ';copyFolder = 0', ';jmodel2 = 0', ';_modelsecond = 0', ';_model1 = 0', ';flis = 0', ';fOS = 0', ';feis = 0', ';infoos = 0', ';print(infoos)', ';fios = 0', ';print(fios)', ';pos = 0']"
79,"    @Override
    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transferredBytesNum = 0;
        long elapsedTime = 0;
        Properties opts = PropertiesUtils.deserializeProperties(options);
        String server = opts.getProperty(TRANSFER_OPTION_SERVER);
        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);
        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);
        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + fileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlc.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transferredBytesNum += br;
                elapsedTime = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transferredBytesNum, elapsedTime);
            }
        }
        bis.close();
        os.close();
    }
 <SPLIT>     public void sendTextFile(String filename) throws IOException {
        Checker.checkEmpty(filename, ""filename"");
        URL url = _getFile(filename);
        PrintWriter out = getWriter();
        Streams.copy(new InputStreamReader(url.openStream()), out);
        out.close();
    }
",336,"    @Override
    public void outputBytes(byte[] text, byte[] params, boolean sendMetaData) throws Throwable {
        long startedLine = System.currentTimeMillis();
        long transferredFilesNum = 0;
        long ElapsedTimes = 0;
        Properties prefs = PropertiesUtils.deserializeProperties(params);
        String Server = prefs.getProperty(TRANSFER_OPTION_SERVER);
        String filename = prefs.getProperty(TRANSFER_OPTION_USERNAME);
        String wallet = prefs.getProperty(TRANSFER_OPTION_PASSWORD);
        String FilePath = prefs.getProperty(TRANSFER_OPTION_FILEPATH);
        if (sendMetaData) {
            int intx = FilePath.lastIndexOf(PATH_SEPARATOR);
            if (intx != -1) {
                String filename = FilePath.substring(intx + 1) + META_DATA_FILE_SUFIX;
                FilePath = FilePath.substring(0, intx);
                FilePath = FilePath + PATH_SEPARATOR + filename;
            } else {
                FilePath += META_DATA_FILE_SUFIX;
            }
        }
        URL z = new URL(PROTOCOL_PREFIX + filename + "":"" + wallet + ""@"" + Server + FilePath + "";type=i"");
        URLConnection httpcf = z.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        httpcf.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        httpcf.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = httpcf.getOutputStream();
        ByteArrayInputStream fs = new ByteArrayInputStream(text);
        byte[] buffer = new byte[1024];
        int length;
        while ((length = fs.read(buffer)) > 0) {
            os.write(buffer, 0, length);
            if (!transferMetaData) {
                transferredFilesNum += length;
                ElapsedTimes = System.currentTimeMillis() - startedLine;
                fireOnProgressEvent(transferredFilesNum, ElapsedTimes);
            }
        }
        fs.close();
        os.close();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"writeData,data,options,transferMetaData,startTime,transferredBytesNum,elapsedTime,opts,server,username,password,filePath,idx,fileName,url,urlc,os,bis,buffer,br","writeData:0.00013011693954467773,data:-0.003866910934448242,options:-0.005816221237182617,transferMetaData:0.0004321932792663574,startTime:-0.0021370649337768555,transferredBytesNum:-0.00934457778930664,elapsedTime:0.0015335679054260254,opts:0.0017072558403015137,server:-0.00693821907043457,username:-0.004834115505218506,password:-0.005940794944763184,filePath:0.0019978880882263184,idx:0.0023862123489379883,fileName:0.0011749267578125,url:0.002299785614013672,urlc:-0.045662105083465576,os:-0.018548905849456787,bis:-0.026183366775512695,buffer:0.011345744132995605,br:0.005256474018096924,",18,55,0,"buffer:buffer,br:length,idx:intx,url:z,filePath:FilePath,opts:prefs,elapsedTime:ElapsedTimes,fileName:filename,transferMetaData:sendMetaData,writeData:outputBytes,startTime:startedLine,data:text,username:filename,options:params,password:wallet,server:Server,transferredBytesNum:transferredFilesNum,os:os,bis:fs,urlc:httpcf,",0,Greedy,872,0.4643619418144226,replace,[]
80,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     public Vector<String> getNetworkServersIPs(String netaddress) {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(netaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if ((serverline) && line.startsWith("";"")) {
                    serverline = false;
                }
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[1]);
                }
                if (line.startsWith(""!SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
",570,"    public Vector parse(String line) {
        addMessage(""Parsing: "" + line);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(line);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(line).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int mi = 0; mi < leaveSuffix.length; mi++) {
                        if ((str.endsWith(leaveSuffix[mi]))) continue;
                    }
                    boolean append = false;
                    for (int mi = 0; mi < suffix.length; mi++) {
                        if ((str.endsWith(suffix[mi]))) append = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip","parse:-0.0001817941665649414,link:0.0002047419548034668,conn:-0.001090705394744873,rd:-0.00233304500579834,kit:-0.0025975704193115234,doc:-0.0011138916015625,url:-0.0002671480178833008,it:-0.000453948974609375,elem:-0.0005680322647094727,s:-0.0005078911781311035,lnk:-0.00013130903244018555,j:2.110004425048828e-05,urlLink:-0.0004056692123413086,str:-0.00016814470291137695,i:0.0003279447555541992,skip:0.0009984374046325684,",3,15,0,"skip:append,i:mi,link:line,",0,Greedy,199,0.10772011677424113,replace,[]
81,"    @Test
    public void testCopy_readerToOutputStream_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out, ""UTF16"");
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
 <SPLIT>     public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",123,,LABEL_1,LABEL_1,LABEL_1,-1,"testCopy_readerToOutputStream_Encoding,in,reader,baout,out,bytes",,5,15,0,,0,GA,1854,0.8033948977788289,failed,[]
82,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
",113,"    private void  transferFrom(File img) throws IOException {
        FileReader gin = null;
        FileWriter url = null;
        int c;
        try {
            gin = new FileReader(image);
            url = new FileWriter(img);
            while ((c = gin.read()) != -1) url.write(c);
        } finally {
            if (gin != null) try {
                gin.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyTo,dest,in,out,c","CopyTo:0.004155755043029785,dest:0.0006850957870483398,in:6.306171417236328e-05,out:0.00047767162322998047,c:-2.872943878173828e-05,",4,13,0,"CopyTo: transferFrom,dest:img,out:url,in:gin,",0,Greedy,191,0.07038025856018067,replace,[]
83,"    public void testAutoCommit() throws Exception {
        Connection con = getConnectionOverrideProperties(new Properties());
        try {
            Statement stmt = con.createStatement();
            assertEquals(0, stmt.executeUpdate(""create table #testAutoCommit (i int)""));
            con.setAutoCommit(false);
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (0)""));
            con.setAutoCommit(false);
            con.rollback();
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (1)""));
            con.setAutoCommit(true);
            con.setAutoCommit(false);
            con.rollback();
            con.setAutoCommit(true);
            ResultSet rs = stmt.executeQuery(""select i from #testAutoCommit"");
            assertTrue(rs.next());
            assertEquals(1, rs.getInt(1));
            assertFalse(rs.next());
            rs.close();
            stmt.close();
        } finally {
            con.close();
        }
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",186,,LABEL_0,LABEL_0,LABEL_0,-1,"testAutoCommit,con,stmt,rs",,4,22,0,,0,GA,1548,0.5897581259409587,failed,[]
84,"    private void reload() {
        if (xml != null) {
            try {
                String currentDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath xpath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection conn = null;
            URL url = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            conn = url.openConnection();
            xml = docBuilder.parse(conn.getInputStream());
            xpath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = xpath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            xpath = XPathFactory.newInstance().newXPath();
            NodeList currenciesNode = (NodeList) xpath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currencies = new String[currenciesNode.getLength()];
            for (int i = 0; i < currencies.length; i++) {
                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",255,"    private void overresh() {
        if (xml != null) {
            try {
                String newDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (newDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath xpath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection path = null;
            URL serv = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            path = serv.openConnection();
            xml = docBuilder.parse(path.getInputStream());
            xpath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = xpath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            xpath = XPathFactory.newInstance().newXPath();
            NodeList currenciesNode = (NodeList) xpath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currencies = new String[currenciesNode.getLength()];
            for (int i = 0; i < currencies.length; i++) {
                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"reload,currentDate,xpath,docBuilderFactory,docBuilder,conn,url,xml,exchangeRateDate,currenciesNode,currencies,i","reload:5.429983139038086e-05,currentDate:6.747245788574219e-05,xpath:-0.003306567668914795,docBuilderFactory:-8.690357208251953e-05,docBuilder:-0.0003311634063720703,conn:0.0005437731742858887,url:0.0004483461380004883,xml:-0.0001456737518310547,exchangeRateDate:-0.0016622543334960938,currenciesNode:-6.210803985595703e-05,currencies:-0.001210331916809082,i:0.0005704164505004883,",4,8,0,"i:i,conn:path,url:serv,currentDate:newDate,reload:overresh,",0,Greedy,222,0.08373990456263224,replace,[]
85,"    public FileParse(String fileStr, String type) throws MalformedURLException, IOException {
        this.inFile = fileStr;
        this.type = type;
        System.out.println(""File str "" + fileStr);
        if (fileStr.indexOf(""http://"") == 0) {
            URL url = new URL(fileStr);
            urlconn = url.openConnection();
            inStream = urlconn.getInputStream();
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""File"")) {
            File inFile = new File(fileStr);
            size = inFile.length();
            inStream = new FileInputStream(inFile);
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""URL"")) {
            URL url = new URL(fileStr);
            urlconn = url.openConnection();
            inStream = urlconn.getInputStream();
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""URLZip"")) {
            URL url = new URL(fileStr);
            inStream = new GZIPInputStream(url.openStream(), 16384);
            InputStreamReader zis = new InputStreamReader(inStream);
            bufReader = new BufferedReader(zis, 16384);
        } else {
            System.out.println(""Unknown FileParse inType "" + type);
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",266,,LABEL_0,LABEL_0,LABEL_0,-1,"fileStr,type,inFile,url,urlconn,inStream,bufReader,size,zis",,9,44,0,,0,GA,3012,1.187165582180023,failed,[]
86,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",352,"    public static void link(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) link(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream serv = null;
            try {
                in = new FileInputStream(from);
                serv = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int singlechar;
                while ((singlechar = in.read()) != -1) {
                    serv.write(singlechar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (serv != null) serv.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:0.009539902210235596,from:-0.006477534770965576,to:0.00048363208770751953,result:-0.008753955364227295,subFiles:-0.00022846460342407227,i:0.0007169246673583984,newDir:5.3882598876953125e-05,in:-0.002238929271697998,out:0.0019382238388061523,fileLength:0.00019603967666625977,charBuff:0.0003020167350769043,len:0.00029850006103515625,oneChar:0.0011864900588989258,",3,10,0,"copy:link,out:serv,oneChar:singlechar,",0,Greedy,180,0.07288655837376913,replace,[]
87,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",364,,LABEL_1,LABEL_1,LABEL_1,-1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read",,8,42,0,,0,GA,5394,2.28558661142985,failed,"[';fileCopy = 0', ';print(fileCopy)', ';from_name = 0', ';to_name = 0', ';dir = 0', '; from_no = 0', ';fromametime = 0', '; from__alias = 0', '; from__address = 0', ';FromDir = 0', ';FromModel = 0', ';targetDir = 0']"
88,"    void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     void run(PseudolocalizerArguments arguments) throws IOException {
        List<String> fileNames = arguments.getFileNames();
        PseudolocalizationPipeline pipeline = arguments.getPipeline();
        if (arguments.isInteractive()) {
            runStdin(pipeline);
            return;
        }
        if (fileNames.size() == 0) {
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());
            writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);
            return;
        }
        String suffix = arguments.getVariant();
        if (suffix == null) {
            suffix = ""_pseudo"";
        } else {
            suffix = ""_"" + suffix;
        }
        for (String fileName : fileNames) {
            File file = new File(fileName);
            if (!file.exists()) {
                System.err.println(""File "" + fileName + "" not found"");
                continue;
            }
            int lastDot = fileName.lastIndexOf('.');
            String extension;
            String outFileName;
            if (lastDot >= 0) {
                extension = fileName.substring(lastDot + 1);
                outFileName = fileName.substring(0, lastDot) + suffix + ""."" + extension;
            } else {
                extension = """";
                outFileName = fileName + suffix;
            }
            System.out.println(""Processing "" + fileName + "" into "" + outFileName);
            String fileType = arguments.getType();
            if (fileType == null) {
                fileType = extension;
            }
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);
            InputStream inputStream = new FileInputStream(file);
            List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);
            OutputStream outputStream = new FileOutputStream(new File(outFileName));
            writeMessages(msgCat, processedMessages, outputStream);
        }
    }
",85,"    void moveSourceFile(File url, File dut) throws IOException {
        FileChannel  inchannel = new FileInputStream(url).getChannel();
        FileChannel inConnection = new FileOutputStream(dut).getChannel();
        try {
             inchannel.transferTo(0,  inchannel.size(), inConnection);
        } finally {
            if ( inchannel != null)  inchannel.close();
            if (inConnection != null) inConnection.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,src,dst,inChannel,outChannel","copyFile:0.0003082752227783203,src:-0.00016671419143676758,dst:-0.00016123056411743164,inChannel:0.0002943873405456543,outChannel:0.0014407634735107422,",5,14,0,"outChannel:inConnection,copyFile:moveSourceFile,inChannel: inchannel,dst:dut,src:url,",0,Greedy,168,0.061733428637186685,replace,[]
89,"    public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File parent = file.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(file)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.length() != length) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",356,"    public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest  digests = MessageDigest.getInstance(DIGEST);
            OutputStream copy = new DigestOutputStream(new FileOutputStream(temporary),  digests);
            try {
                length = IOUtils.copyLarge(input, copy);
            } finally {
                copy.close();
            }
            DataIdentifier identifier = new DataIdentifier( digests. digests());
            File url;
            synchronized (this) {
                usesIdentifier(identifier);
                url = getFile(identifier);
                if (!url.exists()) {
                    File parent = url.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(url)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + url.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(url) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(url, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (url.length() != length) {
                    if (!url.isFile()) {
                        throw new IOException(""Not a file: "" + url);
                    }
                    throw new IOException(DIGEST + "" collision: "" + url);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, url);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"addRecord,input,temporary,tempId,length,digest,output,file,parent,now","addRecord:-0.0017633438110351562,input:0.001632988452911377,temporary:0.004457056522369385,tempId:-0.015632212162017822,length:0.02056223154067993,digest:-0.04882168769836426,output:-0.05304139852523804,file:-0.13753986358642578,parent:0.008167147636413574,now:-0.018730521202087402,",3,20,0,"length:length,parent:parent,temporary:temporary,input:input,addRecord:addRecord,tempId:tempId,now:now,digest: digests,output:copy,file:url,",0,Greedy,521,0.19281684160232543,replace,[]
90,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",765,"    public void Conversion(File url, File dest) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",4,18,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:dest,inflate:inflate,in:login,convert:Conversion,format:url,src:url,",0,Greedy,437,0.171454119682312,replace,[]
91,"    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String ext = G_File.getExtensao(address);
        if (ext.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);
        }
        File temp = new File(localFileName + "".tmp"");
        if (temp.exists()) temp.delete();
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            try {
                URL url = new URL(address);
                conn = url.openConnection();
                in = conn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            out = new BufferedOutputStream(new FileOutputStream(temp));
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localFileName);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File nomeFinal = new File(localFileName);
        temp.renameTo(nomeFinal);
    }
 <SPLIT>     private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",307,"    private void data(String string, String localPageType) throws UrlNotFoundException, Exception {
        String string = G_File.getExtensao(string);
        if (string.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + string);
        }
        File stable = new File(localPageType + "".tmp"");
        if (stable.exists()) stable.delete();
        OutputStream line = null;
        URLConnection nn = null;
        InputStream s = null;
        try {
            try {
                URL path = new URL(string);
                nn = path.openConnection();
                s = nn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            line = new BufferedOutputStream(new FileOutputStream(stable));
            byte[] reader = new byte[1024];
            int NumReader;
            long NumWritten = 0;
            while ((NumReader = s.read(reader)) != -1) {
                line.write(reader, 0, NumReader);
                NumWritten += NumReader;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (s != null) {
                    s.close();
                }
                if (line != null) {
                    line.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localPageType);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File navefinal = new File(localPageType);
        stable.renameTo(navefinal);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"download,address,localFileName,ext,temp,out,conn,in,url,buffer,numRead,numWritten,oldArq,nomeFinal","download:0.0005607008934020996,address:0.0003432631492614746,localFileName:-0.0013766884803771973,ext:0.00043272972106933594,temp:-0.004889488220214844,out:-0.011606395244598389,conn:0.0029207468032836914,in:0.006032586097717285,url:0.005383670330047607,buffer:0.0006177425384521484,numRead:-0.0002092123031616211,numWritten:0.001667797565460205,oldArq:-0.013321876525878906,nomeFinal:-0.00314176082611084,",13,42,0,"in:s,url:path,conn:nn,numWritten:NumWritten,buffer:reader,download:data,ext:string,address:string,numRead:NumReader,localFileName:localPageType,nomeFinal:navefinal,temp:stable,out:line,",0,Greedy,615,0.2257388114929199,replace,[]
92,"    protected String readUrl(String svnUrl) throws IOException {
        URL url = new URL(svnUrl);
        URLConnection uc = url.openConnection();
        if (url.getProtocol().equals(""https"")) {
            String userPassword = user + "":"" + password;
            String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());
            uc.setRequestProperty(""Authorization"", ""Basic "" + encoding);
        }
        InputStream is = null;
        String in = null;
        try {
            is = uc.getInputStream();
            in = read(is);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
        return in;
    }
 <SPLIT>     public String readReferenceText(final String ident) throws NoContentException {
        try {
            String name = getFilename(ident);
            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(""/""), name);
            InputStream in = url.openStream();
            InputStreamReader isr = new InputStreamReader(in, ""UTF-8"");
            BufferedReader br = new BufferedReader(isr);
            StringBuffer buffer = new StringBuffer();
            String line = br.readLine();
            while (null != line) {
                buffer.append(line + ""\n"");
                line = br.readLine();
            }
            return buffer.toString();
        } catch (MalformedURLException muEx) {
            logError(muEx);
        } catch (UnsupportedEncodingException ueEx) {
            logError(ueEx);
        } catch (IOException ioEx) {
            logError(ioEx);
        }
        throw new NoContentException(""Unable to find or read reference text."");
    }
",144,"    protected String readUrl(String svNStr) throws IOException {
        URL page = new URL(svNStr);
        URLConnection anc = page.openConnection();
        if (page.getProtocol().equals(""https"")) {
            String currentPass = user + "":"" + password;
            String encoding = new sun.misc.BASE64Encoder().encode(currentPass.getBytes());
            anc.setRequestProperty(""Authorization"", ""Basic "" + encoding);
        }
        InputStream is = null;
        String line = null;
        try {
            is = anc.getInputStream();
            line = read(is);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
        return line;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"readUrl,svnUrl,url,uc,userPassword,encoding,is,in","readUrl:8.499622344970703e-05,svnUrl:-1.7881393432617188e-06,url:-3.17692756652832e-05,uc:1.6808509826660156e-05,userPassword:-5.900859832763672e-06,encoding:-0.0001055598258972168,is:-0.0006180405616760254,in:0.0008560419082641602,",5,13,0,"in:line,readUrl:readUrl,uc:anc,svnUrl:svNStr,userPassword:currentPass,url:page,",0,Greedy,233,0.08991667826970419,replace,[]
93,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     public void testHttpsConnection() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);
            checkConnectionStateParameters(connection, peerSocket);
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",143,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total",,6,21,0,,0,GA,3631,2.259243440628052,failed,"[';outStream = 0', ';writeManager = 0', ';print(writeManager)', ';outputQueue = 0', ';inputButton = 0', ';Outputchannel = 0', ';position = 0', ';number = 0', ';value = 0']"
94,"    public void updateUser(User portalUserBean, AuthSession authSession) {
        DatabaseAdapter dbDyn = null;
        PreparedStatement ps = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            ps = dbDyn.prepareStatement(sql);
            int num = 1;
            ps.setString(num++, portalUserBean.getFirstName());
            ps.setString(num++, portalUserBean.getMiddleName());
            ps.setString(num++, portalUserBean.getLastName());
            ps.setString(num++, portalUserBean.getAddress());
            ps.setString(num++, portalUserBean.getPhone());
            ps.setString(num++, portalUserBean.getEmail());
            ps.setLong(num++, portalUserBean.getUserId());
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    ps.setString(num++, authSession.getUserLogin());
                    break;
            }
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbDyn.commit();
        } catch (Exception e) {
            try {
                if (dbDyn != null) {
                    dbDyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",358,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,portalUserBean,authSession,dbDyn,ps,sql,idList,num,i1",,2,13,0,,0,GA,4543,2.1494810740152994,failed,"[';updateUser = 0', ';print(portalFileBAN)', ';print(portalUserBegan)', ';ils = 0', ';print(ils)', ';print(vs)', ';ws = 0', ';print(ws)', ';py = 0', ';print(py)', ';print(ns)', ';res = 0', ';print(res)', ';ks = 0', ';print(ks)', ';s = 0', ';print(s)', ';ls = 0', ';print(ls)', ';lines = 0', ';print(lines)', ';this = 0', ';Ps = 0', ';fe = 0', ';where = 0', ';PD = 0', ';hs = 0', ';properties = 0', ';ds = 0', ';qs = 0', ';pos = 0', ';str = 0', ';string = 0', ';conn = 0', ';serial = 0', ';sq = 0', ';statement = 0', ';idlist = 0', ';addressList = 0', ';addresslist = 0', ';len = 0', ';number = 0']"
95,"    protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
 <SPLIT>     public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",111,,LABEL_0,LABEL_0,LABEL_0,-1,"getFileContentAsString,filePath,encoding,testURL,input,sw",,2,9,0,,0,GA,2732,1.1607478936513265,failed,[]
96,"    public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {
        parseURL = url;
        URLConnection connection = url.openConnection();
        if (charset == null) {
            charset = Charset.forName(""UTF-8"");
        }
        Reader reader = new InputStreamReader(connection.getInputStream(), charset);
        return internalParse(reader, target);
    }
 <SPLIT> 	public static void BubbleSortShort2(short[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					short temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,url,target,parseURL,connection,charset,reader",,7,14,0,,0,GA,2929,1.648414937655131,failed,[]
97,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",200,"    public static boolean decodeStringTofile(final String inputfile, final String  outfp) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inputfile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream( outfp));
            final byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.006838560104370117,infile:0.0005725622177124023,outfile:0.000265657901763916,in:-0.0036667585372924805,out:-0.0021612048149108887,buffer:-0.0003275871276855469,read:-0.0029064416885375977,success:-0.010204792022705078,",4,8,0,"decodeFileToFile:decodeStringTofile,infile:inputfile,outfile: outfp,buffer:url,",0,Greedy,135,0.05333678722381592,replace,[]
98,"    private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
 <SPLIT>     public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",164,,LABEL_1,LABEL_1,LABEL_1,-1,"download,fileName,filePath,in,out",,5,17,0,,0,GA,2012,0.8937730153401693,failed,"[';download = 0', ';fileName = 0', ';filePath = 0', ';delete = 0', ';update = 0', ';FileType = 0', ';resourceCode = 0', ';socket = 0', ';print(socket)']"
99,"    public String getSHA256Checksum(String source) {
        String checksum = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(source.getBytes());
            byte[] byteData = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            System.out.println(""Hex format : "" + sb.toString());
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                String hex = Integer.toHexString(0xff & byteData[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            checksum = hexString.toString();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        return checksum;
    }
 <SPLIT>     public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",233,,LABEL_1,LABEL_1,LABEL_1,-1,"getSHA256Checksum,source,checksum,md,byteData,sb,i,hexString,hex",,9,32,0,,0,GA,4131,1.9780447363853455,failed,[]
100,"    private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",178,"    private static void copyFiles(String STRpath, String ddestDir) throws Exception {
        File url = new File(STRpath);
        File img = new File(ddestDir);
        if (url.isDirectory()) {
            img.mkdirs();
            String sort[] = url.sort();
            for (int mu = 0; mu < sort.length; mu++) {
                String sourceOne = img.getAbsolutePath() + ""\\"" + sort[mu];
                String sourceOne = url.getAbsolutePath() + ""\\"" + sort[mu];
                copyFiles(sourceOne, sourceOne);
            }
        } else {
            FileChannel ourceChan = new FileInputStream(url).getChannel();
            FileChannel  targetConnection = new FileOutputStream(img).getChannel();
            ourceChan.transferTo(0, ourceChan.size(),  targetConnection);
            ourceChan.close();
             targetConnection.close();
        }
    }
;copyFiles = 0;strPath = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyFiles,strPath,dstPath,src,dest,list,i,dest1,src1,sourceChannel,targetChannel","copyFiles:0.0025000572204589844,strPath:0.0006201863288879395,dstPath:-0.0002614259719848633,src:0.0009030699729919434,dest:0.001048445701599121,list:-6.22868537902832e-05,i:-0.00241696834564209,dest1:-8.863210678100586e-05,src1:-0.0005829930305480957,sourceChannel:-0.0008397698402404785,targetChannel:0.0019631385803222656,",10,34,0,"copyFiles:copyFiles,targetChannel: targetConnection,dest:img,src:url,strPath:STRpath,list:sort,dest1:sourceOne,dstPath:ddestDir,src1:sourceOne,sourceChannel:ourceChan,i:mu,",0,Greedy,450,0.22969722350438435,inesrt,"[';copyFiles = 0', ';strPath = 0']"
101,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
",227,,LABEL_1,LABEL_1,LABEL_1,-1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri",,12,33,0,,0,GA,7250,3.1715874989827473,failed,"[';print(saveAttachmentBody)', ';print(localAttachment)', ';accountId = 0', ';print(accountId)', ';print(contentUriString)', ';print(mSize)', ';print(template)', ';print(processor)', ';print(system)', ';print(manager)', ';print(host)', ';state = 0', ';print(state)', ';print(event)', ';print(component)', ';print(state)', ';print(to)', ';print(event)', ';print(contractName)', ';print(extensionID)', ';print(or)', ';print(socket)', ';print(plus)', ';print(it)', ';print(cCount)', ';print(metadata)', ';print(ui)', ';print( URI)']"
102,"    private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");
        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File f = File.createTempFile(""tempabca"", ""bdfafad"");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + ""/"";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith(""native"")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = """";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";
        System.out.println(""Using native/"" + arch + ""/"");
        addLibraryPath(parent + ""native/"" + arch + ""/"");
    }
 <SPLIT>     private String postXml(String url, String soapAction, String xml) {
        try {
            URLConnection conn = new URL(url).openConnection();
            if (conn instanceof HttpURLConnection) {
                HttpURLConnection hConn = (HttpURLConnection) conn;
                hConn.setRequestMethod(""POST"");
            }
            conn.setConnectTimeout(this.connectionTimeout);
            conn.setReadTimeout(this.connectionTimeout);
            conn.setRequestProperty(""Content-Type"", ""text/xml; charset=utf-8"");
            conn.setRequestProperty(""Accept"", ""application/soap+xml, text/*"");
            if (soapAction != null) {
                conn.setRequestProperty(""SOAPAction"", soapAction);
            }
            conn.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
            out.write(xml);
            out.close();
            BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder buf = new StringBuilder();
            String str;
            while ((str = resp.readLine()) != null) {
                buf.append(str);
            }
            return buf.toString();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",484,,LABEL_0,LABEL_1,,-4,"setup,path,jarFile,f,parent,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,arch,key,property,x64",,,,0,,0,Greedy,1,0.0008432229359944661,,[]
103,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public void importSequences() {
        names = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helper = new ImportHelper(new InputStreamReader(is));
            int ch = helper.read();
            while (ch != '>') {
                ch = helper.read();
            }
            do {
                String line = helper.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, "" \t"");
                String name = tokenizer.nextToken();
                StringBuffer seq = new StringBuffer();
                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);
                ch = helper.getLastDelimiter();
                names.add(name);
                sequences.add(seq.toString());
            } while (ch == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
",118,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String lsOutput = args[args.length - 1];
        PrintWriter riter = new PrintWriter(lsOutput);
        for (int type = 0; type < args.length - 1; type++) {
            File  finput = new File(args[type]);
            Scanner line = new Scanner( finput);
            while (line.hasNext()) {
                riter.println(line.nextLine());
            }
        }
        riter.close();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"fnOut,writer,i,fInput,in","fnOut:0.010777711868286133,writer:0.019073784351348877,i:0.018848896026611328,fInput:0.019809424877166748,in:0.004243671894073486,",5,14,0,"fInput: finput,writer:riter,i:type,fnOut:lsOutput,in:line,",0,Greedy,204,0.096452530225118,replace,[]
104,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {
        String fileName = file.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(file);
        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();
        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel channelFrom = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage img = javax.imageio.ImageIO.read(workingFile);
                int height = img.getHeight();
                file.setHeight(height);
                int width = img.getWidth();
                file.setWidth(width);
            }
            String folderPath = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);
            java.io.File directory = new java.io.File(folderPath);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",1,3,0,"encodeFileToFile:encodeFileToFile,buffer:url,",0,Greedy,92,0.04476997454961141,replace,[]
105,"    private static void loadDefaultPreferences() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.defaults.properties"");
            preferences.load(url.openStream());
        } catch (FileNotFoundException e) {
            log.error(""Default preferences file not found"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        logger.debug(""copyFile(srcFile={}, destFile={}) - start"", srcFile, destFile);
        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();
        try {
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",64,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDefaultPreferences,url",,2,3,0,,0,GA,914,0.4215938329696655,failed,"[';loadDefaultPreferences = 0', ';print(loadStandardPreels)', ';print(loadDefaultPreels)', ';print(loadDefaultpreels)', ';print(loadDefaultConfs)', ';print(loadStandardPreferences)', ';print(loadStandardPreerences)', ';print(jar)']"
106,"    public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {
        String pageDump = null;
        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);
        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpGet httpget = new HttpGet(url);
        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpResponse response = execute(httpget);
        HttpEntity entity = response.getEntity();
        pageDump = IOUtils.toString(entity.getContent(), ""UTF-8"");
        return pageDump;
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",137,"    public String httpToStringStored(String file) throws IllegalStateException, IOError, Httpception, InterruptedExit, URISyntaceError {
        String  pageBumping = null;
        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);
        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpGet httstart = new HttpGet(file);
        httstart.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpResponse output = execute(httstart);
        HttpEntity output = output.getEntity();
         pageBumping = IOUtils.toString(output.getContent(), ""UTF-8"");
        return  pageBumping;
    }
;HttpException = 0;URISlntaxception = 0;Httpget = 0;application = 0;server = 0;full = 0;translation = 0",LABEL_0,LABEL_0,LABEL_0,1,"httpToStringStupid,url,IOException,HttpException,InterruptedException,URISyntaxException,pageDump,httpget,response,entity","httpToStringStupid:-0.00021094083786010742,url:0.0020251870155334473,IOException:0.00015586614608764648,HttpException:6.854534149169922e-05,InterruptedException:-9.006261825561523e-05,URISyntaxException:-1.5914440155029297e-05,pageDump:-0.0015475749969482422,httpget:5.143880844116211e-05,response:0.0015943050384521484,entity:0.0028406381607055664,",10,17,0,"entity:output,url:file,response:output,IOException:IOError,HttpException:Httpception,httpget:httstart,URISyntaxException:URISyntaceError,InterruptedException:InterruptedExit,httpToStringStupid:httpToStringStored,pageDump: pageBumping,",0,Greedy,859,0.3731623331705729,inesrt,"[';HttpException = 0', ';URISlntaxception = 0', ';Httpget = 0', ';application = 0', ';server = 0', ';full = 0', ';translation = 0']"
107,"    private void callService() {
        try {
            URL url = new URL(baseUrl + servicePath + attributes);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            StringBuffer buf = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                buf.append(inputLine);
            }
            in.close();
            answer = buf.toString();
        } catch (MalformedURLException e) {
            answer = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            answer = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
 <SPLIT>     protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
",131,"    private void testProxy() {
        try {
            URL socket = new URL(baseUrl + servicePath + attributes);
            BufferedReader is = new BufferedReader(new InputStreamReader(socket.openStream()));
            String outputLine;
            StringBuffer cache = new StringBuffer();
            while ((outputLine = is.readLine()) != null) {
                cache.append(outputLine);
            }
            is.close();
            install = cache.toString();
        } catch (MalformedURLException e) {
            install = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            install = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
;callService = 0;url = 0;inputLine = 0;buf = 0;answer = 0;callservice = 0;callServices = 0;address = 0;string = 0;inputString = 0;requestString = 0",LABEL_1,LABEL_1,LABEL_1,1,"callService,url,in,inputLine,buf,answer","callService:0.0002142190933227539,url:-0.011109352111816406,in:-0.011118590831756592,inputLine:-0.002697467803955078,buf:-0.0002778768539428711,answer:-0.00451892614364624,",6,15,0,"callService:testProxy,buf:cache,inputLine:outputLine,answer:install,url:socket,in:is,",0,Greedy,456,0.19512943426767984,inesrt,"[';callService = 0', ';url = 0', ';inputLine = 0', ';buf = 0', ';answer = 0', ';callservice = 0', ';callServices = 0', ';address = 0', ';string = 0', ';inputString = 0', ';requestString = 0']"
108,"    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL url = getClass().getResource(name);
        InputStream in = url.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
 <SPLIT>     public void conMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + ""&"" + HttpConfig.BBS_MAIL_N_PARAM_NAME + ""="" + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",55,,LABEL_0,LABEL_0,LABEL_0,-1,"getClassFile,name,url,in",,0,0,0,,0,GA,1816,0.6640117645263672,failed,[]
109,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
",1214,,LABEL_1,LABEL_0,,-4,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,0,,0,Greedy,1,0.0010323802630106608,,[]
110,"    protected File getFile() throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", getFilePrefix());
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
 <SPLIT>     public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
",171,,LABEL_0,LABEL_0,LABEL_0,-1,"getFile,home,fileName,file,url,in,out",,0,0,0,,0,GA,3262,1.223770805199941,failed,[]
111,"    private static void doGet(LNISoapServlet lni, String itemHandle, String packager, String output, String endpoint) throws java.rmi.RemoteException, ProtocolException, IOException, FileNotFoundException {
        String itemURI = doLookup(lni, itemHandle, null);
        URL url = LNIClientUtils.makeDAVURL(endpoint, itemURI, packager);
        System.err.println(""DEBUG: GET from URL: "" + url.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""GET"");
        conn.setDoInput(true);
        fixBasicAuth(url, conn);
        conn.connect();
        int status = conn.getResponseCode();
        if (status < 200 || status >= 300) {
            die(status, ""HTTP error, status="" + String.valueOf(status) + "", message="" + conn.getResponseMessage());
        }
        InputStream in = conn.getInputStream();
        OutputStream out = new FileOutputStream(output);
        copyStream(in, out);
        in.close();
        out.close();
        System.err.println(""DEBUG: Created local file "" + output);
        System.err.println(""RESULT: Status="" + String.valueOf(conn.getResponseCode()) + "" "" + conn.getResponseMessage());
    }
 <SPLIT>     private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",249,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,lni,itemHandle,packager,output,endpoint,ProtocolException,IOException,FileNotFoundException,itemURI,url,conn,status,in,out",,15,42,0,,0,GA,5727,2.6472785154978435,failed,"[';doGet = 0', ';print(doGet)', ';lni = 0', ';print(lni)', ';itemHandle = 0', ';print(itemHandle)', ';packager = 0', ';output = 0', ';toPut = 0', '; doPut = 0', ';print( doPut)', ';print(DoPut)', ';print(doPut)', ';ldi = 0', ';importaging = 0', ';packageatter = 0', ';paramenger = 0', ';importagers = 0', ';importenger = 0', ';external = 0', ';Output = 0', ';string = 0', ';profile = 0', ';ProtInterfaceFailure = 0', ';method = 0', ';user = 0', ';method = 0', ';copy = 0', ';ch = 0']"
112,"    @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
 <SPLIT>     public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",232,,LABEL_1,LABEL_1,LABEL_1,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle",,12,32,0,,0,GA,5357,2.3266705592473347,failed,"[';print(test)', ';byteArrayOutputStream = 0', ';print(byteArrayOutputStream)', ';byteStringInputPath = 0', ';print(byteStringInputPath)', ';byteStringInputContext = 0', ';byteArrayFileStream = 0', ';byteArrayOutputSteam = 0', ';byteStringInputString = 0', ';print(byteStringInputString)', ';byteStringInputSteam = 0', ';lockById = 0']"
113,"    private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",138,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFileTo,destination,srcChannel,destChannel",,0,0,0,,0,GA,1757,0.8774304747581482,failed,[]
114,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
",96,"    private void transferFile(File url, File file) throws IOException {
        FileChannel  inchannel = new FileInputStream(url).getChannel();
        FileChannel  outConnection = new FileOutputStream(file).getChannel();
        try {
             inchannel.transferTo(0,  inchannel.size(),  outConnection);
        } catch (IOException e) {
            throw e;
        } finally {
            if ( inchannel != null)  inchannel.close();
            if ( outConnection != null)  outConnection.close();
        }
    }
;copyFile = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,in,out,inChannel,outChannel","copyFile:0.0003026127815246582,in:0.0001691579818725586,out:8.7738037109375e-05,inChannel:0.0001671314239501953,outChannel:0.0001468062400817871,",5,14,0,"copyFile:transferFile,in:url,inChannel: inchannel,outChannel: outConnection,out:file,",0,Greedy,183,0.07097181479136148,inesrt,[';copyFile = 0']
115,"    public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {
        if (!source.exists()) throw new IOException(""source file not exists"");
        if (!source.isFile()) throw new IOException(""source file not exists(is a directory)"");
        InputStream src = new FileInputStream(source);
        File tarn = target;
        if (target.isDirectory() || !(!(target.exists()) || replace)) {
            String tardir = target.isDirectory() ? target.getPath() : target.getParent();
            tarn = new File(tardir + File.separator + source.getName());
            int n = 1;
            while (!(!tarn.exists() || replace)) {
                tarn = new File(tardir + File.separator + String.valueOf(n) + "" copy of "" + source.getName());
                n++;
            }
        }
        if (source.getPath().equals(tarn.getPath()) && replace) return;
        OutputStream tar = new FileOutputStream(tarn);
        byte[] bytes = new byte[bufferSize];
        int readn = -1;
        while ((readn = src.read(bytes)) > 0) {
            tar.write(bytes, 0, readn);
        }
        tar.flush();
        tar.close();
        src.close();
    }
 <SPLIT>     public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",280,"    public void cpFile(File source, File url, boolean reply, int bufferSize) throws IOException {
        if (!source.exists()) throw new IOException(""source file not exists"");
        if (!source.isFile()) throw new IOException(""source file not exists(is a directory)"");
        InputStream url = new FileInputStream(source);
        File tarn = url;
        if (url.isDirectory() || !(!(url.exists()) || reply)) {
            String tarpirt = url.isDirectory() ? url.getPath() : url.getParent();
            tarn = new File(tarpirt + File.separator + source.getName());
            int n = 1;
            while (!(!tarn.exists() || reply)) {
                tarn = new File(tarpirt + File.separator + String.valueOf(n) + "" copy of "" + source.getName());
                n++;
            }
        }
        if (source.getPath().equals(tarn.getPath()) && reply) return;
        OutputStream tar = new FileOutputStream(tarn);
        byte[] bytes = new byte[bufferSize];
        int readn = -1;
        while ((readn = url.read(bytes)) > 0) {
            tar.write(bytes, 0, readn);
        }
        tar.flush();
        tar.close();
        url.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"cpFile,source,target,replace,bufferSize,src,tarn,tardir,n,tar,bytes,readn","cpFile:-0.008284926414489746,source:-0.02648031711578369,target:-0.00014030933380126953,replace:-0.0008429288864135742,bufferSize:0.0023117661476135254,src:-0.002476811408996582,tarn:-0.03655529022216797,tardir:-0.0052754878997802734,n:-0.01860278844833374,tar:-0.0522611141204834,bytes:0.0026760101318359375,readn:0.00416642427444458,",4,17,0,"readn:readn,bytes:bytes,bufferSize:bufferSize,target:url,replace:reply,src:url,tardir:tarpirt,",0,Greedy,377,0.14107274611790974,replace,[]
116,"    @Test
    public void testStandardTee() throws Exception {
        final String reference = ""test"";
        final Reader source = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(source, tee);
        tee.close();
        assertEquals(""the two string are equals"", reference, destination1.toString());
        assertEquals(""the two string are equals"", reference, destination2.toString());
        assertEquals(""byte count"", reference.length(), tee.getSize());
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",132,"    @Test
    public void testStandardTee() throws Exception {
        final String reference = ""test"";
        final Reader url = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(url, tee);
        tee.close();
        assertEquals(""the two string are equals"", reference, destination1.toString());
        assertEquals(""the two string are equals"", reference, destination2.toString());
        assertEquals(""byte count"", reference.length(), tee.getSize());
    }
",LABEL_1,LABEL_1,LABEL_0,1,"testStandardTee,reference,source,destination1,destination2,tee","testStandardTee:0.003504812717437744,reference:0.008817434310913086,source:0.01909816265106201,destination1:0.006232857704162598,destination2:0.00482630729675293,tee:0.01767277717590332,",1,2,0,"source:url,",0,Greedy,61,0.025754777590433757,replace,[]
117,"    @Override
    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection connection = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        attrs.put(""sn"", lastname);
        attrs.put(""givenName"", firstname);
        attrs.put(""cn"", firstname + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest sha = MessageDigest.getInstance(""md5"");
            sha.reset();
            sha.update(pwd.getBytes(""utf-8""));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            attrs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext ctx = connection.getLDAPDirContext();
        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!mail.equals(email)) {
            String newName = ""mail="" + email + "","" + dn;
            String oldName = ""mail="" + mail + "","" + dn;
            ctx.rename(oldName, newName);
        }
    }
 <SPLIT>     public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
",247,,LABEL_0,LABEL_0,LABEL_0,-1,"update,mail,email,pwd,firstname,lastname,connection,attrs,sha,digest,hash,ctx,newName,oldName",,14,42,0,,0,GA,6083,2.337453826268514,failed,"[';update = 0', ';mail = 0', ';email = 0', ';pwd = 0', ';connection = 0', ';attrs = 0', ';sha = 0', ';address = 0', ';write = 0', ';auth = 0', ';key = 0', ';copy = 0', ';data = 0', ';push = 0', ';address = 0', ';id = 0', ';contact = 0', ';Mail = 0', ';username = 0', ';mails = 0', ';value = 0', ';line = 0', ';addr = 0', '; pWD = 0', '; ppassword = 0', ';ppwd = 0', ';hWD = 0', ';Pwd = 0', '; pwh = 0', '; pwt = 0', ';Ppassword = 0', ';hwd = 0', '; firstnames = 0', ';firstaddress = 0', ';digests = 0', ';tagcode = 0', '; cs = 0', ';conn = 0', '; conn = 0', ';cmp = 0']"
118,"    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                registro = in.nextLine();
                stmtDestino.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
 <SPLIT>     private synchronized void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM non_generic_favs"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {
                e.printStackTrace(System.out);
                throw new IOException(""Error on initial data store read"");
            }
            String[] qry = { ""CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)"", ""CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                }
                e2.printStackTrace(new PrintWriter(System.out));
                throw new IOException(""Error initializing data store"");
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        e4.printStackTrace(System.out);
                        throw new IOException(""Unable to cleanup data store resources"");
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                    throw new IOException(""Unable to reset data store auto commit"");
                }
            }
        }
        return;
    }
",708,"    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String  registration;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                 registration = in.nextLine();
                stmtDestino.clearParameters();
                 registration =  registration.substring(1,  registration.length() - 1);
                if ( registration.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                     registration =  registration + "" "";
                }
                campos =  registration.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado( registration);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"importarEmissoresDosTitulosFinanceiros,pArquivoTXT,pAndamento,numeroDoRegistro,in,stmtLimpezaInicialDestino,sql,stmtDestino,TAMANHO_DO_CABECALHO_DO_ARQUIVO,TAMANHO_DO_RODAPE_DO_ARQUIVO,TAMANHO_DOS_METADADOS_DO_ARQUIVO,TAMANHO_MEDIO_POR_REGISTRO,tamanhoDosArquivos,quantidadeDeRegistrosEstimada,registro,campos","importarEmissoresDosTitulosFinanceiros:0.0005875825881958008,pArquivoTXT:-0.020500600337982178,pAndamento:-0.011378228664398193,numeroDoRegistro:-0.03254270553588867,in:0.03729248046875,stmtLimpezaInicialDestino:-0.01963430643081665,sql:0.08536574244499207,stmtDestino:-0.06343293190002441,TAMANHO_DO_CABECALHO_DO_ARQUIVO:0.03977566957473755,TAMANHO_DO_RODAPE_DO_ARQUIVO:-0.009367704391479492,TAMANHO_DOS_METADADOS_DO_ARQUIVO:0.03648269176483154,TAMANHO_MEDIO_POR_REGISTRO:0.012934684753417969,tamanhoDosArquivos:0.019502222537994385,quantidadeDeRegistrosEstimada:-0.031531572341918945,registro:0.15344995260238647,campos:-0.1896856427192688,",1,10,0,"registro: registration,",0,Greedy,92,0.03691025972366333,replace,[]
119,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
",194,"    public static boolean encodeString2String(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",2,4,0,"encodeFileToFile:encodeString2String,buffer:url,",0,Greedy,92,0.034674453735351565,replace,[]
120,"    private void copyResource() throws Exception {
        URL url = getResource(source);
        InputStream input;
        if (url != null) {
            input = url.openStream();
        } else if (new File(source).exists()) {
            input = new FileInputStream(source);
        } else {
            throw new Exception(""Could not load resource: "" + source);
        }
        OutputStream output = new FileOutputStream(destinationFile());
        int b;
        while ((b = input.read()) != -1) output.write(b);
        input.close();
        output.close();
    }
 <SPLIT>     static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",123,,LABEL_1,LABEL_0,,-4,"copyResource,url,input,output,b",,,,0,,0,Greedy,1,0.0005049308141072592,,[]
121,"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) {
        try {
            FileChannel inChannel = null, outChannel = null;
            try {
                out.getParentFile().mkdirs();
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                outChannel.transferFrom(inChannel, 0, inChannel.size());
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (Exception e) {
            ObjectUtils.throwAsError(e);
        }
    }
",113,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,source,dest,in,out,size,buf",,7,21,0,,0,GA,2592,0.9610120018323263,failed,[]
122,"    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
 <SPLIT>     public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine(""/"", path.words().subList(1, len));
        URL url = new URL(""http"", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
",163,,LABEL_0,LABEL_0,LABEL_0,-1,"exists,fileToCheck,ftp,found,reply",,5,19,0,,0,GA,2490,0.918560242652893,failed,"[';exists = 0', ';print(exists)', ';fileToCheck = 0', ';print(fileToCheck)', ';xist = 0', ';resist = 0', ';exist = 0', ';esist = 0', ';actisting = 0', ';Existing = 0', ';resisting = 0', ';Existent = 0', ';xits = 0', ';xists = 0', ';xisting = 0', ';filetocheck = 0', ';stringToTest = 0', ';stringToCheck = 0', ';address = 0']"
123,"    private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {
        HttpURLConnection urlConn = null;
        try {
            String params = generatorParamString(parameters);
            URL url = new URL(reqUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setRequestMethod(""POST"");
            urlConn.setConnectTimeout(5000);
            urlConn.setReadTimeout(5000);
            urlConn.setDoOutput(true);
            byte[] b = params.getBytes();
            urlConn.getOutputStream().write(b, 0, b.length);
            urlConn.getOutputStream().flush();
            urlConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return urlConn;
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"sendPost,reqUrl,parameters,urlConn,params,url,b",,7,22,0,,0,GA,2408,0.9203064878781636,failed,"[';print(sendPost)', ';parameters = 0', ';print(parameters)', ';params = 0', ';postpost = 0', ';sendPOST = 0', ';sendpost = 0', ';sendMethod = 0', ';doMethod = 0', ';paramsParameters = 0', ';mandParameters = 0', ';paramseters = 0', ';bytes = 0', ';bytes = 0']"
124,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>         private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
",68,"    static void transferStream(File url, File c) throws IOException {
        FileChannel sproject= new FileInputStream(url).getChannel();
        FileChannedeclinationon = new FileOutputStream(c).getChannel();
        project.transferTo(0, project.size(), declination);
        project.close();
        declination.close();
    }
",LABEL_1,LABEL_1,0.5362828969955444,1,"copyFile,in,out,source,destination",,5,12,0,"copyFile:transferStream,in:url,out:c,source:project,destination:declination,",0,GA,1416,0.5231788396835327,ga,"[';transferFiles = 0', ';print(base)', ';print(part)', ';print(exec)', ';print(SOURCE)', ';print(dependination)']"
125,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",210,,LABEL_1,LABEL_0,,-4,"copyFile,from,to,parentDir,in,out,ic,oc",,,,0,,0,Greedy,1,0.000628825028737386,,[]
126,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     public static String getSHADigest(String password) {
        String digest = null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(password.getBytes());
            byte[] pwhash = sha.digest();
            digest = ""{SHA}"" + new String(Base64.encode(pwhash));
        } catch (NoSuchAlgorithmException nsae) {
            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);
        }
        return digest;
    }
",109,,LABEL_1,LABEL_1,LABEL_1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest",,5,13,0,,0,GA,2165,0.7898561954498291,failed,"[';getServerHash = 0', ';print(getServerHash)', ';passwordHash = 0', ';getSessionSHA = 0', ';getSessionAddress = 0']"
127,"    public static void fileDownload(String fAddress, String destinationDir) {
        int slashIndex = fAddress.lastIndexOf('/');
        int periodIndex = fAddress.lastIndexOf('.');
        String fileName = fAddress.substring(slashIndex + 1);
        URL url;
        try {
            url = new URL(fAddress);
            URLConnection uc = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            File file = new File(destinationDir + ""/download.pdf"");
            FileOutputStream fos = new FileOutputStream(file);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
            int inputLine;
            while ((inputLine = in.read()) != -1) out.write(inputLine);
            in.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 <SPLIT>     public static ArrayList<RoleName> importRoles(String urlString) {
        ArrayList<RoleName> results = new ArrayList<RoleName>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""</RoleName>"")) {
                    RoleName name = ProfileParser.parseRoleName(buff.toString());
                    results.add(name);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
        }
        return results;
    }
",183,"    public static void urldownload(String fingEmail, String DestinationDir) {
        int SlashLength = fingEmail.lastIndexOf('/');
        int  periodOffset = fingEmail.lastIndexOf('.');
        String filePath = fingEmail.substring(SlashLength + 1);
        URL socket;
        try {
            socket = new URL(fingEmail);
            URLConnection usc = socket.openConnection();
            BufferedReader init = new BufferedReader(new InputStreamReader(usc.getInputStream()));
            File file = new File(DestinationDir + ""/download.pdf"");
            FileOutputStream fileOs = new FileOutputStream(file);
            BufferedWriter output = new BufferedWriter(new OutputStreamWriter(fileOs));
            int  inputRow;
            while (( inputRow = init.read()) != -1) output.write( inputRow);
            init.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fileDownload,fAddress,destinationDir,slashIndex,periodIndex,fileName,url,uc,in,file,fos,out,inputLine","fileDownload:0.007031917572021484,fAddress:0.014575719833374023,destinationDir:-0.0006821155548095703,slashIndex:0.00476992130279541,periodIndex:0.0015571117401123047,fileName:0.00323408842086792,url:0.007998049259185791,uc:0.00425487756729126,in:-0.000380098819732666,file:-0.00884997844696045,fos:0.00669097900390625,out:0.008837759494781494,inputLine:-0.0042095184326171875,",12,27,0,"fAddress:fingEmail,out:output,url:socket,fileDownload:urldownload,fos:fileOs,slashIndex:SlashLength,uc:usc,fileName:filePath,periodIndex: periodOffset,in:init,destinationDir:DestinationDir,inputLine: inputRow,",0,Greedy,424,0.15390793482462564,replace,[]
128,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",188,,LABEL_0,LABEL_0,LABEL_0,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,10,30,0,,0,GA,4994,2.290462823708852,failed,"[';unarchiveProject = 0', ';print(unarchiveProject)', ';print(unarchivemodel)', ';print(fp)', ';print(url)', ';print(temppath)', ';print(tmppath)', ';print(rest)', ';print(cont)', ';print(sup)', ';print(prop)', ';print(transfer)', ';print(cdn)', ';print(sync)', ';print(wb)', ';print(home)', ';print(fi)', ';print(SAPER)']"
129,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,2,13,0,,0,GA,2401,0.9303455948829651,failed,[]
130,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,5,25,0,,0,GA,2394,0.8929541071256002,failed,"[';ata = 0', ';print(s)', ';all = 0', ';au = 0', ';print( swap)', ';print(wapped)', ';print( swapping)', ';ip = 0', ';I = 0', ';start = 0']"
131,"    public static synchronized String getMD5_Base64(String input) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(input.getBytes(""UTF-8""));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] rawData = msgDigest.digest();
        byte[] encoded = Base64.encode(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
 <SPLIT>     public static final String calculate(File f) {
        MessageDigest md;
        BufferedReader rd;
        StringBuffer buffer = new StringBuffer("""");
        try {
            rd = new BufferedReader(new FileReader(f));
            md = MessageDigest.getInstance(""SHA"");
            String line = """";
            while ((line = rd.readLine()) != null) buffer.append(line);
            md.update(buffer.toString().getBytes());
            byte[] digest = md.digest();
            String result = """";
            for (byte b : digest) result += String.format(""%h"", b & 0xFF);
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            return """";
        }
    }
",119,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5_Base64,input,msgDigest,rawData,encoded,retValue",,2,3,0,,0,GA,2511,0.9311562776565552,failed,"[';getMD5_Base64 = 0', ';msgDigest = 0', ';retValue = 0', ';value = 0', ';rawString = 0', ';RawString = 0', ';resultValue = 0']"
132,"    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
 <SPLIT>     public String execute() {
        String dir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\"";
        HomeMap map = new HomeMap();
        map.setDescription(description);
        Integer id = homeMapDao.saveHomeMap(map);
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(dir + id);
            IOUtils.copy(new FileInputStream(imageFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list();
    }
",171,,LABEL_1,LABEL_1,LABEL_1,-1,"doCopyFile,srcFile,destFile,preserveFileDate,input,output",,6,23,0,,0,GA,2825,1.045533839861552,failed,"[';doCopyFile = 0', ';print(doCopyFile)', ';srcFile = 0', ';print(srcFile)', ';destFile = 0', ';print(destFile)', ';preserveFileDate = 0', ';output = 0', ';docopyDirectory = 0', ';doCopDirectory = 0', ';destDir = 0', ';instDir = 0', ';rcDir = 0', ';targetPath = 0', ';address = 0']"
133,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",335,"    public static void report(String sourcename, ArrayList<byte[]>  fileHours, ArrayList<String> FileNumbers) throws Exception {
        String folderBased = Util.JAVA_DIR + File.separator + sourcename;
        File folderLib = new File(folderBased);
        if (!packageDir.exists()) {
            boolean path = folderLib.mkdir();
            if (!created) {
                File newRoot = new File(""."");
                throw new Exception(""Directory "" + sourcename + "" could not be created. Current directory: "" + newRoot.getAbsolutePath());
            }
        }
        for (int ori = 0; ori <  fileHours.size(); ori++) {
            File rule = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(ori));
            FileOutputStream  fops = new FileOutputStream(rule);
             fops.write( fileHours.get(ori));
             fops.flush();
             fops.close();
        }
        for (int ori = 0; ori < FileNumbers.size(); ori++) {
            File fileAsRC = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(ori));
            File fileDayst = new File(folderBased + File.separator + FileNumbers.get(ori));
            BufferedReader server = new BufferedReader(new FileReader(fileAsRC));
            BufferedWriter connection = new BufferedWriter(new FileWriter(fileDayst));
            connection.append(""package "" + sourcename + "";
"");
            String url = """";
            while ((url = server.readLine()) != null) connection.append(url + ""
"");
            connection.flush();
            connection.close();
            server.close();
        }
    }
;copy = 0;store = 0;data = 0;clone = 0;modulePath = 0;moduleName = 0",LABEL_1,LABEL_1,LABEL_1,1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:-0.005025506019592285,packageName:0.0005574822425842285,fileContents:-0.009838521480560303,fileNames:0.003544926643371582,dirBase:-0.00133514404296875,packageDir:0.004028737545013428,created:1.4543533325195312e-05,currentPath:0.005278170108795166,i:-0.14196622371673584,file:-0.01251077651977539,fos:-0.0326080322265625,fileSrc:0.00011444091796875,fileDst:-0.0070151686668396,reader:0.003947913646697998,writer:0.012717068195343018,line:0.005530714988708496,",16,54,0,"writer:connection,line:url,currentPath:newRoot,packageDir:folderLib,reader:server,fileNames:FileNumbers,packageName:sourcename,fileSrc:fileAsRC,created:path,dirBase:folderBased,save:report,fileDst:fileDayst,fileContents: fileHours,file:rule,fos: fops,i:ori,",0,Greedy,789,0.3134871522585551,inesrt,"[';copy = 0', ';store = 0', ';data = 0', ';clone = 0', ';modulePath = 0', ';moduleName = 0']"
134,"    public InputStream loadResource(String location) throws GenericConfigException {
        URL url = getURL(location);
        try {
            return url.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",63,"    public InputStream loadResource(String location) throws GenericConfigException {
        URL path = getURL(location);
        try {
            return path.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + path.toExternalForm() + ""]"", e);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"loadResource,location,url","loadResource:-0.00027829408645629883,location:2.7179718017578125e-05,url:0.00038230419158935547,",1,3,0,"url:path,",0,Greedy,58,0.029449884096781412,replace,[]
135,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static String md5Hash(String src) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(src.getBytes());
            return bytesArrayToHexString(md.digest());
        } catch (Exception e) {
            return null;
        }
    }
",212,,LABEL_0,LABEL_0,LABEL_0,-1,"handler,result,target,url,reader,line,entry,fromIndex,r",,8,29,0,,0,GA,4145,2.129419763882955,failed,[]
136,"    public Song(String s) {
        StringTokenizer tokenizer = new StringTokenizer(s, "";"");
        free = false;
        title = tokenizer.nextToken();
        artist = tokenizer.nextToken();
        location = tokenizer.nextToken();
        rating = Integer.parseInt(tokenizer.nextToken());
        overplay = Integer.parseInt(tokenizer.nextToken());
        String temp = tokenizer.nextToken();
        tokenizer = new StringTokenizer(temp, "",[] "");
        tags = new ArrayList<String>();
        while (tokenizer.hasMoreTokens()) {
            tags.add(tokenizer.nextToken());
        }
        byte[] bytes = new byte[40];
        try {
            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");
            hasher.update(title.getBytes());
            hasher.update(artist.getBytes());
            bytes = hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",199,,LABEL_0,LABEL_0,LABEL_0,-1,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher",,11,29,0,,0,GA,4765,1.922563378016154,failed,"[';print(services)', ';params = 0', ';sample = 0', ';south = 0', ';sets = 0', ';path = 0', ';string = 0', ';statizers = 0', ';initialiser = 0', ';loginer = 0', ';okeniter = 0', ';optimizer = 0', ';statiter = 0', ';logize = 0', ';string = 0', '; hashers = 0', ';hashr = 0', ';haveer = 0']"
137,"    public static byte[] getJarEntry(String jarName, String entry, int port) {
        byte[] b = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);
            JarURLConnection jurl = (JarURLConnection) url.openConnection();
            JarEntry je = jurl.getJarEntry();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) je.getSize();
            b = new byte[size];
            int rb = 0;
            int chunk = 0;
            while ((size - rb) > 0) {
                chunk = bis.read(b, rb, size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            url = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return b;
    }
 <SPLIT>     public void createPartControl(Composite parent) {
        viewer = new ScrollingGraphicalViewer();
        viewer.setRootEditPart(new ScalableRootEditPart());
        viewer.setEditPartFactory(new BlockEditPartFactory());
        viewer.setEditDomain(new EditDomain());
        viewer.createControl(parent);
        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));
        ActionRegistry actionRegistry = new ActionRegistry();
        createActions(actionRegistry);
        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);
        viewer.setContextMenu(cmProvider);
        Block b = new Block();
        b.addChild(new ChartItem());
        viewer.setContents(b);
        System.err.println(""!!! "" + viewer.getContents().getChildren().get(0));
        viewer.select((EditPart) viewer.getContents().getChildren().get(0));
        PaletteRoot root = new PaletteRoot();
        PaletteGroup toolGroup = new PaletteGroup(""Chart Tools"");
        List toolList = new ArrayList();
        ToolEntry tool = new SelectionToolEntry();
        toolList.add(tool);
        root.setDefaultEntry(tool);
        tool = new MarqueeToolEntry();
        toolList.add(tool);
        toolGroup.addAll(toolList);
        PaletteGroup templateGroup = new PaletteGroup(""Templates"");
        List templateList = new ArrayList();
        CombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry(""Rect"", ""Rect"", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());
        CombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry(""Line"", ""Line"", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());
        templateList.add(entry);
        templateList.add(entry1);
        templateGroup.addAll(templateList);
        List rootList = new ArrayList();
        rootList.add(toolGroup);
        rootList.add(templateGroup);
        root.addAll(rootList);
        final PaletteViewer v = new PaletteViewer();
        v.setPaletteRoot(root);
        v.createControl(parent);
        v.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                System.err.println(""selectionChanged "" + v.getActiveTool());
            }
        });
        deleteAction.setSelectionProvider(viewer);
        viewer.getEditDomain().setPaletteViewer(v);
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                System.err.println(event.getSelection());
                deleteAction.update();
            }
        });
        viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {

            public void stackChanged(CommandStackEvent event) {
                undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());
                redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());
            }
        });
    }
",327,,LABEL_0,LABEL_0,LABEL_0,-1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk",,18,57,0,,0,GA,8353,4.003407502174378,failed,[]
138,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     @Override
    public OBJModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {
        boolean baseURLWasNull = setBaseURLFromModelURL(url);
        OBJModel model = loadModel(url.openStream(), skin);
        if (baseURLWasNull) {
            popBaseURL();
        }
        return (model);
    }
",120,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,7,18,0,,0,GA,2766,1.171279788017273,failed,[]
139,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
 <SPLIT>     public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(reqxml);
        return """";
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"source,process,processStdOut,processStdIn",,0,0,0,,0,GA,1862,0.7772092660268147,failed,[]
140,"    public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
 <SPLIT>     @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
",159,,LABEL_0,LABEL_0,LABEL_0,-1,"createEmptyCart,SHOPPING_ID,con,insert_cart",,3,11,0,,0,GA,1800,0.9261294007301331,failed,"[';print(SHOPPING_ID)', ';createNewShipping = 0', ';print(createNewShipping)', '; createEmptySpot = 0', ';print( createEmptySpot)', '; createEmptycart = 0', ';createEmptycart = 0', ';createNewCart = 0', ';createNewSpot = 0', ';createCreateSpot = 0', ';createTempSpot = 0', ';createTempCart = 0', ';createTempcart = 0', ';SHOPPINGPOIDs = 0', ';SHOPPINGPOId = 0', ';SHOPPINGINGId = 0', ';SHOPPINGIDId = 0', ';SHOPPIP_Id = 0', ';insert_pod = 0', ';insert_center = 0', ';insertencycle = 0', '; insert_pod = 0', ';insertencat = 0', ';exec_payment = 0', ';insertencenter = 0', ';insert_conn = 0', ';insert_cycle = 0']"
141,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,0,0,0,,0,GA,2586,1.232953461011251,failed,[]
142,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static void main(String[] args) {
        File srcDir = new File(args[0]);
        File dstDir = new File(args[1]);
        File[] srcFiles = srcDir.listFiles();
        for (File f : srcFiles) {
            if (f.isDirectory()) continue;
            try {
                FileChannel srcChannel = new FileInputStream(f).getChannel();
                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();
                ByteBuffer buffer = ByteBuffer.allocate(1024);
                int nr = 0;
                srcChannel.position(nr);
                nr += srcChannel.read(buffer);
                while (nr < f.length()) {
                    buffer.flip();
                    dstChannel.write(buffer);
                    buffer.clear();
                    nr += srcChannel.read(buffer);
                }
                srcChannel.close();
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
",250,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL path = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = path.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String file;
            String version = null;
            String build = null;
            while ((file = bin.readLine()) != null) {
                if (file.startsWith("".version"")) version = file.substring(8).trim(); else if (file.startsWith("".build"")) build = file.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, path); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.001273810863494873,view:-0.020235180854797363,url:-0.006307661533355713,in:-0.00029724836349487305,bin:-0.009231328964233398,line:-0.0046343207359313965,version:0.00895237922668457,build:0.00461047887802124,",2,9,0,"version:version,build:build,in:in,doVersionCheck:doVersionCheck,line:file,url:path,",0,Greedy,295,0.12487677335739136,replace,[]
143,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mButton1 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextView1 = (TextView) findViewById(R.id.myTextView1);
        mButton1.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace(""(\r\n|\r|\n|\n\r)"", """", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
",530,,LABEL_0,LABEL_0,LABEL_0,-1,"onCreate,savedInstanceState,mButton1,mButton2,mTextView1,v,uriAPI,httpRequest,params,httpResponse,strResult",,10,45,0,,0,GA,4923,2.0144774516423545,failed,"[';Parameters = 0', ';print(Parameters)']"
144,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",70,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,inputFile,outputFile,in,out,c",,6,14,0,,0,GA,2615,1.0150783061981201,failed,"[';replace = 0', ';cp = 0', ';clip = 0', ';get = 0', '; dup = 0', ';split = 0', ';cmp = 0', ';outputDir = 0', ';inputDir = 0']"
145,"    public void removeRealm(final List<Integer> realmIds) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));
                    Iterator<Integer> iter = realmIds.iterator();
                    int realmId;
                    while (iter.hasNext()) {
                        realmId = iter.next();
                        psImpl.setInt(1, realmId);
                        psImpl.executeUpdate();
                        cmDB.removeRealm(realmId);
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
 <SPLIT>     public void executeUpdateTransaction(List queries) throws SQLException {
        assert connection != null;
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator iterator = queries.iterator();
            while (iterator.hasNext()) {
                String query = (String) iterator.next();
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
            }
            connection.commit();
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
",202,,LABEL_1,LABEL_1,LABEL_1,-1,"removeRealm,realmIds,psImpl,iter,realmId",,1,2,0,,0,GA,2453,0.9221858978271484,failed,"[';removeRealm = 0', ';print(removeRealm)', ';realmIds = 0', ';psImpl = 0', ';iter = 0', ';realmId = 0', ';removerealme = 0', ';removeBroadms = 0', ';removeLocalms = 0', ';realmIntos = 0', ';realmByIds = 0', ';realmIntids = 0', ';workfNum = 0']"
146,"    protected String downloadURLtoString(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer sb = new StringBuffer(100 * 1024);
        String str;
        while ((str = in.readLine()) != null) {
            sb.append(str);
        }
        in.close();
        return sb.toString();
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",80,,LABEL_0,LABEL_0,LABEL_0,-1,"downloadURLtoString,url,in,sb,str",,5,12,0,,0,GA,2316,0.917264175415039,failed,"[';downloadURLtoString = 0', ';url = 0', ';in = 0', ';str = 0', '; downloadURLintoString = 0', ';path = 0']"
147,"    public static SVNConfiguracion load(URL urlConfiguracion) {
        SVNConfiguracion configuracion = null;
        try {
            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());
            configuracion = (SVNConfiguracion) xenc.readObject();
            configuracion.setFicheroConfiguracion(urlConfiguracion);
            xenc.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return configuracion;
    }
 <SPLIT>     public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"load,urlConfiguracion,configuracion,xenc",,4,11,0,,0,GA,1918,0.7607448935508728,failed,"[';urlConfiguracion = 0', ';configuracion = 0', ';urlconfigurator = 0', ';urlConfuration = 0', ';urlConfigureracion = 0', ';urlConfigureacion = 0', ';Xenv = 0']"
148,"    public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        StringBuffer sb = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",626,,LABEL_1,LABEL_0,,-4,"init,mgr,cfg,sock,_cman,_sock,i,key,_sout,_sinp,seed,rand,hex,pass,md5,hash,banner,txt,sname,spass,sseed,items",,,,0,,0,Greedy,1,0.0007633368174235026,,[]
149,"    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
 <SPLIT>     @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
",63,,LABEL_1,LABEL_1,LABEL_1,-1,"addToArchive,pod,podArchiveOutputStream,filename,source,entry",,6,14,0,,0,GA,2578,0.9518377184867859,failed,"[';addToAsive = 0', ';addtoAsives = 0', ';addToArchively = 0', ';podArchiveOutputResource = 0', ';podArchiveByteDirectory = 0', ';iterator = 0']"
150,"    public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public String kodetu(String testusoila) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        try {
            md.update(testusoila.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",306,,LABEL_0,LABEL_0,LABEL_0,-1,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile",,14,40,0,,0,GA,6127,2.388155190149943,failed,[]
151,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",116,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,sourceFile,destFile,source,destination",,5,18,0,,0,GA,2244,0.8333741545677185,failed,"[';targetLine = 0', ';print(targetLine)', ';targetPath = 0']"
152,"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"encodePassword,password,md,encodedPassword",,4,9,0,,0,GA,1845,0.6686987559000651,failed,[]
153,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.getRealFile(), name);
        LOGGER.debug(""PUT?? - real file: "" + this.getRealFile() + "",name: "" + name);
        if (isOwner) {
            if (!"".request"".equals(name) && !"".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            } else {
                if (ServerConfiguration.isDynamicSEL()) {
                } else {
                }
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
            return factory.resolveFile(this.host, dest);
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",229,"    private void paste(File url, File DestributionHome) throws IOException {
        if (url.isDirectory()) {
            File  newDirectory = new File(DestributionHome, url.getName());
             newDirectory.mkdir();
            File[] sort = url.listFiles();
            for (int i = 0; i < sort.length; i++) {
                if (sort[i].getName().equals("".svn"")) {
                    continue;
                }
                paste(sort[i],  newDirectory);
            }
        } else {
            File newFile = new File(DestributionHome, url.getName());
            if (newFile.exists() && url.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream connection = new FileOutputStream(newFile);
            FileInputStream index = new FileInputStream(url);
            byte[] boot = new byte[2048];
            int ip = 0;
            while ((ip = index.ip(boot)) > 0) {
                connection.write(boot, 0, ip);
            }
            connection.flush();
            connection.close();
            index.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:0.004722654819488525,source:0.0008420944213867188,destinationDirectory:0.00047028064727783203,newDir:0.0005003213882446289,children:-5.072355270385742e-05,i:-0.00017082691192626953,newFile:-0.0003352165222167969,output:0.002141594886779785,input:0.0023696422576904297,buff:0.0004469752311706543,read:0.0003972053527832031,",9,33,0,"copy:paste,input:index,output:connection,source:url,newDir: newDirectory,destinationDirectory:DestributionHome,buff:boot,read:ip,children:sort,",0,Greedy,468,0.1694998860359192,replace,[]
154,"    public UserFunction loadMFileViaWeb(URL codeBase, String directoryAndFile, String mFileName) {
        String code = """";
        UserFunction function = null;
        ErrorLogger.debugLine(""MFileLoader: loading >"" + mFileName + "".m<"");
        try {
            URL url = new URL(codeBase, directoryAndFile);
            InputStream in = url.openStream();
            BufferedReader inReader = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = inReader.readLine()) != null) {
                code += line + ""\n"";
            }
            inReader.close();
        } catch (Exception e) {
            Errors.throwMathLibException(""MFileLoader: m-file exception via web"");
        }
        ErrorLogger.debugLine(""MFileLoader: code: begin \n"" + code + ""\ncode end"");
        FunctionParser funcParser = new FunctionParser();
        function = funcParser.parseFunction(code);
        function.setName(mFileName);
        ErrorLogger.debugLine(""MFileLoader: finished webloading >"" + mFileName + "".m<"");
        return function;
    }
 <SPLIT>     private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
",184,"    public UserFunction loadMFileViaweb(URL codeBase, String directoryAndFile, String mFileName) {
        String code = """";
        UserFunction function = null;
        ErrorLogger.debugLine(""MFileLoader: loading >"" + mFileName + "".m<"");
        try {
            URL url = new URL(codeBase, directoryAndFile);
            InputStream in = url.openStream();
            BufferedReader inReader = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = inReader.readLine()) != null) {
                code += line + ""
"";
            }
            inReader.close();
        } catch (Exception e) {
            Errors.throwMathLibException(""MFileLoader: m-file exception via web"");
        }
        ErrorLogger.debugLine(""MFileLoader: code: begin 
"" + code + ""
code end"");
        FunctionParser funcParser = new FunctionParser();
        function = funcParser.parseFunction(code);
        function.setName(mFileName);
        ErrorLogger.debugLine(""MFileLoader: finished webloading >"" + mFileName + "".m<"");
        return function;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"loadMFileViaWeb,codeBase,directoryAndFile,mFileName,code,function,url,in,inReader,line,end","loadMFileViaWeb:0.00761258602142334,codeBase:-0.0012912750244140625,directoryAndFile:0.002537965774536133,mFileName:-0.0005057454109191895,code:-0.0014860033988952637,function:-0.006415843963623047,url:-0.001474618911743164,in:0.0013957023620605469,inReader:-0.016761183738708496,line:-0.014268755912780762,end:-0.0008695721626281738,",1,1,0,"loadMFileViaWeb:loadMFileViaweb,",0,Greedy,40,0.014831797281901041,replace,[]
155,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     private void streamContains(String in, InputStream stream) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copy(stream, baos);
        byte[] bytes = baos.toByteArray();
        String cmp = new String(bytes, ""UTF-8"");
        assertTrue(cmp.contains(in));
        baos.close();
    }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,10,30,0,,0,GA,5234,1.9418296217918396,failed,"[';compressWithZip = 0', ';print(compressWithZip)', ';fileList = 0', ';print(fileList)', ';zipFileName = 0', ';fos = 0', ';fileName = 0', ';shortName = 0', ';fis = 0', ';bytesRead = 0', ';compressWithJar = 0', ';compressedWithJar = 0', ';compresswithSax = 0', ';compresswithJar = 0', ';compresswithZip = 0', ';wordString = 0', ';modelList = 0', ';modelEx = 0', ';zipDirNames = 0', ';Iterator = 0', ';fileType = 0', '; fileType = 0', ';bytesLength = 0']"
156,"    @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
 <SPLIT>     public void update(String channelPath, String dataField, String fatherDocId) {
        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = '"" + fatherDocId + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherDocId + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String url = """";
            boolean flag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(sqlInitial);
            rs = ps.executeQuery();
            if (rs.next()) url = rs.getString(1);
            if (!url.equals("""")) {
                st = new StringTokenizer(url, "","");
                String sortDocId = """";
                while (st.hasMoreTokens()) {
                    if (flag) {
                        sortDocId = ""'"" + st.nextToken() + ""'"";
                        flag = false;
                    } else {
                        sortDocId = sortDocId + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;
                ps = conn.prepareStatement(sqlsort);
                rs = ps.executeQuery();
                String sortURL = """";
                boolean sortflag = true;
                while (rs.next()) {
                    if (sortflag) {
                        sortURL = rs.getString(1);
                        sortflag = false;
                    } else {
                        sortURL = sortURL + "","" + rs.getString(1);
                    }
                }
                ps = conn.prepareStatement(sqlsortURL);
                ps.setString(1, sortURL);
                ps.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, ps, conn, dbo);
        }
    }
",146,,LABEL_0,LABEL_0,LABEL_0,-1,"saveUser,user,digest,hash,bigInt,hashtext",,4,13,0,,0,GA,2717,1.0256911555926005,failed,"[';print(saveUser)', ';print(user)', ';hash = 0', ';bigInt = 0', ';hashtext = 0', ';SaveUser = 0', ';SavePerson = 0', ';savePerson = 0', ';saveAccount = 0', ';submitAccount = 0', ';submitUser = 0', ';submitPerson = 0', ';submituser = 0', ';result = 0', ';base = 0', ';model = 0', ';replace = 0', ';string = 0', ';hashInt = 0', ';hashInteger = 0', ';sumstring = 0']"
157,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",113,"    private void CopyTo(File destroy) throws IOException {
        FileReader connection = null;
        FileWriter url = null;
        int c;
        try {
            connection = new FileReader(image);
            url = new FileWriter(destroy);
            while ((c = connection.read()) != -1) url.write(c);
        } finally {
            if (connection != null) try {
                connection.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyTo,dest,in,out,c","CopyTo:0.004155755043029785,dest:0.0006850957870483398,in:6.306171417236328e-05,out:0.00047767162322998047,c:-2.872943878173828e-05,",3,12,0,"CopyTo:CopyTo,dest:destroy,out:url,in:connection,",0,Greedy,191,0.06886983315149943,replace,[]
158,"    public static String encryptPassword(String password) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(password.getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            StringBuffer buf = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                int halfbyte = (hash[i] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= halfbyte) && (halfbyte <= 9)) {
                        buf.append((char) ('0' + halfbyte));
                    } else {
                        buf.append((char) ('a' + (halfbyte - 10)));
                    }
                    halfbyte = hash[i] & 0x0F;
                } while (two_halfs++ < 1);
            }
            return buf.toString();
        } catch (Exception e) {
        }
        return null;
    }
 <SPLIT>     private String cookieString(String url, String ip) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());
            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);
            return null;
        }
    }
",188,,LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,password,digest,hash,buf,i,halfbyte,two_halfs",,7,22,0,,0,GA,3513,1.3062371174494425,failed,[]
159,"    private static byte[] baseHash(String name, String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(name.toLowerCase().getBytes());
            digest.update(password.getBytes());
            return digest.digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
 <SPLIT>     public static synchronized String toSHA1(String str) {
        Nulls.failIfNull(str, ""Cannot create an SHA1 encryption form a NULL string"");
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(SHA1);
            byte[] sha1hash = new byte[40];
            md.update(str.getBytes(ISO_CHARSET), 0, str.length());
            sha1hash = md.digest();
            return convertToHex(sha1hash);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        return null;
    }
",93,,LABEL_1,LABEL_1,LABEL_1,-1,"baseHash,name,password,digest",,4,11,0,,0,GA,1758,0.6382134517033895,failed,"['; generateFile = 0', ';basehash = 0', ';Basehash = 0', ';BaseFile = 0', '; chainHash = 0', ';address = 0', ';attribute = 0']"
160,"    static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {
        if (normaliseWhitespace) {
            profileDiff = removeWhitespaces(profileDiff);
        }
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(profileDiff.getBytes());
        return new BASE64Encoder().encode(md.digest());
    }
 <SPLIT>     private String getPrefsKey(String key) {
        try {
            if (MD5 == null) MD5 = MessageDigest.getInstance(""MD5"");
            MD5.reset();
            MD5.update(key.getBytes(""UTF-8""));
            byte[] resultBytes = MD5.digest();
            return toHexString(resultBytes);
        } catch (Exception nsae) {
            return key;
        }
    }
",66,,LABEL_1,LABEL_1,LABEL_1,-1,"calculateProfileDiffDigest,profileDiff,normaliseWhitespace,md",,4,10,0,,0,GA,1822,0.6588784495989481,failed,"[';calculateProfileDiffDigest = 0', ';profileDiff = 0', ';normaliseWhitespace = 0', ';messagePath = 0']"
161,"    public static String ReadURL(URL url, boolean textonly) {
        try {
            URLConnection uconn = url.openConnection();
            Object ucont = uconn.getContent();
            if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly); else return """" + ucont;
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",83,,LABEL_0,LABEL_0,LABEL_0,-1,"ReadURL,url,textonly,uconn,ucont",,4,9,0,,0,GA,2013,0.7274574597676595,failed,[]
162,"    public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(url.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",156,"    public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String fil = new File(url.getFile()).getName();
            FileOutputStream Foses = new FileOutputStream(dstDir + File.separator + fil);
            byte[] position = new byte[4096];
            while ((cnt = is.read(position, 0, position.length)) != -1) Foses.write(position, 0, cnt);
            Foses.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"get,cnt,url,conn,is,filename,fos,buffer","get:-0.0007252097129821777,cnt:-0.0009148120880126953,url:-0.0008389949798583984,conn:-0.0012230277061462402,is:-0.0009704828262329102,filename:-0.0007027983665466309,fos:-9.179115295410156e-06,buffer:-0.00028580427169799805,",3,9,0,"fos:Foses,buffer:position,filename:fil,",0,Greedy,156,0.0559845765431722,replace,[]
163,"    @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",72,"    @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter wt = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), wt, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return wt.toString();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readFixString,len,sw","readFixString:0.003300309181213379,len:0.004069387912750244,sw:0.010810434818267822,",1,3,0,"sw:wt,",0,Greedy,55,0.020473376909891764,replace,[]
164,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",84,,LABEL_0,LABEL_0,LABEL_0,-1,"extractResourceToFile,resourcePath,dest,in,out",,5,13,0,,0,GA,2298,0.8421499967575073,failed,[]
165,"    @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
 <SPLIT>         private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {
            if (fSource.getName().equals(""Thums.db"")) return;
            System.out.println(""copying "" + fSource + "" in "" + file);
            OutputStream o = new BufferedOutputStream(new FileOutputStream(file));
            InputStream i = new BufferedInputStream(new FileInputStream(fSource));
            byte[] b = new byte[8192];
            int n;
            while ((n = i.read(b)) > 0) o.write(b, 0, n);
            i.close();
            o.close();
        }
",232,,LABEL_1,LABEL_1,LABEL_1,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle",,12,32,0,,0,GA,5160,1.930635360876719,failed,"[';print(test)', ';byteArrayOutputStream = 0', ';print(byteArrayOutputStream)', ';print(linkId)', ';print(segmentId)', ';file = 0', ';init = 0', ';print(init)', ';lockById = 0', ';print(lockById)', ';linkConnectment = 0', ';print(linkConnectment)', ';linkFragments = 0', ';print(linkFragments)', ';linkFraggments = 0', ';linkFragures = 0', ';print(linkFragures)', ';linkIncrements = 0', ';print(linkIncrements)', ';linkIncrement = 0', ';linkSegines = 0', ';change = 0']"
166,"        @Override
        protected String doInBackground(String... params) {
            try {
                final HttpParams param = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(param, 30000);
                HttpConnectionParams.setSoTimeout(param, 30000);
                DefaultHttpClient client = new DefaultHttpClient(param);
                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
                post.setEntity(new StringEntity(params[0]));
                if (DEBUG) Log.d(""Location"", params[0]);
                HttpResponse resp = client.execute(post);
                if (resp.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = resp.getEntity();
                    String result = EntityUtils.toString(entity);
                    return result;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     @Test
    public void test_lookupType_FullSearch_MatchingWordInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupType/cluster"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":29055,\""itemCategoryID\"":17,\""name\"":\""Capital Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":29056,\""itemCategoryID\"":9,\""name\"":\""Capital Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29065,\""itemCategoryID\"":17,\""name\"":\""Capital Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":29066,\""itemCategoryID\"":9,\""name\"":\""Capital Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29069,\""itemCategoryID\"":17,\""name\"":\""Capital Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":29070,\""itemCategoryID\"":9,\""name\"":\""Capital Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29095,\""itemCategoryID\"":17,\""name\"":\""Capital Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":29096,\""itemCategoryID\"":9,\""name\"":\""Capital Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":21013,\""itemCategoryID\"":17,\""name\"":\""Capital Sensor Cluster\"",\""icon\"":\""54_03\""},{\""itemTypeID\"":21014,\""itemCategoryID\"":9,\""name\"":\""Capital Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":32241,\""itemCategoryID\"":17,\""name\"":\""Drive Cluster EDF-285\"",\""icon\"":\""24_11\""},{\""itemTypeID\"":5279,\""itemCategoryID\"":7,\""name\"":\""F-23 Reciprocal Sensor Cluster Link\"",\""icon\"":\""03_09\"",\""metaLevel\"":4},{\""itemTypeID\"":11534,\""itemCategoryID\"":17,\""name\"":\""Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":17340,\""itemCategoryID\"":9,\""name\"":\""Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11536,\""itemCategoryID\"":17,\""name\"":\""Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":17333,\""itemCategoryID\"":9,\""name\"":\""Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11535,\""itemCategoryID\"":17,\""name\"":\""Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":17345,\""itemCategoryID\"":9,\""name\"":\""Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6218,\""itemCategoryID\"":7,\""name\"":\""Protected Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6222,\""itemCategoryID\"":7,\""name\"":\""Protected LADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6226,\""itemCategoryID\"":7,\""name\"":\""Protected Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6230,\""itemCategoryID\"":7,\""name\"":\""Protected Multi-Frequency Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6234,\""itemCategoryID\"":7,\""name\"":\""Protected RADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":7895,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Gravimetric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7893,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Ladar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7914,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Magnetometric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7896,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Omni Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7892,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Radar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":11537,\""itemCategoryID\"":17,\""name\"":\""Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":17336,\""itemCategoryID\"":9,\""name\"":\""Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6242,\""itemCategoryID\"":7,\""name\"":\""Sealed Gravimetric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6241,\""itemCategoryID\"":7,\""name\"":\""Sealed LADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6238,\""itemCategoryID\"":7,\""name\"":\""Sealed Magnetometric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6239,\""itemCategoryID\"":7,\""name\"":\""Sealed Multi-Frequency Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6225,\""itemCategoryID\"":7,\""name\"":\""Sealed RADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":20238,\""itemCategoryID\"":7,\""name\"":\""Secure Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20244,\""itemCategoryID\"":7,\""name\"":\""Secure Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20250,\""itemCategoryID\"":7,\""name\"":\""Secure Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20260,\""itemCategoryID\"":7,\""name\"":\""Secure Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20240,\""itemCategoryID\"":7,\""name\"":\""Shielded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20246,\""itemCategoryID\"":7,\""name\"":\""Shielded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20252,\""itemCategoryID\"":7,\""name\"":\""Shielded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20262,\""itemCategoryID\"":7,\""name\"":\""Shielded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":21722,\""itemCategoryID\"":17,\""name\"":\""Sleeper Nanite Cluster\"",\""icon\"":\""55_15\""},{\""itemTypeID\"":20242,\""itemCategoryID\"":7,\""name\"":\""Warded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20248,\""itemCategoryID\"":7,\""name\"":\""Warded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20254,\""itemCategoryID\"":7,\""name\"":\""Warded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20264,\""itemCategoryID\"":7,\""name\"":\""Warded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,param,client,post,resp,entity,result",,8,20,0,,0,GA,3465,1.4822922190030416,failed,"[';doInBackground = 0', ';print(lines)', ';s = 0']"
167,"    private Reader getReader() throws IOException {
        if (data != null) {
            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");
            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");
            return new StringReader(data);
        } else if (url != null) {
            InputStream stream = url.openStream();
            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);
        }
        return null;
    }
 <SPLIT>     private void loadDynamically(File result, String extraPath) {
        URL url = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            url = new URL(homeServerUrl + extraPath);
            is = url.openStream();
            fos = new FileOutputStream(result);
            byte[] buff = new byte[8192];
            int nbRead;
            while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);
        } catch (IOException e) {
            throw new StellariumException(""Cannot dynamically load "" + result + "" from "" + url);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
        }
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"getReader,stream",,2,4,0,,0,GA,600,0.22494453589121502,failed,"[';getReader = 0', ';print(getReader)', ';stream = 0', ';getreader = 0', ';readParser = 0', ';newreader = 0', ';newReader = 0', ';readreader = 0', ';output = 0', ';port = 0', ';feed = 0', ';object = 0', ';body = 0', ';slice = 0', ';content = 0', ';form = 0', ';document = 0', ';channel = 0', ';source = 0', ';instance = 0']"
168,"    private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
 <SPLIT>     public static void main(String args[]) throws IOException {
        String inFileName = args[0];
        String outFileName = args[1];
        long position = 0L;
        try {
            position = Long.parseLong(args[2]);
        } catch (NumberFormatException nfex1) {
            try {
                position = Long.parseLong(args[2], 16);
            } catch (NumberFormatException nfex2) {
                System.err.println(""Wrong offset"");
                System.exit(0);
            }
        }
        if (position < 1L) {
            System.err.println(""Wrong offset. Must be more than 0"");
            System.exit(0);
        }
        System.out.println(""Copying  input: "" + inFileName);
        System.out.println(""        output: "" + outFileName);
        System.out.println(""          from: "" + position);
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));
        bis.skip(position);
        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;
        bis.close();
        bos.close();
    }
",124,"    private static File getZipAsfile(DigitalObject  digOl) {
        String fileInfo = randomizeFileName(getFolderNameFromDigObject( digOl));
        File mpDir = new File(utils_tmp, fileInfo);
        File copy = null;
        try {
            FileUtils.forceMkdir(mpDir);
            copy = new File(mpDir, getFileNameFromDigObject( digOl, null));
            FileOutputStream url = new FileOutputStream(copy);
            IOUtils.copyLarge( digOl.getContent().getInputStream(), url);
            url.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return copy;
    }
;digOb = 0;print(digOb);print(folderName);print(tmpFolder); digOl = 0;print( digOl);print(signObject);DigOb = 0;print(DigOb);print(digObj);print( digob);print( digOB);print(DigObj);print(ditob);print(ditOb);print(digOB);print(DigOl);print(ditOB);print(digob);print(digOl);print(Digob);print(FolderInfo);print(FolderName);print( temporaryFolder);print(flow);print(a);print(null)",LABEL_1,LABEL_1,LABEL_1,1,"getZipAsFile,digOb,folderName,tmpFolder,zip,out","getZipAsFile:0.020903706550598145,digOb:-0.00707322359085083,folderName:0.000513613224029541,tmpFolder:0.002365589141845703,zip:-0.0017608404159545898,out:0.004362285137176514,",6,17,0,"getZipAsFile:getZipAsfile,out:url,tmpFolder:mpDir,folderName:fileInfo,zip:copy,digOb: digOl,",0,Greedy,565,0.2292560338973999,inesrt,"[';digOb = 0', ';print(digOb)', ';print(folderName)', ';print(tmpFolder)', '; digOl = 0', ';print( digOl)', ';print(signObject)', ';DigOb = 0', ';print(DigOb)', ';print(digObj)', ';print( digob)', ';print( digOB)', ';print(DigObj)', ';print(ditob)', ';print(ditOb)', ';print(digOB)', ';print(DigOl)', ';print(ditOB)', ';print(digob)', ';print(digOl)', ';print(Digob)', ';print(FolderInfo)', ';print(FolderName)', ';print( temporaryFolder)', ';print(flow)', ';print(a)', ';print(null)']"
169,"    private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",182,"    private static boolean transferFiles(File url, File pos) {
        boolean md = true;
        InputStream http = null;
        OutputStream sys = null;
        try {
            http = new FileInputStream(url);
            sys = new FileOutputStream(pos);
            byte[] wave = new byte[0xFFFF];
            for (int fl; (fl = http.read(wave)) != -1; ) sys.write(wave, 0, fl);
        } catch (IOException e) {
            System.err.println(e);
            md = false;
        } finally {
            if (http != null) {
                try {
                    http.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (sys != null) {
                try {
                    sys.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return md;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,is,os,buffer,len,ok","copyFile:0.003930866718292236,in:-0.00021380186080932617,out:0.0016518831253051758,is:0.0002359151840209961,os:-0.001095116138458252,buffer:0.00028252601623535156,len:5.078315734863281e-05,ok:0.0005864500999450684,",8,24,0,"copyFile:transferFiles,out:pos,ok:md,buffer:wave,is:http,len:fl,in:url,os:sys,",0,Greedy,363,0.1307833154996236,replace,[]
170,"    public void makeRead(String user, long databaseID, long time) throws SQLException {
        String query = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            int count = statement.executeUpdate();
            if (0 == count) throw new SQLException(""Nothing updated."");
            m_connection.commit();
        } catch (SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
 <SPLIT>             public void run() {
                Log.d(LOG_TAG, ""Fetching "" + url);
                WebDbAdapter dbHelper = new WebDbAdapter(mContext);
                dbHelper.open();
                boolean errorOccurred = true;
                int notifyId = 0;
                String host = AppUtils.getHostFromUrl(url);
                try {
                    if (host == null) {
                        Log.d(LOG_TAG, ""Bad url "" + url);
                        errorOccurred = true;
                    } else {
                        notifyId = showNotification(""Fetching "" + host, ""Fetching "" + host, android.R.drawable.stat_sys_download, 0);
                        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);
                        String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));
                        Log.d(LOG_TAG, ""Using user agent="" + userAgent);
                        AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);
                        URI uri = new URI(url);
                        URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);
                        norm = norm.normalize();
                        HttpUriRequest get = new HttpGet(norm);
                        HttpResponse response = ahc.execute(get);
                        if (response.getStatusLine().getStatusCode() == 200) {
                            HttpEntity entity = response.getEntity();
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            entity.writeTo(baos);
                            String data = baos.toString();
                            for (int i = 0; i < undesirables.length; i++) {
                                Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
                                data = data.replaceAll(p.pattern(), """");
                            }
                            long sysMillis = System.currentTimeMillis();
                            String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));
                            FileOutputStream strm = new FileOutputStream(newFileName);
                            Log.d(LOG_TAG, ""Writing to "" + newFileName + "" for url "" + url);
                            String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);
                            jsData = jsData.replaceAll(""@css_file"", RETAIN_COLORS_CSS);
                            strm.write(jsData.getBytes());
                            strm.write(data.getBytes());
                            strm.write(jsData.getBytes());
                            strm.flush();
                            strm.close();
                            String entryName = getTitle(newFileName, url);
                            long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);
                            postToast(""Downloaded \"""" + entryName + ""\"""");
                            errorOccurred = false;
                            if (deleteRowId != 0) {
                                Log.d(LOG_TAG, ""Deleting rowId="" + deleteRowId);
                                dbHelper.deleteEntry(deleteRowId);
                                if (url == null) postToast(""Item Deleted"");
                                mContext.startActivity(new Intent(mContext, RetainActivity.class));
                            } else {
                                showNotification(""Download Complete"", entryName, android.R.drawable.stat_sys_download_done, newRowId);
                            }
                        } else {
                            Log.e(LOG_TAG, ""Response code="" + String.valueOf(response.getStatusLine().getStatusCode()));
                        }
                    }
                } catch (IOException ioe) {
                    Log.e(LOG_TAG, ""RETAIN IOException: "" + ioe.getMessage());
                } catch (URISyntaxException u) {
                    Log.e(LOG_TAG, ""RETAIN URISyntaxException: "" + u.getMessage());
                } catch (OutOfMemoryError oome) {
                    Log.e(LOG_TAG, ""RETAIN OutOfMemoryError: "" + oome.getMessage());
                } catch (Exception e) {
                    Log.e(LOG_TAG, ""RETAIN Exception: "" + e.getMessage());
                }
                hideNotification(notifyId);
                if (errorOccurred && host != null) {
                    showNotification(""Error Downloading"", host, android.R.drawable.stat_notify_error, 0);
                    postToast(""Error fetching "" + host);
                }
                dbHelper.close();
            }
",128,,LABEL_0,LABEL_0,LABEL_0,-1,"makeRead,user,databaseID,time,query,statement,count",,0,0,0,,0,GA,1960,0.8022513190905253,failed,[]
171,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",452,"    public void modifyExternalMsg(String localales, String MessageKey, String MessageVal) {
        Properties  Properties = new Properties();
        try {
            String i18fUrl = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File EnglishFiles = new File(i18fUrl + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesfileURL = i18fUrl + ""TranubeConstants_"" + localales + "".properties"";
            File file = new File(propertiesfileURL);
            if (!file.exists()) {
                FileReader in = new FileReader(EnglishFiles);
                FileWriter out = new FileWriter(file);
                int cont;
                while ((cont = in.read()) != -1) out.write(cont);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + localales + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String url = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((url = breader.readLine()) != null) {
                if (url.startsWith(""#"")) strBuilder.append(url).append(""
""); else {
                    String[] circle = url.split(""="");
                    if (circle.length == 2) {
                        if (circle[0].trim().equals(MessageKey)) {
                            strBuilder.append(circle[0].trim() + "" = "" + MessageVal + ""
"");
                            found = true;
                        } else strBuilder.append(url).append(""
"");
                    } else strBuilder.append(url).append(""
"");
                }
            }
            if (!found) strBuilder.append(MessageKey).append("" = "").append(MessageVal).append(""
"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found","modifyApplicationMessage:-0.0026243925094604492,locale:-0.0008435249328613281,messageName:-0.005095779895782471,messageValue:-0.0016861557960510254,properties:-0.001723945140838623,i18nPath:0.008132398128509521,englishFile:-0.0076354146003723145,propertiesFilePath:0.003213226795196533,file:-0.032259464263916016,in:-0.01792246103286743,out:-0.018219947814941406,c:-0.0037780404090881348,is:-0.0808568000793457,breader:-0.028967320919036865,line:-0.014657139778137207,strBuilder:-0.04737520217895508,pieces:0.0001392960548400879,found:-0.023095905780792236,",11,33,0,"i18nPath:i18fUrl,propertiesFilePath:propertiesfileURL,pieces:circle,locale:localales,messageValue:MessageVal,properties: Properties,modifyApplicationMessage:modifyExternalMsg,c:cont,messageName:MessageKey,englishFile:EnglishFiles,line:url,",0,Greedy,482,0.1840743859608968,replace,[]
172,"    public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",173,,LABEL_1,LABEL_1,LABEL_1,-1,"md5String,str,md,hash,hexChars,res,i",,7,23,0,,0,GA,3063,1.1467714389165242,failed,"['; md5Bytes = 0', ';md4string = 0', ';md5string = 0', '; md512String = 0', ';md4Bytes = 0', ';exp = 0', ';bytes = 0', ';char = 0', ';number = 0']"
173,"    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",294,,LABEL_0,LABEL_0,LABEL_0,-1,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c",,18,52,0,,0,GA,7957,2.9929301659266154,failed,[]
174,"    private void doFinishLoadAttachment(long attachmentId) {
        if (attachmentId != mLoadAttachmentId) {
            return;
        }
        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);
        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);
        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);
        if (mLoadAttachmentSave) {
            try {
                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);
                InputStream in = getContentResolver().openInputStream(contentUri);
                OutputStream out = new FileOutputStream(file);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, file, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(contentUri);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(intent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",266,,LABEL_1,LABEL_1,LABEL_1,-1,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent",,7,20,0,,0,GA,4120,1.567784559726715,failed,[]
175,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(""Message received :\n"" + buffer.getPayload().toString());
    }
 <SPLIT>     public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
",286,,LABEL_1,LABEL_1,LABEL_1,-1,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,9,33,0,,0,GA,4244,1.5957900524139403,failed,"[';files = 0', ';links = 0', ';print(links)', ';print(h)', ';fields = 0', ';print(fields)', ';print(features)', ';print(us)', ';was = 0', ';print(was)', ';are = 0', ';print(are)', ';Is = 0', ';print(Is)', ';print(out)']"
176,"    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
 <SPLIT>     public static void gzip() throws Exception {
        System.out.println(""gzip()"");
        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));
        byte buffer[] = new byte[BLOCKSIZE];
        File dir = new File(""/zip/covers"");
        System.out.println(""Dir '"" + dir.getAbsolutePath() + ""' exists: "" + dir.exists());
        FileInputStream in = new FileInputStream(dir);
        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);
        in.close();
        zipout.close();
    }
",105,"    public static void main(String args[]) throws IOException {
        BufferedReader url = new BufferedReader(new FileReader(args[0]));
        Writer query = new FileWriter(args[1]);
        query = new WrapFilter(new BufferedWriter(query), 40);
        query = new TitleCaseFilter(query);
        String line;
        while ((line = url.readLine()) != null) query.write(line + ""
"");
        query.close();
        url.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"in,out,line","in:0.002424001693725586,out:0.007467150688171387,line:0.0003756880760192871,",2,10,0,"out:query,in:url,",0,Greedy,132,0.04669782718022664,replace,[]
177,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",335,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection apacheGEConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        apacheGEConnection.connect();
        response.setStatus(apacheGEConnection.getResponseCode());
        logger.debug(""[status="" + apacheGEConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : apacheGEConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = apacheGEConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream","doGet:0.010593593120574951,request:-0.01403343677520752,response:0.0023533105850219727,rewrittenQueryString:-0.006837010383605957,rewrittenUrl:0.23867785930633545,httpURLConnection:0.24887430667877197,header:0.0017551779747009277,value:-0.018243789672851562,inputStream:-0.024854958057403564,outputStream:-0.03517961502075195,",1,6,0,"httpURLConnection:apacheGEConnection,",0,Greedy,146,0.05805807113647461,replace,[]
178,"        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,s,t,in,out",,5,12,0,,0,GA,2330,0.8542405049006144,failed,"[';copy = 0', ';s = 0', ';exec = 0', ';transfer = 0', ';object = 0', ';url = 0', ';reader = 0', ';bin = 0', ';e = 0', ';id = 0']"
179,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
",264,,LABEL_0,LABEL_0,LABEL_0,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,4,12,0,,0,GA,3776,1.4377402702967326,failed,"[';print(innerProcess)', ';curi = 0', ';print(curi)', ';regexpr = 0', ';print(regexpr)', ';cs = 0', ';digest = 0', ';newDigestValue = 0', '; innerWrite = 0', ';subprocess = 0', ';binaryConnect = 0', '; capi = 0', ';reggexr = 0']"
180,"    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
 <SPLIT>     public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
",1028,"    public WebmillDeploy(String  inputUrl, String OutputDir, boolean stripLoggers) throws Exception {
        File inputDir = null;
        JarFile ini = null;
        JarOutputStream narray = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(OutputDir);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            inputDir = File.createTempFile(""webmill-delpoy-"", """");
            inputDir.deleteOnExit();
            ini = new JarFile( inputUrl);
            narray = new JarOutputStream(new FileOutputStream(inputDir));
            Document contextXul = null;
            Document portletEng = null;
            Document contextXml = null;
            ZipEntry url;
            InputStream source;
            Enumeration zipEntries = ini.entries();
            while (zipEntries.hasMoreElements()) {
                url = (ZipEntry) zipEntries.nextElement();
                source = ini.getInputStream(url);
                try {
                    String target = url.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        contextXul = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletEng = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (contextXul == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletEng == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter  webrewitcher = new WebmillWebApplicationRewriter(contextXul);
             webrewitcher.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            ini = new JarFile( inputUrl);
            zipEntries = ini.entries();
            while (zipEntries.hasMoreElements()) {
                url = (ZipEntry) zipEntries.nextElement();
                source = ini.getInputStream(url);
                try {
                    String target = url.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if ( webrewitcher.getRealPortletTldFile() != null && fullTarget.equals( webrewitcher.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, narray);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, contextXul, narray);
            addFile(WEB_INF_PORTLET_XML, portletEng, narray);
            addFile(META_INF_CONTEXT_XML, contextXml, narray);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile =  webrewitcher.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, narray);
                } finally {
                    is.close();
                }
            }
            narray.close();
            ini.close();
            ini = null;
            narray = null;
            System.out.println(""Creating war "" + OutputDir + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(inputDir).getChannel();
            dstChannel = new FileOutputStream(OutputDir).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            inputDir.delete();
            inputDir = null;
            System.out.println(""War "" + OutputDir + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (ini != null) {
                try {
                    ini.close();
                    ini = null;
                } catch (IOException e1) {
                }
            }
            if (narray != null) {
                try {
                    narray.close();
                    narray = null;
                } catch (IOException e1) {
                }
            }
            if (inputDir != null && inputDir.exists()) {
                inputDir.delete();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"inputName,outputName,stripLoggers,tempFile,jin,jout,srcChannel,dstChannel,portletApplicationName,webXml,portletXml,contextXml,src,source,zipEntries,target,webRewriter","inputName:-0.04117316007614136,outputName:-0.028010427951812744,stripLoggers:-0.000804603099822998,tempFile:-0.0630255937576294,jin:-0.1225595474243164,jout:-0.1421075463294983,srcChannel:-0.00025081634521484375,dstChannel:-0.008687913417816162,portletApplicationName:-0.004284977912902832,webXml:-0.11597144603729248,portletXml:-0.04247689247131348,contextXml:-0.006731927394866943,src:-0.3334822654724121,source:-0.5869824290275574,zipEntries:-0.022488176822662354,target:-0.9368970394134521,webRewriter:-0.2657146453857422,",9,63,0,"srcChannel:srcChannel,stripLoggers:stripLoggers,portletApplicationName:portletApplicationName,contextXml:contextXml,dstChannel:dstChannel,zipEntries:zipEntries,outputName:OutputDir,inputName: inputUrl,portletXml:portletEng,tempFile:inputDir,webXml:contextXul,jin:ini,jout:narray,webRewriter: webrewitcher,src:url,",0,Greedy,717,0.30196078221003214,replace,[]
181,"    public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,passwordString,digest,raw,hash",,5,12,0,,0,GA,2173,0.795788582166036,failed,"[';print(encryptPassword)', ';print(raw)', ';print(passText)', ';print(PasswordText)', ';print(passwordText)', ';print( passwordText)', ';print(generester)', ';print(wrap)', ';print(clean)', ';print(RAW)', ';print(feed)', ';print(load)']"
182,"    public static byte[] getJarEntry(String jarName, String entry, int port) {
        byte[] b = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);
            JarURLConnection jurl = (JarURLConnection) url.openConnection();
            JarEntry je = jurl.getJarEntry();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) je.getSize();
            b = new byte[size];
            int rb = 0;
            int chunk = 0;
            while ((size - rb) > 0) {
                chunk = bis.read(b, rb, size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            url = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return b;
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",327,"    public static byte[] getJarEntry(String jarName, String start, int file) {
        byte[] binary = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String writePort = s2.substring(0, x2);
            if (writePort.indexOf(':') == -1) {
                writePort += "":"" + file;
            }
            URL util = new URL(""jar:http://"" + writePort + ""/"" + jarName + ""!/"" + start);
            JarURLConnection Jfile = (JarURLConnection) util.openConnection();
            JarEntry elt = Jfile.getJarEntry();
            InputStream os = Jfile.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(os);
            int SIZE = (int) elt.getSize();
            binary = new byte[SIZE];
            int buf = 0;
            int chunk = 0;
            while ((SIZE - buf) > 0) {
                chunk = bis.read(binary, buf, SIZE - buf);
                if (chunk == -1) {
                    break;
                }
                buf += chunk;
            }
            bis.close();
            os.close();
            bis = null;
            os = null;
            util = null;
            Jfile = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return binary;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk","getJarEntry:-0.00020170211791992188,jarName:-0.0001251697540283203,entry:-0.0005508661270141602,port:-0.0003440380096435547,b:-0.00251692533493042,codebase:0.00029021501541137695,protocol:-0.00021719932556152344,x:-0.00011992454528808594,s2:6.008148193359375e-05,x2:9.47713851928711e-05,downloadHost:-0.000608980655670166,url:-0.002680540084838867,jurl:-0.0021215081214904785,je:-0.0003191828727722168,is:-0.0013019442558288574,bis:-0.004061758518218994,size:-0.0006306171417236328,rb:-0.0009006857872009277,chunk:0.0006850361824035645,",10,34,0,"chunk:chunk,codebase:codebase,x2:x2,s2:s2,x:x,jarName:jarName,getJarEntry:getJarEntry,protocol:protocol,je:elt,port:file,entry:start,downloadHost:writePort,size:SIZE,rb:buf,is:os,jurl:Jfile,b:binary,url:util,",0,Greedy,796,0.2992827971776327,replace,[]
183,"    public static String encryptPassword(String password) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(password.getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            StringBuffer buf = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                int halfbyte = (hash[i] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= halfbyte) && (halfbyte <= 9)) {
                        buf.append((char) ('0' + halfbyte));
                    } else {
                        buf.append((char) ('a' + (halfbyte - 10)));
                    }
                    halfbyte = hash[i] & 0x0F;
                } while (two_halfs++ < 1);
            }
            return buf.toString();
        } catch (Exception e) {
        }
        return null;
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",188,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,password,digest,hash,buf,i,halfbyte,two_halfs",,8,28,0,,0,GA,3626,1.3452293515205382,failed,"[';path = 0', ';print(path)', ';print( digested)', '; digests = 0', ';print(header)', ';print(sha)', ';print(ash)', ';print(cache)', ';print(bin)', ';print(log)', ';print(bug)', ';print(html)', ';print(pkg)', ';I = 0', ';print(littlebit)']"
184,"    private static String genRandomGUID(boolean secure) {
        String valueBeforeMD5 = """";
        String valueAfterMD5 = """";
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
            return valueBeforeMD5;
        }
        long time = System.currentTimeMillis();
        long rand = 0;
        if (secure) {
            rand = mySecureRand.nextLong();
        } else {
            rand = myRand.nextLong();
        }
        sbValueBeforeMD5.append(s_id);
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(time));
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(rand));
        valueBeforeMD5 = sbValueBeforeMD5.toString();
        md5.update(valueBeforeMD5.getBytes());
        byte[] array = md5.digest();
        String strTemp = """";
        for (int i = 0; i < array.length; i++) {
            strTemp = (Integer.toHexString(array[i] & 0XFF));
            if (strTemp.length() == 1) {
                valueAfterMD5 = valueAfterMD5 + ""0"" + strTemp;
            } else {
                valueAfterMD5 = valueAfterMD5 + strTemp;
            }
        }
        return valueAfterMD5.toUpperCase();
    }
 <SPLIT>     public static void init(Locale lng) {
        try {
            Locale toLoad = lng != null ? lng : DEFAULT_LOCALE;
            URL url = ClassLoader.getSystemResource(""locales/"" + toLoad.getISO3Language() + "".properties"");
            if (url == null) {
                url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
            }
            PROPS.clear();
            PROPS.load(url.openStream());
        } catch (IOException ioe) {
            try {
                URL url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
                PROPS.clear();
                PROPS.load(url.openStream());
            } catch (Exception e) {
                e.printStackTrace();
                System.exit(99);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(99);
        }
    }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"genRandomGUID,secure,valueBeforeMD5,valueAfterMD5,md5,sbValueBeforeMD5,time,rand,array,strTemp,i",,9,31,0,,0,GA,5555,2.109078605969747,failed,"[';genRandomGUID = 0', ';print(genRandomGUID)', ';secure = 0', ';valueBeforeMD5 = 0', ';valueAfterMD5 = 0', ';sbValueBeforeMD5 = 0', ';strTemp = 0', '; genRandomUuid = 0', '; genRandomUUID = 0', ';mode = 0', '; strVar = 0']"
185,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",277,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymb(int ConfigION, int programMessageSyncmbID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingFileSymmbol = null;
        Connection directory = null;
        Statement writer = null;
        ResultSet rowSource = null;
        try {
            String work = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + ConfigION + "", "" + programMessageSyncmbID + "")"";
            directory = DriverManager.getConnection(CONN_STR);
            writer = directory.createStatement();
            writer.executeUpdate(work);
            work = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + ConfigION + "" AND "" + ""programMessageSymbolID           = "" + programMessageSyncmbID;
            rowSource = writer.executeQuery(work);
            if (!resultSet.next()) {
                directory.rollback();
                String sg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(sg);
                throw new AdaptationException(sg);
            }
            profilingFileSymmbol = getProfilingMessageSymbol(rowSource);
            directory.commit();
        } catch (SQLException ex) {
            try {
                directory.rollback();
            } catch (Exception e) {
            }
            String sg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(sg, ex);
            throw new AdaptationException(sg, ex);
        } finally {
            try {
                rowSource.close();
            } catch (Exception ex) {
            }
            try {
                writer.close();
            } catch (Exception ex) {
            }
            try {
                directory.close();
            } catch (Exception ex) {
            }
        }
        return profilingFileSymmbol;
    }
;print(programMessageSychid);print(programMessageSyncmbIP);conn = 0;si = 0;communication = 0;Connection = 0;out = 0;expression = 0;writer = 0;message = 0;timeout = 0;condition = 0;Statement = 0;unit = 0; resultS = 0;dataList = 0;ResultType = 0;resultType = 0;ResultRow = 0;ResultLine = 0",LABEL_0,LABEL_0,LABEL_0,1,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg","createNewProfilingMessageSymbol:-0.01551908254623413,configID:-0.002395153045654297,programMessageSymbolID:0.0007175207138061523,profilingMessageSymbol:-0.02173548936843872,connection:0.1090097427368164,statement:-0.011568903923034668,resultSet:0.016046881675720215,query:0.051747679710388184,msg:0.005848526954650879,",9,39,0,"connection:directory,query:work,resultSet:rowSource,msg:sg,programMessageSymbolID:programMessageSyncmbID,configID:ConfigION,statement:writer,createNewProfilingMessageSymbol:createNewProfilingMessageSymb,profilingMessageSymbol:profilingFileSymmbol,",0,Greedy,873,0.3588521480560303,inesrt,"[';print(programMessageSychid)', ';print(programMessageSyncmbIP)', ';conn = 0', ';si = 0', ';communication = 0', ';Connection = 0', ';out = 0', ';expression = 0', ';writer = 0', ';message = 0', ';timeout = 0', ';condition = 0', ';Statement = 0', ';unit = 0', '; resultS = 0', ';dataList = 0', ';ResultType = 0', ';resultType = 0', ';ResultRow = 0', ';ResultLine = 0']"
186,"    public void reset(int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");
            psta.setInt(1, currentPilot);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
 <SPLIT>         public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                InputStream is = con.getInputStream();
                BufferedReader rd = new BufferedReader(new InputStreamReader(is));
                String line;
                StringBuffer response = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    response.append(line);
                    response.append('\n');
                    lastIteraction = System.currentTimeMillis();
                }
                rd.close();
                is.close();
                con.disconnect();
                result = response.toString();
                finish = true;
            } catch (Throwable e) {
                this.e = e;
            }
        }
",70,,LABEL_0,LABEL_0,LABEL_0,-1,"reset,currentPilot,psta",,3,6,0,,0,GA,1278,0.46859128872553507,failed,"[';reset = 0', ';print(reset)', ';currentPilot = 0', ';psta = 0', ';delete = 0', ';set = 0', '; disconnect = 0', ';flush = 0', ';currentPointilot = 0', ';pppa = 0']"
187,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,6,16,0,,0,GA,2565,0.9420598944028219,failed,[';print(copyFile)']
188,"    public boolean actualizarDatosFinal(int idJugadorDiv, int idRonda, jugadorxDivxRonda unjxdxr) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET resultado = ?, puntajeRonda = ? "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatementActFinal(unjxdxr);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
 <SPLIT>     public void importCSV(InputStream csvfile) throws Exception {
        try {
            String[] qmarks = new String[columns.length];
            for (int i = 0; i < qmarks.length; i++) {
                qmarks[i] = ""?"";
            }
            if (cleartable) {
                String delsql = ""delete from "" + table;
                Statement delstm = conn.createStatement();
                delstm.executeUpdate(delsql);
            }
            String sql = ""insert into "" + table + "" ("" + StringUtils.join(columns, "", "") + "") values ("" + StringUtils.join(qmarks, "", "") + "")"";
            log.debug(""SQL: "" + sql);
            PreparedStatement stm = conn.prepareStatement(sql);
            int datatypes[] = new int[columns.length];
            for (int i = 0; i < columns.length; i++) {
                Table tbl = project.getTableByName(table);
                if (tbl == null) throw new OntopiaRuntimeException(""Unknown table: "" + table);
                Column col = tbl.getColumnByName(columns[i]);
                if (col == null) throw new OntopiaRuntimeException(""Unknown table column: "" + columns[i]);
                if (col.getType() == null) throw new OntopiaRuntimeException(""Column type is null: "" + col.getType());
                DataType datatype = project.getDataTypeByName(col.getType(), ""generic"");
                if (datatype == null) throw new OntopiaRuntimeException(""Unknown column type: "" + col.getType());
                String dtype = datatype.getType();
                if (""varchar"".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (""integer"".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(""Unknown datatype: "" + dtype);
            }
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));
            for (int i = 0; i < ignorelines; i++) {
                String line = reader.readLine();
                if (line == null) break;
            }
            log.debug(""["" + StringUtils.join(columns, "", "") + ""]"");
            int lineno = 0;
            while (true) {
                lineno++;
                String line = reader.readLine();
                if (line == null) break;
                try {
                    String[] cols = StringUtils.split(line, separator);
                    if (cols.length > columns.length && !ignorecolumns) log.debug(""Ignoring columns: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    log.debug(""CVALUES: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    String dmesg = ""("";
                    for (int i = 0; i < columns.length; i++) {
                        String col = cols[i];
                        if (stripquotes) {
                            int len = col.length();
                            if (len > 1 && ((col.charAt(0) == '""' && col.charAt(len - 1) == '""') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);
                        }
                        if (col != null && col.equals("""")) col = null;
                        dmesg = dmesg + col;
                        if (i < columns.length - 1) dmesg = dmesg + "", "";
                        stm.setObject(i + 1, col, datatypes[i]);
                    }
                    dmesg = dmesg + "")"";
                    log.debug(dmesg);
                    stm.execute();
                } catch (Exception e) {
                    conn.rollback();
                    throw new OntopiaRuntimeException(""Cannot read line "" + lineno + "": '"" + line + ""'"", e);
                }
            }
            conn.commit();
        } finally {
            if (conn != null) conn.close();
        }
    }
",149,"    public boolean  actualizarDatOSTotal(int idJubadorDiv, int idRonda, jugadorxDivxRonda unjddxxr) {
        int intResult = 0;
        String url = ""UPDATE jugadorxdivxronda "" + "" SET resultado = ?, puntajeRonda = ? "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJubadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(url);
            populatePreparedStatementActFinal(unjddxxr);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"actualizarDatosFinal,idJugadorDiv,idRonda,unjxdxr,intResult,sql,connection,ps","actualizarDatosFinal:0.0024623870849609375,idJugadorDiv:0.00023597478866577148,idRonda:-0.006286263465881348,unjxdxr:0.00013554096221923828,intResult:-0.011367082595825195,sql:-0.005310237407684326,connection:-0.025571703910827637,ps:-0.023044347763061523,",4,7,0,"actualizarDatosFinal: actualizarDatOSTotal,idJugadorDiv:idJubadorDiv,unjxdxr:unjddxxr,sql:url,",0,Greedy,157,0.06067798535029093,replace,[]
189,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",85,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,s,m",,3,8,0,,0,GA,1463,0.5315370321273803,failed,[]
190,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
",70,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,inputFile,outputFile,in,out,c",,6,14,0,,0,GA,2692,0.9694339950879415,failed,"[';copy = 0', ';io = 0', ';cmp = 0', ';sourceFiles = 0', ';currentDir = 0']"
191,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>         public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,12,38,0,,0,GA,5344,1.9755199670791626,failed,"[';compressWithZip = 0', ';print(compressWithZip)', ';fileList = 0', ';print(fileList)', ';compressWithJar = 0', ';print(compressWithJar)', ';compressedWithJar = 0', ';print(compressedWithJar)', ';compresswithSax = 0', ';print(compresswithSax)', ';compressedUsingJar = 0', ';compressInSax = 0', ';compressUsingJar = 0', ';compresswithJar = 0', ';compressedWithSax = 0', ';compressWithSax = 0', ';compressInJar = 0', ';archiveFileDir = 0', ';archiveDirName = 0', ';file = 0', ';FileUrl = 0', '; fileUrl = 0', ';filename = 0', ';filenamename = 0', ';index = 0']"
192,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",420,"    protected void truncate(final File url) {
        LogLog.debug(""Compression of file: "" + url.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(url, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File BackupHome = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(url.lastModified()));
            final File zipFile = new File(BackupHome, url.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(url.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(url));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(url);
                final byte[] comment = new byte[1024];
                int readed;
                while ((readed = fis.read(comment)) != -1) {
                    zos.write(comment, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + url.getAbsolutePath());
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed","truncate:-0.022697746753692627,file:0.005401253700256348,backupRoot:0.004762828350067139,df:-0.0728529691696167,date:-0.026246607303619385,zipFile:-0.08590364456176758,zos:-0.13313329219818115,fis:-0.0780632495880127,entry:-0.10315251350402832,buffer:0.0037220120429992676,readed:-0.0004132390022277832,",3,21,0,"file:url,backupRoot:BackupHome,buffer:comment,",0,Greedy,227,0.08426459232966105,replace,[]
193,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0008141517639160157,,[]
194,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",195,,LABEL_1,LABEL_1,LABEL_1,-1,"createNew,name,in,length,contentType,dest,out,request",,8,20,0,,0,GA,3461,1.3001315275828043,failed,"[';createNew = 0', ';print(createNew)', ';name = 0', ';print(name)', ';in = 0', ';print(in)', ';length = 0', ';contentType = 0', ';createResource = 0', ';createCopy = 0', ';address = 0', ';alias = 0', ';label = 0', ';string = 0', ';number = 0']"
195,"    public void executeUpdateTransaction(List queries) throws SQLException {
        assert connection != null;
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator iterator = queries.iterator();
            while (iterator.hasNext()) {
                String query = (String) iterator.next();
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
            }
            connection.commit();
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
 <SPLIT>     public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }
",120,,LABEL_1,LABEL_1,LABEL_1,-1,"executeUpdateTransaction,queries,autoCommit,iterator,query,statement",,6,13,0,,0,GA,2335,0.8836120088895162,failed,"[';executeUpdateTransaction = 0', ';queries = 0', ';autoCommit = 0', ';iterator = 0', ';query = 0', '; executeUpdateTx = 0', ';executeUpdateStatement = 0', '; executeDatabaseTx = 0', ';expression = 0', ';expression = 0']"
196,"    public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {
        if (key == null || key.length == 0) {
            throw new IllegalArgumentException(""Argument 'key' cannot be null or an empty array."");
        }
        if (salt == null || salt.length == 0) {
            throw new IllegalArgumentException(""Argument 'salt' cannot be null or an empty array."");
        }
        final MessageDigest _md = MessageDigest.getInstance(""MD5"");
        _md.update(key);
        _md.update(MAGIC.getBytes());
        _md.update(salt);
        final MessageDigest md2 = MessageDigest.getInstance(""MD5"");
        md2.update(key);
        md2.update(salt);
        md2.update(key);
        byte[] abyFinal = md2.digest();
        for (int n = key.length; n > 0; n -= 16) {
            _md.update(abyFinal, 0, n > 16 ? 16 : n);
        }
        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int j = 0, i = key.length; i != 0; i >>>= 1) {
            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);
        }
        final StringBuilder sbPasswd = new StringBuilder();
        sbPasswd.append(MAGIC);
        sbPasswd.append(new String(salt));
        sbPasswd.append('$');
        abyFinal = _md.digest();
        for (int n = 0; n < 1000; n++) {
            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");
            if ((n & 1) != 0) {
                md3.update(key);
            } else {
                md3.update(abyFinal);
            }
            if ((n % 3) != 0) {
                md3.update(salt);
            }
            if ((n % 7) != 0) {
                md3.update(key);
            }
            if ((n & 1) != 0) {
                md3.update(abyFinal);
            } else {
                md3.update(key);
            }
            abyFinal = md3.digest();
        }
        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };
        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
        to64(sbPasswd, anFinal[11], 2);
        return sbPasswd.toString();
    }
 <SPLIT>     private String encode(String str) {
        StringBuffer buf = new StringBuffer();
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(str.getBytes());
            byte bytes[] = md5.digest();
            for (int i = 0; i < bytes.length; i++) {
                String s = Integer.toHexString(bytes[i] & 0xff);
                if (s.length() == 1) {
                    buf.append(""0"");
                }
                buf.append(s);
            }
        } catch (Exception ex) {
        }
        return buf.toString();
    }
",906,,LABEL_1,LABEL_0,,-4,"md5Crypt,key,salt,_md,md2,abyFinal,n,j,i,sbPasswd,md3",,,,0,,0,Greedy,1,0.000865638256072998,,[]
197,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
",68,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,2078,0.7540615876515706,failed,"[';copyFile = 0', ';source = 0', ';CopyFiles = 0', ';transferFiles = 0', ';index = 0', ';target = 0', ';prefix = 0']"
198,"    public static InputStream getStreamFromSystemIdentifier(String systemId, EntityResolver resolver) throws Exception {
        InputSource source = null;
        InputStream stream = null;
        if (resolver != null) {
            try {
                source = resolver.resolveEntity(null, systemId);
            } catch (Exception e) {
                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to resolve '"" + systemId + ""'"");
                LogService.instance().log(LogService.ERROR, e);
            }
        }
        if (source != null) {
            try {
                stream = source.getByteStream();
            } catch (Exception e) {
                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to get bytestream from '"" + source.getSystemId() + ""'"");
                LogService.instance().log(LogService.ERROR, e);
            }
        }
        if (stream == null) {
            URL url = new URL(systemId);
            stream = url.openStream();
        }
        return stream;
    }
 <SPLIT>     public InputStream loadResource(String location) throws GenericConfigException {
        URL url = getURL(location);
        try {
            return url.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);
        }
    }
",189,,LABEL_0,LABEL_0,LABEL_0,-1,"getStreamFromSystemIdentifier,systemId,resolver,source,stream,url",,6,20,0,,0,GA,2424,0.9015209039052328,failed,"[';stream = 0', ';customId = 0', ';customid = 0', ';Resol = 0', ';container = 0', ';print(container)', ';print(path)', ';print(sl)', ';print(seed)', ';print(secure)', ';print(context)', ';print(large)', ';print(class)', ';print(null)', ';print(ssl)', ';print(web)']"
199,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"doVersionCheck,view,url,in,bin,line,develBuild,stableBuild",,5,20,0,,0,GA,3537,1.3339945236841837,failed,"[';Line = 0', ';print(LINE)']"
200,"    @Override
    public InputStream getResourceByClassName(String className) {
        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (url == null) {
            return null;
        } else {
            try {
                return url.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",64,"    @Override
    public InputStream getResourceByFileName(String ClassType) {
        URL path = resourceFetcher.getResource(""/fisce_scripts/"" + ClassType + "".class"");
        if (path == null) {
            return null;
        } else {
            try {
                return path.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
;getResourceByClassName = 0;className = 0",LABEL_0,LABEL_0,LABEL_0,1,"getResourceByClassName,className,url","getResourceByClassName:-0.0001704096794128418,className:0.00027620792388916016,url:0.0003527402877807617,",3,6,0,"url:path,className:ClassType,getResourceByClassName:getResourceByFileName,",0,Greedy,101,0.03582740624745687,inesrt,"[';getResourceByClassName = 0', ';className = 0']"
201,"    private boolean checkHashBack(Facade facade, HttpServletRequest req) {
        String txtTransactionID = req.getParameter(""txtTransactionID"");
        String txtOrderTotal = req.getParameter(""txtOrderTotal"");
        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);
        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);
        String txtHashBack = req.getParameter(""txtHashBack"");
        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);
        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(securityValue.getBytes());
            byte[] array = digest.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            String hash = sb.toString();
            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + hash + "" "" + txtHashBack);
            if (txtHashBack.equals(hash)) {
                return true;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return false;
    }
 <SPLIT>     public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
",260,,LABEL_1,LABEL_1,LABEL_1,-1,"checkHashBack,facade,req,txtTransactionID,txtOrderTotal,txtShopId,txtArtCurrency,txtHashBack,hashSeed,securityValue,digest,array,sb,j,b,hash",,15,45,0,,0,GA,7024,2.6533169110616046,failed,"[';checkHashBack = 0', ';facade = 0', ';req = 0', ';securityValue = 0', ';digest = 0', ';array = 0', '; checkHashBACK = 0', ';checkHashback = 0', ';checkSumBACK = 0', ';url = 0', ';print(url)', ';secureFile = 0', ';print(secureFile)', ';print(secureString)', ';print(hashest)', ';print(signest)', ';print(hashHash)', ';print(address)', ';print(error)', ';print(audio)', ';print(length)', ';print(ind)', ';print(password)']"
202,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",131,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,7,22,0,,0,GA,2881,1.1761549830436706,failed,"[';copy = 0', ';print(copy)', ';fileFrom = 0', ';fileTo = 0', ';exec = 0', ';send = 0', ';print(resourceTarget)']"
203,"    private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",166,,LABEL_1,LABEL_1,LABEL_1,-1,"addFileToTarGz,taro,path,base,f,entryName,goIn,tarEntry,children,child",,10,33,0,,0,GA,4481,1.6570513804753622,failed,"[';print(entryName)', ';print(PATH)', ';folder = 0', ';print(folder)', ';print(directory)', ';print(EntryType)', ';print(elementType)', ';resourcename = 0', ';print(resourcename)', ';output = 0', ';print(output)', ';print(jobs)']"
204,"    public static String getFileContentFromPlugin(String path) {
        URL url = getURLFromPlugin(path);
        StringBuffer sb = new StringBuffer();
        try {
            Scanner scanner = new Scanner(url.openStream());
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                sb.append(line + ""\n"");
            }
            scanner.close();
        } catch (Exception e) {
            e.printStackTrace();
            return """";
        }
        return sb.toString();
    }
 <SPLIT>     protected void doSetInput(IEditorInput input, IProgressMonitor monitor) throws CoreException {
        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
        IFileFormat format = null;
        Object source = null;
        InputStream in = null;
        try {
            IPath path;
            if (input instanceof IStorageEditorInput) {
                IStorage s = ((IStorageEditorInput) input).getStorage();
                in = s.getContents();
                if (s instanceof IFile) {
                    IFile file = (IFile) s;
                    path = file.getRawLocation();
                    if (root.exists(path)) {
                        path = root.getLocation().append(path);
                    }
                    source = path.toFile();
                }
            } else if (input instanceof IPathEditorInput) {
                path = ((IPathEditorInput) input).getPath();
                source = path.toFile();
            } else if (input instanceof IURIEditorInput) {
                URI uri = ((IURIEditorInput) input).getURI();
                if (URIUtil.isFileURI(uri)) {
                    source = URIUtil.toFile(uri);
                } else {
                    URL url = URIUtil.toURL(uri);
                    in = url.openStream();
                }
            }
            if (source == null) {
                if (!in.markSupported()) {
                    in = new BufferedInputStream(in);
                }
                in.mark(10);
                source = in;
            }
            IContentDescription cd = Platform.getContentTypeManager().getDescriptionFor(in, input.getName(), new QualifiedName[] { ImageCore.VALID_FORMATS });
            if (in != null) {
                in.reset();
            }
            Collection<?> valid = (Collection<?>) cd.getProperty(ImageCore.VALID_FORMATS);
            if (valid.isEmpty()) throw new CoreException(new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""Unsupported file format.""));
            ImageInputStream stream = ImageIO.createImageInputStream(source);
            format = (IFileFormat) valid.iterator().next();
            IDocument document = format.decode(stream, monitor);
            setDocument(document);
        } catch (IOException e) {
            Status status = new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""IO Error"", e);
            throw new CoreException(status);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        super.setInput(input);
    }
",103,,LABEL_0,LABEL_0,LABEL_0,-1,"getFileContentFromPlugin,path,url,sb,scanner,line",,6,14,0,,0,GA,2757,1.0384325981140137,failed,"[';getFileContentFromPlugin = 0', ';path = 0', ';sb = 0', ';line = 0', ';getFileContentfromFile = 0', ';getFileContentFormModule = 0', ';getFileContentFromModule = 0', ';PATH = 0', ';location = 0', ';string = 0', ';pattern = 0']"
205,"    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);
        if (delegate == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError(""errors.session""));
            saveErrors(request, errors);
            return mapping.findForward(""fail"");
        }
        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();
        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();
        String urlSonido = traAyudaPantalla.getUrlSonido();
        if (urlSonido == null) {
            return null;
        }
        URL url = new URL(urlSonido);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        String tipoMime = urlConnection.getContentType();
        log.debug(""Tipo Mime: "" + tipoMime);
        Map audioOptions = new HashMap();
        if (tipoMime.indexOf(""audio"") != -1 || tipoMime.indexOf(""asf"") != -1 || tipoMime.equals(""unknown/unknown"")) {
            audioOptions.put(""id"", ""MediaPlayer"");
            audioOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");
            audioOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");
            audioOptions.put(""mimeType"", ""application/x-mplayer2"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");
        } else if (tipoMime.indexOf(""real"") != -1) {
            audioOptions.put(""id"", ""RVOCX"");
            audioOptions.put(""codeBase"", """");
            audioOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");
            audioOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", """");
        }
        request.setAttribute(""audioOptions"", audioOptions);
        log.debug(""entra success"");
        return mapping.findForward(""success"");
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",406,,LABEL_0,LABEL_0,LABEL_0,-1,"execute,mapping,form,request,response,delegate,errors,ayudaPantalla,traAyudaPantalla,urlSonido,url,urlConnection,tipoMime,audioOptions",,14,53,0,,0,GA,6454,2.5168243169784548,failed,[]
206,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
",264,,LABEL_1,LABEL_1,LABEL_1,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,8,30,0,,0,GA,3384,1.2758761485417685,failed,[]
207,"    private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(args[0]);
            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod(""PUT"");
            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());
            out.write(""fatal error"");
            out.close();
            System.out.println(""end"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",361,,LABEL_0,LABEL_1,,-4,"forBundle,manip,bout,zout,bundle,files,url,name,mf,tmpFile,ref",,,,0,,0,Greedy,1,0.0006221373875935873,,[]
208,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     public void testHttpsConnection() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);
            checkConnectionStateParameters(connection, peerSocket);
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",68,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,1579,0.5838595589001974,failed,[]
209,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",765,"    public void Conversion(File url, File dest) throws IOException {
        InputStream isin = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(isin);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(isin.read());
                        b2 = isin.read();
                        b3 = isin.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(isin.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            isin.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",4,18,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:dest,inflate:inflate,in:isin,convert:Conversion,format:url,src:url,",0,Greedy,437,0.1748634894688924,replace,[]
210,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     public void Load(String fname) throws Exception {
        File f = null;
        try {
            if ("""".equals(fname) || fname == null) throw new Exception();
            System.out.println(""Loading mapfile "" + fname);
        } catch (Exception e) {
            throw new Exception(""File not found"");
        }
        aType = null;
        fieldtype.clear();
        creatures.clear();
        aElement = new String("""");
        content = null;
        Ax = -1;
        Ay = -1;
        aTemplate = -1;
        SAXParserFactory factory = SAXParserFactory.newInstance();
        data_read = 0;
        URL url = this.game.mainClass.getClassLoader().getResource(fname);
        if (url == null) {
            throw new Exception(""Can't load map from : "" + fname);
        }
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(url.openStream(), this);
        } catch (Exception e) {
            System.out.println(""Can't open XML : "" + e);
        }
        for (int i = 0; i < fieldtype.size(); i++) {
            System.out.println((MapField) fieldtype.get(i));
        }
        game.player.setpos(start_x, start_y);
        System.out.println(""Player starting position set"");
        start_x = -1;
        start_y = -1;
        System.out.println(""Map \"""" + fname + ""\"" loaded"");
    }
",672,,LABEL_0,LABEL_1,,-4,"sendExceptionToServer,server,ex,config,prob,dataSB,trace",,,,0,,0,Greedy,1,0.0008055448532104492,,[]
211,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream src = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = src.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        src.close();
        dest.close();
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",98,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream url = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = url.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        url.close();
        dest.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,srcFile,destFile,src,dest,buffer,read","copyFile:6.842613220214844e-05,srcFile:-0.000705420970916748,destFile:-0.0005786418914794922,src:0.003243386745452881,dest:0.0024904608726501465,buffer:-0.0001875162124633789,read:-0.0005959272384643555,",1,3,0,"src:url,",0,Greedy,73,0.026618548234303794,replace,[]
212,"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",127,,LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex",,7,22,0,,0,GA,3097,1.1371642748514812,failed,"[';slice = 0', ';pack = 0', ';char = 0']"
213,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,2250,0.8224582314491272,failed,"[';parser = 0', ';on_disk = 0', ';Serialize = 0', '; serialization = 0', ';output = 0', ';string = 0', ';off_delete = 0', ';on_delete = 0']"
214,"    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",105,"    public void http(InputStream url, ContentHandler event, Metadata mx, ParseContext config) throws IOException, SAXException, TikaException {
        Stypeg name = mx.get(Metadata.RESOURCE_NAME_KEY);
        if (type != null && wanted.containsKey(type)) {
            FileOutputStream copy = new FileOutputStream(wanted.get(type));
            IOUtils.copy(url, copy);
            copy.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.http(url, event, mx, config);
            }
        }
    }
",LABEL_1,LABEL_1,0.6399157047271729,1,"parse,stream,handler,metadata,context,name,out",,7,19,0,"parse:http,stream:url,handler:event,metadata:mx,context:config,name:type,out:copy,",0,GA,2096,0.7996987104415894,ga,[]
215,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",1387,,LABEL_1,LABEL_0,,-4,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e",,,,0,,0,Greedy,1,0.0012333830197652181,,[]
216,"    public static String eventHash(String eventstr) {
        try {
            if (md == null) {
                md = MessageDigest.getInstance(""MD5"");
            }
            md.update(eventstr.getBytes(""utf-8""));
            byte[] theDigest = md.digest();
            return new BASE64Encoder().encode(theDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"eventHash,eventstr,md,theDigest",,4,9,0,,0,GA,1764,0.6404462218284607,failed,"[';eventHash = 0', ';eventstr = 0', ';md = 0', ';byteDig = 0', ';bytehash = 0']"
217,"    public InputSource resolveEntity(String publicId, String systemId) {
        String resolved = getResolvedEntity(publicId, systemId);
        if (resolved != null) {
            try {
                InputSource iSource = new InputSource(resolved);
                iSource.setPublicId(publicId);
                URL url = new URL(resolved);
                InputStream iStream = url.openStream();
                iSource.setByteStream(iStream);
                return iSource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);
                return null;
            }
        }
        return null;
    }
 <SPLIT>     public void dorequest(Map<String, String> ps, String method) throws IOException {
        StringBuffer httpResponse = new StringBuffer();
        URL ourl = new URL(url);
        HttpURLConnection httpConnection = (HttpURLConnection) ourl.openConnection();
        httpConnection.setRequestMethod(method);
        httpConnection.setDoOutput(true);
        this.setCookie(httpConnection);
        OutputStream httpOutputStream = httpConnection.getOutputStream();
        StringBuffer postParams = new StringBuffer("""");
        for (Entry<String, String> entry : ps.entrySet()) {
            postParams.append(entry.getKey());
            postParams.append(""="");
            postParams.append(entry.getValue());
            postParams.append(""&"");
        }
        httpOutputStream.write(postParams.toString().getBytes());
        BufferedReader httpBufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        httpResponse.append(this.readBufferedContent(httpBufferedReader));
        text = httpResponse.toString();
        this.readCookie(httpConnection);
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"resolveEntity,publicId,systemId,resolved,iSource,url,iStream",,6,15,0,,0,GA,2992,1.099344289302826,failed,"[';resolveEntity = 0', ';print(resolveEntity)', ';publicId = 0', ';resolvingEnt = 0', ';reolveEntity = 0', ';reserveEntity = 0', ';resolveentity = 0', ';resolvedentity = 0', ';productionid = 0', '; systemName = 0', ';SystemId = 0', ';SystemName = 0']"
218,"    public static String getPagina(String strurl) {
        String resp = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL url = new URL(strurl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                resp += str;
            }
            in.close();
        } catch (MalformedURLException e) {
            resp = e.toString();
        } catch (IOException e) {
            resp = e.toString();
        } catch (Exception e) {
            resp = e.toString();
        }
        return resp;
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",133,"    public static String getPaguina(String strstring) {
        String serv = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL path = new URL(strstring);
            BufferedReader in = new BufferedReader(new InputStreamReader(path.openStream()));
            String read;
            while ((read = in.readLine()) != null) {
                serv += read;
            }
            in.close();
        } catch (MalformedURLException e) {
            serv = e.toString();
        } catch (IOException e) {
            serv = e.toString();
        } catch (Exception e) {
            serv = e.toString();
        }
        return serv;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getPagina,strurl,resp,url,in,str","getPagina:5.08427619934082e-05,strurl:-0.012820780277252197,resp:-0.009851157665252686,url:-0.0007947683334350586,in:-0.01653236150741577,str:-0.004519760608673096,",5,14,0,"getPagina:getPaguina,url:path,str:read,resp:serv,strurl:strstring,",0,Greedy,212,0.07743651866912842,replace,[]
219,"    private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",286,"    private void test(String[] md, int i) throws IOException {
        CommandFormat arc = new CommandFormat(""tail"", 1, 1, ""f"");
        String url = null;
        Path file = null;
        try {
            List<String> references = arc.parse(md, i);
            url = references.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean Fopt = arc.getOpt(""f"") ? true : false;
        file = new Path(url);
        FileSystem srcFs = file.getFileSystem(getConf());
        if (srcFs.isDirectory(file)) {
            throw new IOException(""Source must be a file."");
        }
        long lineSize = srcFs.getFileStatus(file).getLen();
        long attribute = (lineSize > 1024) ? lineSize - 1024 : 0;
        while (true) {
            FSDataInputStream serv = srcFs.open(file);
            serv.seek(attribute);
            IOUtils.copyBytes(serv, System.out, 1024, false);
            attribute = serv.getPos();
            serv.close();
            if (!foption) {
                break;
            }
            lineSize = srcFs.getFileStatus(file).getLen();
            attribute = (lineSize > attribute) ? attribute : lineSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"tail,cmd,pos,c,src,path,parameters,foption,srcFs,fileSize,offset,in","tail:-0.004339814186096191,cmd:0.002637922763824463,pos:-0.0008369088172912598,c:-0.0030273795127868652,src:-0.0006420612335205078,path:-0.018740952014923096,parameters:-0.00030535459518432617,foption:-0.015520691871643066,srcFs:-0.01696866750717163,fileSize:-0.07296991348266602,offset:-0.0373263955116272,in:-0.034481942653656006,",11,40,0,"cmd:md,parameters:references,src:url,pos:i,c:arc,tail:test,foption:Fopt,srcFs:srcFs,path:file,in:serv,offset:attribute,fileSize:lineSize,",0,Greedy,571,0.2086789608001709,replace,[]
220,"        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
 <SPLIT>         protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {
            if (!this.hasError()) {
                try {
                    StringWriter xmlSourceWriter = new StringWriter();
                    IOUtils.copy(url.openStream(), xmlSourceWriter);
                    processSubmittedDoap(xmlSourceWriter.toString());
                } catch (FileNotFoundException e) {
                    Session.get().error(invalidUrlMsg);
                    logger.warn(""Error processing URL: "" + invalidUrlMsg);
                } catch (IOException e) {
                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    logger.warn(""Error processing URL: "" + url + ""; "" + e.getMessage(), e);
                }
            }
        }
",72,"        public void Copy(File files, File tf) throws IOException {
            FileChannel init = (new FileInputStream(files)).getChannel();
            FileChannel writer = (new FileOutputStream(tf)).getChannel();
            init.transferTo(0, files.length(), writer);
            init.close();
            writer.close();
        }
;copy = 0",LABEL_1,LABEL_1,LABEL_1,1,"copy,s,t,in,out","copy:0.0005920529365539551,s:6.598234176635742e-05,t:-9.554624557495117e-05,in:0.0001157522201538086,out:0.0007964372634887695,",5,12,0,"out:writer,copy:Copy,in:init,s:files,t:tf,",0,Greedy,215,0.07601365645726522,inesrt,[';copy = 0']
221,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] files = dir.listFiles(ff);
                for (File f : files) {
                    try {
                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        newFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(newFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(newFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
 <SPLIT>     protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
",280,,LABEL_0,LABEL_0,LABEL_0,-1,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,8,23,0,,0,GA,3614,1.3550763765970866,failed,[]
222,"    void addDataFromURL(URL theurl) {
        String line;
        InputStream in = null;
        try {
            in = theurl.openStream();
            BufferedReader data = new BufferedReader(new InputStreamReader(in));
            while ((line = data.readLine()) != null) {
                thetext.append(line + ""\n"");
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            thetext.append(theurl.toString());
        }
        try {
            in.close();
        } catch (Exception e) {
        }
    }
 <SPLIT>     public static String md5Hash(String src) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(src.getBytes());
            return bytesArrayToHexString(md.digest());
        } catch (Exception e) {
            return null;
        }
    }
",115,,LABEL_0,LABEL_0,LABEL_0,-1,"addDataFromURL,theurl,line,in,data,e",,5,12,0,,0,GA,2710,0.9867026726404826,failed,"[';addDataFromURL = 0', ';theurl = 0', ';addDataFromUrl = 0', ';addDatafromurl = 0', ';addDataWithURL = 0']"
223,"    @Override
    public void doIt() {
        try {
            Shared.createBackup(""articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos"");
            if (mode.equals(""FTP"")) {
                FTPClient client = new FTPClient();
                client.connect(Constants.ftpHost);
                client.login(Constants.ftpUser, Constants.ftpPass);
                client.changeDirectory(Constants.ftpDir);
                File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);
                client.download(""GT99_A09.rar"", ff);
                client.disconnect(false);
                Shared.prepareMovements(ff);
            } else if (mode.equals(""File"")) {
                JFileChooser jfc = new JFileChooser();
                FileFilter f = new ExtensionFileFilter(""Traslados de Total Pos"", ""rar"");
                jfc.setFileFilter(f);
                int selection = jfc.showOpenDialog(Shared.getMyMainWindows());
                if (selection == JFileChooser.APPROVE_OPTION) {
                    Shared.prepareMovements(jfc.getSelectedFile());
                } else {
                    return;
                }
            }
            Shared.updateMovements();
            if (Shared.isHadMovements()) {
                MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, ""Fue cargado el nuevo inventario satisfactoriamente!"");
                msg.show(Shared.getMyMainWindows());
            } else {
                MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, ""La tienda no tuvo ningun movimiento asociado."");
                msg.show(Shared.getMyMainWindows());
            }
        } catch (Exception ex) {
            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, ""Ha ocurrido un error."", ex);
            msg.show(Shared.getMyMainWindows());
        }
    }
 <SPLIT>     private String getResultFromHttpUrl(String href) {
        String result = null;
        try {
            URL url = new URL(href);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Object o = conn.getContent();
            log.debug(""Opened "" + href + "" and got class "" + o.getClass().getName());
            StringBuffer version = new StringBuffer();
            String inputLine;
            DataInputStream dis = new DataInputStream(conn.getInputStream());
            while ((inputLine = dis.readLine()) != null) {
                version.append(inputLine + ""\n"");
            }
            result = version.toString();
            log.debug(""Read from URL:\n"" + result);
            dis.close();
        } catch (Exception e) {
            log.debug(""Caught exception "" + e + "" whilst attempting to query URL "" + href);
            e.printStackTrace();
        } finally {
            return result;
        }
    }
",304,,LABEL_0,LABEL_0,LABEL_0,-1,"doIt,client,ff,jfc,f,selection,msg",,7,24,0,,0,GA,2838,1.0943755308787029,failed,"[';doIt = 0', ';client = 0', ';ff = 0', ';message = 0', ';lang = 0', ';kg = 0', ';print(get)', ';file = 0']"
224,"    public static void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            byte[] buf = new byte[1024];
            int c = -1;
            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
        } finally {
            in.close();
            out.close();
        }
    }
 <SPLIT>     public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
",97,"    public static void download(File url, File name) throws FileNotFoundException, IOException {
        FileInputStream is = new FileInputStream(url);
        FileOutputStream cache = new FileOutputStream(name);
        try {
            byte[] bl = new byte[1024];
            int ci = -1;
            while ((ci = is.read(bubl > 0) cache.write(bl, 0, ci);
        } finally {
            is.close();
            cache.close();
        }
    }
",LABEL_1,LABEL_1,0.5842416882514954,1,"copy,src,dest,in,out,buf,c",,7,17,0,"copy:download,src:url,dest:name,in:is,out:cache,buf:bl,c:ci,",0,GA,1073,0.4212358514467875,ga,[]
225,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",212,"    public void  rewrite(Map<String, String> output, TargetPage output) {
        try {
            URL address = new URL(output.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(address.openStream()));
            String file = null;
            while ((file = reader.readLine()) != null) {
                for (Map.Entry<String, String> her : output.entrySet()) {
                    if (file.indexOf(output.getInclude()) != -1) {
                        int  fromSection = file.indexOf(output.getFromStr());
                        String ar = file.substring( fromSection + output.getFromStr().length(), file.indexOf(output.getToStr(),  fromSection));
                        her.setValue(ar);
                        file = file.substring(file.indexOf(output.getToStr()) + output.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"handler,result,target,url,reader,line,entry,fromIndex,r","handler:0.0009961724281311035,result:-0.0008586645126342773,target:0.005533099174499512,url:-0.007734775543212891,reader:-0.05191683769226074,line:0.008171260356903076,entry:0.005395829677581787,fromIndex:0.0009613037109375,r:0.0021334290504455566,",8,29,0,"line:file,target:output,entry:her,r:ar,handler: rewrite,fromIndex: fromSection,result:output,url:address,",0,Greedy,370,0.13408989508946736,replace,[]
226,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static boolean copyTextFile(File src, File dst) {
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[1024];
            int readsize = 0;
            while ((readsize = bis.read(buf)) != -1) {
                bos.write(buf, 0, readsize);
            }
            bos.flush();
            bos.close();
            bis.close();
        } catch (IOException e) {
            ServerConsoleServlet.printSystemLog(e.toString() + "" "" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);
            return false;
        }
        return true;
    }
",765,"    public void convert(File url, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",1,5,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:dest,inflate:inflate,in:in,convert:convert,format:format,src:url,",0,Greedy,437,0.17099373340606688,replace,[]
227,"    void addDataFromURL(URL theurl) {
        String line;
        InputStream in = null;
        try {
            in = theurl.openStream();
            BufferedReader data = new BufferedReader(new InputStreamReader(in));
            while ((line = data.readLine()) != null) {
                thetext.append(line + ""\n"");
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            thetext.append(theurl.toString());
        }
        try {
            in.close();
        } catch (Exception e) {
        }
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",115,,LABEL_0,LABEL_1,,-4,"addDataFromURL,theurl,line,in,data,e",,,,0,,0,Greedy,1,0.0005430102348327637,,[]
228,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })
    public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {
        File dir = File.createTempFile(""javascript"", """" + System.currentTimeMillis());
        StringBuilder name = new StringBuilder();
        try {
            if (dir.delete() && dir.mkdirs()) {
                File minDir = new File(dir, ""min"");
                minDir.mkdir();
                File combineFile = new File(minDir, ""script.js"");
                File concatFile = new File(minDir, ""concat.js"");
                Writer combineWriter = new FileWriter(combineFile);
                Writer concatWriter = new FileWriter(concatFile);
                final List<Boolean> fails = new LinkedList<Boolean>();
                boolean first = true;
                for (Node link : linkJs) {
                    String path = ((Element) link).getAttribute(""src"");
                    URL url = new URL(buildUrl(base, path));
                    InputStream inputStream = url.openStream();
                    File jsFile = new File(dir, fileName(url));
                    FileOutputStream outputStream = new FileOutputStream(jsFile);
                    IOUtils.copy(inputStream, outputStream);
                    outputStream.close();
                    inputStream.close();
                    if (!first) {
                        combineWriter.write(""\n;\n"");
                        concatWriter.write(""\n;\n"");
                    } else {
                        first = false;
                    }
                    if (Configuration.jsMinification()) {
                        Reader reader = new FileReader(jsFile);
                        try {
                            JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {

                                @Override
                                public void warning(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                }

                                @Override
                                public void error(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                }

                                @Override
                                public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                    return null;
                                }
                            });
                            jsCompressor.compress(combineWriter, 0, false, false, true, true);
                        } catch (Exception e) {
                            fails.add(true);
                        }
                        reader.close();
                    }
                    Reader reader = new FileReader(jsFile);
                    IOUtils.copy(reader, concatWriter);
                    reader.close();
                    String fileName = jsFile.getName();
                    int pos = fileName.lastIndexOf('.');
                    if (pos >= 0) {
                        fileName = fileName.substring(0, pos);
                    }
                    name.append(fileName).append("","");
                }
                combineWriter.close();
                concatWriter.close();
                FileReader reader;
                if (fails.size() == 0 && Configuration.jsMinification()) {
                    reader = new FileReader(combineFile);
                } else {
                    reader = new FileReader(concatFile);
                }
                name.append(hashCode(IOUtils.toString(reader))).append("".js"");
                reader.close();
                File targetFile = new File(Configuration.getJsLocalDir(), name.toString());
                if (!targetFile.exists()) {
                    targetFile.getParentFile().mkdirs();
                    if (fails.size() == 0 && Configuration.jsMinification()) {
                        FileUtils.copyFile(combineFile, targetFile);
                    } else {
                        FileUtils.copyFile(concatFile, targetFile);
                    }
                    newFiles.add(targetFile);
                    logger.info(""Combined several js files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");
                }
            }
        } finally {
            FileUtils.deleteQuietly(dir);
        }
        if (name.length() != 0) {
            Element element = (Element) linkJs.get(0);
            element.setAttribute(""src"", Configuration.getJsUrlPrefix() + name.toString());
            return element;
        } else {
            return null;
        }
    }
",86,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,src,dst,in,out,buf,len",,3,7,0,,0,GA,2481,0.9742530663808187,failed,"[';copyFile = 0', ';src = 0', ';dst = 0', ';in = 0', ';out = 0', ';buf = 0', ';sin = 0', ';ddfd = 0', ';ststs = 0', ';fdsp = 0', ';cur = 0']"
229,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
 <SPLIT>     public ArrayList<String> showTopLetters() {
        int[] tempArray = new int[engCountLetters.length];
        char[] tempArrayLetters = new char[abcEng.length];
        ArrayList<String> resultTopFiveLetters = new ArrayList<String>();
        tempArray = engCountLetters.clone();
        tempArrayLetters = abcEng.clone();
        int tempCount;
        char tempLetters;
        for (int j = 0; j < (abcEng.length * abcEng.length); j++) {
            for (int i = 0; i < abcEng.length - 1; i++) {
                if (tempArray[i] > tempArray[i + 1]) {
                    tempCount = tempArray[i];
                    tempLetters = tempArrayLetters[i];
                    tempArray[i] = tempArray[i + 1];
                    tempArrayLetters[i] = tempArrayLetters[i + 1];
                    tempArray[i + 1] = tempCount;
                    tempArrayLetters[i + 1] = tempLetters;
                }
            }
        }
        for (int i = tempArrayLetters.length - 1; i > tempArrayLetters.length - 6; i--) {
            resultTopFiveLetters.add(tempArrayLetters[i] + "":"" + tempArray[i]);
        }
        return resultTopFiveLetters;
    }
",142,,LABEL_0,LABEL_0,LABEL_0,-1,"readPage,ignoreComments,in,inputLine,html",,0,0,0,,0,GA,2347,0.8740737120310466,failed,[]
230,"    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
",75,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,UnsupportedEncodingException,md,raw,hash",,6,12,0,,0,GA,2584,0.9316504240036011,failed,"[';encrypt = 0', ';plaintext = 0', ';UnsupportedEncodingException = 0', ';UnsupportedEncgorithmError = 0']"
231,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     private String cookieString(String url, String ip) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());
            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);
            return null;
        }
    }
",68,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,2007,0.7295508980751038,failed,"[';copyFiles = 0', ';transferfile = 0', ';CopyFile = 0', ';CopyFiles = 0', ';transferFiles = 0', ';index = 0', ';string = 0', ';slice = 0']"
232,"    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
 <SPLIT>     public void importSequences() {
        names = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helper = new ImportHelper(new InputStreamReader(is));
            int ch = helper.read();
            while (ch != '>') {
                ch = helper.read();
            }
            do {
                String line = helper.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, "" \t"");
                String name = tokenizer.nextToken();
                StringBuffer seq = new StringBuffer();
                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);
                ch = helper.getLastDelimiter();
                names.add(name);
                sequences.add(seq.toString());
            } while (ch == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
",201,,LABEL_0,LABEL_0,LABEL_0,-1,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s",,9,24,0,,0,GA,5187,1.934266412258148,failed,"[';print(testCodingEmptyFile)', ';print(baos)', ';print(channel)', ';params = 0', ';print(params)', ';outbuf = 0', ';print(outbuf)', ';metrics = 0', ';print(metrics)', ';encoder = 0', ';print(encoder)', ';tmpFile = 0', ';print(tmpFile)', ';testCodingZeroFile = 0', ';print(testCodingZeroFile)', ';testCachingEmptyStream = 0', ';testCachingEmptyFiles = 0', ';print(testCachingEmptyFiles)', ';testCachingOfFile = 0', ';print(testCachingOfFile)', ';reader = 0', ';console = 0', ';socket = 0', ';outputcb = 0', ';outputbuf = 0', ';outputqueue = 0']"
233,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] files = dir.listFiles(ff);
                for (File f : files) {
                    try {
                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        newFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(newFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(newFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
 <SPLIT>     public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
",280,,LABEL_1,LABEL_1,LABEL_1,-1,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,6,19,0,,0,GA,3679,1.397982366879781,failed,"[';copyOverWarFile = 0', ';dir = 0', ';ff = 0', ';files = 0', ';f = 0', ';fo = 0', ';copyoverwarFiles = 0', ';copyOverWebfile = 0', ';copyoverWarPath = 0', ';copyoverwarPath = 0', ';copyOverWarFiles = 0', ';copyOverWARFiles = 0', ';copyOverWebPath = 0', ';copyOverWarfile = 0', ';copyOverWarPath = 0', ';copyOverWARPath = 0', ';copyoverWarfile = 0', ';copyoverWarFiles = 0', ';md = 0', '; directory = 0', ';cache = 0', ';direct = 0', ';Dir = 0', ';directory = 0', ';DIR = 0', ';director = 0', ';andDir = 0']"
234,"    private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",106,,LABEL_1,LABEL_1,LABEL_1,-1,"copyJar,src,dst,srcChannel,dstChannel",,5,14,0,,0,GA,2162,0.7848039110501607,failed,"[';print(src)', ';print(CopyJam)', ';print(core)', ';print(ls)', ';files = 0', ';print(files)', ';print(storage)', ';print(sel)']"
235,"    HttpRepository(Path path) throws IOException {
        super(path);
        this.url = new URL(path.toURLString());
        HttpURLConnection.setFollowRedirects(true);
        this.connection = (HttpURLConnection) url.openConnection();
        this.ns = Names.getNamespace(path);
    }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",61,,LABEL_0,LABEL_0,LABEL_0,-1,"IOException,url,connection,ns",,4,5,0,,0,GA,1219,0.44706002871195477,failed,[]
236,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",84,,LABEL_1,LABEL_1,LABEL_1,-1,"extractResourceToFile,resourcePath,dest,in,out",,5,13,0,,0,GA,2091,0.7671099265416463,failed,[]
237,"    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",126,,LABEL_1,LABEL_1,LABEL_1,-1,"getMessageDigest,digest,node,external,messageDigest",,5,14,0,,0,GA,2157,0.7971542994181315,failed,"[';getMessageDigest = 0', ';digest = 0', ';node = 0', ';messageDigest = 0', ';getMessageHashester = 0', ';getMessageHashature = 0', ';address = 0', ';target = 0']"
238,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",99,"    static File copy(File in, File url) throws IOException {
        FileChannel inchannel = new FileInputStream(in).getChannel();
        FileChannel inConnection = new FileOutputStream(url).getChannel();
        try {
            inchannel.transferTo(0, inchannel.size(), inConnection);
            return url;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inchannel != null) inchannel.close();
            if (inConnection != null) inConnection.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,inChannel,outChannel","copy:-0.00040799379348754883,in:0.00038695335388183594,out:0.0005803704261779785,inChannel:0.0006763935089111328,outChannel:0.0005936026573181152,",3,12,0,"inChannel:inchannel,outChannel:inConnection,out:url,",0,Greedy,138,0.05460511048634847,replace,[]
239,"    public synchronized String encrypt(String plaintext) throws Exception {
        StringBuffer sb = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",122,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,sb,md,raw,hash",,4,9,0,,0,GA,2384,0.8859247446060181,failed,"[';encrypt = 0', ';dig = 0', ';message = 0', ';print(message)', ';print(instance)', ';print(base)']"
240,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                log.warn(""\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");
            } else {
                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
                long outageID = -1;
                ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                if (seqRS.next()) {
                    outageID = seqRS.getLong(1);
                }
                seqRS.close();
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, outageID);
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, nodeID);
                newOutageWriter.setString(4, ipAddr);
                newOutageWriter.setLong(5, serviceID);
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                newOutageWriter.executeUpdate();
                newOutageWriter.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            }
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeLostService\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",211,,LABEL_0,LABEL_0,LABEL_0,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,12,38,0,,0,GA,5452,2.12723335425059,failed,[]
241,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,4,12,0,,0,GA,2182,0.8128309329350789,failed,"[';serialize = 0', ';out = 0', ';parser = 0', ';on_disk = 0', ';Serialize = 0', ';Serialization = 0', ';filename = 0', ';off_space = 0', ';off_delete = 0', ';onnetdisk = 0']"
242,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL url = ClassLoader.getSystemResource(propsName);
        try {
            props.load(url.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",59,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL cl = ClassLoader.getSystemResource(propsName);
        try {
            props.load(cl.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"load,propsName,props,url","load:-0.00074005126953125,propsName:-0.00011342763900756836,props:0.0002779960632324219,url:0.0003142356872558594,",1,2,0,"url:cl,",0,Greedy,55,0.019387650489807128,replace,[]
243,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public static String fetch(String reference) throws IOException {
        URL url = new URL(reference);
        HttpURLConnection c = (HttpURLConnection) url.openConnection();
        c.setRequestMethod(""GET"");
        c.setDoOutput(true);
        c.setRequestProperty(""Content-Type"", ""text/xml; charset=UTF-8"");
        return parseISToString(c.getInputStream());
    }
",78,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,tmp,md",,4,9,0,,0,GA,1759,0.6392629384994507,failed,"[';getMD5 = 0', ';print(getMD5)', ';print(source)', ';print(tmp)', ';print(md)', ';print(getSHA4)']"
244,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
",99,"    static File copy(File url, File url) throws IOException {
        FileChannel  inchannel = new FileInputStream(url).getChannel();
        FileChannel inConnection = new FileOutputStream(url).getChannel();
        try {
             inchannel.transferTo(0,  inchannel.size(), inConnection);
            return url;
        } catch (IOException e) {
            throw e;
        } finally {
            if ( inchannel != null)  inchannel.close();
            if (inConnection != null) inConnection.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,inChannel,outChannel","copy:-0.00040799379348754883,in:0.00038695335388183594,out:0.0005803704261779785,inChannel:0.0006763935089111328,outChannel:0.0005936026573181152,",4,14,0,"inChannel: inchannel,outChannel:inConnection,out:url,in:url,",0,Greedy,176,0.06280803680419922,replace,[]
245,"    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",105,,LABEL_1,LABEL_1,LABEL_1,-1,"parse,stream,handler,metadata,context,name,out",,7,19,0,,0,GA,3290,1.200892456372579,failed,[]
246,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf(""://"") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
",288,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,0,0,0,,0,GA,3637,1.3750154376029968,failed,[]
247,"    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",63,"    public static URL addToSlive(Pod post, ZipOutputStream podArchiveIOFile, String sequence, InputStream slice) throws IOException {
        ZipEntry index = new ZipEntry(sequence);
        podArchiveIOFile.putNextEntry(index);
        IOUtilsslicesource, podArchiveIOFile);
        podArchiveIOFile.closeEntry();
        return PodArchiveResolver.withinPodArchive(post, sequence);
    }
",LABEL_1,LABEL_1,0.5837959051132202,1,"addToArchive,pod,podArchiveOutputStream,filename,source,entry",,6,14,0,"addToArchive:addToSlive,pod:post,podArchiveOutputStream:podArchiveIOFile,filename:sequence,source:slice,entry:index,",0,GA,1444,0.5560470859209696,ga,[]
248,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL url = new URL(""http"", HOST, FILE);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",129,"    private static InputStream getCMSResultAsStream(String rQLquery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL path = new URL(""http"", HOST, FILE);
            URLConnection conn = path.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rQLquery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getCMSResultAsStream,rqlQuery,osr,url,conn","getCMSResultAsStream:-6.449222564697266e-05,rqlQuery:6.562471389770508e-05,osr:-7.790327072143555e-05,url:1.9848346710205078e-05,conn:-4.178285598754883e-05,",2,4,0,"rqlQuery:rQLquery,url:path,",0,Greedy,91,0.032971171538035075,replace,[]
249,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = new FileInputStream(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                int count;
                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0007306456565856934,,[]
250,"    protected boolean checkLink(URL url) {
        try {
            URLConnection connection = url.openConnection();
            connection.connect();
            return true;
        } catch (IOException e) {
            MsgLog.error(""DapParser.checkLink(): IOException: "" + e.toString());
            return false;
        }
    }
 <SPLIT>     public int updateuser(User u) {
        int i = 0;
        Connection conn = null;
        PreparedStatement pm = null;
        try {
            conn = Pool.getConnection();
            conn.setAutoCommit(false);
            pm = conn.prepareStatement(""update user set username=?,passwd=?,existstate=?,management=? where userid=?"");
            pm.setString(1, u.getUsername());
            pm.setString(2, u.getPasswd());
            pm.setInt(3, u.getExiststate());
            pm.setInt(4, u.getManagement());
            pm.setString(5, u.getUserid());
            i = pm.executeUpdate();
            conn.commit();
            Pool.close(pm);
            Pool.close(conn);
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            Pool.close(pm);
            Pool.close(conn);
        } finally {
            Pool.close(pm);
            Pool.close(conn);
        }
        return i;
    }
",56,,LABEL_0,LABEL_0,LABEL_0,-1,"checkLink,url,connection",,3,5,0,,0,GA,1275,0.4654958883921305,failed,"[';checkLink = 0', ';url = 0', ';connection = 0', '; checkLine = 0', ';loadLine = 0', ';CheckLine = 0', ';address = 0', ';position = 0']"
251,"    public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
 <SPLIT>     public String kodetu(String testusoila) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        try {
            md.update(testusoila.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",173,,LABEL_1,LABEL_1,LABEL_1,-1,"md5String,str,md,hash,hexChars,res,i",,7,23,0,,0,GA,3064,1.1458181500434876,failed,[]
252,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
 <SPLIT>     public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == jbutton) {
            try {
                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";
                URL servleturl = new URL(toservlet);
                URLConnection servletconnection = servleturl.openConnection();
                servletconnection.setDoInput(true);
                servletconnection.setDoOutput(true);
                servletconnection.setUseCaches(false);
                servletconnection.setDefaultUseCaches(false);
                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                inputFromClient.readByte();
                OutputStream fos = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");
                byte[] buf = new byte[1024];
                int bytesread;
                while ((bytesread = inputFromClient.read(buf)) > -1) {
                    fos.write(buf, 0, bytesread);
                }
                inputFromClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"logonToServer,ftpClient,ftpAddress,noRetries,remoteHomeDir,noRetriesSoFar,reply",,1,1,0,,0,GA,3438,1.3140752196311951,failed,"[';logonToServer = 0', ';print(logonToServer)', ';ftpClient = 0', ';print(ftpClient)', ';ftpAddress = 0', ';print(ftpAddress)', ';noRetries = 0', ';print(noRetries)', ';remoteHomeDir = 0', ';noRetriesSoFar = 0', ';print(noRetriesSoFar)', ';logOnFromRemote = 0', ';print(logOnFromRemote)', ';logOnFromClient = 0', ';logonTOGuest = 0', ';logonTORemote = 0', ';ftcpAPI = 0', ';ftpaClient = 0', ';ctpPort = 0', ';ftbclient = 0', ';ftbConn = 0', ';ftcpPort = 0', ';ctcpConnect = 0', ';ftpConnect = 0', ';ftcpContext = 0', ';ftprPort = 0', ';ftcConnection = 0', '; ftpcContext = 0', ';ftpaPort = 0', ';ftcpConnection = 0', ';ftpaCenter = 0', ';ftbPort = 0', '; ftpConnection = 0', ';ftpConnection = 0', '; ftpcConnection = 0', '; ftpaCenter = 0', ';ctcpPort = 0', ';ctpPort = 0', '; ftpaddress = 0', ';ctoPort = 0', ';ftportaddress = 0', ';ftportPort = 0', ';status = 0', ';queue = 0']"
253,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public void execute() {
        try {
            if (methods == null) {
                return;
            }
            List<Resource> resources = new ArrayList<Resource>();
            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                if (!classFile.getName().equals(CALLSTACK_FILE)) {
                    try {
                        InputStream inputStream = classFile.getInputStream();
                        ClassReader reader = new ClassReader(inputStream);
                        reader.accept(new MethodAnalyzer(), 0);
                        resources.add(classFile);
                        oldSize += classFile.getSize();
                    } catch (IllegalStateException e) {
                    }
                }
            }
            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                try {
                    InputStream inputStream = classFile.getInputStream();
                    ClassReader reader = new ClassReader(inputStream);
                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {
                        reader.accept(new MethodInjector(writer), 0);
                        byte[] b = writer.toByteArray();
                        inputStream.close();
                        OutputStream outputStream = classFile.getOutputStream();
                        outputStream.write(b);
                        outputStream.close();
                        injectedClasses++;
                    }
                } catch (IllegalStateException e) {
                }
                newSize += classFile.getSize();
            }
            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);
            if (!classFile.exists()) {
                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");
            }
            InputStream inputStream = new FileInputStream(classFile);
            ClassReader reader = new ClassReader(inputStream);
            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
            try {
                reader.accept(new PushMethodGenerator(writer), 0);
            } finally {
                inputStream.close();
            }
            byte[] b = writer.toByteArray();
            inputStream.close();
            OutputStream outputStream = new FileOutputStream(classFile);
            outputStream.write(b);
            outputStream.close();
            log(injectedClasses + "" classes injected"");
            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");
            log((100 - ((oldSize * 100) / newSize)) + ""% code size increase"");
        } catch (IOException e) {
            log(e, 0);
        }
    }
",120,"    public static void copyFile(String outPlace, String againPlace) {
        File url = new File(outPlace);
        File part = new File(againPlace);
        try {
            FileChannel outConnection = new FileInputStream(url).getChannel();
            FileChannel inchannel = new FileOutputStream(part).getChannel();
            try {
                outConnection.transferTo(0, outConnection.size(), inchannel);
            } finally {
                if (outConnection != null) outConnection.close();
                if (inchannel != null) inchannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,inFile,outFile,in,out,inChannel,outChannel","copyFile:0.0013982653617858887,inFile:2.276897430419922e-05,outFile:-0.0002726912498474121,in:0.0002452731132507324,out:0.00022113323211669922,inChannel:9.566545486450195e-05,outChannel:6.079673767089844e-05,",6,17,0,"copyFile:copyFile,in:url,out:part,inChannel:outConnection,outChannel:inchannel,inFile:outPlace,outFile:againPlace,",0,Greedy,238,0.08878070116043091,replace,[]
254,"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",127,,LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex",,7,22,0,,0,GA,3099,1.1405029137929281,failed,"[';encryptPassword = 0', ';password = 0', ';encryptedPassword = 0', ';EncipherString = 0', ';encipherString = 0', ';attribute = 0']"
255,"    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",153,,LABEL_1,LABEL_1,LABEL_1,-1,"is,name,contentType,index,extension,isImage,isAux,out,bufferedImage,inputStream",,10,28,0,,0,GA,4374,1.6106527686119079,failed,[]
256,"    @SuppressWarnings(""unchecked"")
    public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {
        StringBuilder json = new StringBuilder();
        String requestUrl = ""http://api.meetup.com/events.json/?group_urlname="" + groupIdentifier + ""&key="" + key;
        try {
            URL url = new URL(requestUrl.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                json.append(inputLine);
            }
            in.close();
        } catch (IOException e) {
            throw new GtugsException(e);
        }
        List<Event> events = new ArrayList<Event>();
        JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());
        JSONArray results = (JSONArray) jsonObj.get(""results"");
        for (int i = 0; i < results.size(); i++) {
            JSONObject result = (JSONObject) results.get(i);
            Event e = new Event();
            e.setAttendeeCount(Integer.parseInt((String) result.get(""rsvpcount"")));
            e.setCity((String) result.get(""venue_city""));
            e.setDescription((String) result.get(""description""));
            e.setLatitude(Double.parseDouble((String) result.get(""venue_lat"")));
            e.setLongitude(Double.parseDouble((String) result.get(""venue_lon"")));
            e.setName((String) result.get(""name""));
            Date myDate = null;
            String time = (String) result.get(""time"");
            try {
                myDate = meetupDateFormat.parse(time);
                e.setStartTime(timeDateFormat.format(myDate));
                e.setEndTime(timeDateFormat.format(myDate));
                e.setStartDate(myDate);
                e.setEndDate(myDate);
                String tz = tzDateFormat.format(myDate);
                if (tz != null && tz.startsWith(""+"")) {
                    tz = tz.substring(1);
                }
                e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));
            } catch (ParseException ex) {
                ex.printStackTrace();
                continue;
            }
            e.setState((String) result.get(""venue_state""));
            StringBuilder addressBuilder = new StringBuilder();
            if (result.get(""venue_address1"") != null) {
                addressBuilder.append((String) result.get(""venue_address1"") + "" "");
            }
            if (result.get(""venue_address2"") != null) {
                addressBuilder.append((String) result.get(""venue_address2"") + "" "");
            }
            if (result.get(""venue_address3"") != null) {
                addressBuilder.append((String) result.get(""venue_address3"") + "" "");
            }
            if (result.get(""venue_address4"") != null) {
                addressBuilder.append((String) result.get(""venue_address4""));
            }
            e.setStreetAddress(addressBuilder.toString().trim());
            e.setZipCode((String) result.get(""venue_zip""));
            e.setUrl((String) result.get(""event_url""));
            events.add(e);
        }
        return events;
    }
 <SPLIT>             @Override
            public void handledRun() throws Throwable {
                try {
                    URL url = new URL(ONLINE_CLIENT_DATA + ""gamedata.xml"");
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    int lastversion = 0;
                    String readHeader1 = br.readLine();
                    String readHeader2 = br.readLine();
                    String[] parts = readHeader2.split("" "");
                    lastversion = new Integer(parts[1]);
                    GameDatabase.loadVersion();
                    if (GameDatabase.version < lastversion) {
                        Logger.log(LogTypes.LOG, ""Downloading new gamedata"");
                        BufferedOutputStream bo = null;
                        File destfile = new File(GameDatabase.dataFilePath);
                        if (!destfile.createNewFile()) {
                            destfile.delete();
                            destfile.createNewFile();
                        }
                        bo = new BufferedOutputStream(new FileOutputStream(destfile));
                        bo.write((readHeader1 + ""\n"").getBytes());
                        bo.write((readHeader2 + ""\n"").getBytes());
                        int readedbyte;
                        while ((readedbyte = br.read()) != -1) {
                            bo.write(readedbyte);
                        }
                        bo.flush();
                        try {
                            br.close();
                            bo.close();
                        } catch (Exception ex) {
                            Logger.log(ex);
                        }
                    }
                } catch (java.net.UnknownHostException unknownHost) {
                    Logger.log(""Sourceforge is down, cannot update gamedata"");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), ""The gamedata is outdated, but Coopnet couldn't update it!"", ""Gamedata outdated"", JOptionPane.INFORMATION_MESSAGE);
                    throw e;
                } finally {
                    GameDatabase.loadVersion();
                    GameDatabase.load("""", GameDatabase.dataFilePath);
                    GameDatabase.detectGames();
                }
            }
",692,,LABEL_1,LABEL_0,,-4,"lookupFutureEvents,groupIdentifier,json,requestUrl,url,in,inputLine,events,jsonObj,results,i,result,e,myDate,time,tz",,,,0,,0,Greedy,1,0.000879983107248942,,[]
257,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     public List load(String sourceType, Object source, String param) throws Exception {
        if (log.isTraceEnabled()) {
            log.trace(""load "" + source);
        }
        String location = null;
        String type = null;
        Object inputsource = null;
        if (source instanceof DynamicMBean) {
            sourceType = ""MbeansDescriptorsDynamicMBeanSource"";
            inputsource = source;
        } else if (source instanceof URL) {
            URL url = (URL) source;
            location = url.toString();
            type = param;
            inputsource = url.openStream();
            if (sourceType == null) {
                sourceType = sourceTypeFromExt(location);
            }
        } else if (source instanceof File) {
            location = ((File) source).getAbsolutePath();
            inputsource = new FileInputStream((File) source);
            type = param;
            if (sourceType == null) {
                sourceType = sourceTypeFromExt(location);
            }
        } else if (source instanceof InputStream) {
            type = param;
            inputsource = source;
        } else if (source instanceof Class) {
            location = ((Class) source).getName();
            type = param;
            inputsource = source;
            if (sourceType == null) {
                sourceType = ""MbeansDescriptorsIntrospectionSource"";
            }
        }
        if (sourceType == null) {
            sourceType = ""MbeansDescriptorsDigesterSource"";
        }
        ModelerSource ds = getModelerSource(sourceType);
        List mbeans = ds.loadDescriptors(this, location, type, inputsource);
        return mbeans;
    }
",862,,LABEL_0,LABEL_1,,-4,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,0,,0,Greedy,1,0.0009666760762532552,,[]
258,"    public void loadExistingAntlibs(ClassLoader classLoader) {
        URL antlibUrl;
        URI antlibUri;
        try {
            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                InputStream stream = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, ""UTF-8""));
                for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                    String pkg = line.trim();
                    URI uri = URI.create(""antlib:"" + pkg);
                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? """" : ""/"") + ""antlib.xml"");
                    antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);
                    try {
                        antlibUrl = antlibUri.toURL();
                    } catch (IllegalArgumentException e) {
                        System.err.println(""base uri: "" + url);
                        System.err.println(""relativepath: "" + resource2antlib);
                        System.err.println(""target uri: "" + antlibUri);
                        throw new RuntimeException(antlibUri.toString(), e);
                    }
                    loadAntLib(antlibUrl, uri);
                }
                reader.close();
                stream.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",306,,LABEL_1,LABEL_1,LABEL_1,-1,"loadExistingAntlibs,classLoader,antlibUrl,antlibUri,resources,url,stream,reader,line,pkg,uri,resource2antlib",,11,35,0,,0,GA,5758,2.2067002216974894,failed,"[';Line = 0', ';print(Line)', ';print(file)', ';print(resource2ntibl)']"
259,"    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",163,,LABEL_0,LABEL_0,LABEL_0,-1,"exists,fileToCheck,ftp,found,reply",,5,19,0,,0,GA,2314,0.9144104441006978,failed,"[';print(fileToCheck)', ';exits = 0', ';print(exits)', ';filetocheck = 0', ';stringToTest = 0']"
260,"    public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession session = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (mapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            session.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                session.setAttribute(""classifyResult"", ccBean);
                session.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (mapping.findForward(status));
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",807,,LABEL_0,LABEL_0,LABEL_0,-1,"perform,mapping,form,request,response,status,session,reportingBean,conceptBean,conceptName,primitive,errorMessages,logonUtilities,namespace,roleMods,roleGrps,roles,roleCons",,15,71,0,,0,GA,8408,3.7561524748802184,failed,[]
261,"    public String getmd5(String password) {
        String pwHash = """";
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(password.getBytes());
            byte[] b = md.digest();
            for (int i = 0; i < b.length; i++) {
                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.fatal(""MD5 Hash Algorithm not found"", ex);
        }
        Logger.info(""PWHash erzeugt und wird übergeben"");
        return pwHash;
    }
 <SPLIT>     private boolean checkHashBack(Facade facade, HttpServletRequest req) {
        String txtTransactionID = req.getParameter(""txtTransactionID"");
        String txtOrderTotal = req.getParameter(""txtOrderTotal"");
        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);
        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);
        String txtHashBack = req.getParameter(""txtHashBack"");
        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);
        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(securityValue.getBytes());
            byte[] array = digest.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            String hash = sb.toString();
            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + hash + "" "" + txtHashBack);
            if (txtHashBack.equals(hash)) {
                return true;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return false;
    }
",136,,LABEL_1,LABEL_1,LABEL_1,-1,"getmd5,password,pwHash,md,b,i",,5,14,0,,0,GA,2773,1.0406132578849792,failed,"[';getmd5 = 0', ';password = 0', ';pwHash = 0', ';getmd6 = 0', ';getmn5 = 0', ';getmetadata6 = 0', ';getmd512 = 0', ';address = 0', ';string = 0', ';number = 0', ';attribute = 0']"
262,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] files = dir.listFiles(ff);
                for (File f : files) {
                    try {
                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        newFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(newFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(newFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
 <SPLIT>     public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
",280,,LABEL_1,LABEL_1,LABEL_1,-1,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,6,19,0,,0,GA,3575,1.3493235985438028,failed,"[';copyOverWebfile = 0', ';copyoverWarPath = 0', ';copyoverwarPath = 0', ';copyOverWebFiles = 0', ';copyOverWarFiles = 0', ';copyOverWARFiles = 0', ';copyOverWebPath = 0', ';copyOverWarPath = 0', ';copyOverWARPath = 0', ';copyoverwarfile = 0', ';direct = 0', ';handle = 0', ';DIR = 0', ';direction = 0', ';oldDir = 0']"
263,"    public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {
        String fileName = file.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(file);
        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();
        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel channelFrom = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage img = javax.imageio.ImageIO.read(workingFile);
                int height = img.getHeight();
                file.setHeight(height);
                int width = img.getWidth();
                file.setWidth(width);
            }
            String folderPath = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);
            java.io.File directory = new java.io.File(folderPath);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",461,"    public static void savefileData(File part, File destination, java.io.File largeDatModule) throws Exception {
        String fileName = part.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(part);
        DotResourceCache hw = CacheLocator.getVeloctyResourceCache();
        hw.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel ChannelOrigin = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel routeFlo = new FileOutputStream(newVersionFile).getChannel();
            ChannelOrigin.transferTo(0, ChannelOrigin.size(), routeFlo);
            routeFlo.force(false);
            routeFlo.close();
            ChannelOrigin.close();
        }
        if (largeDatModule != null) {
            FileChannel  writeNewConnection = new FileOutputStream(workingFile).getChannel();
             writeNewConnection.truncate(0);
            FileChannel fromChannel = new FileInputStream(largeDatModule).getChannel();
            fromChannel.transferTo(0, fromChannel.size(),  writeNewConnection);
             writeNewConnection.force(false);
             writeNewConnection.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage url = javax.imageio.ImageIO.read(workingFile);
                int height = url.getHeight();
                part.setHeight(height);
                int width = url.getWidth();
                part.setWidth(width);
            }
            String folderPoint = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(part);
            java.io.File directory = new java.io.File(folderPoint);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
;saveFileData = 0;file = 0;destination = 0;fileName = 0;assetsPath = 0;channelFrom = 0;writeCurrentChannel = 0;fromChannel = 0;width = 0;folderPath = 0;directory = 0;path = 0;queue = 0;targetination = 0;newVersionDir = 0",LABEL_1,LABEL_1,LABEL_1,1,"saveFileData,file,destination,newDataFile,fileName,assetsPath,workingFile,vc,is,channelFrom,newVersionFile,channelTo,writeCurrentChannel,fromChannel,img,height,width,folderPath,directory,files","saveFileData:-0.012965142726898193,file:-0.012732625007629395,destination:-0.005759775638580322,newDataFile:-0.038285136222839355,fileName:-0.0019899606704711914,assetsPath:-8.559226989746094e-05,workingFile:-0.005331873893737793,vc:-0.01432889699935913,is:-0.0033682584762573242,channelFrom:-0.03195083141326904,newVersionFile:-0.006187081336975098,channelTo:-0.026532471179962158,writeCurrentChannel:-0.025850355625152588,fromChannel:-0.00932466983795166,img:-0.009685873985290527,height:0.001957535743713379,width:-0.003134310245513916,folderPath:-0.00991523265838623,directory:-0.0008804798126220703,files:0.003711104393005371,",9,31,0,"files:files,height:height,assetsPath:assetsPath,directory:directory,fileName:fileName,width:width,is:is,workingFile:workingFile,destination:destination,newVersionFile:newVersionFile,fromChannel:fromChannel,img:url,folderPath:folderPoint,file:part,saveFileData:savefileData,vc:hw,writeCurrentChannel: writeNewConnection,channelTo:routeFlo,channelFrom:ChannelOrigin,newDataFile:largeDatModule,",0,Greedy,1290,0.5196235815684,inesrt,"[';saveFileData = 0', ';file = 0', ';destination = 0', ';fileName = 0', ';assetsPath = 0', ';channelFrom = 0', ';writeCurrentChannel = 0', ';fromChannel = 0', ';width = 0', ';folderPath = 0', ';directory = 0', ';path = 0', ';queue = 0', ';targetination = 0', ';newVersionDir = 0']"
264,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",765,"    public void Conversion(File url, File img) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean showsPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflATE = showsPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int txln = p.getReadLength();
            if (showsPixelData) {
                if (inflATE) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    txln = txln * 4 / 3;
                }
                if (txln != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (showsPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = txln + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) txln);
                    out.write((byte) (txln >> 8));
                    out.write((byte) (txln >> 16));
                    out.write((byte) (txln >> 24));
                }
                if (inflATE) {
                    int b2, b3;
                    for (; txln > 0; txln -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; txln > 0; --txln) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",8,40,0,"pxlen:txln,hasPixelData:showsPixelData,dest:img,inflate:inflATE,in:login,convert:Conversion,format:url,src:url,",0,Greedy,437,0.17375578880310058,replace,[]
265,"    public static String eventHash(String eventstr) {
        try {
            if (md == null) {
                md = MessageDigest.getInstance(""MD5"");
            }
            md.update(eventstr.getBytes(""utf-8""));
            byte[] theDigest = md.digest();
            return new BASE64Encoder().encode(theDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"eventHash,eventstr,md,theDigest",,4,9,0,,0,GA,1353,0.5064059813817342,failed,"[';eventHash = 0', ';eventstr = 0', ';byteDig = 0', ';bytehash = 0']"
266,"    public String insertSmsInf(Sms sms) throws Exception {
        String smsId = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append(""INSERT INTO COMTNSMS\n"");
            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n"");
            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n"");
            buffer.append(""VALUES\n"");
            buffer.append(""(?, ?, ?, ?, SYSDATE())"");
            conn = SmsBasicDBUtil.getConnection();
            conn.setAutoCommit(false);
            smsId = getNextId(conn);
            pstmt = conn.prepareStatement(buffer.toString());
            int index = 0;
            pstmt.setString(++index, smsId);
            pstmt.setString(++index, sms.getTrnsmitTelno());
            pstmt.setString(++index, sms.getTrnsmitCn());
            pstmt.setString(++index, sms.getFrstRegisterId());
            pstmt.executeUpdate();
            conn.commit();
            return smsId;
        } catch (Exception ex) {
            if (conn != null) {
                conn.rollback();
            }
            throw ex;
        } finally {
            SmsBasicDBUtil.close(null, pstmt, conn);
        }
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",228,"    public String insertSmsInf(Sms sms) throws Exception {
        String smsId = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        StringBuffer file = new StringBuffer();
        try {
            file.append(""INSERT INTO COMTNSMS
"");
            file.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,
"");
            file.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )
"");
            file.append(""VALUES
"");
            file.append(""(?, ?, ?, ?, SYSDATE())"");
            conn = SmsBasicDBUtil.getConnection();
            conn.setAutoCommit(false);
            smsId = getNextId(conn);
            pstmt = conn.prepareStatement(file.toString());
            int index = 0;
            pstmt.setString(++index, smsId);
            pstmt.setString(++index, sms.getTrnsmitTelno());
            pstmt.setString(++index, sms.getTrnsmitCn());
            pstmt.setString(++index, sms.getFrstRegisterId());
            pstmt.executeUpdate();
            conn.commit();
            return smsId;
        } catch (Exception ex) {
            if (conn != null) {
                conn.rollback();
            }
            throw ex;
        } finally {
            SmsBasicDBUtil.close(null, pstmt, conn);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"insertSmsInf,sms,smsId,conn,pstmt,buffer,index,ex","insertSmsInf:-0.008899509906768799,sms:-0.0009566545486450195,smsId:0.07214170694351196,conn:0.09268265962600708,pstmt:0.017741620540618896,buffer:-0.020080268383026123,index:0.003343522548675537,ex:0.0028505921363830566,",1,7,0,"conn:conn,smsId:smsId,pstmt:pstmt,index:index,ex:ex,sms:sms,insertSmsInf:insertSmsInf,buffer:file,",0,Greedy,542,0.20025691191355388,replace,[]
267,"    public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",139,"    public void transport(File url) throws TransportException {
        if (url.exists()) {
            if (url.isDirectory()) {
                File[] facts = url.listFiles();
                for (int i = 0; i < facts.length; i++) {
                    transport(url);
                }
            } else if (url.isFile()) {
                try {
                    FileChannel InMessage = new FileInputStream(url).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    InMessage.transferTo(0, InMessage.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"transport,file,files,i,inChannel,outChannel","transport:-0.0015049576759338379,file:0.0031203627586364746,files:0.001358330249786377,i:-0.0014026165008544922,inChannel:0.0005943179130554199,outChannel:0.004166364669799805,",3,12,0,"outChannel:outChannel,file:url,files:facts,inChannel:InMessage,",0,Greedy,166,0.059232751528422035,replace,[]
268,"    static String encrypt(String plaintext) {
        MessageDigest d = null;
        try {
            d = MessageDigest.getInstance(""SHA-1"");
            d.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new String(Base64.encodeBase64(d.digest()));
    }
 <SPLIT>     public String downloadAndOpen(JProgressBar bar) {
        long size = 0;
        try {
            size = photo.getSize();
        } catch (ServiceException ex) {
            ex.printStackTrace();
        }
        try {
            bar.setMaximum((int) size);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        bar.setValue(0);
        image = new File(""TMP/"" + photo.getTitle().getPlainText());
        try {
            if (!image.exists()) {
                image.createNewFile();
                image.deleteOnExit();
                URL url = null;
                BufferedOutputStream fOut = null;
                try {
                    url = new URL(photo.getMediaContents().get(0).getUrl());
                    InputStream html = null;
                    html = url.openStream();
                    fOut = new BufferedOutputStream(new FileOutputStream(image));
                    byte[] buffer = new byte[32 * 1024];
                    int bytesRead = 0;
                    int in = 0;
                    while ((bytesRead = html.read(buffer)) != -1) {
                        in += bytesRead;
                        bar.setValue(in);
                        fOut.write(buffer, 0, bytesRead);
                    }
                    html.close();
                    fOut.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return image.getAbsolutePath();
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,d",,0,0,0,,0,GA,1099,0.4075450619061788,failed,"[';encrypt = 0', ';plaintext = 0', ';d = 0', '; encipher = 0', '; plainbinary = 0']"
269,"    public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",1472,,LABEL_1,LABEL_0,,-4,"saveProject,file,types,images,trajectories,databasesIncluded,onlyLinks,index,name,format,count,version,writer,xmlDir,databases,t,type,currentName,baseCopy,source,destination,clefs,st,rs",,,,0,,0,Greedy,1,0.0027617494265238444,,[]
270,"    @Test
    public void testIdentification() {
        try {
            String username = ""muchu"";
            String password = ""123"";
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            LogService logServiceMock = EasyMock.createMock(LogService.class);
            DbService dbServiceMock = EasyMock.createMock(DbService.class);
            userServ.setDbServ(dbServiceMock);
            userServ.setLogger(logServiceMock);
            logServiceMock.info(DbUserServiceImpl.class, "">>>identification "" + username + ""<<<"");
            IFeelerUser user = new FeelerUserImpl();
            user.setUsername(username);
            user.setPassword(new String(md5.digest()));
            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);
            EasyMock.replay(logServiceMock, dbServiceMock);
            Assert.assertTrue(userServ.identification(username, password));
            EasyMock.verify(logServiceMock, dbServiceMock);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""At RandomGUID !!!"", e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.error(""At RandomGUID !!!"", e);
        }
    }
",199,,LABEL_1,LABEL_1,LABEL_1,-1,"testIdentification,username,password,md5,logServiceMock,dbServiceMock,user",,6,22,0,,0,GA,3265,1.3072826941808064,failed,[';print(md5)']
271,"    private void doFinishLoadAttachment(long attachmentId) {
        if (attachmentId != mLoadAttachmentId) {
            return;
        }
        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);
        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);
        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);
        if (mLoadAttachmentSave) {
            try {
                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);
                InputStream in = getContentResolver().openInputStream(contentUri);
                OutputStream out = new FileOutputStream(file);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, file, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(contentUri);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(intent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
 <SPLIT>     @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEnCours;
            int i = 0;
            informations = """";
            while ((ligneEnCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        version = ligneEnCours;
                        break;
                    case 1:
                        url = ligneEnCours;
                        break;
                    default:
                        informations += ligneEnCours + '\n';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
",266,,LABEL_0,LABEL_0,LABEL_0,-1,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent",,9,27,0,,0,GA,4126,1.5711140950520834,failed,"[';print(doFinishloadAttachments)', ';print(doFinishLoadInstments)', ';doFinishloadAttments = 0', ';doFinishloadAttortion = 0', ';doFinishLoadAttachortion = 0', ';doFinishLoadAssment = 0', ';doFinishLoadAssments = 0', ';doFinishLoadAttachments = 0', ';attentionType = 0', ';socket = 0', ';copy = 0', ';socket = 0', ';copy = 0', ';output = 0', ';lock = 0']"
272,"    public static void copy(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 <SPLIT>     private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
",364,,LABEL_1,LABEL_0,,-4,"copy,from_name,to_name,from_file,to_file,parent,dir,from,to,buffer,bytes_read",,,,0,,0,Greedy,1,0.0006268819173177084,,[]
273,"    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
 <SPLIT>     protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(""POST"");
            request.setDoOutput(true);
            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
            out.print(getParametersString(parameters));
            out.flush();
            out.close();
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",403,,LABEL_0,LABEL_1,,-4,"setContenu,contenuFichier,fichierElectronique,utilisateurCourant,support,ficheDocument,nomFichier,extension,fichierElectroniqueExistant,idIgid,inputStream,outputStream,typeMime,tailleFichier",,,,0,,0,Greedy,1,0.0006832122802734375,,[]
274,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",86,"    public static void  copyStream(File url, File stst) throws IOException {
        InputStream impl = new FileInputStream(url);
        OutputStream oouter= new FileOutputStream(stst);
        byte[] cap = new byte[1024];
        int all;
        while ((len allmpl.read(bucap > 0) outer.write(cap, 0, all);
        impl.close();
        outer.close();
    }
",LABEL_1,LABEL_1,0.5879977941513062,1,"copyFile,src,dst,in,out,buf,len",,7,17,0,"copyFile: copyStream,src:url,dst:stst,in:impl,out:outer,buf:cap,len:all,",0,GA,965,0.37682900031407673,ga,"[';copyFile = 0', ';CopyFile = 0', ';is = 0']"
275,"    private String getFullClassName(URL url, String className) throws Exception {
        JarInputStream jis = new JarInputStream(url.openStream());
        ZipEntry zentry = null;
        while ((zentry = jis.getNextEntry()) != null) {
            String name = zentry.getName();
            int lastPos = name.lastIndexOf("".class"");
            if (lastPos < 0) {
                continue;
            }
            name = name.replace('/', '.');
            int pos = -1;
            if (className != null) {
                pos = name.indexOf(className);
                if (pos >= 0 && name.length() == pos + className.length() + 6) {
                    jis.close();
                    return (name.substring(0, lastPos));
                }
            }
        }
        jis.close();
        return (null);
    }
 <SPLIT>     public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair(""query"", ""Queue='"" + queueName + ""' AND Status='open'""));
        params.add(new BasicNameValuePair(""format"", ""i""));
        params.add(new BasicNameValuePair(""orderby"", ""-id""));
        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains(""does not exist."")) {
                                return null;
                            }
                            if (line.startsWith(""ticket/"")) {
                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");
            }
        }
        return tickets;
    }
",167,"    private String getFullClassName(URL file, String className) throws Exception {
        JarInputStream jis = new JarInputStream(file.openStream());
        ZipEntry lfile = null;
        while ((lfile = jis.getNextEntry()) != null) {
            String name = lfile.getName();
            int lastPos = name.lastIndexOf("".class"");
            if (lastPos < 0) {
                continue;
            }
            name = name.replace('/', '.');
            int line = -1;
            if (className != null) {
                line = name.indexOf(className);
                if (line >= 0 && name.length() == line + className.length() + 6) {
                    jis.close();
                    return (name.substring(0, lastPos));
                }
            }
        }
        jis.close();
        return (null);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getFullClassName,url,className,jis,zentry,name,lastPos,pos","getFullClassName:-0.00043642520904541016,url:0.0001176595687866211,className:-0.0006244778633117676,jis:-0.001641392707824707,zentry:-0.000244140625,name:-0.0005283951759338379,lastPos:-0.0005263090133666992,pos:-0.0003418922424316406,",3,9,0,"url:file,zentry:lfile,pos:line,",0,Greedy,157,0.058217247327168785,replace,[]
276,"    public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.getWriter().write(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
        try {
            s.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static boolean doTest(Getter<?> context, Document node) {
        try {
            URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, ""url""), context));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Assert.isTrue(conn.getResponseCode() < 400);
            conn.disconnect();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
",159,,LABEL_0,LABEL_0,LABEL_0,-1,"test,s,input,writer",,4,14,0,,0,GA,1929,0.7163575172424317,failed,[]
277,"    private void copyIconFiles(UmlClass clazz) {
        if (clazz.hasAnnotation(""icon16"")) {
            String i16 = clazz.annotationValue(""icon16"");
            String fileType = "".png"";
            if (i16.endsWith("".jpg"")) fileType = "".jpg"";
            if (i16.endsWith("".gif"")) fileType = "".gif"";
            String desti16 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;
            try {
                FileChannel src = new FileInputStream(i16).getChannel();
                FileChannel dst = new FileOutputStream(desti16).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clazz.hasAnnotation(""icon32"")) {
            String i32 = clazz.annotationValue(""icon32"");
            String fileType = "".png"";
            if (i32.endsWith("".jpg"")) fileType = "".jpg"";
            if (i32.endsWith("".gif"")) fileType = "".gif"";
            String desti32 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;
            try {
                FileChannel src = new FileInputStream(i32).getChannel();
                FileChannel dst = new FileOutputStream(desti32).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>     public void setImg() {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = """";
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File(""."" + separator + ""images"");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getPath().lastIndexOf(separator);
            String imgName = getPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getPath());
                File outputFile = new File(newPath);
                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                    FileInputStream in = new FileInputStream(inputFile);
                    FileOutputStream out = new FileOutputStream(outputFile);
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                    in.close();
                    out.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set image"", JOptionPane.ERROR_MESSAGE);
            }
            setPath(newPath);
            bckImg = new ImageIcon(getPath());
        }
    }
",322,"    private void copyIconTypes(UmlClass clazz) {
        if (clazz.hasAnnotation(""icon16"")) {
            String i17 = clazz.annotationValue(""icon16"");
            String fileType = "".png"";
            if (i17.endsWith("".jpg"")) fileType = "".jpg"";
            if (i17.endsWith("".gif"")) fileType = "".gif"";
            String targeti15 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;
            try {
                FileChannel url = new FileInputStream(i17).getChannel();
                FileChannel rdst = new FileOutputStream(targeti15).getChannel();
                rdst.transferFrom(url, 0, url.size());
                url.close();
                rdst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clazz.hasAnnotation(""icon32"")) {
            String i32 = clazz.annotationValue(""icon32"");
            String fileType = "".png"";
            if (i32.endsWith("".jpg"")) fileType = "".jpg"";
            if (i32.endsWith("".gif"")) fileType = "".gif"";
            String targetiu33 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;
            try {
                FileChannel url = new FileInputStream(i32).getChannel();
                FileChannel rdst = new FileOutputStream(targetiu33).getChannel();
                rdst.transferFrom(url, 0, url.size());
                url.close();
                rdst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyIconFiles,clazz,i16,fileType,desti16,src,dst,i32,desti32","copyIconFiles:0.01483386754989624,clazz:-0.01357412338256836,i16:-0.0007968544960021973,fileType:-0.012741684913635254,desti16:-0.00014907121658325195,src:0.0009071826934814453,dst:-0.005190253257751465,i32:-0.005757629871368408,desti32:5.9664249420166016e-05,",6,23,0,"copyIconFiles:copyIconTypes,src:url,desti32:targetiu33,desti16:targeti15,i16:i17,dst:rdst,",0,Greedy,365,0.13526034355163574,replace,[]
278,"    private void updateFile(File file) throws FileNotFoundException, IOException {
        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!destFile.exists()) {
                destFile.getParentFile().mkdirs();
                destFile.createNewFile();
            }
            in = new FileInputStream(file).getChannel();
            out = new FileOutputStream(destFile).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (out != null) out.close();
            if (in != null) in.close();
        }
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",144,,LABEL_0,LABEL_0,LABEL_0,-1,"updateFile,file,IOException,destFile,in,out",,6,21,0,,0,GA,2758,1.0871122399965922,failed,"[';print(IOProblem)', ';print(DownloadProblem)', ';print( IOProblem)']"
279,"    public static Object loadXmlFromUrl(URL url, int timeout, XML_TYPE xmlType) throws IOException {
        URLConnection connection = url.openConnection();
        connection.setConnectTimeout(timeout);
        connection.setReadTimeout(timeout);
        BufferedInputStream buffInputStream = new BufferedInputStream(connection.getInputStream());
        return loadXml(buffInputStream, xmlType);
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        String sFTP = ""ftp.miservidor.com"";
        String sUser = ""usuario"";
        String sPassword = ""password"";
        try {
            System.out.println(""Conectandose a "" + sFTP);
            client.connect(sFTP);
            boolean login = client.login(sUser, sPassword);
            if (login) {
                System.out.println(""Login correcto"");
                boolean logout = client.logout();
                if (logout) {
                    System.out.println(""Logout del servidor FTP"");
                }
            } else {
                System.out.println(""Error en el login."");
            }
            System.out.println(""Desconectando."");
            client.disconnect();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",63,,LABEL_0,LABEL_0,LABEL_0,-1,"loadXmlFromUrl,url,timeout,xmlType,connection,buffInputStream",,4,8,0,,0,GA,2129,0.8093087196350097,failed,"[';loadXmlFromUrl = 0', ';timeout = 0', ';xmlType = 0', ';connection = 0', ';elementModel = 0', ';xmlStyle = 0', ';elementtype = 0', ';phpClass = 0', ';position = 0', ';union = 0', ';condition = 0']"
280,"    public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
 <SPLIT>     private String retrieveTemplate() throws Exception {
        if (cachedTemplate == null) {
            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());
            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            final StringBuilder result = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
            in.close();
            cachedTemplate = result.toString();
        }
        return cachedTemplate;
    }
",67,"    public PageLoader(String resourceLocation) throws Exception {
        URL file = new URL(resourceLocation);
        BufferedReader resource = new BufferedReader(new InputStreamReader(file.openStream()));
         inputFile = """";
        while (resource.ready()) {
             inputFile =  inputFile + resource.readLine();
        }
        resource.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"pageAddress,url,in,inputLine","pageAddress:0.006932318210601807,url:-0.012932062149047852,in:-0.006651639938354492,inputLine:-0.02921295166015625,",4,11,0,"pageAddress:resourceLocation,in:resource,url:file,inputLine: inputFile,",0,Greedy,166,0.05878490606943766,replace,[]
281,"    public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",246,,LABEL_0,LABEL_0,LABEL_0,-1,"postRequest,urlString,data,returnData,url,connection,out,keySet,values,count,in,inputLine",,12,41,0,,0,GA,5095,1.9092339277267456,failed,[]
282,"        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFile);
            createParentDirectories(outputFile);
            FileOutputStream outputStream;
            outputStream = new FileOutputStream(outputFile);
            final HttpResponse response = client.execute(httpGet);
            if (isInterrupted()) {
                outputStream.close();
                return;
            }
            final HttpEntity entity = response.getEntity();
            InputStream inputStream = null;
            try {
                if (entity != null) {
                    inputStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inputStream, outputStream, callback);
                }
            } finally {
                try {
                    outputStream.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",245,"        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFile);
            createParentDirectories(outputFile);
            FileOutputStream outputStream;
            outputStream = new FileOutputStream(outputFile);
            final HttpResponse result = client.execute(httpGet);
            if (isInterrupted()) {
                outputStream.close();
                return;
            }
            final HttpEntity entity = result.getEntity();
            InputStream inputStream = null;
            try {
                if (entity != null) {
                    inputStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inputStream, outputStream, callback);
                }
            } finally {
                try {
                    outputStream.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
",LABEL_0,LABEL_0,LABEL_1,1,"downloadFile,downloadUrl,destinationFile,client,httpGet,outputFile,outputStream,response,entity,inputStream,callback,copiedLength,percentage","downloadFile:-0.08917850255966187,downloadUrl:-0.2500457763671875,destinationFile:-0.13995206356048584,client:-0.043741047382354736,httpGet:-0.08112585544586182,outputFile:-0.1843225359916687,outputStream:-0.306552529335022,response:0.05936402082443237,entity:0.048349618911743164,inputStream:-0.15464740991592407,callback:-0.013004302978515625,copiedLength:0.01575922966003418,percentage:0.008722305297851562,",1,2,0,"response:result,",0,Greedy,73,0.02693638801574707,replace,[]
283,"    public void update(String channelPath, String dataField, String fatherDocId) {
        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = '"" + fatherDocId + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherDocId + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String url = """";
            boolean flag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(sqlInitial);
            rs = ps.executeQuery();
            if (rs.next()) url = rs.getString(1);
            if (!url.equals("""")) {
                st = new StringTokenizer(url, "","");
                String sortDocId = """";
                while (st.hasMoreTokens()) {
                    if (flag) {
                        sortDocId = ""'"" + st.nextToken() + ""'"";
                        flag = false;
                    } else {
                        sortDocId = sortDocId + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;
                ps = conn.prepareStatement(sqlsort);
                rs = ps.executeQuery();
                String sortURL = """";
                boolean sortflag = true;
                while (rs.next()) {
                    if (sortflag) {
                        sortURL = rs.getString(1);
                        sortflag = false;
                    } else {
                        sortURL = sortURL + "","" + rs.getString(1);
                    }
                }
                ps = conn.prepareStatement(sqlsortURL);
                ps.setString(1, sortURL);
                ps.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, ps, conn, dbo);
        }
    }
 <SPLIT>     public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair(""query"", ""Queue='"" + queueName + ""' AND Status='open'""));
        params.add(new BasicNameValuePair(""format"", ""i""));
        params.add(new BasicNameValuePair(""orderby"", ""-id""));
        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains(""does not exist."")) {
                                return null;
                            }
                            if (line.startsWith(""ticket/"")) {
                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");
            }
        }
        return tickets;
    }
",437,"    public void write(String downloadMap, String responseField, String fatherPoName) {
        String SQLInit = ""select uri from t_ip_doc_res where doc_id = '"" + fatherPoName + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqllaltURI = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherPoName + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement os = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String address = """";
            boolean tag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            os = conn.prepareStatement(SQLInit);
            rs = os.executeQuery();
            if (rs.next()) address = rs.getString(1);
            if (!address.equals("""")) {
                st = new StringTokenizer(address, "","");
                String updateDocumentInfo = """";
                while (st.hasMoreTokens()) {
                    if (tag) {
                        updateDocumentInfo = ""'"" + st.nextToken() + ""'"";
                        tag = false;
                    } else {
                        updateDocumentInfo = updateDocumentInfo + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqLSORT = ""select id from t_ip_doc where id in ("" + updateDocumentInfo + "") order by "" + responseField;
                os = conn.prepareStatement(sqLSORT);
                rs = os.executeQuery();
                String altURL = """";
                boolean filtertype = true;
                while (rs.next()) {
                    if (filtertype) {
                        altURL = rs.getString(1);
                        filtertype = false;
                    } else {
                        altURL = altURL + "","" + rs.getString(1);
                    }
                }
                os = conn.prepareStatement(sqllaltURI);
                os.setString(1, altURL);
                os.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, os, conn, dbo);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"update,channelPath,dataField,fatherDocId,sqlInitial,sqlsortURL,conn,rs,ps,dbo,url,st,sortDocId,flag,sqlsort,sortURL,sortflag","update:-0.00043213367462158203,channelPath:0.00011515617370605469,dataField:0.00036537647247314453,fatherDocId:-0.00043660402297973633,sqlInitial:-0.00010591745376586914,sqlsortURL:0.0007886886596679688,conn:-0.013186395168304443,rs:-0.007773041725158691,ps:0.013380110263824463,dbo:-0.002754032611846924,url:-0.0017223358154296875,st:-0.002410709857940674,sortDocId:-0.00018650293350219727,flag:-0.0003860592842102051,sqlsort:0.0037650465965270996,sortURL:0.00011610984802246094,sortflag:0.00026983022689819336,",13,43,0,"ps:os,sqlsort:sqLSORT,sqlsortURL:sqllaltURI,dataField:responseField,sortflag:filtertype,sortURL:altURL,channelPath:downloadMap,sqlInitial:SQLInit,sortDocId:updateDocumentInfo,flag:tag,update:write,fatherDocId:fatherPoName,url:address,",0,Greedy,574,0.2230185389518738,replace,[]
284,"    public void testTransactions() throws Exception {
        con = TestUtil.openDB();
        Statement st;
        ResultSet rs;
        con.setAutoCommit(false);
        assertTrue(!con.getAutoCommit());
        con.setAutoCommit(true);
        assertTrue(con.getAutoCommit());
        st = con.createStatement();
        st.executeUpdate(""insert into test_a (imagename,image,id) values ('comttest',1234,5678)"");
        con.setAutoCommit(false);
        st.executeUpdate(""update test_a set image=9876 where id=5678"");
        con.commit();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        st.executeUpdate(""update test_a set image=1111 where id=5678"");
        con.rollback();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        TestUtil.closeDB(con);
    }
 <SPLIT>     public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"testTransactions,con,st,rs",,4,27,0,,0,GA,1559,0.5935620745023091,failed,[]
285,"    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
 <SPLIT>     public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",137,,LABEL_0,LABEL_0,LABEL_0,-1,"hash,saltBefore,content,saltAfter,repeatedHashingCount,digest,digestLength,i",,7,24,0,,0,GA,3712,1.3812251647313436,failed,"[';hash = 0', ';print(hash)', ';saltBefore = 0', ';content = 0', ';repeatedHashingCount = 0', ';digest = 0', ';digestLength = 0', ';header = 0', ';sintHead = 0', ';address = 0', ';expression = 0', ';value = 0', ';repeatedHatingLength = 0', ';repeatedHashCount = 0', ';I = 0', ';id = 0', ';length = 0', ';phi = 0']"
286,"    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",67,,LABEL_1,LABEL_1,LABEL_1,-1,"createPasswordDigest,password,salt,md,digest",,4,11,0,,0,GA,2011,0.7314647515614827,failed,"[';createPasswordDigest = 0', ';password = 0', ';createPasswordSignifier = 0', ';hash = 0', ';phrase = 0']"
287,"    public void copyToDir(File dir) {
        if (!dir.exists()) {
            dir.mkdirs();
        } else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {
            return;
        }
        File file = getEstimatedFileName(dir);
        try {
            file.createNewFile();
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            FileInputStream fileInputStream = new FileInputStream(this.file);
            int read = 0;
            byte[] buffer = new byte[1024];
            while (read != -1) {
                fileOutputStream.write(buffer, 0, read);
                read = fileInputStream.read(buffer);
            }
            fileInputStream.close();
            fileOutputStream.close();
            this.file = file;
        } catch (IOException e) {
            Logger.log(e);
        }
    }
 <SPLIT>     @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",171,,LABEL_0,LABEL_0,LABEL_0,-1,"copyToDir,dir,file,fileOutputStream,fileInputStream,read,buffer",,7,28,0,,0,GA,3241,1.2151439428329467,failed,[]
288,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",194,"    public static boolean decodeString2String(String inputfiles, String inputdatabase) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream conn = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inputfiles)), Base64.DECODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                conn.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.007184386253356934,infile:0.0011181831359863281,outfile:0.0008675456047058105,in:-0.00516819953918457,out:-0.003252744674682617,buffer:-0.0038095712661743164,read:-0.008160889148712158,success:-0.011601448059082031,",5,12,0,"decodeFileToFile:decodeString2String,infile:inputfiles,outfile:inputdatabase,out:conn,buffer:url,",0,Greedy,194,0.07067039807637533,replace,[]
289,"    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md5result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(input.getBytes());
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md5result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",141,"    public static String  stringTOMD(LoggerCollection loggerCol, String connection) {
        byte[] bithash = null;
        MessageDigest cd = null;
        StringBuilder md5result = new StringBuilder();
        try {
            cd = MessageDigest.getInstance(""MD5"");
            cd.reset();
            cd.update(connection.getBytes());
            bithash = cd.digest();
            for (int ji = 0; ji < bithash.length; ji++) {
                md5result.append(Integer.toHexString(0xFF & bithash[ji]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
",LABEL_0,LABEL_0,LABEL_1,1,"plainToMD,loggerCol,input,byteHash,md,md5result,i","plainToMD:-0.006217896938323975,loggerCol:-0.016721069812774658,input:-0.0049710869789123535,byteHash:-0.006734907627105713,md:-0.010018706321716309,md5result:-0.040048837661743164,i:0.012978017330169678,",5,16,0,"i:ji,input:connection,plainToMD: stringTOMD,byteHash:bithash,md:cd,",0,Greedy,219,0.07928892374038696,replace,[]
290,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
 <SPLIT>     public InputStream retrieveStream(String url) {
        HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse getResponse = getClient().execute(getRequest);
            final int statusCode = getResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(getClass().getSimpleName(), ""Error "" + statusCode + "" for URL "" + url);
                return null;
            }
            HttpEntity getResponseEntity = getResponse.getEntity();
            return getResponseEntity.getContent();
        } catch (Exception e) {
            getRequest.abort();
            Log.w(getClass().getSimpleName(), ""Error for URL "" + url, e);
        }
        return null;
    }
",280,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource duddyOrigin = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(duddyOrigin);
        OutputStream fs = ((ModifiableSource) duddyOrigin).getOutputStream();
        assertNotNull(fs);
        String dumperReader = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        fs.write(dumperReader.getBytes());
        fs.flush();
        fs.close();
        JCRNodeSource SOURCE = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(SOURCE);
        fs = ((ModifiableSource) SOURCE).getOutputStream();
        assertNotNull(fs);
        String url = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        fs.write(url.getBytes());
        fs.flush();
        fs.close();
        QueryResultSource queryResults = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(queryResults);
        Collection lines = queryResults.getChildren();
        assertEquals(1, lines.size());
        Iterator l = lines.iterator();
        JCRNodeSource  rEsource = (JCRNodeSource) l.next();
        InputStream rSvcIn =  rEsource.getInputStream();
        ByteArrayOutputStream publicIn = new ByteArrayOutputStream();
        IOUtils.copy(rSvcIn, publicIn);
        rSvcIn.close();
        assertEquals(url, publicIn.toString());
        publicIn.close();
         rEsource.delete();
    }
;testSimpleQuery = 0",LABEL_0,LABEL_0,LABEL_0,1,"testSimpleQuery,dummySource,os,dummyContent,source,content,qResult,results,it,rSrc,rSrcIn,actualOut","testSimpleQuery:-0.00965118408203125,dummySource:0.01444542407989502,os:-0.41244685649871826,dummyContent:-0.0033323168754577637,source:-0.022324562072753906,content:-0.0006438493728637695,qResult:-0.042858004570007324,results:0.011460304260253906,it:0.010821402072906494,rSrc:0.007944047451019287,rSrcIn:-0.022343695163726807,actualOut:-0.00863802433013916,",11,39,0,"dummySource:duddyOrigin,results:lines,it:l,rSrc: rEsource,content:url,dummyContent:dumperReader,actualOut:publicIn,testSimpleQuery:testSimpleQuery,source:SOURCE,rSrcIn:rSvcIn,qResult:queryResults,os:fs,",0,Greedy,583,0.21503716309865314,inesrt,[';testSimpleQuery = 0']
291,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession reqSession = request.getSession();
        ArrayList<File> uploadFiles = new ArrayList<File>();
        LOG.info(""UploadServlet Upload request received"");
        if (ServletFileUpload.isMultipartContent(request)) {
            LOG.debug(""UploadServlet Received a multipart request."");
        } else {
            LOG.debug(""UploadServlet Received a non-multipart request."");
        }
        String tempDirName = UUID.randomUUID().toString();
        File tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);
        tempUploadDir.getParentFile().mkdir();
        while (tempUploadDir.exists()) {
            tempDirName = UUID.randomUUID().toString();
            tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);
        }
        tempUploadDir.mkdir();
        File attachmentDir = (File) (reqSession.getAttribute(""up2p:attachdir""));
        if (attachmentDir != null) {
            LOG.info(""UploadServlet: Copying provided attachment to upload dir from: "" + attachmentDir.getAbsolutePath());
            tempUploadDir.delete();
            attachmentDir.renameTo(tempUploadDir);
            reqSession.removeAttribute(""up2p:attachdir"");
        }
        LOG.info(""UploadServlet: Using temporary directory: "" + tempUploadDir.getPath());
        PairList paramMap = null;
        if (ServletFileUpload.isMultipartContent(request)) {
            paramMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());
            if (paramMap.size() == 0) {
                LOG.debug(""UploadServlet Parsed multipart request and "" + ""found no parameters. Parsing as regular"" + "" request instead."");
                paramMap = copyParameters(request);
                LOG.debug(""UploadServlet Parsed as regular request and found "" + paramMap.size() + "" parameters."");
            }
        } else {
            paramMap = copyParameters(request);
        }
        String communityId = getCurrentCommunityId(request.getSession());
        String newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);
        LOG.debug(""UploadServlet: Got active community: "" + newcommunity);
        if (newcommunity != null) {
            communityId = newcommunity;
            LOG.debug(""switching to community"" + communityId);
        }
        if (communityId == null || communityId.length() == 0) {
            LOG.warn(""UploadServlet Current community ID is missing from"" + ""the user session."");
            writeError(request, response, ""The current community is unknown."" + "" Please select a community before performing "" + ""any actions."", paramMap);
            for (File f : tempUploadDir.listFiles()) {
                f.delete();
            }
            tempUploadDir.delete();
            return;
        }
        LOG.info(""UploadServlet Uploading to community "" + communityId + ""."");
        uploadFiles.clear();
        Iterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);
        String filename = """";
        try {
            if (uploadedFileIter.hasNext()) {
                filename = uploadedFileIter.next();
            } else {
                throw new IOException(""UploadServlet: No up2p:filename parameters were found."");
            }
            if (filename.startsWith(""file:"")) filename = filename.substring(5);
            if (filename.length() == 0) {
                throw new IOException(""UploadServlet: An empty up2p:filename parameter was submitted."");
            }
            File resourceFile = null;
            resourceFile = new File(adapter.getStorageDirectory(communityId), filename);
            File tempResFile = new File(tempUploadDir, filename);
            if (!tempResFile.exists() && !resourceFile.exists()) {
                throw new IOException(""UploadServlet: The uploaded resource could not be found."");
            }
            if ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {
                resourceFile = FileUtil.createUniqueFile(resourceFile);
                LOG.info(""UploadServlet: Direct upload, copying resource file.\n\tOriginal: "" + tempResFile.getPath() + ""\n\tNew: "" + resourceFile.getPath());
                resourceFile.getParentFile().mkdir();
                FileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);
                FileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);
                filename = resourceFile.getName();
            }
            LOG.info(""UploadServlet: resource file name: "" + filename);
            uploadFiles.add(resourceFile);
        } catch (IOException e) {
            LOG.error(""UploadServlet: "" + e.getMessage());
            writeError(request, response, e.getMessage(), paramMap);
            return;
        }
        String editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);
        if (editResourceId != null && editResourceId.length() > 0) {
            LOG.debug(""UploadServlet: Got edit resource: "" + editResourceId);
            File editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));
            if (editAttach.exists() && editAttach.isDirectory()) {
                LOG.debug(""UploadServlet: Copying additional attachments from: "" + editAttach.getAbsolutePath());
                for (File oldFile : editAttach.listFiles()) {
                    File newFile = new File(tempUploadDir, oldFile.getName());
                    if (!newFile.exists()) {
                        LOG.debug(""UploadServlet: Copying attachment: "" + oldFile.getAbsolutePath() + "" to "" + newFile.getAbsolutePath());
                        FileOutputStream attachCopyStream = new FileOutputStream(newFile);
                        FileUtil.writeFileToStream(attachCopyStream, oldFile, true);
                    } else {
                        LOG.debug(""UploadServlet: Attachment "" + newFile.getName() + "" explicitly replaced in new upload."");
                    }
                }
            }
        }
        String batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);
        boolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;
        if (batchUpload) {
            LOG.info(""UploadSerlvet Recieved batch upload request."");
            File batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());
            uploadFiles.clear();
            LOG.debug(""UploadServlet resource file stored at: "" + batchFile.getPath());
            XMLReader reader = TransformerHelper.getXMLReader();
            reader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));
            try {
                FileInputStream batchInput = new FileInputStream(batchFile);
                reader.parse(new InputSource(batchInput));
                batchInput.close();
            } catch (Exception e) {
                LOG.error(""UploadServlet: Error parsing batch upload file."");
                LOG.error(""UploadServlet: "" + e.getMessage());
                writeError(request, response, ""Uploaded content was not a valid batch resource file."", paramMap);
                return;
            }
            batchFile.delete();
            adapter.addNotification(""Batch file succesfully processed into "" + uploadFiles.size() + "" resources."");
        }
        boolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;
        String id = """";
        boolean duplicateResource = false;
        int uploadCount = 0;
        for (int i = 0; i < uploadFiles.size(); i++) {
            LOG.info(""UploadServlet Publishing resource to WebAdapter: "" + uploadFiles.get(i).getName());
            try {
                id = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);
                uploadFiles.remove(i);
                i--;
                uploadCount++;
                LOG.info(""UploadServlet Resource published with id: "" + id);
            } catch (IOException e) {
                LOG.warn(""UploadServlet IO Error occured in reading the uploaded file: "" + e.getMessage(), e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""An error occured in reading the uploaded file: "" + e.getMessage(), paramMap);
                return;
            } catch (SAXParseException e) {
                LOG.warn(""UploadServlet SAX Parse Error occured in uploaded resource: "" + e.getMessage());
                String errMsg = ""Invalid XML in the uploaded resource.<br/>"" + e.getMessage() + ""<br/><br/>File location: "" + uploadFiles.get(i).getAbsolutePath() + ""<br/>Line: "" + e.getLineNumber() + "" Column: "" + e.getColumnNumber();
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, errMsg, paramMap);
                return;
            } catch (SAXException e) {
                LOG.warn(""UploadServlet Invalid XML in uploaded resource: "" + e.getMessage());
                String errMsg = ""Invalid XML in uploaded resource<br/><i>"" + e.getMessage() + ""</i><br/>"" + ""File location: "" + uploadFiles.get(i).getAbsolutePath();
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, errMsg, paramMap);
                return;
            } catch (DuplicateResourceException e) {
                LOG.info(""UploadServlet Duplicate Resource: "" + e.getResourceId() + "" Community: "" + e.getCommunityId());
                if (batchUpload) {
                    if (!duplicateResource) {
                        adapter.addNotification(""Warning: Batch upload contained previously published "" + "" resources which have been discarded."");
                        duplicateResource = true;
                    }
                } else {
                    uploadFilesCleanup(uploadFiles, tempUploadDir);
                    String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);
                    if (respondWithXml != null && respondWithXml.length() > 0) {
                        writeError(request, response, ""This resource is already shared with resource "" + "" id: "" + e.getResourceId(), paramMap);
                        return;
                    }
                    String redirect = response.encodeURL(""/overwrite.jsp?up2p:community="" + e.getCommunityId() + ""&up2p:resource="" + e.getResourceId());
                    LOG.info(""UploadServlet Redirecting to "" + redirect);
                    RequestDispatcher rd = request.getRequestDispatcher(redirect);
                    rd.forward(request, response);
                    return;
                }
            } catch (NetworkAdapterException e) {
                LOG.info(""UploadServlet Error in the Network Adapter for"" + "" community ID "" + communityId, e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""Error in the Network Adapter for this community. <br/>"" + e.getMessage(), paramMap);
                return;
            } catch (ResourceNotFoundException e) {
                LOG.info(""UploadServlet Error Resource not found "" + e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""Error : <br/>"" + e.getMessage(), paramMap);
                return;
            }
        }
        uploadFilesCleanup(uploadFiles, tempUploadDir);
        String ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);
        String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);
        if (respondWithXml != null && respondWithXml.length() > 0) {
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
            out.println(""<upload success=\""true\"" >"");
            out.println(""<resid>"" + id + ""</resid>"");
            out.println(""</upload>"");
        } else if (ajaxRequest != null && ajaxRequest.length() > 0) {
            LOG.debug(""UploadServlet Recieved xmlHttp request, responding with XML"");
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
            out.print(""<resource id=\"""" + request.getParameter(HttpParams.UP2P_RESOURCE) + ""\"" "");
            if (request.getParameter(HttpParams.UP2P_PEERID) != null) {
                out.print(""peerid=\"""" + request.getParameter(HttpParams.UP2P_PEERID) + ""\"" "");
            }
            out.println(""/>"");
        } else if (batchUpload) {
            adapter.addNotification(uploadCount + "" resources were succesfully published."");
            request.setAttribute(""up2p.display.mode"", ""view"");
            String redirect = response.encodeURL(""/view.jsp?up2p:community="" + communityId);
            LOG.info(""UploadServlet Redirecting to "" + redirect);
            RequestDispatcher rd = request.getRequestDispatcher(redirect);
            rd.forward(request, response);
        } else if (!pushUpload) {
            request.setAttribute(""up2p.display.mode"", ""view"");
            String redirect = response.encodeURL(""/view.jsp?up2p:resource="" + id);
            LOG.info(""UploadServlet Redirecting to "" + redirect);
            RequestDispatcher rd = request.getRequestDispatcher(redirect);
            rd.forward(request, response);
        }
        return;
    }
",229,"    private void paste(File url, File destinationDirectory) throws IOException {
        if (url.isDirectory()) {
            File newDir = new File(destinationDirectory, url.getName());
            newDir.mkdir();
            File[] children = url.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                paste(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, url.getName());
            if (newFile.exists() && url.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream connection = new FileOutputStream(newFile);
            FileInputStream ack = new FileInputStream(url);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = ack.read(buff)) > 0) {
                connection.write(buff, 0, read);
            }
            connection.flush();
            connection.close();
            ack.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:0.004722654819488525,source:0.0008420944213867188,destinationDirectory:0.00047028064727783203,newDir:0.0005003213882446289,children:-5.072355270385742e-05,i:-0.00017082691192626953,newFile:-0.0003352165222167969,output:0.002141594886779785,input:0.0023696422576904297,buff:0.0004469752311706543,read:0.0003972053527832031,",4,16,0,"copy:paste,input:ack,output:connection,source:url,",0,Greedy,234,0.10434202750523885,replace,[]
292,"    protected void createSettingsIfNecessary() throws IOException {
        OutputStream out = null;
        try {
            final File fSettings = SettingsUtils.getSettingsFile();
            if (!fSettings.exists()) {
                fSettings.createNewFile();
                final Path src = new Path(""mvn/settings.xml"");
                final InputStream in = FileLocator.openStream(getBundle(), src, false);
                out = new FileOutputStream(SettingsUtils.getSettings(), true);
                IOUtils.copy(in, out);
            } else {
                Logger.getLog().info(""File settings.xml already exists at "" + fSettings);
            }
        } finally {
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }
 <SPLIT>     protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append(""\r\n"");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
",139,,LABEL_0,LABEL_0,LABEL_0,-1,"createSettingsIfNecessary,out,fSettings,src,in",,2,8,0,,0,GA,2359,0.8889806429545085,failed,"[';createSettingsIfNecessary = 0', ';out = 0', ';fSettings = 0', ';createSettingsIfNecccessnecessary = 0', ';createSettingsIfNecesseless = 0', ';createSettingsIfNecesary = 0', ';createSettingsIfNequccesseless = 0', ';createSettingsIfNecccessarily = 0', ';error = 0', ';model = 0', ';index = 0', ';prefix = 0']"
293,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public String get(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
",2154,,LABEL_0,LABEL_0,LABEL_0,-1,"load,conn,stmt",,3,218,0,,0,GA,2073,1.5047200838724772,failed,[]
294,"    private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
 <SPLIT>     private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",155,"    private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL path = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (path != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(path.openStream()));
            try {
                for (String os = br.readLine(); os != null; os = br.readLine()) {
                    os = os.trim();
                    if ((os.length() > 0) && (os.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(os).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getFrameworkFactory,url,br,s","getFrameworkFactory:-0.0012096166610717773,url:-0.012586891651153564,br:-0.043859243392944336,s:0.0015450119972229004,",2,11,0,"s:os,getFrameworkFactory:getFrameworkFactory,url:path,",0,Greedy,168,0.059631029764811196,replace,[]
295,"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
 <SPLIT>     public void load(URL url) throws IOException {
        ResourceLocator locator = null;
        try {
            locator = new RelativeResourceLocator(url);
        } catch (URISyntaxException use) {
            throw new IllegalArgumentException(""Bad URL: "" + use);
        }
        ResourceLocatorTool.addResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);
        InputStream stream = null;
        try {
            stream = url.openStream();
            if (stream == null) {
                throw new IOException(""Failed to load materials file '"" + url + ""'"");
            }
            logger.fine(""Loading materials from '"" + url + ""'..."");
            load(stream);
        } finally {
            if (stream != null) stream.close();
            ResourceLocatorTool.removeResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);
            locator = null;
        }
    }
",195,,LABEL_0,LABEL_0,LABEL_0,-1,"toMd5,str,messageDigest,byteArray,md5StrBuff,i",,6,23,0,,0,GA,2984,1.1199049750963848,failed,"[';toMd5 = 0', ';messageDigest = 0', ';byteArray = 0', ';md5StrBuff = 0', ';toMcd5 = 0', ';toBd15 = 0', ';toMcd512 = 0', ';toMd512 = 0', ';toMcd7 = 0', ';toBd7 = 0', ';bytes = 0', ';char = 0', ';moreDigester = 0', ';messageHashester = 0', ';moredigeter = 0', ';messageHashest = 0', '; messageDigEST = 0', ';MessageMarkest = 0', ';moredigested = 0', '; messageDiguster = 0', ';messageDse = 0', ';messageDher = 0', '; messageDuster = 0', ';messageMixse = 0', ';wordString = 0', ';byteIndex = 0', ';charAddress = 0', ';charLength = 0', ';charAmount = 0']"
296,"    public void reset(int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");
            psta.setInt(1, currentPilot);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
 <SPLIT>     private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
",70,,LABEL_0,LABEL_0,LABEL_0,-1,"reset,currentPilot,psta",,3,6,0,,0,GA,1364,0.4970021963119507,failed,[]
297,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",452,,LABEL_0,LABEL_1,,-4,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found",,,,0,,0,Greedy,1,0.000671851634979248,,[]
298,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,12,38,0,,0,GA,5303,1.9830862800280253,failed,"[';Filelist = 0', ';print(Filelist)', ';stringList = 0', ';print(stringList)', ';stringChain = 0', ';zipSet = 0', ';modelEx = 0', ';FileName = 0', ';stringName = 0', ';fileString = 0', ';archiveDirPath = 0', ';archiveDirDir = 0']"
299,"    public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
 <SPLIT>     public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",456,"    public String[][] getProjectDocumentData() {
        String[][] storyDec = null;
        String dylib = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String URLURL = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String  urLData = URLURL + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder string = factory.newDocumentBuilder();
            URL u = new URL( urLData);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream sys = new FileOutputStream(dylib);
            int iLufSt = is.available();
            byte inPlump[] = new byte[20000 * 1024];
            int qiValBuild;
            while ((qiValBuild = is.read(inPlump, 0, iLufSt)) > 0) sys.write(inPlump, 0, qiValBuild);
            sys.close();
            is.close();
            File f = new File(dylib);
            InputStream Inputsystem = new FileInputStream(f);
            Document project = string.parse(Inputsystem);
            NodeList nondeme = project.getElementsByTagName(""proj"");
            int sum = nondeme.getLength();
            storyDec = new String[sum][3];
            for (int j = 0; j < sum; j++) {
                storyDec[j][0] = new String(DOMUtil.getSimpleElementText((Element) nondeme.item(j), ""pid""));
                storyDec[j][1] = new String(DOMUtil.getSimpleElementText((Element) nondeme.item(j), ""ppid""));
                storyDec[j][2] = new String(DOMUtil.getSimpleElementText((Element) nondeme.item(j), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return storyDec;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"getProjectTreeData,treeData,filename,urlString,urldata,factory,parser,u,is,os,iBufSize,inBuf,iNumRead,f,inputstream,document,nodelist,num,i","getProjectTreeData:-0.0013554692268371582,treeData:0.2691209316253662,filename:-0.0012551546096801758,urlString:0.0008069872856140137,urldata:-0.03180974721908569,factory:-0.21696346998214722,parser:-0.0629509687423706,u:-0.1147117018699646,is:-0.20830762386322021,os:-0.11154091358184814,iBufSize:-0.038974106311798096,inBuf:-0.1015048623085022,iNumRead:-0.03438723087310791,f:-0.14934569597244263,inputstream:-0.06416290998458862,document:0.016839683055877686,nodelist:0.002259194850921631,num:0.02153944969177246,i:0.010126471519470215,",15,48,0,"treeData:storyDec,num:sum,document:project,i:j,nodelist:nondeme,urlString:URLURL,filename:dylib,getProjectTreeData:getProjectDocumentData,urldata: urLData,iNumRead:qiValBuild,iBufSize:iLufSt,parser:string,inputstream:Inputsystem,inBuf:inPlump,os:sys,",0,Greedy,716,0.26709920167922974,replace,[]
300,"    private void simulate() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction\n"");
        out.flush();
        System.out.println(""Simulate..."");
        File file = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserReputationResponse;
        RateUser rateUserRequest;
        RateUserResponse rateUserResponse;
        FileInputStream fis = new FileInputStream(file);
        BufferedReader br = new BufferedReader(new InputStreamReader(fis));
        String call = br.readLine();
        while (call != null) {
            rateUserRequest = generateRateUserRequest(call);
            try {
                rateUserResponse = trsPort.rateUser(rateUserRequest);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + rateUserRequest.getVbeId());
                System.out.println(""VO: "" + rateUserRequest.getVoId());
                System.out.println(""USER: "" + rateUserRequest.getUserId());
                System.out.println(""SERVICE: "" + rateUserRequest.getServiceId());
                System.out.println(""ACTION: "" + rateUserRequest.getActionId());
                System.out.println(""OUTCOME: "" + rateUserResponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(null);
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            call = br.readLine();
        }
        fis.close();
        br.close();
        out.flush();
        out.close();
    }
 <SPLIT>     private String GetResponse(URL url) {
        String content = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod(""GET"");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) content += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return content;
    }
",797,,LABEL_0,LABEL_1,,-4,"simulate,out,file,obtainUserReputationRequest,obtainUserReputationResponse,rateUserRequest,rateUserResponse,fis,br,call",,,,0,,0,Greedy,1,0.0009122769037882487,,[]
301,"    private static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",83,"    private static void transferfile(File url, File connection) {
        try {
            FileChannel resourceConnection = new FileInputStream(url).getChannel();
            FileChannel destinatorManager = new FileOutputStream(connection).getChannel();
            resourceConnection.transferTo(0, resourceConnection.size(), destinatorManager);
            resourceConnection.close();
            destinatorManager.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-6.908178329467773e-05,in:3.2842159271240234e-05,out:0.00044846534729003906,sourceChannel:1.329183578491211e-05,destinationChannel:-6.526708602905273e-05,",5,12,0,"out:connection,in:url,sourceChannel:resourceConnection,destinationChannel:destinatorManager,copyFile:transferfile,",0,Greedy,188,0.06642484267552694,replace,[]
302,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
",272,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ads = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ads.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ads, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ads.writeDataset(url, dcmEncParam);
        ads.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter ddReader = pdFact.newWriter(pdReader.getPixelDataArray(), false, ads, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        ddReader.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",3,17,0,"outFile:outFile,readAndRewrite:readAndRewrite,inFile:inFile,iis:iis,dcmEncParam:dcmEncParam,dcmParser:dcmParser,out:url,pdWriter:ddReader,ds:ads,",0,Greedy,491,0.18109257618586222,replace,[]
303,"    public void writeConfiguration(Writer out) throws IOException {
        if (myResource == null) {
            out.append(""# Unable to print configuration resource\n"");
        } else {
            URL url = myResource.getUrl();
            InputStream in = url.openStream();
            if (in != null) {
                try {
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(in);
                }
            } else {
                out.append(""# Unable to print configuration resource\n"");
            }
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",92,"    public void writeConfiguration(Writer external) throws IOException {
        if (myResource == null) {
            external.append(""# Unable to print configuration resource
"");
        } else {
            URL url = myResource.getUrl();
            InputStream copy = url.openStream();
            if (copy != null) {
                try {
                    IOUtils.copy(copy, external);
                } finally {
                    IOUtils.closeQuietly(copy);
                }
            } else {
                external.append(""# Unable to print configuration resource
"");
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"writeConfiguration,out,url,in","writeConfiguration:-0.09611469507217407,out:-0.033222079277038574,url:-0.046523869037628174,in:0.005781590938568115,",2,8,0,"in:copy,out:external,",0,Greedy,122,0.04322118759155273,replace,[]
304,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,7,16,0,,0,GA,2797,1.0509410500526428,failed,"[';uncaughtException = 0', ';print(uncaughtException)', ';t = 0', ';print(t)', ';e = 0', ';display = 0', ';message = 0', ';e1 = 0', ';uncachedEvent = 0', ';unchandledexc = 0', ';uncatchedexc = 0', ';CatchedEvent = 0', ';uncachedexc = 0', ';uncaughtexc = 0', ';CaughtException = 0', ';uncatchedEvent = 0', ';Catchedexc = 0', ';CaughtEvent = 0', ';CatchedException = 0', ';type = 0', ';address = 0']"
305,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",420,,LABEL_1,LABEL_1,LABEL_1,-1,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed",,8,27,0,,0,GA,5339,2.139478925863902,failed,[';file = 0']
306,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
",85,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,s,m",,2,7,0,,0,GA,1409,0.5273789087931315,failed,"[';getMD5 = 0', ';s = 0', ';m = 0', ';getSHA4 = 0', '; getSHA4 = 0', ';getmdHash = 0', '; getSHAHash = 0', ';sym = 0']"
307,"    int doOne(int bid, int tid, int aid, int delta) {
        int aBalance = 0;
        if (Conn == null) {
            bench.incrementFailedTransactionCount();
            return 0;
        }
        try {
            if (Benchmark.prepared_stmt) {
                pstmt1.setInt(1, delta);
                pstmt1.setInt(2, aid);
                pstmt1.executeUpdate();
                pstmt1.clearWarnings();
                pstmt2.setInt(1, aid);
                ResultSet RS = pstmt2.executeQuery();
                pstmt2.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
                pstmt5.executeUpdate();
                pstmt5.clearWarnings();
            } else {
                Statement Stmt = Conn.createStatement();
                String Query = ""UPDATE accounts"";
                Query += "" SET Abalance = Abalance + "" + delta;
                Query += "" WHERE Aid = "" + aid;
                int res = Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""SELECT Abalance"";
                Query += "" FROM accounts"";
                Query += "" WHERE Aid = "" + aid;
                ResultSet RS = Stmt.executeQuery(Query);
                Stmt.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                Query = ""UPDATE tellers"";
                Query += "" SET Tbalance = Tbalance + "" + delta;
                Query += "" WHERE Tid = "" + tid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""UPDATE branches"";
                Query += "" SET Bbalance = Bbalance + "" + delta;
                Query += "" WHERE Bid = "" + bid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""INSERT INTO history(Tid, Bid, Aid, delta)"";
                Query += "" VALUES ("";
                Query += tid + "","";
                Query += bid + "","";
                Query += aid + "","";
                Query += delta + "")"";
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Stmt.close();
            }
            if (Benchmark.transactions) {
                Conn.commit();
            }
            return aBalance;
        } catch (java.lang.Exception e) {
            if (Benchmark.verbose) {
                System.out.println(""Transaction failed: "" + e.getMessage());
                e.printStackTrace();
            }
            bench.incrementFailedTransactionCount();
            if (Benchmark.transactions) {
                try {
                    Conn.rollback();
                } catch (SQLException e1) {
                }
            }
        }
        return 0;
    }
 <SPLIT>     protected int deleteBitstreamInfo(int id, Connection conn) {
        PreparedStatement stmt = null;
        int numDeleted = 0;
        try {
            stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);
            stmt.setInt(1, id);
            numDeleted = stmt.executeUpdate();
            if (numDeleted > 1) {
                conn.rollback();
                throw new IllegalStateException(""Too many rows deleted! Number of rows deleted: "" + numDeleted + "" only one row should be deleted for bitstream id "" + id);
            }
        } catch (SQLException e) {
            LOG.error(""Problem deleting bitstream. "" + e.getMessage(), e);
            throw new RuntimeException(""Problem deleting bitstream. "" + e.getMessage(), e);
        } finally {
            cleanup(stmt);
        }
        return numDeleted;
    }
",563,,LABEL_1,LABEL_0,,-4,"doOne,bid,tid,aid,delta,aBalance,RS,Stmt,Query,res",,,,0,,0,Greedy,1,0.0007390697797139485,,[]
308,"    @Override
    public InputStream getResourceByClassName(String className) {
        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (url == null) {
            return null;
        } else {
            try {
                return url.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
 <SPLIT>     public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
",64,,LABEL_0,LABEL_0,LABEL_0,-1,"getResourceByClassName,className,url",,2,3,0,,0,GA,1278,0.470192809899648,failed,"[';getResourceByClassName = 0', ';className = 0', ';url = 0', ';getResourceForclassname = 0', ';getResourceByFileName = 0', ';getResourceForclassString = 0', ';getResourceByclassString = 0', ';getResourceByFilename = 0', ';getResourceByFileString = 0', ';ClassPath = 0']"
309,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copy(File source, File destination) throws FileNotFoundException, IOException {
        if (source == null) throw new NullPointerException(""The source may not be null."");
        if (destination == null) throw new NullPointerException(""The destination may not be null."");
        FileInputStream sourceStream = new FileInputStream(source);
        destination.getParentFile().mkdirs();
        FileOutputStream destStream = new FileOutputStream(destination);
        try {
            FileChannel sourceChannel = sourceStream.getChannel();
            FileChannel destChannel = destStream.getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } finally {
            try {
                sourceStream.close();
                destStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",765,"    public void convert(File url, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",2,8,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:dest,inflate:inflate,in:in,convert:convert,format:url,src:url,",0,Greedy,437,0.1719303051630656,replace,[]
310,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {
        retryTimes--;
        try {
            String url = getServiceUrl() + ""/"" + invocation.getMethod().getName();
            HttpPost postMethod = new HttpPost(url);
            if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));
            HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);
            StatusLine sl = rsp.getStatusLine();
            if (sl.getStatusCode() >= 300) {
                throw new RuntimeException(""Did not receive successful HTTP response: status code = "" + sl.getStatusCode() + "", status message = ["" + sl.getReasonPhrase() + ""]"");
            }
            HttpEntity entity = rsp.getEntity();
            StringBuilder sb = new StringBuilder();
            InputStream is = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""utf-8""));
            String line;
            while ((line = reader.readLine()) != null) sb.append(line).append(""\n"");
            reader.close();
            is.close();
            String responseBody = null;
            if (sb.length() > 0) {
                sb.deleteCharAt(sb.length() - 1);
                responseBody = sb.toString();
            }
            Type t = invocation.getMethod().getGenericReturnType();
            if (t.equals(Void.class) || responseBody == null) return null;
            return JsonUtils.fromJson(responseBody, t);
        } catch (ConnectTimeoutException e) {
            if (retryTimes < 0) throw e;
            if (urlFromDiscovery) {
                String serviceUrl = discoverServiceUrl(getServiceInterface().getName());
                if (!serviceUrl.equals(getServiceUrl())) {
                    setServiceUrl(serviceUrl);
                    log.info(""relocate service url:"" + serviceUrl);
                }
            }
            return invoke(invocation, retryTimes);
        }
    }
",250,,LABEL_1,LABEL_1,LABEL_1,-1,"doVersionCheck,view,url,in,bin,line,version,build",,7,26,0,,0,GA,3843,1.4740023851394652,failed,[]
311,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",364,"    public static void fileCopy(String fromTheName, String to_name) throws IOException {
        File connectionFile = new File(fromTheName);
        File TODir = new File(to_name);
        if (connectionFile.equals(TODir)) abort(""cannot copy on itself: "" + fromTheName);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + fromTheName);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + fromTheName);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + fromTheName);
        if (TODir.isDirectory()) TODir = new File(TODir, connectionFile.getName());
        if (TODir.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String url = TODir.getParent();
            if (url == null) abort(""destination directory doesn't exist: "" + url);
            File url = new File(url);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + url);
            if (url.isFile()) abort(""destination is not a directory: "" + url);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + url);
        }
        FileInputStream cm = null;
        FileOutputStream proxy = null;
        try {
            cm = new FileInputStream(connectionFile);
            proxy = new FileOutputStream(TODir);
            byte[] comment = new byte[4096];
            int bytes___view;
            while ((bytes___view = cm.read(comment)) != -1) proxy.write(comment, 0, bytes___view);
        } finally {
            if (cm != null) try {
                cm.close();
            } catch (IOException e) {
                ;
            }
            if (proxy != null) try {
                proxy.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read","fileCopy:0.011004090309143066,from_name:0.002196013927459717,to_name:0.0008462071418762207,fromFile:0.00885915756225586,toFile:0.001420438289642334,parent:0.004144132137298584,dir:-0.007143855094909668,from:-0.028460264205932617,to:-0.025716722011566162,buffer:0.003353595733642578,bytes_read:0.0020428895950317383,",9,49,0,"fileCopy:fileCopy,fromFile:connectionFile,parent:url,buffer:comment,from_name:fromTheName,bytes_read:bytes___view,toFile:TODir,to_name:to_name,dir:url,to:proxy,from:cm,",0,Greedy,631,0.23450469970703125,replace,[]
312,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>             @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Pattern delim = Pattern.compile(""[ ]"");
                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(""/home/lindenb/jeter.txt.gz""))));
                    String line = null;
                    URL url = new URL(""http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write(""db=snp&retmode=xml"");
                    while ((line = r.readLine()) != null) {
                        String tokens[] = delim.split(line, 2);
                        if (!tokens[0].startsWith(""rs"")) continue;
                        wr.write(""&id="" + tokens[0].substring(2).trim());
                    }
                    wr.flush();
                    r.close();
                    InputStream in = conn.getInputStream();
                    IOUtils.copyTo(in, System.err);
                    in.close();
                    wr.close();
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
",862,"    public Long sort(File TargetFile, String queue, long maxUnitPlase, long maxLineEntries) throws Exception {
        if (!TargetFile.exists()) {
            if (!TargetFile.mkdirs()) throw new Exception(""Could not create target directory "" + TargetFile.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitPlase && (maxLineEntries <= 0 || size.getEntries() < maxLineEntries)) {
            FileInputStream Fisc = new FileInputStream(this);
            FileChannel f fai= Fisc.getChannel();
            FileOutputSifcosam fos = new FileOutputStream(new File(TargetFile, queue + ""_0"" + "".fasta""));
            FileChannel fchcos ifcos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while ( fai.read(buffer) > 0) {
                buffer.flip();
                hcos.write(buffer);
                buffer.clear();
            }
             fai.close();
            hcos.close();
            return (long) 1;
        } else {
            long currentChaseNum = 0;
            long currentEnturesSize = 0;
            int targetCount = 0;
            FileChannel fastaqConnection = new FileInputStream(this).getChannel();
            int totalSeQcount = 0;
            long totalResiduresNum = 0;
            try {
                long  prevSize = System.currentTimeMillis();
                long fastAFileCount = this.length();
                long fastaFileLengthAmount = 0L;
                long partitionStartRange = 0L;
                final int bufferCount = 1024 * 1024;
                ByteBuffer fFastaBuffer= ByteBuffer.allocateDirect(bufferCount);
                int fastasReadstate = FASTAFileTokenizer.UNKNOWN;
                for (; ffastaFileLengthAmount< fastAFileCount; ) {
                    long nBytobytesastaqConnection.read(FastaBuffer);
                    if (obytes <= 0) {
                        FastaBuffer.limit(0);
                        break;
                    } else {
                        FastaBuffer.flip();
                        fastaFileLengthAmount += obytes;
                    }
                    for (; ; ) {
                        if (!FastaBuffer.hasRemaining()) {
                            FastaBuffer.clear();
                            break;
                        }
                        int b = FastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '
') {
                            if (fastasReadstate == FASTAFileTokenizer.DEFLINE) {
                                fastasReadstate = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastasReadstate == FASTAFileTokenizer.UNKNOWN) {
                                fastasReadstate = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastasReadstate == FASTAFileTokenizer.SEQUENCELINE) {
                                fastasReadstate = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastasReadstate == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentChaseNum >= maxUnitPlase || maxLineEntries > 0 && currentEnturesSize >= maxLineEntries) {
                                    FastaBuffer.position(FastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition ""targetCountunt + "" containing "" currentEnturesSizent + "" sequences and "" + currentChaseNum + "" residues ends at "" + (ffastaFileLengthAmount- fFastaBufferremaining()) + "" and was created in "" + (currentTime -  prevSize) + "" ms"");
                                     prevSize = currentTime;
                                    long partitionEndOffset = fastaFileLengthAmount - FastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(TargetFile, queue + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBobytes fastaqConnection.transferTo(partitionStartRange, partitionEndOffset - partitionStartRange, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartRange += obytes;
                                    currentChaseNum = 0;
                                    currentEnturesSize = 0;
                                    fastasReadstate = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastasReadstate = FASTAFileTokenizer.DEFLINE;
                                    currentEnturesSize++;
                                }
                                totalSeQcount++;
                            }
                        } else {
                            if (fastasReadstate == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduresNum++;
                                currentChaseNum++;
                            }
                        }
                    }
                }
                if (ppartitionStartRange< fastAFileCount) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition ""targetCountunt + "" containing "" currentEnturesSizent + "" sequences and "" + currentChaseNum + "" residues ends at "" + (ffastAFileCount + "" and was created in "" + (currentTime -  prevSize) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(TargetFile, queue + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaqConnection.transferTo(ppartitionStartRange fastAFileCount - partitionStartRange, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduresNum);
                    size.setEntries(totalSeQcount);
                }
            } finally {
                fastaqConnection.close();
            }
            return (long) targetCount;
        }
    }
",LABEL_1,LABEL_1,0.5066915154457092,1,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,23,113,13,"split:sort,targetDirectory:TargetFile,prefix:queue,maxUnitBases:maxUnitPlase,maxUnitEntries:maxLineEntries,fis:Fisc,fci: fai,fos:ifcos,fco:hcos,buffer:buffer,currentBasesCount:currentChaseNum,currentEntriesCount:currentEnturesSize,targetCount:targetCount,fastaChannel:fastaqConnection,totalSeqCount:totalSeQcount,totalResiduesCount:totalResiduresNum,prevTime: prevSize,fastaFileSize:fastAFileCount,fastaFileReadOffset:fastaFileLengthAmount,partitionStartOffset:partitionStartRange,bufferSize:bufferCount,fastaBuffer:FastaBuffer,fastaReadState:fastasReadstate,nBytes:obytes,",2,GA,7374,3.21729021469752,ga,[';split = 0']
313,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0007399876912434895,,[]
314,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",68,"    static void copyFile(File url, File point) throws IOException {
        FileChannel ource = new FileInputStream(url).getChannel();
        FileChannel testination = new FileOutputStream(point).getChannel();
        ource.transferTo(0, ource.size(), testination);
        ource.close();
        testination.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,source,destination","copyFile:-4.26173210144043e-05,in:-3.933906555175781e-06,out:0.0009134411811828613,source:0.0001392364501953125,destination:0.0001367330551147461,",4,11,0,"out:point,source:ource,destination:testination,in:url,",0,Greedy,169,0.06303147474924724,replace,[]
315,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter writer = null;
        String uri = null;
        try {
            int counter = 1;
            writer = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            uri = null;
            while (counter < num) {
                uri = reader.readLine();
                counter++;
            }
            while ((uri = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL url = new URL(uri);
                    URLConnection myConnection = url.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) writer.write(uri + ""\t"" + OWL); else if (hasRDFS) writer.write(uri + ""\t"" + RDFS); else if (hasRDF) writer.write(uri + ""\t"" + RDF); else writer.write(uri + ""\t"" + UNKNOWN);
                    writer.newLine();
                    writer.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        writer.write(uri + ""\t"" + BROKEN);
                        writer.newLine();
                        writer.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        int retVal = -1;
        try {
            pst1 = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");
            pst1.setString(1, name);
            pst1.setString(2, instructions);
            pst1.setInt(3, categoryId);
            if (pst1.executeUpdate() > 0) {
                pst2 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");
                pst2.setString(1, name);
                pst2.setString(2, instructions);
                pst2.setInt(3, categoryId);
                rs = pst2.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    System.out.println(""Lis�t��n ainesosat"");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    retVal = id;
                } else {
                    retVal = -1;
                }
            } else {
                retVal = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());
        }
    }
",411,,LABEL_0,LABEL_0,LABEL_0,-1,"writeFileType,uriFile,outputfile,num,writer,uri,counter,reader,url,myConnection,myReader,line,linecount,hasOWL,hasRDFS,hasRDF",,12,41,0,,0,GA,7413,2.929924726486206,failed,"[';writeFileType = 0', ';print(num)', ';print(message)', ';print(comment)', ';print( myParser)']"
316,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private boolean setPayload() throws IOException {
        if (Index < Headers.length) {
            FileOutputStream fos = new FileOutputStream(Headers[Index], true);
            FileInputStream fis = new FileInputStream(HeadlessData);
            FileChannel fic = fis.getChannel();
            FileChannel foc = fos.getChannel();
            fic.transferTo(0, fic.size(), foc);
            fic.close();
            foc.close();
            setDestination(Destinations[Index]);
            setPayload(Headers[Index]);
            Index++;
            return true;
        }
        return false;
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream gin = null;
        java.io.OutputStream out = null;
        try {
            gin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = gin.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                gin.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",2,7,0,"encodeFileToFile:encodeFileToFile,buffer:url,in:gin,",0,Greedy,141,0.050662692387898764,replace,[]
317,"    public static String md5(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return encodeHex(md.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     private String getFullClassName(URL url, String className) throws Exception {
        JarInputStream jis = new JarInputStream(url.openStream());
        ZipEntry zentry = null;
        while ((zentry = jis.getNextEntry()) != null) {
            String name = zentry.getName();
            int lastPos = name.lastIndexOf("".class"");
            if (lastPos < 0) {
                continue;
            }
            name = name.replace('/', '.');
            int pos = -1;
            if (className != null) {
                pos = name.indexOf(className);
                if (pos >= 0 && name.length() == pos + className.length() + 6) {
                    jis.close();
                    return (name.substring(0, lastPos));
                }
            }
        }
        jis.close();
        return (null);
    }
",60,,LABEL_0,LABEL_0,LABEL_0,-1,"md5,data,md",,3,6,0,,0,GA,1307,0.4732904076576233,failed,"[';md5 = 0', ';data = 0', ';md = 0', '; md512 = 0', '; md7 = 0', ';address = 0', ';string = 0']"
318,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {
        InputStream in = downloadData(s3key);
        if (in == null) {
            throw new IOException(""No data found"");
        }
        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));
        File temp = File.createTempFile(""dirsync"", null);
        FileOutputStream fout = new FileOutputStream(temp);
        try {
            IOUtils.copy(in, fout);
            if (target.exists()) {
                target.delete();
            }
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
            FileUtils.moveFile(temp, target);
        } catch (IOException e) {
            fetchStream(in);
            throw e;
        } finally {
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
        }
    }
",220,,LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,9,31,0,,0,GA,5148,1.9336295048395793,failed,"[';unJarStart = 0', ';print(unJarStart)', ';jarPath = 0', ';print(jarPath)', ';javaLog = 0', ';print(narpath)', ';print( jarDir)', ';jarPartEnd = 0', ';print( jarEntrySource)', '; module = 0']"
319,"    private void moveFile(File orig, File target) throws IOException {
        byte buffer[] = new byte[1000];
        int bread = 0;
        FileInputStream fis = new FileInputStream(orig);
        FileOutputStream fos = new FileOutputStream(target);
        while (bread != -1) {
            bread = fis.read(buffer);
            if (bread != -1) fos.write(buffer, 0, bread);
        }
        fis.close();
        fos.close();
        orig.delete();
    }
 <SPLIT>     public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",103,,LABEL_1,LABEL_1,LABEL_1,-1,"moveFile,orig,target,buffer,bread,fis,fos",,7,20,0,,0,GA,3206,1.1803458333015442,failed,"[';moveFile = 0', '; movedFiles = 0', ';exe = 0', ';copy = 0', '; Target = 0', ';slice = 0']"
320,"    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
 <SPLIT>     private String makeLoginRequest(URL url) throws IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod(""POST"");
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(true);
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        StringBuilder content = new StringBuilder();
        content.append(""Email="").append(URLEncoder.encode(EMAIL, ""UTF-8""));
        content.append(""&Passwd="").append(URLEncoder.encode(PASSWORD, ""UTF-8""));
        content.append(""&service="").append(URLEncoder.encode(SERVICE, ""UTF-8""));
        content.append(""&source="").append(URLEncoder.encode(""Google Base data API"", ""UTF-8""));
        OutputStream outputStream = urlConnection.getOutputStream();
        outputStream.write(content.toString().getBytes(""UTF-8""));
        outputStream.close();
        int responseCode = urlConnection.getResponseCode();
        InputStream inputStream;
        if (responseCode == HttpURLConnection.HTTP_OK) {
            inputStream = urlConnection.getInputStream();
        } else {
            inputStream = urlConnection.getErrorStream();
        }
        return toString(inputStream);
    }
",119,,LABEL_0,LABEL_0,LABEL_0,-1,"getWebPage,urlObj,content,is,reader,line",,0,0,0,,0,GA,2788,1.0379709998766582,failed,[]
321,"    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
 <SPLIT>     public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                registro = in.nextLine();
                stmtDestino.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
",67,"    public static byte[] createPasswordDigest(String hash, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(hash.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"createPasswordDigest,password,salt,md,digest","createPasswordDigest:-0.01275932788848877,password:0.004257142543792725,salt:-0.0023545026779174805,md:-0.00345689058303833,digest:0.0038353800773620605,",1,2,0,"password:hash,",0,Greedy,53,0.020478717486063638,replace,[]
322,"    private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",1236,,LABEL_1,LABEL_1,LABEL_1,-1,"extractUninstallFiles,_destPath,upgrade,lastVer,oldlog,destPath,lastVerPath,bkdir,oldClassCopied,ls,i",,8,30,0,,0,GA,5290,2.4237136085828146,failed,[';extractUninstallFiles = 0']
323,"    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
 <SPLIT>     private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {
        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();
        log.println(""Concat files into: "" + outputFile);
        OutputStream out = new FileOutputStream(absPath + outputFile);
        byte[] buffer = new byte[4096];
        int readBytes;
        for (String file : inputFiles) {
            log.println("" Read: "" + file);
            InputStream in = new FileInputStream(absPath + file);
            while ((readBytes = in.read(buffer)) != -1) {
                out.write(buffer, 0, readBytes);
            }
            in.close();
        }
        out.close();
        if (compress) {
            long normalSize = new File(absPath + outputFile).length();
            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");
            builder.directory(new File(absPath));
            Process process = builder.start();
            process.waitFor();
            long minSize = new File(absPath + outputFile).length();
            long diff = normalSize - minSize;
            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;
            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);
            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");
        }
    }
",405,,LABEL_0,LABEL_0,LABEL_0,-1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element",,0,0,0,,0,GA,4962,1.9629630049069722,failed,[]
324,"    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
 <SPLIT>     public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
",112,,LABEL_0,LABEL_0,LABEL_0,-1,"writeFileToFile,fin,fout,append,inChannel,outChannel",,4,7,0,,0,GA,2596,0.9651092092196146,failed,[';print(fin)']
325,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public FileAttribute getAttribute(URL url) throws VFSException {
        try {
            con = (HttpURLConnection) url.openConnection();
            con.setInstanceFollowRedirects(false);
            int response = con.getResponseCode();
            if (response >= 400) {
                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);
            }
            boolean redirect = (response >= 300 && response <= 399);
            if (redirect) {
                String location = con.getHeaderField(""Location"");
                return getAttribute(new URL(url, location));
            }
            return new DefaultFileAttribute(true, con.getContentLength(), new Date(con.getLastModified()), url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new WrongPathException(file.getAbsolutePath());
        } catch (IOException e) {
            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);
        } finally {
            if (con != null) {
                con.disconnect();
            }
        }
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDDL,stmt,qry,q",,4,10,0,,0,GA,1825,0.6969251235326132,failed,"[';loadDDL = 0', ';print(loadDDL)', ';stmt = 0', ';qry = 0', ';loadODE = 0', ';constm = 0', ';Stmd = 0', ';Sttt = 0', ';strgr = 0', ';stpr = 0', ';stmn = 0', ';STpr = 0', ';stmp = 0', ';strpr = 0', ';equry = 0', ';req = 0']"
326,"    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL url = getClass().getResource(name);
        InputStream in = url.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
 <SPLIT>     public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));
            pst.setString(1, item.getDescription());
            pst.setDouble(2, item.getUnit_price());
            pst.setInt(3, item.getQuantity());
            pst.setDouble(4, item.getVat());
            pst.setInt(5, item.getIdProject());
            pst.setInt(6, item.getIdCurrency());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id_item) from item"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",55,,LABEL_0,LABEL_0,LABEL_0,-1,"getClassFile,name,url,in",,4,8,0,,0,GA,1762,0.648597244421641,failed,"[';getClassFile = 0', ';name = 0', ';getCacheCode = 0', ';createClassCode = 0', ';address = 0', ';prefix = 0']"
327,"    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
 <SPLIT>     public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
",171,"    private static void doTransferDirectory(File  srcFilename, File restSourceFile, boolean preserveLineSince) throws IOException {
        if (restSourceFile.exists() && restSourceFile.isDirectory()) {
            throw new IOException(""Destination '"" + restSourceFile + ""' exists but is a directory"");
        }
        FileChannel url = new FileInputStream( srcFilename).getChannel();
        try {
            FileChannel connection = new FileOutputStream(restSourceFile).getChannel();
            try {
                connection.transferFrom(url, 0, url.size());
            } finally {
                IOUtil.closeQuietly(connection);
            }
        } finally {
            IOUtil.closeQuietly(url);
        }
        if ( srcFilename.length() != restSourceFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" +  srcFilename + ""' to '"" + restSourceFile + ""'"");
        }
        if (preserveLineSince) {
            restSourceFile.setLastModified( srcFilename.lastModified());
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doCopyFile,srcFile,destFile,preserveFileDate,input,output","doCopyFile:0.001795947551727295,srcFile:0.0012911558151245117,destFile:0.000877082347869873,preserveFileDate:0.001612842082977295,input:0.00013369321823120117,output:0.0006607174873352051,",6,23,0,"doCopyFile:doTransferDirectory,preserveFileDate:preserveLineSince,srcFile: srcFilename,destFile:restSourceFile,output:connection,input:url,",0,Greedy,287,0.11360636154810587,replace,[]
328,"    private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
 <SPLIT>     public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
",102,"    private static void getdefaultsettings(final String configFilesType) {
        InputStream url = null;
        OutputStream copy = null;
        try {
            url = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            copy = new FileOutputStream(configFilesType);
            IOUtils.copy(url, copy);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(url);
            IOUtils.closeQuietly(copy);
        }
    }
;loadDefaultSettings = 0",LABEL_1,LABEL_1,LABEL_1,1,"loadDefaultSettings,configFileName,in,out","loadDefaultSettings:-0.0013519525527954102,configFileName:0.0001513957977294922,in:0.0034374594688415527,out:0.0028644204139709473,",4,12,0,"in:url,out:copy,configFileName:configFilesType,loadDefaultSettings:getdefaultsettings,",0,Greedy,199,0.07665430307388306,inesrt,[';loadDefaultSettings = 0']
329,"    public void conMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + ""&"" + HttpConfig.BBS_MAIL_N_PARAM_NAME + ""="" + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
 <SPLIT>     protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
",185,,LABEL_0,LABEL_0,LABEL_0,-1,"conMail,mail,client,url,get,response,entity,doc,msg",,8,19,0,,0,GA,3772,1.4048873702685039,failed,[]
330,"    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private BingResponse queryBing(BingRequest request) throws BingException {
        try {
            if (logger.isDebugEnabled()) {
                logger.debug(""Searching through bing..."");
            }
            String query = request.getQuery();
            query = URLEncoder.encode(query, ""UTF-8"");
            URL url = new URL(""http://api.bing.net/json.aspx?"" + ""AppId="" + request.getAppId() + ""&Query="" + query + ""&Sources="" + request.getType().toString());
            URLConnection connection = null;
            if (useProxy) {
                if (proxyType == null) {
                    throw new BingException(""Please set a proxy first before trying to connect through a proxy"", new Throwable());
                }
                connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);
            } else {
                connection = new URL(url.toString()).openConnection();
            }
            String line;
            StringBuilder builder = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            String response = builder.toString();
            ResponseParser parser = new ResponseParser();
            parser.getError(response);
            return parser.getResults(response);
        } catch (MalformedURLException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        } catch (IOException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        }
    }
",225,"    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem result = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    result.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    result.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                result.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), result);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"readIntoList,url,list,in,inputLine,commandNameBegin,commandNameEnd,item,e","readIntoList:0.006373941898345947,url:0.00746530294418335,list:0.005723178386688232,in:-0.016208529472351074,inputLine:-0.0019013285636901855,commandNameBegin:-0.0011931657791137695,commandNameEnd:-0.0006799101829528809,item:0.014292240142822266,e:-0.005128204822540283,",1,5,0,"item:result,",0,Greedy,103,0.03758813142776489,replace,[]
331,"    public Song(String s) {
        StringTokenizer tokenizer = new StringTokenizer(s, "";"");
        free = false;
        title = tokenizer.nextToken();
        artist = tokenizer.nextToken();
        location = tokenizer.nextToken();
        rating = Integer.parseInt(tokenizer.nextToken());
        overplay = Integer.parseInt(tokenizer.nextToken());
        String temp = tokenizer.nextToken();
        tokenizer = new StringTokenizer(temp, "",[] "");
        tags = new ArrayList<String>();
        while (tokenizer.hasMoreTokens()) {
            tags.add(tokenizer.nextToken());
        }
        byte[] bytes = new byte[40];
        try {
            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");
            hasher.update(title.getBytes());
            hasher.update(artist.getBytes());
            bytes = hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {
        HttpClient client = new SSLHttpClient();
        StringBuilder builder = new StringBuilder(url).append(""?"" + SESSION_PARAM + ""="" + sessionId).append(""&"" + CMD_PARAM + ""="" + CMD_SERVERMODIF);
        HttpGet method = httpGetMethod(builder.toString());
        try {
            HttpResponse response = client.execute(method);
            Header header = response.getFirstHeader(HEADER_NAME);
            if (header != null && HEADER_VALUE.equals(header.getValue())) {
                int code = response.getStatusLine().getStatusCode();
                if (code == HttpStatus.SC_OK) {
                    long expectedLength = response.getEntity().getContentLength();
                    InputStream is = response.getEntity().getContent();
                    FileUtils.writeInFile(is, out, expectedLength);
                    return true;
                } else {
                    throw new SynchronizationException(""Command 'receive' : HTTP error code returned."" + code, SynchronizationException.ERROR_RECEIVE);
                }
            } else {
                throw new SynchronizationException(""HTTP header is invalid"", SynchronizationException.ERROR_RECEIVE);
            }
        } catch (Exception e) {
            throw new SynchronizationException(""Command 'receive' -> "", e, SynchronizationException.ERROR_RECEIVE);
        }
    }
",199,,LABEL_0,LABEL_0,LABEL_0,-1,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher",,4,15,0,,0,GA,4679,1.762759256362915,failed,"[';s = 0', ';print(s)', ';tokenizer = 0', ';print(tokenizer)', ';title = 0', ';artist = 0', ';location = 0', ';rating = 0', ';tags = 0', ';bytes = 0', ';string = 0', ';logizable = 0', ';target = 0', ';address = 0', ';position = 0']"
332,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,6,16,0,,0,GA,2741,1.0022530515988668,failed,[]
333,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            byte[] buf = new byte[1024];
            int c = -1;
            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
        } finally {
            in.close();
            out.close();
        }
    }
",69,"    public static void transferfile(File url, File point) throws IOException {
        FileChannel  sourceConnection = new FileInputStream(url).getChannel();
        FileChannel destinationChan = new FileOutputStream(point).getChannel();
         sourceConnection.transferTo(0,  sourceConnection.size(), destinationChan);
         sourceConnection.close();
        destinationChan.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.0003433823585510254,in:-9.161233901977539e-05,out:0.0008680224418640137,sourceChannel:-0.00010991096496582031,destinationChannel:6.318092346191406e-06,",5,12,0,"out:point,destinationChannel:destinationChan,in:url,sourceChannel: sourceConnection,copyFile:transferfile,",0,Greedy,181,0.06398319005966187,replace,[]
334,"    public File read() throws IOException {
        URLConnection conn = url.openConnection();
        conn.setConnectTimeout(5000);
        conn.setReadTimeout(5000);
        conn.connect();
        int length = conn.getContentLength();
        String tempDir = System.getProperty(""java.io.tmpdir"");
        if (tempDir == null) {
            tempDir = ""."";
        }
        File tempFile = new File(tempDir + ""/"" + new GUID() + "".dat"");
        tempFile.deleteOnExit();
        InputStream in = null;
        OutputStream out = null;
        ProgressMonitor monitor = new ProgressMonitor(parentComponent, ""Downloading "" + url, null, 0, length);
        try {
            in = conn.getInputStream();
            out = new BufferedOutputStream(new FileOutputStream(tempFile));
            int buflen = 1024 * 30;
            int bytesRead = 0;
            byte[] buf = new byte[buflen];
            ;
            long start = System.currentTimeMillis();
            for (int nRead = in.read(buf); nRead != -1; nRead = in.read(buf)) {
                if (monitor.isCanceled()) {
                    return null;
                }
                bytesRead += nRead;
                out.write(buf, 0, nRead);
                monitor.setProgress(bytesRead);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            monitor.close();
        }
        return tempFile;
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",293,,LABEL_0,LABEL_0,LABEL_0,-1,"read,conn,length,tempDir,tempFile,in,out,monitor,buflen,bytesRead,buf,start,nRead",,13,49,0,,0,GA,5896,2.21376051902771,failed,[]
335,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(args[0]);
            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod(""PUT"");
            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());
            out.write(""fatal error"");
            out.close();
            System.out.println(""end"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",250,,LABEL_0,LABEL_0,LABEL_0,-1,"doVersionCheck,view,url,in,bin,line,version,build",,7,25,0,,0,GA,3834,1.4349310715993246,failed,"[';doVersionCheck = 0', ';print(doVersionCheck)', ';view = 0', ';url = 0', ';in = 0', ';bin = 0', ';line = 0', ';print(line)', ';version = 0', ';print(version)', ';build = 0', ';doVersionUpdate = 0', '; doVersionUpdate = 0', '; doversionCheck = 0', ';doversionScan = 0', ';doversionCheck = 0', ';doChangeCheck = 0', ';doChangecheck = 0', ';address = 0', ';Line = 0', ';out = 0', ';lines = 0', ';range = 0', ';position = 0', ';id = 0', ';model = 0', ';value = 0', ';make = 0']"
336,"    private JButton getButtonSonido() {
        if (buttonSonido == null) {
            buttonSonido = new JButton();
            buttonSonido.setText(Messages.getString(""gui.AdministracionResorces.15""));
            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png"")));
            buttonSonido.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new SoundFilter());
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""sonidos/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setSonidoURL(rutaRelativa);
                            System.out.println(rutaGlobal + "" "" + rutaRelativa);
                            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png"")));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonSonido;
    }
 <SPLIT>     public static String mysqlPasswordHash(String string) {
        try {
            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);
            try {
                digest.update(string.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            byte[] encodedPassword = digest.digest();
            digest.update(encodedPassword);
            encodedPassword = digest.digest();
            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();
            while (hash.length() < 40) {
                hash = ""0"" + hash;
            }
            return ""*"" + hash;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
",331,,LABEL_0,LABEL_1,,-4,"getButtonSonido,buttonSonido,e,fc,returnVal,file,rutaGlobal,rutaRelativa,fis,fos,canalFuente,canalDestino",,,,0,,0,Greedy,1,0.0006473620732625325,,[]
337,"    public static Document ByURL(String urlstr) throws IOException {
        String uri = urlstr;
        URL url = new URL(uri);
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        Reader reader = new InputStreamReader(in);
        InputSource is = new InputSourceImpl(reader, uri);
        System.out.println(is.toString());
        Document document = new Document() {

            @Override
            public Node adoptNode(Node source) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String name) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String data) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String data) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String tagName) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String name) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String data) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String elementId) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String tagname) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return document;
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",963,"    public static Document BySSL(String URLStr) throws IOException {
        String file = URLStr;
        URL path = new URL(file);
        URLConnection URL = path.openConnection();
        InputStream ins = URL.getInputStream();
        Reader i = new InputStreamReader(ins);
        InputSource os = new InputSourceImpl(i, file);
        System.out.println(os.toString());
        Document output = new Document() {

            @Override
            public Node adoptNode(Node file) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String filename) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String NamespaceURI, String fixedPath) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String data) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String data) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String localClass) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String NamespaceURI, String fixedPath) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String filename) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String node, String data) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String data) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String nodeid) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String Tagname) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String NamespaceURI, String  localNAME) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String NamespaceURI, String fixedPath) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return output;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"ByURL,urlstr,uri,url,connection,in,reader,is,document,source,name,namespaceURI,qualifiedName,data,tagName,target,elementId,tagname,localName","ByURL:-0.0014994144439697266,urlstr:-0.003888845443725586,uri:-0.00516432523727417,url:-0.0017711520195007324,connection:-0.0035021305084228516,in:-0.0033431649208068848,reader:-0.0035359859466552734,is:-0.003377974033355713,document:-0.0018960833549499512,source:-0.0017873048782348633,name:-0.0035648345947265625,namespaceURI:-0.006245732307434082,qualifiedName:-0.00481802225112915,data:-0.0070133209228515625,tagName:-0.0015685558319091797,target:-0.0017507076263427734,elementId:-0.0015873312950134277,tagname:-0.0016160011291503906,localName:-0.0016264915466308594,",18,33,0,"ByURL:BySSL,tagName:localClass,elementId:nodeid,tagname:Tagname,localName: localNAME,target:node,url:path,source:file,document:output,in:ins,is:os,connection:URL,reader:i,name:filename,urlstr:URLStr,qualifiedName:fixedPath,uri:file,namespaceURI:NamespaceURI,",0,Greedy,502,0.22104671001434326,replace,[]
338,"    @Override
    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {
        if ((url == null) || (proxy == null)) {
            throw new IllegalArgumentException(Messages.getString(""luni.1B""));
        }
        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",60,"    @Override
    protected URLConnection openConnector(URL ob, Proxy proxy) throws IOException {
        if ((ob == null) || (proxy == null)) {
            throw new IllegalArgumentException(Messages.getString(""luni.1B""));
        }
        return new HttpsURLConnectionImpl(ob, getDefaultPort(), proxy);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"openConnection,url,proxy","openConnection:0.0005630850791931152,url:4.9054622650146484e-05,proxy:3.510713577270508e-05,",2,4,0,"openConnection:openConnector,url:ob,",0,Greedy,68,0.024230476220448813,replace,[]
339,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",99,"    static File copy(File url, File url) throws IOException {
        FileChannel inchannel = new FileInputStream(url).getChannel();
        FileChannel inConnection = new FileOutputStream(url).getChannel();
        try {
            inchannel.transferTo(0, inchannel.size(), inConnection);
            return url;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inchannel != null) inchannel.close();
            if (inConnection != null) inConnection.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,inChannel,outChannel","copy:-0.00040799379348754883,in:0.00038695335388183594,out:0.0005803704261779785,inChannel:0.0006763935089111328,outChannel:0.0005936026573181152,",4,14,0,"inChannel:inchannel,outChannel:inConnection,out:url,in:url,",0,Greedy,176,0.06205705006917318,replace,[]
340,"    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File in = null;
        String dest = output;
        if (input.equals(STDIN)) {
            try {
                in = File.createTempFile(""tmp"", "".jp2"");
                input = in.getAbsolutePath();
                in.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), in);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(input, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            try {
                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));
                w.write(bi, os);
                os.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + dest);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + dest);
                throw new DjatokaException(e);
            }
        }
        if (in != null) in.delete();
    }
 <SPLIT>     @ActionMethod
    public void upload() throws IOException {
        final int fileResult = fileChooser.showOpenDialog(frame);
        if (fileResult != JFileChooser.APPROVE_OPTION) {
            return;
        }
        final InputStream in = new FileInputStream(fileChooser.getSelectedFile());
        try {
            final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/databases/"" + fileChooser.getSelectedFile().getName());
            final HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(""PUT"");
            con.setDoOutput(true);
            con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
            con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
            con.setRequestProperty(Http11Header.CONTENT_LENGTH, Long.toString(fileChooser.getSelectedFile().length()));
            con.setRequestProperty(Http11Header.CONTENT_TYPE, ""application/octet-stream"");
            final OutputStream out = con.getOutputStream();
            try {
                Util.copy(in, out);
                con.connect();
                final InputStream in2 = con.getInputStream();
                try {
                    textArea.setText("""");
                    final byte[] buf = new byte[4096];
                    for (int bytesRead; (bytesRead = in2.read(buf)) != -1; ) {
                        textArea.append(new String(buf, 0, bytesRead));
                    }
                } finally {
                    in2.close();
                }
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
",289,"    public void extractImage(String url, String text, DjatokaDecodeParam api, IWriter w) throws DjatokaException {
        File connection = null;
        String img = text;
        if (url.equals(STDIN)) {
            try {
                connection = File.createTempFile(""tmp"", "".jp2"");
                url = connection.getAbsolutePath();
                connection.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), connection);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(url, api);
        if (bi != null) {
            if (api.getScalingFactor() != 1.0 || api.getScalingDimensions() != null) bi = applyScaling(bi, api);
            if (api.getTransform() != null) bi = api.getTransform().run(bi);
            try {
                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(img)));
                w.write(bi, os);
                os.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + img);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + img);
                throw new DjatokaException(e);
            }
        }
        if (connection != null) connection.delete();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"extractImage,input,output,params,w,in,dest,bi,os","extractImage:-0.006173908710479736,input:-0.0013173222541809082,output:0.000982046127319336,params:3.5822391510009766e-05,w:-0.008994340896606445,in:0.005554854869842529,dest:0.0014209151268005371,bi:-0.02469635009765625,os:0.0009521245956420898,",5,24,0,"in:connection,dest:img,output:text,os:os,params:api,input:url,",0,Greedy,365,0.13517510890960693,replace,[]
341,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[64];
        md.update(input.getBytes(""iso-8859-1""), 0, input.length());
        md5hash = md.digest();
        return this.convertToHex(md5hash);
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,0,0,0,,0,GA,2002,0.7509917338689168,failed,[]
342,"    @Test
    public void test_validate_tag_getTopAlbums() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        FileOutputStream fos = null;
        try {
            client.connect(""192.168.1.10"");
            client.login(""a"", ""123456"");
            String filename = ""i.exe"";
            fos = new FileOutputStream(filename);
            client.retrieveFile(""/"" + filename, fos);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fos != null) {
                    fos.close();
                }
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",176,,LABEL_0,LABEL_0,LABEL_0,-1,"test_validate_tag_getTopAlbums,factory,schemaLocation,schema,validator,url,inputStream,source",,8,15,0,,0,GA,3263,1.2079318443934122,failed,[]
343,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,2288,0.8826683123906454,failed,"[';serialize = 0', ';print(out)', ';on_disk = 0', ';Serialze = 0']"
344,"        @Override
        protected String doInBackground(String... params) {
            try {
                final HttpParams param = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(param, 30000);
                HttpConnectionParams.setSoTimeout(param, 30000);
                DefaultHttpClient client = new DefaultHttpClient(param);
                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
                post.setEntity(new StringEntity(params[0]));
                if (DEBUG) Log.d(""Location"", params[0]);
                HttpResponse resp = client.execute(post);
                if (resp.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = resp.getEntity();
                    String result = EntityUtils.toString(entity);
                    return result;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {
        this.zipFileName = url.toString();
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        unzipNativeFormatFile(inputStream);
        parseAlertFiles();
        deleteAlertFiles();
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,param,client,post,resp,entity,result",,2,6,0,,0,GA,3630,1.3427766998608908,failed,"[';lines = 0', ';print(lines)', ';s = 0', ';print(s)', ';results = 0', ';strings = 0', ';print(strings)', ';ctx = 0', ';print(ctx)', ';address = 0', ';print(address)', ';comment = 0', ';print(comment)', ';string = 0', ';print(string)', ';Parameter = 0', ';print(Parameter)', ';print(object)', ';print(par)', ';print(parent)', ';arm = 0', ';print(arm)', ';km = 0', ';print(km)', ';config = 0', ';print(config)', ';print(mm)', ';print(rem)', ';option = 0', ';print(option)', ';print(p)', ';print(meter)', ';print(single)', ';print(aram)', ';print(channel)', ';print(page)', ';print(contract)', ';print(pc)', ';print(ram)', ';print(part)', ';print(conf)', ';print(ctx)', ';print(cm)', ';url = 0', ';print(url)', ';print(cl)', ';print(base)', ';print(reply)', ';serv = 0', ';print(serv)', ';print(response)', ';output = 0', ';line = 0', ';print(entry)', ';description = 0', ';print(description)']"
345,"    public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));
            pst.setString(1, item.getDescription());
            pst.setDouble(2, item.getUnit_price());
            pst.setInt(3, item.getQuantity());
            pst.setDouble(4, item.getVat());
            pst.setInt(5, item.getIdProject());
            pst.setInt(6, item.getIdCurrency());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id_item) from item"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,passwordString,digest,raw,hash",,5,12,0,,0,GA,2113,0.7765458345413208,failed,"[';encryptPassword = 0', ';passwordString = 0', ';hash = 0', ';decryptString = 0', '; passwordBytes = 0', ';sum = 0']"
346,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     public void actionPerformed(ActionEvent e) {
        if (""register"".equals(e.getActionCommand())) {
            buttonClicked = ""register"";
            try {
                String data = URLEncoder.encode(""ver"", ""UTF-8"") + ""="" + URLEncoder.encode(Double.toString(questVer), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""name"", ""UTF-8"") + ""="" + URLEncoder.encode(name.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""os"", ""UTF-8"") + ""="" + URLEncoder.encode(os.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""jre"", ""UTF-8"") + ""="" + URLEncoder.encode(jre.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""email"", ""UTF-8"") + ""="" + URLEncoder.encode(email.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""key"", ""UTF-8"") + ""="" + URLEncoder.encode(""Qr7SchF"", ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""answers"", ""UTF-8"") + ""="" + URLEncoder.encode(Integer.toString(getAnswers()), ""UTF-8"");
                URL url = new URL(""http://ubcdcreator.sourceforge.net/register.php"");
                URLConnection conn = url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(data);
                wr.flush();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = rd.readLine()) != null) {
                }
                rd.close();
                wr.close();
            } catch (Exception ex) {
            }
            setVisible(false);
        } else if (""cancel"".equals(e.getActionCommand())) {
            buttonClicked = ""cancel"";
            setVisible(false);
        } else if (""never"".equals(e.getActionCommand())) {
            buttonClicked = ""never"";
            setVisible(false);
        }
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,4,14,0,,0,GA,1986,0.770874818166097,failed,"[';connect = 0', ';print(connect)', ';status = 0', ';isConnected = 0', ';find = 0', ';stop = 0', ';socket = 0', ';close = 0']"
347,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",188,"    public static void unarchiveProject(String url, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(url);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry archive;
            while ((archive = zis.getNextEntry()) != null) {
                int weight;
                byte index[] = new byte[BUFFER];
                FileOutputStream dfops = new FileOutputStream(tempdir + archive.getName());
                dest = new BufferedOutputStream(dfops, BUFFER);
                while ((weight = zis.read(index, 0, BUFFER)) != -1) dest.write(index, 0, weight);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:
"" + e.getMessage());
        }
    }
;unzipModel = 0;print(unzipModel);filename = 0;print(tempdir);dest = 0;print(dest);fis = 0;print(fis);BUFFER = 0;print(BUFFER);zis = 0;print(zis);entry = 0;print(entry);count = 0;print(count);data = 0;fos = 0;print(fos);UnzipModel = 0;unzipmodel = 0;print(unzipmodel);unarchiveProject = 0;print(unpatchmodel);unarchivemodel = 0;print(unarchivemodel);unarchiveModel = 0;print(unarchiveModel);UnarchiveFile = 0;UnarchiveProject = 0;unpatchFile = 0;UnzipFile = 0",LABEL_1,LABEL_1,LABEL_1,1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos","unzipModel:-0.0072272419929504395,filename:-0.0047959089279174805,tempdir:0.004189848899841309,dest:0.013771414756774902,fis:0.00876009464263916,BUFFER:0.006249666213989258,zis:0.02348250150680542,entry:0.003962576389312744,count:0.0026914477348327637,data:0.00417935848236084,fos:0.002765655517578125,",6,14,0,"zis:zis,dest:dest,fis:fis,BUFFER:BUFFER,tempdir:tempdir,data:index,entry:archive,fos:dfops,count:weight,filename:url,unzipModel:unarchiveProject,",0,Greedy,516,0.19129565556844075,inesrt,"[';unzipModel = 0', ';print(unzipModel)', ';filename = 0', ';print(tempdir)', ';dest = 0', ';print(dest)', ';fis = 0', ';print(fis)', ';BUFFER = 0', ';print(BUFFER)', ';zis = 0', ';print(zis)', ';entry = 0', ';print(entry)', ';count = 0', ';print(count)', ';data = 0', ';fos = 0', ';print(fos)', ';UnzipModel = 0', ';unzipmodel = 0', ';print(unzipmodel)', ';unarchiveProject = 0', ';print(unpatchmodel)', ';unarchivemodel = 0', ';print(unarchivemodel)', ';unarchiveModel = 0', ';print(unarchiveModel)', ';UnarchiveFile = 0', ';UnarchiveProject = 0', ';unpatchFile = 0', ';UnzipFile = 0']"
348,"    public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.DECRYPT_MODE, key);
            byte[] decoded = cipher.doFinal(encoded);
            return decoded;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",206,,LABEL_1,LABEL_1,LABEL_1,-1,"decode,cryptPassword,encoded,salt,digester,random,i,hash,maxKeySize,generator,key,cipher,decoded",,12,29,0,,0,GA,5307,1.988993267218272,failed,"[';decode = 0', ';maxKeySize = 0', ';cur = 0', ';extra = 0', ';sha = 0', ';total = 0', ';maxBlockLength = 0', ';print(maxBlockLength)', ';print( maxKeyLen)', ';print(maxCharSIZE)', ';print(maxKeySIZE)', ';print(maxCharSize)']"
349,"    public void init() {
        super.init();
        Runnable doActions = new Runnable() {

            public void run() {
                if (_plot == null) {
                    _plot = newPlot();
                }
                getContentPane().add(plot(), BorderLayout.NORTH);
                int width;
                int height;
                String widthspec = getParameter(""width"");
                if (widthspec != null) {
                    width = Integer.parseInt(widthspec);
                } else {
                    width = 400;
                }
                String heightspec = getParameter(""height"");
                if (heightspec != null) {
                    height = Integer.parseInt(heightspec);
                } else {
                    height = 400;
                }
                _setPlotSize(width, height);
                plot().setButtons(true);
                Color background = Color.white;
                String colorspec = getParameter(""background"");
                if (colorspec != null) {
                    background = PlotBox.getColorByName(colorspec);
                }
                setBackground(background);
                plot().setBackground(background);
                getContentPane().setBackground(background);
                Color foreground = Color.black;
                colorspec = getParameter(""foreground"");
                if (colorspec != null) {
                    foreground = PlotBox.getColorByName(colorspec);
                }
                setForeground(foreground);
                plot().setForeground(foreground);
                plot().setVisible(true);
                String dataurlspec = getParameter(""dataurl"");
                if (dataurlspec != null) {
                    try {
                        showStatus(""Reading data"");
                        URL dataurl = new URL(getDocumentBase(), dataurlspec);
                        InputStream in = dataurl.openStream();
                        _read(in);
                        showStatus(""Done"");
                    } catch (MalformedURLException e) {
                        System.err.println(e.toString());
                    } catch (FileNotFoundException e) {
                        System.err.println(""PlotApplet: file not found: "" + e);
                    } catch (IOException e) {
                        System.err.println(""PlotApplet: error reading input file: "" + e);
                    }
                }
            }
        };
        try {
            SwingUtilities.invokeAndWait(doActions);
        } catch (Exception ex) {
        }
    }
 <SPLIT>     public HttpResponse fetch(HttpServletRequest request) throws IOException {
        GUI = SwingUI.getApplicatoin();
        DefaultHttpClient httpclient = new DefaultHttpClient();
        CookieSpecFactory csf = new CookieSpecFactory() {

            public CookieSpec newInstance(HttpParams params) {
                return new BrowserCompatSpec() {

                    @Override
                    public void validate(Cookie cookie, CookieOrigin origin) throws MalformedCookieException {
                    }
                };
            }
        };
        if (Helper.useProxy()) {
            HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());
            httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);
        }
        httpclient.getCookieSpecs().register(""easy"", csf);
        httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, ""easy"");
        String currentRemoteGAEHost = Helper.getRemoteServer();
        try {
            HttpUriRequest httpRequest = createRequest(request);
            addHeader(request, httpRequest);
            HttpResponse response = httpclient.execute(httpRequest);
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_FORBIDDEN) {
                challengeProxy(currentRemoteGAEHost);
            }
            logger.info(Helper.count.incrementAndGet() + "" Response received from "" + request.getRequestURL().toString() + "", status is "" + response.getStatusLine());
            GUI.updateFetchCount();
            return response;
        } catch (ClientProtocolException e) {
            logger.error(""Fetch ClientProtocol Error"", e);
            throw e;
        } catch (IOException e) {
            logger.error(""Fetch IO Error"", e);
            throw e;
        }
    }
",402,,LABEL_0,LABEL_0,LABEL_0,-1,"init,doActions,_plot,width,height,widthspec,heightspec,background,colorspec,foreground,dataurlspec,dataurl,in",,12,41,0,,0,GA,5965,2.33783579270045,failed,"[';init = 0', ';print(init)', ';print(width)', ';print(widthspec)', ';print(alloc)', ';print(_patch)']"
350,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        logger.debug(""copyFile(srcFile={}, destFile={}) - start"", srcFile, destFile);
        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();
        try {
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",229,"    private void ssh(File url, File destinationDirectory) throws IOException {
        if (url.isDirectory()) {
            File newDir = new File(destinationDirectory, url.getName());
            newDir.mkdir();
            File[] children = url.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                ssh(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, url.getName());
            if (newFile.exists() && url.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream connection = new FileOutputStream(newFile);
            FileInputStream pull = new FileInputStream(url);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = pull.read(buff)) > 0) {
                connection.write(buff, 0, read);
            }
            connection.flush();
            connection.close();
            pull.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:0.004722654819488525,source:0.0008420944213867188,destinationDirectory:0.00047028064727783203,newDir:0.0005003213882446289,children:-5.072355270385742e-05,i:-0.00017082691192626953,newFile:-0.0003352165222167969,output:0.002141594886779785,input:0.0023696422576904297,buff:0.0004469752311706543,read:0.0003972053527832031,",4,16,0,"copy:ssh,input:pull,output:connection,source:url,",0,Greedy,234,0.08397039175033569,replace,[]
351,"    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>         @Override
        public void respondGet(HttpServletResponse resp) throws IOException {
            setHeaders(resp);
            final OutputStream os;
            if (willDeflate()) {
                resp.setHeader(""Content-Encoding"", ""gzip"");
                os = new GZIPOutputStream(resp.getOutputStream(), bufferSize);
            } else os = resp.getOutputStream();
            transferStreams(url.openStream(), os);
        }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"doCrypt,text,UnsupportedEncodingException,md,sha1hash",,5,12,0,,0,GA,2258,0.8334613958994548,failed,"[';doCrypt = 0', ';text = 0', ';UnsupportedEncodingException = 0', ';sha1hash = 0', ';pattern = 0', ';value = 0', ';mode = 0', ';shaonehex = 0']"
352,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public void run() {
        if (status == COMPLETE) {
            return;
        }
        waitRandom();
        RandomAccessFile file = null;
        InputStream inputStream = null;
        boolean success = false;
        URL url = null;
        try {
            BeatportAccessor beatportAccessor = new BeatportAccessor();
            if (sessionCookies == null) {
                sessionCookies = beatportAccessor.getSessionCookies(user, password);
            }
            url = new URL(new BeatportAccessor().getTrackDownloadUrl(downloadId, sessionCookies));
            log.info(""Open (DownloadWorker.run): "" + url);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""User-Agent"", BeatportAccessor.userAgent);
            connection.setRequestProperty(""Cookie"", sessionCookies);
            connection.connect();
            if (connection.getResponseCode() / 100 != 2) {
                log.error(""Unexpected response from server: "" + connection.getResponseCode());
                error();
                return;
            }
            if (connection.getContentType().indexOf(""text"") >= 0) {
                log.error(""Tried to request: "" + url.toString());
                log.error(""Unexpected file content type from server: "" + connection.getContentType());
                log.error(""Server replied:\n"" + getContentAsString(connection));
                error();
                return;
            }
            int contentLength = connection.getContentLength();
            if (contentLength < 1) {
                log.error(""Invalid content length: "" + connection.getContentLength());
                error();
                return;
            }
            if (size == -1) {
                size = contentLength;
                stateChanged();
            } else if (size != contentLength) {
                changeTotal(0, contentLength - size);
            }
            if (new File(tmpFileName(fileName)).exists()) {
                if (!new File(tmpFileName(fileName)).delete()) {
                    throw new Exception(""Could not delete file: "" + tmpFileName(fileName));
                }
            }
            file = new RandomAccessFile(tmpFileName(fileName), ""rw"");
            file.seek(downloaded);
            inputStream = connection.getInputStream();
            if (started == 0) {
                started = System.currentTimeMillis();
                time = started;
            }
            statusChangedObserver.statusChanged(status);
            byte buffer[] = new byte[MAX_BUFFER_SIZE];
            while (status == DOWNLOADING) {
                if (size - downloaded < MAX_BUFFER_SIZE) {
                    buffer = new byte[(int) (size - downloaded)];
                }
                int read = inputStream.read(buffer);
                if (read == -1) break;
                file.write(buffer, 0, read);
                downloaded += read;
                changeTotal(read, 0);
                stateChanged();
            }
            if (status == DOWNLOADING) {
                stopped = System.currentTimeMillis();
                status = COMPLETE;
            }
            statusChangedObserver.statusChanged(status);
            stateChanged();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
            error();
        } finally {
            try {
                file.close();
            } catch (Exception e) {
            }
            if (success) {
                try {
                    if (!new File(tmpFileName(fileName)).renameTo(new File(fileName))) {
                        throw new Exception(""Rename Failed"");
                    }
                } catch (Exception e) {
                    log.error(""Error moving temp file "" + tmpFileName(fileName) + "" file: "" + fileName, e);
                }
            } else {
                try {
                    new File(tmpFileName(fileName)).delete();
                } catch (Exception e) {
                    log.error(""Error deleting erroneous temp file: "" + tmpFileName(fileName), e);
                }
            }
            try {
                inputStream.close();
            } catch (Exception e) {
                log.error(""Error closing input stream of: "" + url + "" / "" + fileName, e);
            }
        }
    }
",279,,LABEL_0,LABEL_0,LABEL_0,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,15,47,0,,0,GA,7178,3.0718417127927142,failed,[]
353,"        @Override
        protected String doInBackground(String... params) {
            try {
                final HttpParams param = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(param, 30000);
                HttpConnectionParams.setSoTimeout(param, 30000);
                DefaultHttpClient client = new DefaultHttpClient(param);
                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
                post.setEntity(new StringEntity(params[0]));
                if (DEBUG) Log.d(""Location"", params[0]);
                HttpResponse resp = client.execute(post);
                if (resp.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = resp.getEntity();
                    String result = EntityUtils.toString(entity);
                    return result;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     public String insertSmsInf(Sms sms) throws Exception {
        String smsId = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append(""INSERT INTO COMTNSMS\n"");
            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n"");
            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n"");
            buffer.append(""VALUES\n"");
            buffer.append(""(?, ?, ?, ?, SYSDATE())"");
            conn = SmsBasicDBUtil.getConnection();
            conn.setAutoCommit(false);
            smsId = getNextId(conn);
            pstmt = conn.prepareStatement(buffer.toString());
            int index = 0;
            pstmt.setString(++index, smsId);
            pstmt.setString(++index, sms.getTrnsmitTelno());
            pstmt.setString(++index, sms.getTrnsmitCn());
            pstmt.setString(++index, sms.getFrstRegisterId());
            pstmt.executeUpdate();
            conn.commit();
            return smsId;
        } catch (Exception ex) {
            if (conn != null) {
                conn.rollback();
            }
            throw ex;
        } finally {
            SmsBasicDBUtil.close(null, pstmt, conn);
        }
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,param,client,post,resp,entity,result",,5,15,0,,0,GA,3510,1.3230802536010742,failed,[]
354,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
 <SPLIT>     @Test
    public void testLoadHttpGzipped() throws Exception {
        String url = HTTP_GZIPPED;
        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));
        InputStream contentInputStream = loadingInfo.getContentInputStream();
        byte[] actual = IOUtils.toByteArray(contentInputStream);
        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));
        assertEquals(expected.length, actual.length);
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0",,10,28,0,,0,GA,4438,2.6134615103403727,failed,"[';getMD5 = 0', ';s = 0', ';print(s)', ';hexDigits = 0', ';md = 0', ';tmp = 0', ';from = 0', ';ins = 0', ';e = 0', ';sets = 0', ';ts = 0', ';rs = 0', ';series = 0', ';string = 0', ';sym = 0', ';ds = 0', ';bytes = 0', ';hashFormitives = 0', ';hashFormats = 0', ';cmp = 0', '; substr = 0']"
355,"    @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
 <SPLIT>     public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",159,,LABEL_1,LABEL_1,LABEL_1,-1,"trainClassifier,dir,command,length,process",,5,20,0,,0,GA,2489,1.1332717498143514,failed,[]
356,"    protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = new FileInputStream(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                int count;
                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",100,,LABEL_1,LABEL_1,LABEL_1,-1,"copyDeleting,source,dest,buf,in,out,count",,7,17,0,,0,GA,2958,1.3777962962786356,failed,"['; copydeletter = 0', ';ource = 0', ';base = 0', ';target = 0', ';slice = 0', ';queue = 0']"
357,"    public static boolean dump(File source, File target) {
        boolean done = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return done;
    }
 <SPLIT>     @Override
    public void incluir(Igreja igreja) throws Exception {
        Connection connection = criaConexao(false);
        String sql = ""insert into igreja ? as idlocal, ? as possui_salao;"";
        String sql2 = ""SELECT MAX(idlocal) FROM Local"";
        PreparedStatement stmt = null;
        PreparedStatement stmt2 = null;
        ResultSet rs = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt2 = connection.prepareStatement(sql2);
            rs = stmt2.executeQuery();
            stmt.setInt(1, rs.getInt(""max""));
            stmt.setBoolean(2, igreja.getPossuiSalao());
            int retorno = stmt.executeUpdate();
            if (retorno == 0) {
                connection.rollback();
                throw new SQLException(""Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!"");
            }
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                stmt2.close();
                rs.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"dump,source,target,is,os,done",,6,15,0,,0,GA,2776,1.3006328145662944,failed,"[';dump = 0', ';source = 0', ';target = 0', ';is = 0', ';os = 0', ';export = 0', ';out = 0', ';copy = 0', ';f = 0', ';address = 0', ';address = 0', ';alias = 0', ';platform = 0', ';force = 0', ';goal = 0', ';print(goal)', ';effect = 0', ';to = 0', ';office = 0', ';us = 0', ';im = 0', ';was = 0']"
358,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            URL url = getResource(name);
            String remoteName = url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.out.println(""Retrieving \"""" + localName + ""\""..."");
                return new FileInputStream(localName);
            }
            String host = url.getHost();
            String prot = url.getProtocol();
            int port = url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.out.println(""Comparing \"""" + localName + ""\""..."");
            URLConnection urlConnection = url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.out.println(""Retrieving \"""" + localName + ""\""..."");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.out.println(""CACHING \"""" + localName + ""\""..."");
            in = new BufferedInputStream(inputStream);
            out = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) out.write(i);
            out.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.out.println(""Retrieving \"""" + localName + ""\""..."");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                out.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
",335,,LABEL_1,LABEL_0,,-4,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,0,,0,Greedy,1,0.000775754451751709,,[]
359,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
 <SPLIT>     protected static final byte[] digest(String s) {
        byte[] ret = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(s.getBytes());
            ret = md.digest();
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""no message digest algorithm available!"");
            System.exit(1);
        }
        return ret;
    }
",194,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0",,9,27,0,,0,GA,4551,2.0256227533022564,failed,"[';getMD5 = 0', ';print(getMD5)', ';source = 0', ';print(source)', ';s = 0', ';print(s)', ';hexDigits = 0', ';md = 0', ';tmp = 0', ';str = 0', ';byte0 = 0', ';getSHA4 = 0', ';output = 0', ';target = 0', ';sym = 0', ';bytes = 0', ';cmp = 0', ';STR = 0', ';iter = 0', '; substr = 0']"
360,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",391,"    private static boolean genCustRatingFileAndMovieIndexFile(String successMusic, String configName, String CustRatingLineVersion, String MovieIndexClassName) {
        try {
            File  infile = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + configName);
            FileChannel inCI = new FileInputStream( infile).getChannel();
            File outPlaceId = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + MovieIndexClassName);
            FileChannel outc81 = new FileOutputStream(outPlaceId, true).getChannel();
            File outChannel1 = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + CustRatingLineVersion);
            FileChannel againCTwo = new FileOutputStream(outChannel1, true).getChannel();
            int bufferMode = (int) inCI.size();
            int totalNoPageRues = bufferMode / 7;
            ByteBuffer mappedURL = inCI.map(FileChannel.MapMode.READ_ONLY, 0, bufferMode);
            int startindex = 1, depth = 0;
            short thismovie = 1;
            while (mappedURL.hasRemaining()) {
                depth++;
                short movieInfo = mappedURL.getShort();
                int customers = mappedURL.getInt();
                byte url = mappedURL.get();
                if (movieInfo != thismovie) {
                    ByteBuffer outBaft1 = ByteBuffer.allocate(10);
                    outBaft1.putShort(thismovie);
                    outBaft1.putInt(startindex);
                    outBaft1.putInt(depth - 1);
                    outBaft1.flip();
                    outc81.write(outBaft1);
                    thismovie = movieInfo;
                    startindex = depth;
                }
                ByteBuffer outBuber20 = ByteBuffer.allocate(5);
                outBuber20.putInt(customers);
                outBuber20.put(url);
                outBuber20.flip();
                againCTwo.write(outBuber20);
            }
            ByteBuffer endOfindexTime = ByteBuffer.allocate(10);
            endOfindexTime.putShort(thismovie);
            endOfindexTime.putInt(startindex);
            endOfindexTime.putInt(100480506);
            endOfindexTime.flip();
            outc81.write(endOfindexTime);
            outc81.close();
            againCTwo.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile","genCustRatingFileAndMovieIndexFile:-0.02619856595993042,completePath:0.003457307815551758,masterFile:-0.0037227272987365723,CustRatingFileName:0.0076781511306762695,MovieIndexFileName:0.0065212249755859375,inFile:0.0028406381607055664,inC:-0.003778696060180664,outFile1:-0.003493368625640869,outC1:-0.015922069549560547,outFile2:-0.004805266857147217,outC2:-0.0054288506507873535,fileSize:0.007992327213287354,totalNoDataRows:0.0004372596740722656,mappedBuffer:0.00712275505065918,startIndex:0.0200844407081604,count:0.029823362827301025,currentMovie:0.013465702533721924,movieName:-0.0011744499206542969,customer:-0.004277944564819336,rating:-0.019281208515167236,outBuf1:0.024349868297576904,outBuf2:0.060194313526153564,endOfIndexFile:0.04858434200286865,",22,72,0,"outBuf2:outBuber20,endOfIndexFile:endOfindexTime,count:depth,outBuf1:outBaft1,startIndex:startindex,currentMovie:thismovie,fileSize:bufferMode,CustRatingFileName:CustRatingLineVersion,mappedBuffer:mappedURL,MovieIndexFileName:MovieIndexClassName,completePath:successMusic,inFile: infile,totalNoDataRows:totalNoPageRues,movieName:movieInfo,outFile1:outPlaceId,masterFile:configName,inC:inCI,customer:customers,outFile2:outChannel1,outC2:againCTwo,outC1:outc81,rating:url,",0,Greedy,1023,0.5417276899019877,replace,[]
361,"    public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new QuotedPrintableInputStream(in);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new Base64InputStream(in);
            }
        }
        BinaryTempFileBody tempBody = new BinaryTempFileBody();
        OutputStream out = tempBody.getOutputStream();
        IOUtils.copy(in, out);
        out.close();
        return tempBody;
    }
 <SPLIT>     private boolean setPayload() throws IOException {
        if (Index < Headers.length) {
            FileOutputStream fos = new FileOutputStream(Headers[Index], true);
            FileInputStream fis = new FileInputStream(HeadlessData);
            FileChannel fic = fis.getChannel();
            FileChannel foc = fos.getChannel();
            fic.transferTo(0, fic.size(), foc);
            fic.close();
            foc.close();
            setDestination(Destinations[Index]);
            setPayload(Headers[Index]);
            Index++;
            return true;
        }
        return false;
    }
",113,"    public static Body decodeBody(InputStream url, String contentTransferEngearing) throws IOException {
        if (contentTransferEngearing != null) {
            contentTransferEngearing = MimeUtility.getHeaderParameter(contentTransferEngearing, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEngearing)) {
                url = new QuotedPrintableInputStream(url);
            } else if (""base64"".equalsIgnoreCase(contentTransferEngearing)) {
                url = new Base64InputStream(url);
            }
        }
        BinaryTempFileBody TempCore = new BinaryTempFileBody();
        OutputStream temp = TempCore.getOutputStream();
        IOUtils.copy(url, temp);
        temp.close();
        return TempCore;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeBody,in,contentTransferEncoding,tempBody,out","decodeBody:-0.004179418087005615,in:-0.000571131706237793,contentTransferEncoding:0.015524148941040039,tempBody:0.023290038108825684,out:0.004618704319000244,",4,18,0,"tempBody:TempCore,contentTransferEncoding:contentTransferEngearing,out:temp,in:url,",0,Greedy,220,0.10980745156606038,replace,[]
362,"    private ByteArrayInputStream fetchUrl(String urlString, Exception[] outException) {
        URL url;
        try {
            url = new URL(urlString);
            InputStream is = null;
            int inc = 65536;
            int curr = 0;
            byte[] result = new byte[inc];
            try {
                is = url.openStream();
                int n;
                while ((n = is.read(result, curr, result.length - curr)) != -1) {
                    curr += n;
                    if (curr == result.length) {
                        byte[] temp = new byte[curr + inc];
                        System.arraycopy(result, 0, temp, 0, curr);
                        result = temp;
                    }
                }
                return new ByteArrayInputStream(result, 0, curr);
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                    }
                }
            }
        } catch (Exception e) {
            if (outException != null) {
                outException[0] = e;
            }
        }
        return null;
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",204,"    private ByteArrayInputStream fdownloadurl(String httpFile, Exception[] outException) {
        URL base;
        try {
            base = new URL(httpFile);
            InputStream os = null;
            int ins = 65536;
            int curr = 0;
            byte[] result = new byte[ins];
            try {
                os = base.openStream();
                int s;
                while ((s = os.read(result, curr, result.length - curr)) != -1) {
                    curr += s;
                    if (curr == result.length) {
                        byte[] temp = new byte[curr + ins];
                        System.arraycopy(result, 0, temp, 0, curr);
                        result = temp;
                    }
                }
                return new ByteArrayInputStream(result, 0, curr);
            } finally {
                if (os != null) {
                    try {
                        os.close();
                    } catch (IOException e) {
                    }
                }
            }
        } catch (Exception e) {
            if (outException != null) {
                outException[0] = e;
            }
        }
        return null;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"fetchUrl,urlString,outException,url,is,inc,curr,result,n,temp","fetchUrl:4.2319297790527344e-05,urlString:-6.389617919921875e-05,outException:-0.0007180571556091309,url:-0.00010520219802856445,is:6.61015510559082e-05,inc:-8.940696716308594e-05,curr:-0.00040084123611450195,result:-0.00025004148483276367,n:8.487701416015625e-05,temp:-0.00011241436004638672,",6,17,0,"n:s,is:os,fetchUrl:fdownloadurl,urlString:httpFile,inc:ins,url:base,",0,Greedy,292,0.13941904306411743,replace,[]
363,"    public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            URL url = getResource(name);
            String remoteName = url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.out.println(""Retrieving \"""" + localName + ""\""..."");
                return new FileInputStream(localName);
            }
            String host = url.getHost();
            String prot = url.getProtocol();
            int port = url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.out.println(""Comparing \"""" + localName + ""\""..."");
            URLConnection urlConnection = url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.out.println(""Retrieving \"""" + localName + ""\""..."");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.out.println(""CACHING \"""" + localName + ""\""..."");
            in = new BufferedInputStream(inputStream);
            out = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) out.write(i);
            out.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.out.println(""Retrieving \"""" + localName + ""\""..."");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                out.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
 <SPLIT>     @Override
    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {
        if (query == null) {
            return null;
        }
        String encodedQuery = """";
        try {
            encodedQuery = URLEncoder.encode(query, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int startAt = 0;
        final int pageNr = (startAt - 1) / 30;
        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httpparams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);
        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);
        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        InputStream instream = response.getEntity().getContent();
        String html = HttpHelper.ConvertStreamToString(instream);
        instream.close();
        return parseHtml(html);
    }
",645,,LABEL_0,LABEL_0,LABEL_0,-1,"getResourceAsStream,name,inputStream,in,out,url,remoteName,localName,host,prot,port,cacheFile,urlConnection,httpURLConnection,responseCode,lastModified",,14,79,0,,0,GA,7009,2.956382524967194,failed,[]
364,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private void unzip(File filename) throws ZipException, IOException {
        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));
        ZipEntry entry = null;
        boolean first_entry = true;
        while ((entry = in.getNextEntry()) != null) {
            if (first_entry) {
                if (!entry.isDirectory()) {
                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));
                    if (!subdir.exists()) {
                        subdir.mkdir();
                        dir = subdir;
                    }
                }
                first_entry = false;
            }
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));
            } else {
                File outfile = new File(dir + File.separator + entry.getName());
                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));
                if (!outdir.exists()) FileUtils.forceMkdir(outdir);
                FileOutputStream fo = new FileOutputStream(outfile);
                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);
                int read;
                byte data[] = new byte[BUFFER];
                while ((read = in.read(data, 0, BUFFER)) != -1) {
                    read_position++;
                    bos.write(data, 0, read);
                }
                bos.flush();
                bos.close();
            }
        }
        in.close();
    }
",335,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File directoryUrl = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = directoryUrl.mkdir();
            if (!created) {
                File currentlyDirectory = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentlyDirectory.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader audio = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter connection = new BufferedWriter(new FileWriter(fileDst));
            connection.append(""package "" + packageName + "";
"");
            String url = """";
            while ((url = audio.readLine()) != null) connection.append(url + ""
"");
            connection.flush();
            connection.close();
            audio.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:-0.005025506019592285,packageName:0.0005574822425842285,fileContents:-0.009838521480560303,fileNames:0.003544926643371582,dirBase:-0.00133514404296875,packageDir:0.004028737545013428,created:1.4543533325195312e-05,currentPath:0.005278170108795166,i:-0.14196622371673584,file:-0.01251077651977539,fos:-0.0326080322265625,fileSrc:0.00011444091796875,fileDst:-0.0070151686668396,reader:0.003947913646697998,writer:0.012717068195343018,line:0.005530714988708496,",5,16,0,"writer:connection,line:url,currentPath:currentlyDirectory,packageDir:directoryUrl,reader:audio,",0,Greedy,278,0.13663310209910076,replace,[]
365,"    protected Object unmarshallXml(final Unmarshaller unmarshaller, final String accessUrl, final String nameSpace, final String replace, final String with) throws Exception {
        final URL url = new URL(accessUrl);
        final BufferedReader inputStream = new BufferedReader(new InputStreamReader(url.openStream()));
        String xmlContent = readWithStringBuffer(inputStream);
        if (replace != null) {
            xmlContent = xmlContent.replace(replace, with);
        }
        LOGGER.info(""Calls "" + accessUrl);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""\nXml:"" + accessUrl + ""\n"" + xmlContent);
        }
        if (LOGGER.isDebugEnabled()) {
            final BufferedWriter out = new BufferedWriter(new FileWriter(""target/XmlAgentLog"" + xmlRequestNumber++ + "".txt""));
            out.write(xmlContent);
            out.close();
        }
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xmlContent.getBytes());
        Source source;
        if (nameSpace != null) {
            source = setNameSpaceOnXmlStream(byteArrayInputStream, nameSpace);
        } else {
            source = new StreamSource(byteArrayInputStream);
        }
        return unmarshaller.unmarshal(source);
    }
 <SPLIT>     public APIResponse create(Application application) throws Exception {
        APIResponse response = new APIResponse();
        connection = (HttpURLConnection) new URL(url + ""/api/application/create"").openConnection();
        connection.setDoOutput(true);
        connection.setRequestMethod(""POST"");
        connection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");
        connection.setUseCaches(false);
        connection.setConnectTimeout(TIMEOUT);
        connection.connect();
        marshaller.marshal(application, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), ""utf-8"")));
        connection.getOutputStream().flush();
        connection.getOutputStream().close();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), ""utf-8"")).readLine()));
            response.setDone(true);
            response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));
            connection.getInputStream().close();
        } else {
            response.setDone(false);
            response.setMessage(""Create Application Error Code: Http ("" + connection.getResponseCode() + "")"");
        }
        connection.disconnect();
        return response;
    }
",221,,LABEL_0,LABEL_0,LABEL_0,-1,"unmarshallXml,unmarshaller,accessUrl,nameSpace,replace,with,url,inputStream,xmlContent,out,xmlRequestNumber,byteArrayInputStream,source",,10,29,0,,0,GA,5847,2.747020983695984,failed,[]
366,"    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            ms.setString(1, descartadoEntrada);
            ms.setString(2, usuarioEntrada);
            ms.setString(3, motivosDescarteEntrada);
            ms.setInt(4, Integer.parseInt(anoOficio));
            ms.setInt(5, Integer.parseInt(oficinaOficio));
            ms.setInt(6, Integer.parseInt(numeroOficio));
            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
 <SPLIT>     protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
",449,,LABEL_0,LABEL_0,LABEL_0,-1,"actualizar,ClassNotFoundException,Exception,conn,ms,fechaSystem,aaaammdd,fzafsis,hhmmss,sss,ss,fzahsis,afectados",,5,8,0,,0,GA,5831,2.8261279543240865,failed,[';print(Abstract)']
367,"    @Before
    public void setUp() throws Exception {
        final URL url = getClass().getClassLoader().getResource(""insecureSSL.keystore"");
        final KeyStore keystore = KeyStore.getInstance(""jks"");
        final char[] pwd = ""nopassword"".toCharArray();
        keystore.load(url.openStream(), pwd);
        final TrustManagerFactory trustManagerFactory = createTrustManagerFactory();
        trustManagerFactory.init(keystore);
        final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
        final KeyManagerFactory keyManagerFactory = createKeyManagerFactory();
        keyManagerFactory.init(keystore, pwd);
        final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();
        final SSLContext serverSSLContext = SSLContext.getInstance(""TLS"");
        serverSSLContext.init(keyManagers, trustManagers, null);
        localServer_ = new LocalTestServer(serverSSLContext);
        localServer_.registerDefaultHandlers();
        localServer_.start();
    }
 <SPLIT>     public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
",171,,LABEL_0,LABEL_0,LABEL_0,-1,"setUp,url,keystore,pwd,trustManagerFactory,trustManagers,keyManagerFactory,keyManagers,serverSSLContext,localServer_",,10,26,0,,0,GA,4331,2.138101251920064,failed,"[';setUp = 0', ';print(setUp)', ';keystore = 0', ';pwd = 0', ';print(pwd)', ';trustManagerFactory = 0', ';print(trustManagerFactory)', ';trustManagers = 0', ';print(trustManagers)', ';print(keyManagerFactory)', ';keyManagers = 0', ';print(keyManagers)', ';serverSSLContext = 0', ';print(serverSSLContext)', ';localServer_ = 0', ';cleanup = 0', ';address = 0', ';base = 0', ';client = 0', ';system = 0', ';print(system)', ';feed = 0', ';print(feed)', ';path = 0', ';cert = 0', ';sl = 0', ';string = 0', ';name = 0', ';ls = 0', ';context = 0', ';image = 0', ';buffer = 0', ';source = 0', ';file = 0', '; keyserver = 0', '; keycache = 0', '; trustDirectorService = 0', '; serverSSLConn = 0']"
368,"    public String getmd5(String password) {
        String pwHash = """";
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(password.getBytes());
            byte[] b = md.digest();
            for (int i = 0; i < b.length; i++) {
                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.fatal(""MD5 Hash Algorithm not found"", ex);
        }
        Logger.info(""PWHash erzeugt und wird übergeben"");
        return pwHash;
    }
 <SPLIT>     public static void download(String address, String localFileName) {
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            URL url = new URL(address);
            out = new BufferedOutputStream(new FileOutputStream(localFileName));
            conn = url.openConnection();
            in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
            System.out.println(localFileName + ""\t"" + numWritten);
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (in != null) in.close();
                if (out != null) out.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
",136,,LABEL_0,LABEL_0,LABEL_0,-1,"getmd5,password,pwHash,md,b,i",,6,18,0,,0,GA,2825,1.3089573780695598,failed,[]
369,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream in = new FileInputStream(args[0]);
            int length;
            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);
            in.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
",279,,LABEL_1,LABEL_1,LABEL_1,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,14,45,0,,0,GA,7033,3.429935808976491,failed,"[';createOutputStream = 0', ';print(createOutputStream)', ';inFile = 0', ';outFile = 0', ';k_blockSize = 0', ';byteCount = 0', ';targetDirectory = 0', ';k_byteCount = 0']"
370,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
 <SPLIT>     public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {
        Assert.notNull(resourceName, ""Resource name must not be null"");
        ClassLoader clToUse = classLoader;
        if (clToUse == null) {
            clToUse = ClassUtils.getDefaultClassLoader();
        }
        Properties properties = new Properties();
        Enumeration urls = clToUse.getResources(resourceName);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            InputStream is = null;
            try {
                URLConnection con = url.openConnection();
                con.setUseCaches(false);
                is = con.getInputStream();
                properties.load(is);
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
        return properties;
    }
",74,,LABEL_0,LABEL_0,LABEL_0,-1,"url,in",,1,4,0,,0,GA,1041,0.4926374077796936,failed,"[';url = 0', ';in = 0', ';address = 0', ';base = 0', ';id = 0', ';feed = 0', ';URL = 0', ';path = 0', ';connection = 0', ';loc = 0', ';is = 0']"
371,"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
 <SPLIT>     public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
",195,,LABEL_0,LABEL_0,LABEL_0,-1,"toMd5,str,messageDigest,byteArray,md5StrBuff,i",,6,23,0,,0,GA,2543,1.028759503364563,failed,[]
372,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",1387,,LABEL_1,LABEL_0,,-4,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e",,,,0,,0,Greedy,1,0.00112074613571167,,[]
373,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",272,,LABEL_1,LABEL_1,LABEL_1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,9,39,0,,0,GA,4792,1.8446855823198953,failed,"[';readAndRewrite = 0', ';dcmParser = 0', ';ds = 0', ';pdReader = 0', ';out = 0', ';dcmEncParam = 0', ';pdWriter = 0', ';readAndRebrite = 0', ';oldFilename = 0', ';Infile = 0', ';loginFilename = 0', ';InFile = 0', ';outFilename = 0', ';newDir = 0', ';OutStream = 0', ';dbmPolicy = 0', ';dpmInstallation = 0', ';dcmPolicy = 0', ';DcmInstallation = 0', ';dhemInstallation = 0', '; dpmPolicy = 0', ';dmissionLanguage = 0', ';dcmPar = 0', ';dcmInstallation = 0', ';dCMparser = 0', ';Db = 0', ';order = 0']"
374,"    public String shorten(String url) {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""version"", ""2.0.1""));
        qparams.add(new BasicNameValuePair(""longUrl"", url));
        if (login != null) {
            qparams.add(new BasicNameValuePair(""login"", login));
            qparams.add(new BasicNameValuePair(""apiKey"", apiKey));
            qparams.add(new BasicNameValuePair(""history"", ""1""));
        }
        try {
            BasicHttpParams params = new BasicHttpParams();
            DefaultHttpClient httpclient = new DefaultHttpClient(params);
            URI uri = URIUtils.createURI(""http"", ""api.j.mp"", -1, ""/shorten"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            if (logger.isDebugEnabled()) logger.debug(""HttpGet.uri={}"", httpget.getURI());
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                JsonFactory f = new JsonFactory();
                JsonParser jp = f.createJsonParser(instream);
                JmpShortenResponse responseObj = new JmpShortenResponse();
                for (; ; ) {
                    JsonToken token = jp.nextToken();
                    String fieldname = jp.getCurrentName();
                    if (logger.isDebugEnabled()) logger.debug(""Token={}, currentName={}"", token, fieldname);
                    if (token == JsonToken.START_OBJECT) {
                        continue;
                    }
                    if (token == JsonToken.END_OBJECT) {
                        break;
                    }
                    if (""errorCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorCode(jp.getIntValue());
                    } else if (""errorMessage"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorMessage(jp.getText());
                    } else if (""statusCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setStatusCode(jp.getText());
                    } else if (""results"".equals(fieldname)) {
                        Map<String, ShortenedUrl> results = parseResults(jp);
                        responseObj.setResults(results);
                    } else {
                        throw new IllegalStateException(""Unrecognized field '"" + fieldname + ""'!"");
                    }
                }
                Map<String, ShortenedUrl> results = responseObj.getResults();
                if (results == null) {
                    return null;
                }
                ShortenedUrl shortened = results.get(url);
                if (shortened == null) {
                    return null;
                }
                if (logger.isDebugEnabled()) logger.debug(""JmpShortenResponse: {}"", responseObj);
                if (""OK"".equals(responseObj.getStatusCode())) {
                    return shortened.getShortUrl();
                }
                if (logger.isWarnEnabled()) logger.warn(""JmpShortenResponse: {}"", responseObj);
            }
        } catch (IOException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        } catch (URISyntaxException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        }
        return null;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",644,,LABEL_0,LABEL_0,LABEL_0,-1,"shorten,url,qparams,params,httpclient,uri,httpget,response,entity,instream,f,jp,responseObj,token,fieldname",,11,35,0,,0,GA,6684,3.3291536291440327,failed,"[';print(qutags)', ';managervalue = 0']"
375,"    public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
 <SPLIT>     public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",99,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5Hash,in,result,md5,f,b",,6,13,0,,0,GA,2677,0.9728637178738911,failed,"['; getSHA5String = 0', '; getMD4hash = 0', '; getSHA5Hash = 0', '; getMD4String = 0']"
376,"    public boolean populateRecord(int[] attrIDs) throws IOException {
        if (device == null) {
            throw new RuntimeException(""This is local device service record"");
        }
        if (attrIDs == null) {
            throw new NullPointerException(""attrIDs is null"");
        }
        if (attrIDs.length == 0) {
            throw new IllegalArgumentException();
        }
        for (int i = 0; i < attrIDs.length; i++) {
            if (attrIDs[i] < 0x0000 || attrIDs[i] > 0xffff) {
                throw new IllegalArgumentException();
            }
        }
        int[] sortIDs = new int[attrIDs.length];
        System.arraycopy(attrIDs, 0, sortIDs, 0, attrIDs.length);
        for (int i = 0; i < sortIDs.length; i++) {
            for (int j = 0; j < sortIDs.length - i - 1; j++) {
                if (sortIDs[j] > sortIDs[j + 1]) {
                    int temp = sortIDs[j];
                    sortIDs[j] = sortIDs[j + 1];
                    sortIDs[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < sortIDs.length - 1; i++) {
            if (sortIDs[i] == sortIDs[i + 1]) {
                throw new IllegalArgumentException();
            }
            DebugLog.debug0x(""query for "", sortIDs[i]);
        }
        DebugLog.debug0x(""query for "", sortIDs[sortIDs.length - 1]);
        return this.bluetoothStack.populateServicesRecordAttributeValues(this, sortIDs);
    }
 <SPLIT>     public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
",307,,LABEL_0,LABEL_0,LABEL_0,-1,"populateRecord,attrIDs,i,sortIDs,j,temp",,6,54,0,,0,GA,2577,0.9819920301437378,failed,[';print(attrIDs)']
377,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
",272,"    private static void readAndrewrap(File loginFilename, File processPlace) throws IOException {
        ImageInputStream ciIS = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciIS);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, ciIS, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + loginFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(processPlace)));
        DcmEncodeParam dcmSecPart = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmSecPart);
        ds.writeHeader(url, dcmSecPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + processPlace + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",7,31,0,"outFile:processPlace,readAndRewrite:readAndrewrap,inFile:loginFilename,iis:ciIS,dcmEncParam:dcmSecPart,dcmParser:dmissionPlugin,out:url,",0,Greedy,396,0.14379058281580606,replace,[]
378,"    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",409,,LABEL_0,LABEL_1,,-4,"transferWSDL,wsdlURL,userPassword,filePath,endpoint,conn,is,isr,sw,buf,read,outputDir,file,fos",,,,0,,0,Greedy,1,0.0006389220555623373,,[]
379,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public String getXML(String servletURL, String request) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");
            URL url = new URL(servletURL + request);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                stringBuffer.append(inputLine);
            }
            in.close();
        } catch (MalformedURLException ex) {
            return null;
        } catch (UnsupportedEncodingException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
        return stringBuffer.toString();
    }
",452,,LABEL_0,LABEL_1,,-4,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found",,,,0,,0,Greedy,1,0.0006345351537068685,,[]
380,"    private void Connect() throws NpsException {
        try {
            client = new FTPClient();
            client.connect(host.hostname, host.remoteport);
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                client = null;
                com.microfly.util.DefaultLog.error_noexception(""FTP Server:"" + host.hostname + ""refused connection."");
                return;
            }
            client.login(host.uname, host.upasswd);
            client.enterLocalPassiveMode();
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",146,,LABEL_0,LABEL_0,LABEL_0,-1,"Connect,client,reply",,3,12,0,,0,GA,1475,0.5555577278137207,failed,"[';Connect = 0', ';print(Connect)', ';client = 0', ';print(client)', ';reply = 0', ';print(reply)', ';Socket = 0', ';print(Socket)', ';call = 0', ';print(call)', ';port = 0', ';send = 0', '; response = 0', ';print( response)', ';call = 0']"
381,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",169,"    public static void copyFile(File proxy, File target, int uf2, boolean ride) throws IOException {
        if (target.exists()) if (ride) target.delete(); else throw new IOException(""Cannot overwrite existing file: "" + target.getName());
        byte[] border = new byte[uf2];
        int connect = 0;
        InputStream url = null;
        OutputStream url = null;
        try {
            url = new FileInputStream(proxy);
            url = new FileOutputStream(target);
            while (true) {
                connect = url.connect(border);
                if (connect == -1) break;
                url.write(border, 0, connect);
            }
        } finally {
            if (url != null) try {
                url.close();
            } finally {
                if (url != null) url.close();
            }
        }
    }
;copyFile = 0;print(copyFile);src = 0;print(src);dest = 0;print(dest);bufSize = 0;print(bufSize);copyFiles = 0;print(copyFiles);print(transferfile);copyDir = 0;print(copyDir);st = 0;print(st);thin = 0;master = 0;print(master);cache = 0;print(cache);project = 0;delete = 0;print(delete);name = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,src,dest,bufSize,force,buffer,read,in,out","copyFile:0.001324772834777832,src:-0.0006009936332702637,dest:-0.0011205077171325684,bufSize:-0.0002535581588745117,force:-0.00028717517852783203,buffer:-0.00032407045364379883,read:-0.0008199810981750488,in:-0.000552833080291748,out:9.03010368347168e-05,",8,29,0,"copyFile:copyFile,out:url,bufSize:uf2,force:ride,buffer:border,in:url,src:proxy,read:connect,dest:target,",0,Greedy,571,0.22213720480600993,inesrt,"[';copyFile = 0', ';print(copyFile)', ';src = 0', ';print(src)', ';dest = 0', ';print(dest)', ';bufSize = 0', ';print(bufSize)', ';copyFiles = 0', ';print(copyFiles)', ';print(transferfile)', ';copyDir = 0', ';print(copyDir)', ';st = 0', ';print(st)', ';thin = 0', ';master = 0', ';print(master)', ';cache = 0', ';print(cache)', ';project = 0', ';delete = 0', ';print(delete)', ';name = 0']"
382,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"source,process,processStdOut,processStdIn",,2,7,0,,0,GA,1871,0.680292546749115,failed,[]
383,"    @Override
    public Content getContent(Object principal, ContentPath path, Version version, Map<String, Object> properties) throws ContentException {
        String uniqueName = path.getBaseName();
        URL url = buildURL(uniqueName);
        URLContent content = new URLContent(url, this.getName(), uniqueName);
        content.setUniqueName(uniqueName);
        content.setReadable(true);
        content.setWritable(writable);
        content.setExists(true);
        try {
            URLConnection connection = url.openConnection();
            String mimeType = connection.getContentType();
            content.setMimeType(mimeType);
            content.setWritable(true);
        } catch (IOException ex) {
            throw new ContentException(""unable to obtain mime type of "" + url, ex);
        }
        return content;
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",148,,LABEL_0,LABEL_0,LABEL_0,-1,"getContent,principal,path,version,properties,uniqueName,url,content,connection,mimeType",,7,12,0,,0,GA,4403,1.619568399588267,failed,"[';print(principal)', ';print(uniqueName)', ';print(url)', ';mimeType = 0', ';getContents = 0', ';createContent = 0', ';getcontent = 0', ';prercificate = 0', ';Princunctential = 0', ';prunctential = 0', ';princificate = 0', ';pricipential = 0', ';print(pricipential)', ';Princincificate = 0', ';print(Princincificate)', ';prercential = 0', ';print(prercential)', ';Princincential = 0', ';print(Princincential)', ';print(prunctificate)', ';pricipeter = 0', ';print(pricipeter)', ';prunctipal = 0', ';pricipificate = 0', ';print(pricipificate)', ';princential = 0', ';name = 0', ';pointer = 0', ';print(pointer)', ';string = 0', ';print(string)', ';Path = 0', ';print(Path)', ';next = 0', ';print(next)', ';link = 0', ';prefix = 0', ';print(prefix)', ';format = 0', ';print(format)', ';info = 0', ';print(info)', ';method = 0', ';print(method)', ';class = 0', ';print(class)', ';object = 0', ';print(object)', ';print(text)', ';loader = 0', ';print(loader)', ';uri = 0', ';data = 0', ';print(uniquename)', ';blockPath = 0', ';print(blockPath)', ';print(filename)', ';proxy = 0', ';print(proxy)', ';log = 0', ';conn = 0', ';reader = 0', ';print(reader)', ';output = 0', ';print(output)', ';print(current)', ';print(load)', ';print(proxy)', ';container = 0', ';print(container)', ';print(cover)', ';print(default)', ';print(remote)', ';print(Connection)', ';application = 0', ';config = 0', ';print(config)', ';print(open)', ';print(control)', ';print(response)', ';mimesPath = 0', ';miveInfo = 0', ';MimePath = 0', ';mmimeInfo = 0']"
384,"    public void read() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Reading the camera log, "" + url);
        }
        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        int i = 0;
        try {
            while ((line = in.readLine()) != null) {
                i++;
                try {
                    final CameraLogRecord logDatum = new CameraLogRecord(line);
                    records.add(logDatum);
                } catch (LogParseException e) {
                    if (log.isInfoEnabled()) {
                        log.info(""Bad record in "" + url + "" at line:"" + i);
                    }
                }
            }
        } finally {
            in.close();
        }
        Collections.sort(records);
        if (log.isInfoEnabled()) {
            log.info(""Finished reading the camera log, "" + url);
        }
    }
 <SPLIT>     private List<JarFile> webArchives(ServletContext servletContext) throws IOException {
        List<JarFile> list = new ArrayList<JarFile>();
        Set<Object> paths = servletContext.getResourcePaths(WEB_LIB_PREFIX);
        for (Object pathObject : paths) {
            String path = (String) pathObject;
            if (!path.endsWith("".jar"")) {
                continue;
            }
            URL url = servletContext.getResource(path);
            String jarURLString = ""jar:"" + url.toString() + ""!/"";
            url = new URL(jarURLString);
            JarFile jarFile = ((JarURLConnection) url.openConnection()).getJarFile();
            JarEntry signal = jarFile.getJarEntry(FACES_CONFIG_IMPLICIT);
            if (signal == null) {
                if (log().isTraceEnabled()) {
                    log().trace(""Skip JAR file "" + path + "" because it has no META-INF/faces-config.xml resource"");
                }
                continue;
            }
            list.add(jarFile);
        }
        return list;
    }
",170,,LABEL_0,LABEL_0,LABEL_0,-1,"read,in,line,i,logDatum",,2,7,0,,0,GA,2231,0.8388973832130432,failed,"[';read = 0', ';print(read)', ';in = 0', ';print(in)', ';line = 0', ';print(line)', ';i = 0', ';print(i)', ';logDatum = 0', ';reader = 0', ';parse = 0', ';path = 0', ';log = 0', ';input = 0', ';er = 0', ';conn = 0', ';from = 0', ';status = 0', ';Line = 0', ';lines = 0', ';code = 0', ';object = 0', ';logFictionary = 0', ';logDsum = 0']"
385,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,2300,1.0997026244799295,failed,"[';serialize = 0', ';parser = 0', ';on_disk = 0', ';Serialize = 0', ';string = 0']"
386,"    public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {
        if (all) {
            StringMaker sm = new StringMaker();
            Enumeration enu = classLoader.getResources(name);
            while (enu.hasMoreElements()) {
                URL url = (URL) enu.nextElement();
                InputStream is = url.openStream();
                String s = read(is);
                if (s != null) {
                    sm.append(s);
                    sm.append(StringPool.NEW_LINE);
                }
                is.close();
            }
            return sm.toString().trim();
        } else {
            InputStream is = classLoader.getResourceAsStream(name);
            String s = read(is);
            is.close();
            return s;
        }
    }
 <SPLIT> 	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection(""jdbc:postgresql://localhost/test"", ""user"", ""password"");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement(""UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?"");
		ps.setString(1, myField);
		ps.setString(2, condition1);
		ps.setString(3, condition2);
		
		// If more than 10 entries change, panic and rollback
		int numChanged = ps.executeUpdate();
		if(numChanged > 10) {
			connection.rollback();
		} else {
			connection.commit();
		}
		
		ps.close();
		connection.close();
	}
",153,,LABEL_0,LABEL_0,LABEL_0,-1,"read,classLoader,name,all,sm,enu,url,is,s",,9,31,0,,0,GA,3925,1.5456158598264058,failed,"[';read = 0', ';print(read)', ';classLoader = 0', ';name = 0', ';print(name)', ';enu = 0', ';type = 0', ';service = 0']"
387,"    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = """";
        if (useragent) sp = ""agent""; else sp = ""user"";
        String userbooksql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                userbooksql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                userbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals(""WL"")) {
                    String chartavailupdsql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdsql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoach + ""\""] "";
                    chartavailupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentcoach.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>""; else userbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                userbooksql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",863,"    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String arp = """";
        if (useragent) arp = ""agent""; else arp = ""user"";
        String otherbookssql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentpoaching;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                otherbookssql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                otherbookssql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentpoaching = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentpoaching.equals(""WL"")) {
                    String chartavailupdatessql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdatessql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + arp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdatessql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentpoaching + ""\""] "";
                    chartavailupdatessql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdatessql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdatessql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentpoaching.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + arp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentpoaching + ""</coach><seat>"" + currentseat + ""</seat></person>""; else otherbookssql += ""<person><coach>"" + currentpoaching + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                otherbookssql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(otherbookssql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(otherbookssql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"Reserve,stbookings,stchartwl,sp,userbooksql,agentbooksql,bookingid,currentcoach,currentseat,tickpos,chartavailupdsql","Reserve:0.040675342082977295,stbookings:-0.01501917839050293,stchartwl:-0.0035990476608276367,sp:0.213772714138031,userbooksql:0.08463174104690552,agentbooksql:0.0035812854766845703,bookingid:0.001132667064666748,currentcoach:0.0729859471321106,currentseat:-0.007320821285247803,tickpos:-0.005456686019897461,chartavailupdsql:0.12109220027923584,",4,25,0,"sp:arp,chartavailupdsql:chartavailupdatessql,userbooksql:otherbookssql,currentcoach:currentpoaching,",0,Greedy,259,0.12023179531097412,replace,[]
388,"    public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {
        retryTimes--;
        try {
            String url = getServiceUrl() + ""/"" + invocation.getMethod().getName();
            HttpPost postMethod = new HttpPost(url);
            if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));
            HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);
            StatusLine sl = rsp.getStatusLine();
            if (sl.getStatusCode() >= 300) {
                throw new RuntimeException(""Did not receive successful HTTP response: status code = "" + sl.getStatusCode() + "", status message = ["" + sl.getReasonPhrase() + ""]"");
            }
            HttpEntity entity = rsp.getEntity();
            StringBuilder sb = new StringBuilder();
            InputStream is = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""utf-8""));
            String line;
            while ((line = reader.readLine()) != null) sb.append(line).append(""\n"");
            reader.close();
            is.close();
            String responseBody = null;
            if (sb.length() > 0) {
                sb.deleteCharAt(sb.length() - 1);
                responseBody = sb.toString();
            }
            Type t = invocation.getMethod().getGenericReturnType();
            if (t.equals(Void.class) || responseBody == null) return null;
            return JsonUtils.fromJson(responseBody, t);
        } catch (ConnectTimeoutException e) {
            if (retryTimes < 0) throw e;
            if (urlFromDiscovery) {
                String serviceUrl = discoverServiceUrl(getServiceInterface().getName());
                if (!serviceUrl.equals(getServiceUrl())) {
                    setServiceUrl(serviceUrl);
                    log.info(""relocate service url:"" + serviceUrl);
                }
            }
            return invoke(invocation, retryTimes);
        }
    }
 <SPLIT>     public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values ('"" + language + ""', "" + row + "", '"" + root + ""', '"" + surface + ""', '"" + tag + ""', "";
                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",390,,LABEL_0,LABEL_0,LABEL_0,-1,"invoke,invocation,retryTimes,url,postMethod,rsp,sl,entity,sb,is,reader,line,responseBody,t,serviceUrl",,6,16,0,,0,GA,6884,3.10050581296285,failed,"[';print(invoke)', ';print(invocation)', ';print(postMethod)', ';print(retrowTimes)']"
389,"    protected static Parser buildParser(URL url) throws IOException, ParserException {
        Parser parser;
        URLConnection connection = openConnection(url);
        if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {
            parser = new Parser(connection);
        } else {
            parser = null;
        }
        return parser;
    }
 <SPLIT>     public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
",69,,LABEL_0,LABEL_0,LABEL_0,-1,"buildParser,url,ParserException,parser,connection",,1,2,0,,0,GA,1888,0.78265513976415,failed,"[';buildParser = 0', ';ParserException = 0', ';parser = 0', ';newParser = 0']"
390,"    public void generate(String urlString, String target) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        BufferedInputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target));
        byte[] buf = new byte[10 * 1024];
        int len;
        while ((len = inputStream.read(buf, 0, buf.length)) != -1) {
            outputStream.write(buf, 0, len);
        }
        inputStream.close();
        outputStream.close();
        urlConnection.disconnect();
    }
 <SPLIT>     public SRWGuiClient(String initialURL) {
        super(""Simple Swing Browser"");
        this.initialURL = initialURL;
        addWindowListener(new ExitListener());
        WindowUtilities.setNativeLookAndFeel();
        JPanel topPanel = new JPanel();
        topPanel.setBackground(Color.lightGray);
        homeButton = new JIconButton(""home.gif"");
        homeButton.addActionListener(this);
        JLabel urlLabel = new JLabel(""URL:"");
        urlField = new JTextField(30);
        urlField.setText(initialURL);
        urlField.addActionListener(this);
        topPanel.add(homeButton);
        topPanel.add(urlLabel);
        topPanel.add(urlField);
        getContentPane().add(topPanel, BorderLayout.NORTH);
        try {
            URL url = new URL(initialURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            boolean xml = true;
            String inputLine;
            StringBuffer content = new StringBuffer(), stylesheet = null;
            Transformer transformer = null;
            inputLine = in.readLine();
            if (inputLine == null) {
                System.out.println(""No input read from URL: "" + initialURL);
                return;
            }
            if (!inputLine.startsWith(""<?xml "")) {
                xml = false;
                content.append(inputLine);
            }
            if (xml) {
                inputLine = in.readLine();
                if (inputLine.startsWith(""<?xml-stylesheet "")) {
                    int offset = inputLine.indexOf(""href="");
                    String href = (inputLine.substring(inputLine.indexOf(""href="") + 6));
                    href = href.substring(0, href.indexOf('""'));
                    System.out.println(""href="" + href);
                    url = new URL(url, href);
                    String stylesheetURL = url.toString();
                    System.out.println(""stylesheet URL="" + url.toString());
                    transformer = (Transformer) transformers.get(stylesheetURL);
                    if (transformer == null) {
                        BufferedReader sheetIn = new BufferedReader(new InputStreamReader(url.openStream()));
                        sheetIn.readLine();
                        stylesheet = new StringBuffer();
                        while ((inputLine = sheetIn.readLine()) != null) stylesheet.append(inputLine).append('\n');
                        System.out.println(stylesheet.toString());
                        TransformerFactory tFactory = TransformerFactory.newInstance();
                        StreamSource xslSource = new StreamSource(new StringReader(stylesheet.toString()));
                        transformer = tFactory.newTransformer(xslSource);
                        transformers.put(stylesheetURL, transformer);
                    }
                }
            }
            while ((inputLine = in.readLine()) != null) content.append(inputLine).append('\n');
            htmlPane = new JEditorPane();
            if (transformer != null) {
                StringReader stringRecordReader = new StringReader(content.toString());
                StringWriter xmlRecordWriter = new StringWriter();
                StreamSource streamXMLRecord = new StreamSource(stringRecordReader);
                transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));
                String html = xmlRecordWriter.toString();
                int i = html.indexOf('>');
                html = ""<html>"" + html.substring(html.indexOf('>') + 1);
                System.out.println(html);
                htmlPane.setContentType(""text/html"");
                htmlPane.setText(""<html><head><META http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""><title>GSAFD Thesaurus</title></head><body><center><h2>GSAFD Thesaurus</h2></center><p>A thesaurus of genre terms to support the \""Guidelines on Subject Access to Individual Works of Fiction , Drama\"" (GSAFD)</p><table cellspacing=\""5\"" width=\""100%\""><tr><td><h3>Search</h3><p></p></td><td valign=\""top\""><h3>Browse</h3></td></tr></table></body></html>"");
            } else htmlPane.setText(content.toString());
            htmlPane.setEditable(false);
            htmlPane.addHyperlinkListener(this);
            JScrollPane scrollPane = new JScrollPane(htmlPane);
            getContentPane().add(scrollPane, BorderLayout.CENTER);
        } catch (IOException ioe) {
            warnUser(""Can't build HTML pane for "" + initialURL + "": "" + ioe);
        } catch (TransformerException e) {
        }
        Dimension screenSize = getToolkit().getScreenSize();
        int width = screenSize.width * 8 / 10;
        int height = screenSize.height * 8 / 10;
        setBounds(width / 8, height / 8, width, height);
        setVisible(true);
    }
",131,"    public void  generating(String urlStr, String top) throws Exception {
        URL file = new URL(urlStr);
        HttpURLConnection inputConn = (HttpURLConnection) file.openConnection();
        BufferedInputStream inStream = new BufferedInputStream(inputConn.getInputStream());
        BufferedOutputStream resourcestream = new BufferedOutputStream(new FileOutputStream(top));
        byte[] num = new byte[10 * 1024];
        int line;
        while ((line = inStream.read(num, 0, num.length)) != -1) {
            resourcestream.write(num, 0, line);
        }
        inStream.close();
        resourcestream.close();
        inputConn.disconnect();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"generate,urlString,target,url,urlConnection,inputStream,outputStream,buf,len","generate:-0.00014668703079223633,urlString:-0.0017154812812805176,target:-0.00046306848526000977,url:-0.0004982352256774902,urlConnection:-0.0014767646789550781,inputStream:-0.0033854246139526367,outputStream:-0.0037624239921569824,buf:-0.0014891624450683594,len:-0.000797271728515625,",9,23,0,"generate: generating,target:top,url:file,len:line,urlConnection:inputConn,buf:num,urlString:urlStr,inputStream:inStream,outputStream:resourcestream,",0,Greedy,337,0.17988176345825196,replace,[]
391,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(buffer.getPayload().toString().replaceAll(""\r\n|\n|\r"", """"));
    }
 <SPLIT>     public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",294,,LABEL_0,LABEL_0,LABEL_0,-1,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,8,28,0,,0,GA,4082,1.9013511379559835,failed,"[';logging = 0', ';wrap = 0', ';buffer = 0', ';Logting = 0', ';loging = 0', '; loging = 0', ';url = 0', ';copy = 0', ';document = 0', ';coder = 0']"
392,"    public void testAutoCommit() throws Exception {
        Connection con = getConnectionOverrideProperties(new Properties());
        try {
            Statement stmt = con.createStatement();
            assertEquals(0, stmt.executeUpdate(""create table #testAutoCommit (i int)""));
            con.setAutoCommit(false);
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (0)""));
            con.setAutoCommit(false);
            con.rollback();
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (1)""));
            con.setAutoCommit(true);
            con.setAutoCommit(false);
            con.rollback();
            con.setAutoCommit(true);
            ResultSet rs = stmt.executeQuery(""select i from #testAutoCommit"");
            assertTrue(rs.next());
            assertEquals(1, rs.getInt(1));
            assertFalse(rs.next());
            rs.close();
            stmt.close();
        } finally {
            con.close();
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
",186,,LABEL_0,LABEL_0,LABEL_0,-1,"testAutoCommit,con,stmt,rs",,4,22,0,,0,GA,2075,1.0756923079490661,failed,[]
393,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public boolean actEstadoEnBD(int idRonda) {
        int intResult = 0;
        String sql = ""UPDATE ronda "" + "" SET estado = 1"" + "" WHERE numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",335,"    @Override
    protected void  doget(HttpServletRequest connection, HttpServletResponse connection) throws ServletException, IOException {
        String rewwrittenRequestService = URLDecoder.decode(connection.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewwrittenRequestService);
        URL rewwrittenFile = new URL(fedoraUrl + rewwrittenRequestService);
        logger.debug(""rewrittenUrl: "" + rewwrittenFile.getProtocol() + ""://"" + rewwrittenFile.getHost() + "":"" + rewwrittenFile.getPort() + rewwrittenFile.getFile());
        HttpURLConnection httpPathconnection = (HttpURLConnection) rewwrittenFile.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpPathconnection.connect();
        connection.setStatus(httpPathconnection.getResponseCode());
        logger.debug(""[status="" + httpPathconnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> bridge : httpPathconnection.getHeaderFields().entrySet()) {
            if (bridge.getKey() != null) {
                for (String description : bridge.getValue()) {
                    if (description != null) {
                        logger.debug(bridge.getKey() + "": "" + description);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            connection.addHeader(bridge.getKey(), description);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream resourceChannel = httpPathconnection.getInputStream();
        OutputStream externalStreamer = connection.getOutputStream();
        IOUtils.copy(resourceChannel, externalStreamer);
    }
;doGet = 0",LABEL_0,LABEL_0,LABEL_0,1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream","doGet:0.010593593120574951,request:-0.01403343677520752,response:0.0023533105850219727,rewrittenQueryString:-0.006837010383605957,rewrittenUrl:0.23867785930633545,httpURLConnection:0.24887430667877197,header:0.0017551779747009277,value:-0.018243789672851562,inputStream:-0.024854958057403564,outputStream:-0.03517961502075195,",10,37,0,"httpURLConnection:httpPathconnection,rewrittenUrl:rewwrittenFile,doGet: doget,response:connection,header:bridge,rewrittenQueryString:rewwrittenRequestService,request:connection,value:description,inputStream:resourceChannel,outputStream:externalStreamer,",0,Greedy,539,0.2761054754257202,inesrt,[';doGet = 0']
394,"    private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL url = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",786,,LABEL_0,LABEL_0,LABEL_0,-1,"downloadFiles,downloadFilesWorker,startDownloadDate,refreshSpeed,lastDate,totalSizeRead,totalNumberRead,photo,url,connection,dis,fos,b,sizeRead,totalDiffTime,totalSpeed,list",,14,59,0,,0,GA,7586,4.038030831019084,failed,[]
395,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream src = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = src.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        src.close();
        dest.close();
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,2035,0.9513669649759928,failed,[]
396,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
",86,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,src,dst,in,out,buf,len",,6,14,0,,0,GA,2926,1.149916446208954,failed,"[';copyFile = 0', ';src = 0', ';dst = 0', ';buf = 0', ';len = 0', ';copyFiles = 0', ';CopyFile = 0', ';CopyFiles = 0', '; copyFiles = 0', ';filename = 0', ';fdst = 0', ';ddfd = 0', ';pdsp = 0', ';fdsp = 0', ';fdfd = 0', ';dsts = 0', ';pdst = 0', ';fdft = 0', '; dsts = 0', ';err = 0', ';sin = 0', ';socket = 0']"
397,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",352,"    public static void ignore(File url, File to) {
        boolean result;
        if (url.isDirectory()) {
            File[]SubPartss = url.listFiles();
            for (int i = 0; i < SubParts.length; i++) {
                File newDir = new File(to, SubParts[i].getName());
                result = false;
                if (SubParts[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (SubParts[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (reresultignore(SubParts[i], newDir);
            }
        } else if (url.isFile()) {
            FileInputStream url = null;
            FileOutputStream b = null;
            try {
               urln = new FileInputStream(url);
                b = new FileOutputStream(to);
                intfileLengthh = (int) url.length();
                char stringMatrix[] = new char[fileLength];
                int ln;
                int singlechar;
                while ((osinglechar= url.read()) != -1) {
                    b.write(singlechar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (url != null) url.close();
                    if (b != null) b.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,0.521443247795105,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar",,7,34,27,"copy:ignore,from:url,to:to,result:result,subFiles:SubParts,i:i,newDir:newDir,in:url,out:b,fileLength:fileLength,charBuff:stringMatrix,len:ln,oneChar:singlechar,",5,GA,2118,0.8610602617263794,ga,"[';copy = 0', ';print(copy)', ';from = 0', ';subFiles = 0', ';newDir = 0', ';fileLength = 0', ';charBuff = 0', ';print(charBuff)', ';delete = 0', '; fileLen = 0']"
398,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",765,"    public void Conversion(File url, File dest) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",4,18,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:dest,inflate:inflate,in:login,convert:Conversion,format:url,src:url,",0,Greedy,437,0.1719288150469462,replace,[]
399,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
 <SPLIT>     public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0",,0,0,0,,0,GA,4376,1.6211578647295635,failed,[]
400,"    public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File parent = file.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(file)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.length() != length) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",356,"    public DataRecord  addFile(InputStream audio) throws DataStoreException {
        File Temperature = null;
        try {
            Temperature = newTemporaryFile();
            DataIdentifier TempPath = new DataIdentifier(Temperature.getName());
            usesIdentifier(TempPath);
            long url = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(Temperature), digest);
            try {
                url = IOUtils.copyLarge(audio, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File pa = file.getParentFile();
                    pa.mkdirs();
                    if (Temperature.renameTo(file)) {
                        Temperature = null;
                    } else {
                        throw new IOException(""Can not rename "" + Temperature.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.url() != url) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(TempPath);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (Temperature != null) {
                Temperature.delete();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"addRecord,input,temporary,tempId,length,digest,output,file,parent,now","addRecord:-0.0017633438110351562,input:0.001632988452911377,temporary:0.004457056522369385,tempId:-0.015632212162017822,length:0.02056223154067993,digest:-0.04882168769836426,output:-0.05304139852523804,file:-0.13753986358642578,parent:0.008167147636413574,now:-0.018730521202087402,",6,21,0,"length:url,parent:pa,temporary:Temperature,input:audio,addRecord: addFile,tempId:TempPath,",0,Greedy,301,0.1128165086110433,replace,[]
401,"    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""Usage:  URLDumper <URL> <file>"");
            System.exit(1);
        }
        String location = args[0];
        String file = args[1];
        URL url = new URL(location);
        FileOutputStream fos = new FileOutputStream(file);
        byte[] bytes = new byte[4096];
        InputStream is = url.openStream();
        int read;
        while ((read = is.read(bytes)) != -1) {
            fos.write(bytes, 0, read);
        }
        is.close();
        fos.close();
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"doCrypt,text,UnsupportedEncodingException,md,sha1hash",,5,12,0,,0,GA,1972,0.7245635867118836,failed,"[';print(murMac)', ';print(url)', ';print(od)']"
402,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void run(String[] args) throws Throwable {
        FileInputStream input = new FileInputStream(args[0]);
        FileOutputStream output = new FileOutputStream(args[0] + "".out"");
        Reader reader = $(Reader.class, $declass(input));
        Writer writer = $(Writer.class, $declass(output));
        Pump pump;
        if (args.length > 1 && ""diag"".equals(args[1])) {
            pump = $(new Reader() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public int read(byte[] buffer, int off, int len) throws Exception {
                    Integer rd = (Integer) $next();
                    if (rd > 0) {
                        counter += rd;
                    }
                    return 0;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Read from input "" + counter + "" bytes."");
                }
            }, reader, writer, new Writer() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public void write(byte[] buffer, int off, int len) throws Exception {
                    counter += len;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Written to output "" + counter + "" bytes."");
                }
            });
        } else {
            pump = $(reader, writer);
        }
        pump.pump();
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",1,3,0,"encodeFileToFile:encodeFileToFile,buffer:url,",0,Greedy,92,0.03375779390335083,replace,[]
403,"    public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(url.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",156,"    public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String fil = new File(url.getFile()).getName();
            FileOutputStream Foses = new FileOutputStream(dstDir + File.separator + fil);
            byte[] file = new byte[4096];
            while ((cnt = is.read(file, 0, file.length)) != -1) Foses.write(file, 0, cnt);
            Foses.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"get,cnt,url,conn,is,filename,fos,buffer","get:-0.0007252097129821777,cnt:-0.0009148120880126953,url:-0.0008389949798583984,conn:-0.0012230277061462402,is:-0.0009704828262329102,filename:-0.0007027983665466309,fos:-9.179115295410156e-06,buffer:-0.00028580427169799805,",3,9,0,"fos:Foses,buffer:file,filename:fil,",0,Greedy,156,0.05761899550755819,replace,[]
404,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,sha1hash,md",,4,10,0,,0,GA,1847,0.6805139382680258,failed,"[';text = 0', ';sha1hash = 0', ';SHA256 = 0', ';sha256 = 0', ';shaOne = 0', ';template = 0', ';token = 0', ';str = 0', ';output = 0', ';pattern = 0', ';string = 0', ';value = 0']"
405,"    public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        if (url == null) throw new IllegalArgumentException(""Keystore url may not be null"");
        LOG.debug(""Initializing key store"");
        KeyStore keystore = null;
        if (url.getFile().endsWith("".p12"")) keystore = KeyStore.getInstance(""pkcs12""); else keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(url.openStream(), password != null ? password.toCharArray() : null);
        return keystore;
    }
",306,,LABEL_0,LABEL_0,LABEL_0,-1,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile",,14,40,0,,0,GA,6165,2.3217862844467163,failed,[]
406,"    public void testHttpsConnection_Not_Found_Response() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                doInteraction(connection, ss, NOT_FOUND_CODE);
                fail(""Expected exception was not thrown."");
            } catch (FileNotFoundException e) {
                if (DO_LOG) {
                    System.out.println(""Expected exception was thrown: "" + e.getMessage());
                }
            }
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",145,"    public void testHttpsConnection_Not_FoundHeaderResponse() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext conf = getContext();
            ServerSocket ls = conf.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier cnx = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(cnx);
            URL file = new URL(""https://localhost:"" + ls.getLocalPort());
            HttpsURLConnection out = (HttpsURLConnection) file.openConnection();
            try {
                doInteraction(out, ls, NOT_FOUND_CODE);
                fail(""Expected exception was not thrown."");
            } catch (FileNotFoundException e) {
                if (DO_LOG) {
                    System.out.println(""Expected exception was thrown: "" + e.getMessage());
                }
            }
            out.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
;testHttpsConnection_Not_Found_Response = 0;ctx = 0",LABEL_0,LABEL_0,LABEL_0,1,"testHttpsConnection_Not_Found_Response,ctx,ss,hnv,url,connection","testHttpsConnection_Not_Found_Response:-9.5367431640625e-06,ctx:-1.3470649719238281e-05,ss:7.665157318115234e-05,hnv:1.0848045349121094e-05,url:0.00012034177780151367,connection:-0.00016570091247558594,",6,13,0,"url:file,ss:ls,hnv:cnx,testHttpsConnection_Not_Found_Response:testHttpsConnection_Not_FoundHeaderResponse,ctx:conf,connection:out,",0,Greedy,232,0.08425654570261637,inesrt,"[';testHttpsConnection_Not_Found_Response = 0', ';ctx = 0']"
407,"    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",191,"    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection httpFs = serverURL.openConnection();
        httpFs.setDoInput(true);
        httpFs.setDoOutput(true);
        httpFs.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter Writer = new OutputStreamWriter(httpFs.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        Writer.write(content);
        Writer.flush();
        BufferedReader output = new BufferedReader(new InputStreamReader(httpFs.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = output.readLine()))) {
            response.append(str);
        }
        Writer.close();
        output.close();
        return response.toString();
    }
;changeCorpulate = 0;changeScapsule = 0;changeCambulate = 0",LABEL_0,LABEL_0,LABEL_0,1,"issueCommandToServer,command,changeCapsule,urlConn,wr,content,input,response,str","issueCommandToServer:-0.0021200180053710938,command:-0.004548370838165283,changeCapsule:-0.0059926509857177734,urlConn:-0.0345035195350647,wr:-0.11408358812332153,content:-0.020333588123321533,input:-0.03722083568572998,response:-0.027770400047302246,str:-0.01525789499282837,",3,13,0,"issueCommandToServer:issueCommandToServer,command:command,changeCapsule:changeCapsule,str:str,content:content,response:response,urlConn:httpFs,input:output,wr:Writer,",0,Greedy,609,0.23592527310053507,inesrt,"[';changeCorpulate = 0', ';changeScapsule = 0', ';changeCambulate = 0']"
408,"    public static String getSHADigest(String password) {
        String digest = null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(password.getBytes());
            byte[] pwhash = sha.digest();
            digest = ""{SHA}"" + new String(Base64.encode(pwhash));
        } catch (NoSuchAlgorithmException nsae) {
            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);
        }
        return digest;
    }
 <SPLIT>     public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
",103,,LABEL_1,LABEL_1,LABEL_1,-1,"getSHADigest,password,digest,sha,pwhash",,5,14,0,,0,GA,2306,0.8388641119003296,failed,[]
409,"    @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
 <SPLIT>     private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {
        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();
        log.println(""Concat files into: "" + outputFile);
        OutputStream out = new FileOutputStream(absPath + outputFile);
        byte[] buffer = new byte[4096];
        int readBytes;
        for (String file : inputFiles) {
            log.println("" Read: "" + file);
            InputStream in = new FileInputStream(absPath + file);
            while ((readBytes = in.read(buffer)) != -1) {
                out.write(buffer, 0, readBytes);
            }
            in.close();
        }
        out.close();
        if (compress) {
            long normalSize = new File(absPath + outputFile).length();
            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");
            builder.directory(new File(absPath));
            Process process = builder.start();
            process.waitFor();
            long minSize = new File(absPath + outputFile).length();
            long diff = normalSize - minSize;
            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;
            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);
            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");
        }
    }
",79,,LABEL_0,LABEL_0,LABEL_0,-1,"encriptPassword,passwd,md,hash",,4,8,0,,0,GA,1526,0.5685475826263428,failed,"[';encriptPassword = 0', ';print(encriptPassword)', ';passwd = 0', ';md = 0', ';hash = 0', '; desjectPassword = 0', '; enjectSecret = 0', '; descriptSecret = 0', '; descriptpassword = 0', ';copy = 0', ';num = 0']"
410,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",272,,LABEL_1,LABEL_1,LABEL_1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,7,35,0,,0,GA,4633,1.781414524714152,failed,"[';readAndRewrite = 0', ';dcmParser = 0', ';ds = 0', ';pdReader = 0', ';dcmEncParam = 0', ';pdWriter = 0', ';oldFilename = 0', ';InFiles = 0', ';Infile = 0', ';loginFilename = 0', ';InSourceFile = 0', ';newDir = 0', ';OutDir = 0', ';dbmPolicy = 0', ';dpmInstallation = 0', ';dcmPolicy = 0', ';DcmInstallation = 0', ';dhemInstallation = 0', '; dpmPolicy = 0', ';model = 0', ';device = 0']"
411,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>                     public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",194,"    public static boolean decodeFileToFile(String  infilename, String inputdatabase) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream conn = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream( infilename)), Base64.DECODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                conn.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.007184386253356934,infile:0.0011181831359863281,outfile:0.0008675456047058105,in:-0.00516819953918457,out:-0.003252744674682617,buffer:-0.0038095712661743164,read:-0.008160889148712158,success:-0.011601448059082031,",4,11,0,"decodeFileToFile:decodeFileToFile,infile: infilename,outfile:inputdatabase,out:conn,buffer:url,",0,Greedy,194,0.07464328606923422,replace,[]
412,"    public static String getFileContentFromPlugin(String path) {
        URL url = getURLFromPlugin(path);
        StringBuffer sb = new StringBuffer();
        try {
            Scanner scanner = new Scanner(url.openStream());
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                sb.append(line + ""\n"");
            }
            scanner.close();
        } catch (Exception e) {
            e.printStackTrace();
            return """";
        }
        return sb.toString();
    }
 <SPLIT>     @Override
    public void run() {
        try {
            URL urlhome = new URL(""http://www.verussolutions.biz/NGLDashBoard.xml"");
            URLConnection uc = urlhome.openConnection();
            InputStreamReader input = new InputStreamReader(uc.getInputStream());
            BufferedReader in = new BufferedReader(input);
            String inputLine;
            String xmlData = """";
            while ((inputLine = in.readLine()) != null) {
                xmlData += inputLine;
            }
            in.close();
            PrintWriter fw = new PrintWriter(new FileWriter(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            fw.println(xmlData);
            fw.flush();
            fw.close();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        try {
            Document doc = new SAXBuilder().build(new File(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            String onlinsuppcdat = doc.getRootElement().getChild(""OnlineSupportInformation"").getText();
            CDATA cdata = new CDATA(onlinsuppcdat);
            host.setOnlineInformationHTML(cdata.getText());
            onlinsuppcdat = doc.getRootElement().getChild(""News"").getText();
            cdata = new CDATA(onlinsuppcdat);
            host.setNewsHTML(cdata.getText());
            host.fillData();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
    }
",103,,LABEL_0,LABEL_0,LABEL_0,-1,"getFileContentFromPlugin,path,url,sb,scanner,line",,6,14,0,,0,GA,2784,1.0305288831392925,failed,"[';getFileContentFromPlugin = 0', ';print(path)', ';url = 0', ';print(url)', ';sb = 0', ';print(sb)', ';print(scanner)', ';print(line)', ';print(str)', ';id = 0', ';print(id)', ';port = 0', ';print(port)', ';child = 0', ';print(child)', ';input = 0', ';print(input)', ';name = 0', ';print(name)', ';pattern = 0', ';print(pattern)', ';Path = 0']"
413,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",272,"    private static void readandRewrites(File oldFilename, File exFilename) throws IOException {
        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(oldFilename)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciris);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, ciris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + oldFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(exFilename)));
        DcmEncodeParam dcmEnPart = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEnPart);
        ds.writeHeader(url, dcmEnPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + exFilename + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",7,31,0,"outFile:exFilename,readAndRewrite:readandRewrites,inFile:oldFilename,iis:ciris,dcmEncParam:dcmEnPart,dcmParser:dmissionPlugin,out:url,",0,Greedy,396,0.1661449948946635,replace,[]
414,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",169,"    public static void transferFile(File ource, File dest, int uf2, boolean ride) throws IOException {
        if (dest.exists()) if (ride) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] border = new byte[uf2];
        int read = 0;
        InputStream url = null;
        OutputStream url = null;
        try {
            url = new FileInputStream(ource);
            url = new FileOutputStream(dest);
            while (true) {
                read = url.read(border);
                if (read == -1) break;
                url.write(border, 0, read);
            }
        } finally {
            if (url != null) try {
                url.close();
            } finally {
                if (url != null) url.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,src,dest,bufSize,force,buffer,read,in,out","copyFile:0.001324772834777832,src:-0.0006009936332702637,dest:-0.0011205077171325684,bufSize:-0.0002535581588745117,force:-0.00028717517852783203,buffer:-0.00032407045364379883,read:-0.0008199810981750488,in:-0.000552833080291748,out:9.03010368347168e-05,",7,20,0,"copyFile:transferFile,out:url,bufSize:uf2,force:ride,buffer:border,in:url,src:ource,",0,Greedy,293,0.10496189594268798,replace,[]
415,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String st = ""http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"";
        URL url = new URL(st);
        InputStream fis = null;
        if (""file"".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (""http"".equals(url.getProtocol())) fis = url.openStream();
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            System.out.println(""Extracting: "" + entry);
            int count;
            byte data[] = new byte[BUFFER];
            FileOutputStream fos = new FileOutputStream(entry.getName());
            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
            dest.flush();
            dest.close();
        }
        zis.close();
    }
",69,,LABEL_1,LABEL_0,,-4,"copyFile,in,out,sourceChannel,destinationChannel",,,,0,,0,Greedy,1,0.0004954298337300618,,[]
416,"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",77,,LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,UnsupportedEncodingException,md,sha1hash",,5,12,0,,0,GA,2272,0.8219631711641947,failed,"[';SHA1 = 0', ';UnsupportedEncodingException = 0', ';SHAOne = 0', ';SHA256 = 0', ';output = 0', ';pattern = 0', ';number = 0', ';mode = 0']"
417,"        public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) connection.setRequestProperty(""Referer"", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + contentType);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals(""application/zip"");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) contentType = ""application/atom+xml"";
                    }
                    if (contentType.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d(""continue with next part: "" + url);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
 <SPLIT>     private Reader getReader() throws IOException {
        if (data != null) {
            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");
            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");
            return new StringReader(data);
        } else if (url != null) {
            InputStream stream = url.openStream();
            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);
        }
        return null;
    }
",898,"        public void runInternal() {
            lc = null;
            boolean itemsLoadedCopials = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(path.toString(), -1);
                    visited.add(path.toString());
                    long startLineStng = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = path.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    lc = (HttpURLConnection) conn;
                    lc.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) lc.setRequestProperty(""Referer"", referer);
                    lc.setInstanceFollowRedirects(true);
                    lc.setAllowUserInteraction(false);
                    lc.setConnectTimeout(CONNECT_TIMEOUT);
                    lc.setReadTimeout(READ_TIMEOUT);
                    lc.setDoInput(true);
                    String fileName = null;
                    String disp = lc.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = lc.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String documentTyp = lc.getContentType();
                    String contentEncoding = lc.getContentEncoding();
                    int contentLen = lc.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + documentTyp);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(path.toString(), contentLen);
                    InputStream os = lc.getInputStream();
                    delayedProgress.cancel();
                    os = new ProgressInputStream(os, startLineStng, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = documentTyp != null && documentTyp.equals(""application/zip"");
                    if (expectedType != null) documentTyp = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (os.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        os.close();
                        os = null;
                        os = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) documentTyp = ""application/atom+xml"";
                    }
                    if (documentTyp.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(os);
                        itemsLoadedCopials = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                path = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(path.toString());
                                L.d(""continue with next part: "" + path);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(documentTyp, path.toString(), os, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedCopials = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + path.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (lc != null) try {
                        lc.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedCopials) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
",LABEL_0,LABEL_0,LABEL_1,1,"runInternal,connection,visited,startTimeStamp,delayedProgress,conn,fileName,disp,p,response,contentType,contentEncoding,contentLen,is,url,loadNext,itemsLoadedPartially","runInternal:0.00010800361633300781,connection:0.019161880016326904,visited:0.0024756789207458496,startTimeStamp:0.01092076301574707,delayedProgress:-0.001614689826965332,conn:-0.0013233423233032227,fileName:0.003073275089263916,disp:0.00208967924118042,p:0.0015301704406738281,response:0.005349338054656982,contentType:0.02718418836593628,contentEncoding:0.0010579228401184082,contentLen:0.006680130958557129,is:0.019289910793304443,url:0.010524630546569824,loadNext:0.000527501106262207,itemsLoadedPartially:0.020231008529663086,",6,51,0,"contentType:documentTyp,itemsLoadedPartially:itemsLoadedCopials,is:os,connection:lc,startTimeStamp:startLineStng,url:path,",0,Greedy,306,0.1240195870399475,replace,[]
418,"    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",197,,LABEL_1,LABEL_1,LABEL_1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse",,7,22,0,,0,GA,3268,1.2335185647010802,failed,[]
419,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""usage: "" + EvaluatorHelper.class.getName() + "" <output> <data set file>"");
            System.exit(1);
        }
        Helper helper = Helper.getHelper(args[1]);
        Dataset dataset = helper.read(args[1]);
        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);
        Enumeration entries = zip.entries();
        Unit<?>[] performance = new Unit<?>[LIMIT];
        int index = 0;
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (entry.getName().endsWith("".out"")) {
                File temp = File.createTempFile(""PARSER"", "".zip"");
                temp.deleteOnExit();
                PrintStream writer = new PrintStream(new FileOutputStream(temp));
                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));
                byte[] buffer = new byte[4096];
                int read = -1;
                while ((read = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, read);
                }
                writer.close();
                reader.close();
                BufferedReader outfile = new BufferedReader(new FileReader(temp));
                String line = null;
                RuleParser parser = new RuleParser();
                ProbabilisticRuleList list = new ProbabilisticRuleList();
                while ((line = outfile.readLine()) != null) {
                    if (line.startsWith(""IF"")) {
                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());
                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));
                    }
                }
                outfile.close();
                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();
                performance[index] = measure.evaluate(dataset, list);
                System.out.println(entry.getName() + "": "" + performance[index]);
                index++;
                if (index >= LIMIT) {
                    break;
                }
            }
        }
        System.out.println(UnitAveragingMode.get(Double.class).average(performance));
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i",,0,0,0,,0,GA,3094,1.1654024600982666,failed,[]
420,"    public void updateUser(User portalUserBean, AuthSession authSession) {
        DatabaseAdapter dbDyn = null;
        PreparedStatement ps = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            ps = dbDyn.prepareStatement(sql);
            int num = 1;
            ps.setString(num++, portalUserBean.getFirstName());
            ps.setString(num++, portalUserBean.getMiddleName());
            ps.setString(num++, portalUserBean.getLastName());
            ps.setString(num++, portalUserBean.getAddress());
            ps.setString(num++, portalUserBean.getPhone());
            ps.setString(num++, portalUserBean.getEmail());
            ps.setLong(num++, portalUserBean.getUserId());
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    ps.setString(num++, authSession.getUserLogin());
                    break;
            }
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbDyn.commit();
        } catch (Exception e) {
            try {
                if (dbDyn != null) {
                    dbDyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",358,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,portalUserBean,authSession,dbDyn,ps,sql,idList,num,i1",,0,0,0,,0,GA,4544,1.7480091333389283,failed,[]
421,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",277,,LABEL_1,LABEL_0,,-4,"loadDDL,stmt,qry,q",,,,0,,0,Greedy,1,0.0006223519643147787,,[]
422,"    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
 <SPLIT>     public static String POST(String url, String[][] props) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod(""POST"");
        for (int i = 0; i < props.length; ++i) {
            conn.addRequestProperty(props[i][0], props[i][1]);
        }
        conn.connect();
        try {
            return new String((byte[]) conn.getContent());
        } finally {
            conn.disconnect();
        }
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFromFileToFileUsingNIO,inputFile,outputFile,inputChannel,outputChannel",,5,14,0,,0,GA,1586,0.5811122099558512,failed,"[';copyFromFileToFileUsingNIO = 0', ';inputFile = 0', ';outputFile = 0', ';outputChannel = 0', ';copyFromFileToFileWithNFile = 0', ';copyFromFileToFileWithFileChannel = 0', ';copyFromFileToFileUsingnIO = 0', ';copyFromFileToFileWithNIO = 0', ';copyFromFileToFileWithNio = 0', ';copyFromFileToFileWithFileIO = 0', ';inputDir = 0', ';sourceDir = 0', ';targetPath = 0', ';targetDirectory = 0']"
423,"    public static DigitalObjectContent byReference(final InputStream inputStream) {
        try {
            File tempFile = File.createTempFile(""tempContent"", ""tmp"");
            tempFile.deleteOnExit();
            FileOutputStream out = new FileOutputStream(tempFile);
            IOUtils.copyLarge(inputStream, out);
            out.close();
            return new ImmutableContent(tempFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new IllegalStateException(""Could not create content for input stream: "" + inputStream);
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"byReference,inputStream,tempFile,out",,4,11,0,,0,GA,1784,0.65202716588974,failed,"[';byReference = 0', ';print(byReference)', ';tempFile = 0', ';orReference = 0', ';ofExternal = 0', ';outputString = 0', ';InputString = 0', ';tmpDir = 0', '; tempDir = 0']"
424,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",188,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.state.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File inputUrl = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            inputUrl = new File(inputUrl, inputFile.getName());
        } else if (inputUrl.getParentFile().exists() == false) {
            inputUrl.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(inputUrl) == false) {
            InputStream url = new FileInputStream(inputFile);
            OutputStream state = new FileOutputStream(inputUrl);
            byte[] url = new byte[16384];
            int ls = -1;
            while ((ls = url.read(url)) != -1) state.write(url, 0, ls);
            url.close();
            state.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes","uploadFile:-0.008061587810516357,inputFile:-0.004506230354309082,targetFile:-0.0014129281044006348,outputFile:0.003369927406311035,in:-0.0004075169563293457,out:0.003262758255004883,line:0.0022965073585510254,bytes:0.003320932388305664,",5,20,0,"outputFile:inputUrl,bytes:ls,out:state,line:url,in:url,",0,Greedy,279,0.10005024274190268,replace,[]
425,"    public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
 <SPLIT>     public String execute() {
        String dir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\"";
        HomeMap map = new HomeMap();
        map.setDescription(description);
        Integer id = homeMapDao.saveHomeMap(map);
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(dir + id);
            IOUtils.copy(new FileInputStream(imageFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list();
    }
",139,,LABEL_1,LABEL_1,LABEL_1,-1,"transport,file,files,i,inChannel,outChannel",,5,17,0,,0,GA,2313,0.8571000377337138,failed,"[';files = 0', ';print(files)', ';print(i)', ';print(inChannel)', ';print(ransprocess)', ';print(ransport)', ';print( transprocess)', ';print(mi)']"
426,"    private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {
        HttpURLConnection urlConn = null;
        try {
            String params = generatorParamString(parameters);
            URL url = new URL(reqUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setRequestMethod(""POST"");
            urlConn.setConnectTimeout(5000);
            urlConn.setReadTimeout(5000);
            urlConn.setDoOutput(true);
            byte[] b = params.getBytes();
            urlConn.getOutputStream().write(b, 0, b.length);
            urlConn.getOutputStream().flush();
            urlConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return urlConn;
    }
 <SPLIT>     public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"sendPost,reqUrl,parameters,urlConn,params,url,b",,0,0,0,,0,GA,3181,1.1810785770416259,failed,[]
427,"    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",119,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,src,dest,ifp,ofp,fis,fos,b",,8,20,0,,0,GA,3211,1.1803393403689066,failed,"[';dest = 0', ';print(Ifi)']"
428,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     public static String createPseudoUUID() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(new UID().toString().getBytes());
            try {
                String localHost = InetAddress.getLocalHost().toString();
                messageDigest.update(localHost.getBytes());
            } catch (UnknownHostException e) {
                throw new OXFException(e);
            }
            byte[] digestBytes = messageDigest.digest();
            StringBuffer sb = new StringBuffer();
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 0)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 4)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 6)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 8)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 10)));
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 12)));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new OXFException(e);
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,3,8,0,,0,GA,1341,0.49878300031026207,failed,"[';hash = 0', ';data = 0', ';str = 0', ';parse = 0', ';hex = 0', ';copy = 0', ';sum = 0', ';address = 0', ';str = 0', ';output = 0', ';length = 0']"
429,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            ms.setString(1, descartadoEntrada);
            ms.setString(2, usuarioEntrada);
            ms.setString(3, motivosDescarteEntrada);
            ms.setInt(4, Integer.parseInt(anoOficio));
            ms.setInt(5, Integer.parseInt(oficinaOficio));
            ms.setInt(6, Integer.parseInt(numeroOficio));
            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,4,16,0,,0,GA,2248,0.8553763508796692,failed,"[';a = 0', ';print(a)', ';swapped = 0', ';i = 0', ';tmp = 0', ';ubblesort = 0', ';ubbleCompare = 0', ';an = 0', ';result = 0', ';sup = 0', ';aux = 0', ';o = 0', ';rewapping = 0']"
430,"    public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""org.rcpquizengine.views.quizzes"");
            Folder rootFolder = view.getRootFolder();
            if (rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("""")) {
                        String md5 = """";
                        MessageDigest md = MessageDigest.getInstance(""MD5"");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        if (rootFolder.getMd5Digest().equals(md5)) {
                            rootFolder.setMd5Digest("""");
                            rootFolder.setEncrypted(false);
                            MessageDialog.openInformation(shell, ""Quiz bank unlocked"", ""The current quiz bank has been unlocked"");
                        } else {
                            MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Incorrect password"");
                        }
                        password = """";
                        md5 = """";
                    }
                }
            } else {
                MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Quiz bank already unlocked"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public static String encryptPassword(String plainPassword) {
        StringBuffer sb = new StringBuffer();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(plainPassword.getBytes());
            byte[] digestBytes = messageDigest.digest();
            String hex = null;
            for (int i = 0; i < digestBytes.length; i++) {
                hex = Integer.toHexString(0xFF & digestBytes[i]);
                if (hex.length() < 2) sb.append(""0"");
                sb.append(hex);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return new String(sb);
    }
",288,,LABEL_1,LABEL_1,LABEL_1,-1,"execute,event,shell,view,rootFolder,dialog,password,md5,md",,8,24,0,,0,GA,4203,1.5851047913233438,failed,"[';execute = 0', ';event = 0', ';shell = 0', ';view = 0', ';dialog = 0', ';password = 0', ';md5 = 0', ';complete = 0', ';call = 0', ';evaluate = 0', ';model = 0', ';rootDirectory = 0', ';parentDirectory = 0', ';address = 0']"
431,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination",,5,18,0,,0,GA,2294,0.9365155458450317,failed,[]
432,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",188,,LABEL_1,LABEL_1,LABEL_1,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,11,32,0,,0,GA,4623,1.7184121211369832,failed,"[';UnzipFile = 0', ';print(UnzipFile)', ';unzipFile = 0', ';print(unzipFile)', ';print(unarchiveFile)', ';unpackFile = 0', ';print(unpackFile)', ';print(FILE)', ';title = 0', ';print(title)', ';print(string)', ';files = 0', ';print(files)', ';SourceFile = 0', ';print(SourceFile)', ';fd = 0', ';print(fd)', ';print(fn)', ';Filename = 0', ';print(Filename)', ';f = 0', ';module = 0', '; tempfolder = 0', ';tmpDir = 0', '; tempDir = 0', ';tempDir = 0', ';tmpDIR = 0', ';write = 0', ';len = 0', ';code = 0']"
433,"    private void simulate() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction\n"");
        out.flush();
        System.out.println(""Simulate..."");
        File file = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserReputationResponse;
        RateUser rateUserRequest;
        RateUserResponse rateUserResponse;
        FileInputStream fis = new FileInputStream(file);
        BufferedReader br = new BufferedReader(new InputStreamReader(fis));
        String call = br.readLine();
        while (call != null) {
            rateUserRequest = generateRateUserRequest(call);
            try {
                rateUserResponse = trsPort.rateUser(rateUserRequest);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + rateUserRequest.getVbeId());
                System.out.println(""VO: "" + rateUserRequest.getVoId());
                System.out.println(""USER: "" + rateUserRequest.getUserId());
                System.out.println(""SERVICE: "" + rateUserRequest.getServiceId());
                System.out.println(""ACTION: "" + rateUserRequest.getActionId());
                System.out.println(""OUTCOME: "" + rateUserResponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(null);
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            call = br.readLine();
        }
        fis.close();
        br.close();
        out.flush();
        out.close();
    }
 <SPLIT>     private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",797,"    private void simulate() throws Exception {
        BufferedWriter cli = null;
        cli = new BufferedWriter(new FileWriter(outFile));
        cli.write(""#Thread\tReputation\tAction
"");
        cli.flush();
        System.cli.println(""Simulate..."");
        File url = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserReputationQuery = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserReputationResp;
        RateUser rateUserRequest;
        RateUserResponse rateUserResponse;
        FileInputStream biss = new FileInputStream(url);
        BufferedReader br = new BufferedReader(new InputStreamReader(biss));
        String call = br.readLine();
        while (call != null) {
            rateUserRequest = generateRateUserRequest(call);
            try {
                rateUserResponse = trsPort.rateUser(rateUserRequest);
                System.cli.println(""----------------R A T I N G-------------------"");
                System.cli.println(""VBE: "" + rateUserRequest.getVbeId());
                System.cli.println(""VO: "" + rateUserRequest.getVoId());
                System.cli.println(""USER: "" + rateUserRequest.getUserId());
                System.cli.println(""SERVICE: "" + rateUserRequest.getServiceId());
                System.cli.println(""ACTION: "" + rateUserRequest.getActionId());
                System.cli.println(""OUTCOME: "" + rateUserResponse.isOutcome());
                System.cli.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationQuery.setIoi(null);
            obtainUserReputationQuery.setServiceId(null);
            obtainUserReputationQuery.setUserId(rateUserRequest.getUserId());
            obtainUserReputationQuery.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationQuery.setVoId(null);
            try {
                obtainUserReputationResp = trsPort.obtainUserReputation(obtainUserReputationQuery);
                System.cli.println(""-----------R E P U T A T I O N----------------"");
                System.cli.println(""VBE: "" + obtainUserReputationQuery.getVbeId());
                System.cli.println(""VO: "" + obtainUserReputationQuery.getVoId());
                System.cli.println(""USER: "" + obtainUserReputationQuery.getUserId());
                System.cli.println(""SERVICE: "" + obtainUserReputationQuery.getServiceId());
                System.cli.println(""IOI: "" + obtainUserReputationQuery.getIoi());
                System.cli.println(""REPUTATION: "" + obtainUserReputationResp.getReputation());
                System.cli.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResp.getMessage(), true, obtainUserReputationResp.isOutcome());
                assertEquals(0.0, obtainUserReputationResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationQuery.setIoi(null);
            obtainUserReputationQuery.setServiceId(null);
            obtainUserReputationQuery.setUserId(rateUserRequest.getUserId());
            obtainUserReputationQuery.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationQuery.setVoId(rateUserRequest.getVoId());
            try {
                obtainUserReputationResp = trsPort.obtainUserReputation(obtainUserReputationQuery);
                System.cli.println(""-----------R E P U T A T I O N----------------"");
                System.cli.println(""VBE: "" + obtainUserReputationQuery.getVbeId());
                System.cli.println(""VO: "" + obtainUserReputationQuery.getVoId());
                System.cli.println(""USER: "" + obtainUserReputationQuery.getUserId());
                System.cli.println(""SERVICE: "" + obtainUserReputationQuery.getServiceId());
                System.cli.println(""IOI: "" + obtainUserReputationQuery.getIoi());
                System.cli.println(""REPUTATION: "" + obtainUserReputationResp.getReputation());
                System.cli.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResp.getMessage(), true, obtainUserReputationResp.isOutcome());
                assertEquals(0.0, obtainUserReputationResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            call = br.readLine();
        }
        biss.close();
        br.close();
        cli.flush();
        cli.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"simulate,out,file,obtainUserReputationRequest,obtainUserReputationResponse,rateUserRequest,rateUserResponse,fis,br,call","simulate:0.013346970081329346,out:0.33792227506637573,file:0.05595695972442627,obtainUserReputationRequest:0.11350274085998535,obtainUserReputationResponse:0.2550594210624695,rateUserRequest:-0.022889137268066406,rateUserResponse:-0.0007368326187133789,fis:0.06948083639144897,br:0.028509676456451416,call:0.04225659370422363,",5,70,0,"out:cli,obtainUserReputationResponse:obtainUserReputationResp,obtainUserReputationRequest:obtainUserReputationQuery,fis:biss,file:url,",0,Greedy,332,0.13667747179667156,replace,[]
434,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
",188,"    public void UploadDir(File targetfile, String targetPlace) throws IOException {
        System.state.println(""Uploading "" + targetfile.getName() + "" to "" + targetPlace);
        File inputUrl = new File(targetPlace);
        if (targetPlace.endsWith(""/"")) {
            inputUrl = new File(inputUrl, targetfile.getName());
        } else if (inputUrl.getParentFile().exists() == false) {
            inputUrl.getParentFile().mkdirs();
        }
        if (targetfile.renameTo(inputUrl) == false) {
            InputStream url = new FileInputStream(targetfile);
            OutputStream state = new FileOutputStream(inputUrl);
            byte[] url = new byte[16384];
            int ls = -1;
            while ((ls = url.read(url)) != -1) state.write(url, 0, ls);
            url.close();
            state.close();
        }
    }
;uploadFile = 0;print(uploadFile);inputFile = 0;print(inputFile);print(targetFile);print(outputFile);in = 0;print(in);bytes = 0;print(bytes);targetFilename = 0;print(targetFilename);InputFiles = 0;print(InputFiles);InputFolder = 0;print(InputFolder);print( inputFilename);inputType = 0",LABEL_1,LABEL_1,LABEL_1,1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes","uploadFile:-0.008061587810516357,inputFile:-0.004506230354309082,targetFile:-0.0014129281044006348,outputFile:0.003369927406311035,in:-0.0004075169563293457,out:0.003262758255004883,line:0.0022965073585510254,bytes:0.003320932388305664,",8,30,0,"outputFile:inputUrl,bytes:ls,out:state,line:url,in:url,targetFile:targetPlace,inputFile:targetfile,uploadFile:UploadDir,",0,Greedy,495,0.1868847966194153,inesrt,"[';uploadFile = 0', ';print(uploadFile)', ';inputFile = 0', ';print(inputFile)', ';print(targetFile)', ';print(outputFile)', ';in = 0', ';print(in)', ';bytes = 0', ';print(bytes)', ';targetFilename = 0', ';print(targetFilename)', ';InputFiles = 0', ';print(InputFiles)', ';InputFolder = 0', ';print(InputFolder)', ';print( inputFilename)', ';inputType = 0']"
435,"    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",409,"    private String transferWsdDL(String wssdFILE, String USERPassword) throws WiseConnectionException {
        String transferPath = null;
        try {
            URL eadpoint= new URL(wssdFILE);
            HttpURLConnectionurln = (HttpURLConnection) adpoint.openConnection();
            url.setDoOutput(false);
            url.setDoInput(true);
            url.setUseCaches(false);
            url.setRequestMethod(""GET"");
            url.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            url.setRequestProperty(""Connection"", ""close"");
            if (USERPassword != null) {
                url.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(USERPassword.getBytes()));
            }
            InputStream ipp = null;
            if (url.getResponseCode() == 200) {
               ipps = url.getInputStream();
            } else {
               ipps = url.getErrorStream();
                InputStreamReader i isw= new InputStreamReader(ipp);
                StringWriter eng = new StringWriter();
                char[] br = new char[200];
                int sync = 0;
                while (sync != -1) {
                    sync =  iswsyncd(br);
                    eng.write(br);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + eng.toString());
            }
            File tmpFolder = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!tmpFolder.exists()) {
                tmpFolder.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File path = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fOs = new BufferedOutputStream(new FileOutputStream(path));
            IOUtils.copyStream(ffOs ipp);
            fOs.close();
            ipp.close();
            transferPath = path.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return transferPath;
    }
",LABEL_1,LABEL_1,0.5231143236160278,1,"transferWSDL,wsdlURL,userPassword,filePath,endpoint,conn,is,isr,sw,buf,read,outputDir,file,fos",,11,42,0,"transferWSDL:transferWsdDL,wsdlURL:wssdFILE,userPassword:USERPassword,filePath:transferPath,endpoint:adpoint,conn:url,is:ipp,isr: isw,sw:eng,buf:br,read:sync,outputDir:tmpFolder,file:path,fos:fOs,",0,GA,4839,1.8874631961186727,ga,[]
436,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static String doPost(String URL, List<NameValuePair> params) {
        try {
            OauthUtil util = new OauthUtil();
            URI uri = new URI(URL);
            HttpClient httpclient = util.getNewHttpClient();
            HttpPost postMethod = new HttpPost(uri);
            StringBuffer paramString = new StringBuffer();
            paramString.append(""OAuth"");
            for (int i = 0; i < params.size(); i++) {
                paramString.append("" "" + params.get(i).getName());
                paramString.append(""=\"""" + encodeUrl(params.get(i).getValue()) + ""\"","");
            }
            String xx = paramString.substring(0, paramString.length() - 1);
            postMethod.addHeader(""Authorization"", xx);
            HttpResponse httpResponse = httpclient.execute(postMethod);
            if (httpResponse.getStatusLine().getStatusCode() == 200) {
                String strResult = EntityUtils.toString(httpResponse.getEntity());
                Log.i(""DEBUG"", ""result: "" + strResult);
                return strResult;
            }
        } catch (Exception e) {
            Log.i(""DEBUG"", e.toString());
        }
        return null;
    }
",250,,LABEL_0,LABEL_0,LABEL_0,-1,"doVersionCheck,view,url,in,bin,line,version,build",,3,12,0,,0,GA,3148,1.2092701077461243,failed,"[';doVersionCheck = 0', ';print(doVersionCheck)', ';view = 0', ';url = 0', ';bin = 0', ';line = 0', ';print(line)', ';version = 0', ';build = 0', ';doVersionUpdate = 0', '; doVersionUpdate = 0', '; doversionCheck = 0', ';doversionScan = 0', ';doversionCheck = 0', ';doChangeCheck = 0', ';doChangecheck = 0', ';doChangeUpdate = 0', ';model = 0', ';value = 0', ';index = 0', ';manager = 0', ';address = 0', ';socket = 0', ';definition = 0', ';post = 0', ';print(post)', ';mount = 0', ';how = 0', ';add = 0']"
437,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, ""SJIS""));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, ""UTF8""));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println(""An I/O Exception Occurred: "" + e);
        }
    }
",335,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL RewrittenURL = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + RewrittenURL.getProtocol() + ""://"" + RewrittenURL.getHost() + "":"" + RewrittenURL.getPort() + RewrittenURL.getFile());
        HttpURLConnection webSSLConn = (HttpURLConnection) RewrittenURL.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        webSSLConn.connect();
        response.setStatus(webSSLConn.getResponseCode());
        logger.debug(""[status="" + webSSLConn.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : webSSLConn.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = webSSLConn.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream","doGet:0.010593593120574951,request:-0.01403343677520752,response:0.0023533105850219727,rewrittenQueryString:-0.006837010383605957,rewrittenUrl:0.23867785930633545,httpURLConnection:0.24887430667877197,header:0.0017551779747009277,value:-0.018243789672851562,inputStream:-0.024854958057403564,outputStream:-0.03517961502075195,",2,12,0,"httpURLConnection:webSSLConn,rewrittenUrl:RewrittenURL,",0,Greedy,233,0.08455981016159057,replace,[]
438,"    @Override
    public File call() throws IOException {
        HttpURLConnection conn = null;
        ReadableByteChannel fileDownloading = null;
        FileChannel fileWriting = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            if (size == -1) {
                size = conn.getContentLength();
            }
            fileDownloading = Channels.newChannel(conn.getInputStream());
            fileWriting = new FileOutputStream(file).getChannel();
            long left = size;
            long chunkSize = BLOCK_SIZE;
            for (long downloaded = 0; downloaded < size; left = size - downloaded) {
                if (left < BLOCK_SIZE) {
                    chunkSize = left;
                }
                fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);
                downloaded += chunkSize;
                setProgress(downloaded);
            }
        } finally {
            if (file != null) {
                file.deleteOnExit();
            }
            if (conn != null) {
                conn.disconnect();
            }
            if (fileDownloading != null) {
                try {
                    fileDownloading.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток скачивания"", ioe);
                }
            }
            if (fileWriting != null) {
                try {
                    fileWriting.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток записи в файл"", ioe);
                }
            }
        }
        return file;
    }
 <SPLIT>     @Test
    public void test_validate_geo_getEvents() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",261,,LABEL_0,LABEL_0,LABEL_0,-1,"call,conn,fileDownloading,fileWriting,size,left,chunkSize,downloaded",,7,31,0,,0,GA,3993,1.5301936546961465,failed,"[';call = 0', ';print(call)', ';conn = 0', ';exec = 0', ';output = 0', ';transfer = 0', ';next = 0', ';upload = 0', ';copy = 0', ';process = 0', ';socket = 0', ';col = 0', ';changeLength = 0', '; chunkLength = 0']"
439,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void resolvePlugins() {
        try {
            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsFile = new File(cacheDir, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginURL = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream is = pluginURL.openStream();
                OutputStream os = FileUtils.openOutputStream(pluginsFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(os);
                IOUtils.closeQuietly(is);
            }
            resolvePlugins(pluginsFile.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",220,,LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,11,37,0,,0,GA,4969,1.865802240371704,failed,"[';print(unJarStart)', ';jarPath = 0', ';print(jarPath)', ';jarEntryStart = 0', ';path = 0', ';relPath = 0', ';syncServerPath = 0', ';archiveDir = 0', ';javaLog = 0', ';jarDir = 0', ';prefix = 0', ';mode = 0', ';relativeDir = 0']"
440,"    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
 <SPLIT>     public String digest(String message) throws NoSuchAlgorithmException, EncoderException {
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
        messageDigest.update(message.getBytes());
        byte[] raw = messageDigest.digest();
        byte[] chars = new Base64().encode(raw);
        return new String(chars);
    }
",105,,LABEL_0,LABEL_0,LABEL_0,-1,"in,out,line",,0,0,0,,0,GA,1592,0.5824771920839945,failed,[]
441,"    public void testTransactions() throws Exception {
        con = TestUtil.openDB();
        Statement st;
        ResultSet rs;
        con.setAutoCommit(false);
        assertTrue(!con.getAutoCommit());
        con.setAutoCommit(true);
        assertTrue(con.getAutoCommit());
        st = con.createStatement();
        st.executeUpdate(""insert into test_a (imagename,image,id) values ('comttest',1234,5678)"");
        con.setAutoCommit(false);
        st.executeUpdate(""update test_a set image=9876 where id=5678"");
        con.commit();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        st.executeUpdate(""update test_a set image=1111 where id=5678"");
        con.rollback();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        TestUtil.closeDB(con);
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"testTransactions,con,st,rs",,4,27,0,,0,GA,2064,0.7823447863260905,failed,"[';testTransactions = 0', ';print(testTransactions)', ';con = 0', ';st = 0', ';rs = 0', ';testTacts = 0', ';testTransactionacts = 0', '; testtransacts = 0', ';testTransactionaction = 0', ';testTactions = 0', ';testTransactionactions = 0', ';log = 0', ';ctx = 0']"
442,"    @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",159,"    @Override
    public void trainTestify(File build, String... args) throws Exception {
        String[] query = new String[args.character + 3];
        query[0] = this.getCommand();
        System.arraycopy(args, 0, query, 1, args.character);
        query[query.character - 2] = new File(build, ""training-data.libsvm"").getPath();
        query[query.character - 1] = new File(build, this.getModelName()).getPath();
        Process method = Runtime.getRuntime().exec(query);
        IOUtils.copy(method.getInputStream(), System.out);
        IOUtils.copy(method.getErrorStream(), System.err);
        method.waitFor();
    }
;trainClassifier = 0",LABEL_1,LABEL_1,LABEL_1,1,"trainClassifier,dir,command,length,process","trainClassifier:-0.004578530788421631,dir:0.0004551410675048828,command:0.008952498435974121,length:0.00495678186416626,process:-0.0023786425590515137,",5,20,0,"command:query,length:character,dir:build,process:method,trainClassifier:trainTestify,",0,Greedy,271,0.11001251538594564,inesrt,[';trainClassifier = 0']
443,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,3,8,0,,0,GA,1425,0.5216016411781311,failed,"[';hash = 0', ';data = 0', ';digest = 0', ';str = 0', ';parse = 0', ';copy = 0', ';sum = 0', ';address = 0', ';length = 0', ';value = 0']"
444,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",391,"    private static boolean genCustRatingFileAndMovieIndexFile(String successMusic, String configPath, String CustRateFilenameDesc, String MovieIndexClassName) {
        try {
            File  infile = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + configPath);
            FileChannel inCI = new FileInputStream( infile).getChannel();
            File outFileId = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + MovieIndexClassName);
            FileChannel outCFFirst = new FileOutputStream(outFileId, true).getChannel();
            File againLine1 = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + CustRateFilenameDesc);
            FileChannel outCache1 = new FileOutputStream(againLine1, true).getChannel();
            int bufferMode = (int) inCI.size();
            int totalNoPageRues = bufferMode / 7;
            ByteBuffer mippedURL = inCI.map(FileChannel.MapMode.READ_ONLY, 0, bufferMode);
            int  startRow = 1, depth = 0;
            short thismovie = 1;
            while (mippedURL.hasRemaining()) {
                depth++;
                short movieInfo = mippedURL.getShort();
                int  customers = mippedURL.getInt();
                byte url = mippedURL.get();
                if (movieInfo != thismovie) {
                    ByteBuffer outBaft1 = ByteBuffer.allocate(10);
                    outBaft1.putShort(thismovie);
                    outBaft1.putInt( startRow);
                    outBaft1.putInt(depth - 1);
                    outBaft1.flip();
                    outCFFirst.write(outBaft1);
                    thismovie = movieInfo;
                     startRow = depth;
                }
                ByteBuffer outWBuf200 = ByteBuffer.allocate(5);
                outWBuf200.putInt( customers);
                outWBuf200.put(url);
                outWBuf200.flip();
                outCache1.write(outWBuf200);
            }
            ByteBuffer endofindexFiles = ByteBuffer.allocate(10);
            endofindexFiles.putShort(thismovie);
            endofindexFiles.putInt( startRow);
            endofindexFiles.putInt(100480506);
            endofindexFiles.flip();
            outCFFirst.write(endofindexFiles);
            outCFFirst.close();
            outCache1.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile","genCustRatingFileAndMovieIndexFile:-0.02619856595993042,completePath:0.003457307815551758,masterFile:-0.0037227272987365723,CustRatingFileName:0.0076781511306762695,MovieIndexFileName:0.0065212249755859375,inFile:0.0028406381607055664,inC:-0.003778696060180664,outFile1:-0.003493368625640869,outC1:-0.015922069549560547,outFile2:-0.004805266857147217,outC2:-0.0054288506507873535,fileSize:0.007992327213287354,totalNoDataRows:0.0004372596740722656,mappedBuffer:0.00712275505065918,startIndex:0.0200844407081604,count:0.029823362827301025,currentMovie:0.013465702533721924,movieName:-0.0011744499206542969,customer:-0.004277944564819336,rating:-0.019281208515167236,outBuf1:0.024349868297576904,outBuf2:0.060194313526153564,endOfIndexFile:0.04858434200286865,",22,72,0,"outBuf2:outWBuf200,endOfIndexFile:endofindexFiles,count:depth,outBuf1:outBaft1,startIndex: startRow,currentMovie:thismovie,fileSize:bufferMode,CustRatingFileName:CustRateFilenameDesc,mappedBuffer:mippedURL,MovieIndexFileName:MovieIndexClassName,completePath:successMusic,inFile: infile,totalNoDataRows:totalNoPageRues,movieName:movieInfo,outFile1:outFileId,masterFile:configPath,inC:inCI,customer: customers,outFile2:againLine1,outC2:outCache1,outC1:outCFFirst,rating:url,",0,Greedy,1023,0.38252537647883095,replace,[]
445,"    private InputStream sendRequest(SequenceI seq) throws UnsupportedEncodingException, IOException {
        StringBuilder putBuf = new StringBuilder();
        processOptions(putBuf);
        putBuf.append(""INPUT_SEQUENCE="");
        putBuf.append(URLEncoder.encode("">"" + seq.getName() + ""\n"", ENCODING));
        putBuf.append(URLEncoder.encode(seq.getResidues(), ENCODING));
        URL url = new URL(PRIMER_BLAST_URL);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(putBuf.toString());
        wr.flush();
        wr.close();
        apollo.util.IOUtil.informationDialog(""Primer-BLAST request sent"");
        return conn.getInputStream();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",162,"    private InputStream sendRequest(SequenceI file) throws UnsupportedEncodingException, TimeoutError {
        StringBuilder putBuf = new StringBuilder();
        processOptions(putBuf);
        putBuf.append(""INPUT_SEQUENCE="");
        putBuf.append(URLEncoder.encode("">"" + file.getName() + ""
"", ENCODING));
        putBuf.append(URLEncoder.encode(file.getResidues(), ENCODING));
        URL file = new URL(PRIMER_BLAST_URL);
        URLConnection conn = file.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(putBuf.toString());
        wr.flush();
        wr.close();
        apollo.util.IOUtil.informationDialog(""Primer-BLAST request sent"");
        return conn.getInputStream();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sendRequest,seq,IOException,putBuf,url,conn,wr","sendRequest:-0.00010126829147338867,seq:-7.098913192749023e-05,IOException:-1.6093254089355469e-06,putBuf:-0.0005404949188232422,url:0.0004941225051879883,conn:-0.000446319580078125,wr:-0.001887500286102295,",3,6,0,"url:file,IOException:TimeoutError,seq:file,",0,Greedy,122,0.04622091849644979,replace,[]
446,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
 <SPLIT>     public static boolean copyFile(String sourceName, String destName) {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        boolean wasOk = false;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            wasOk = true;
        } catch (Throwable exception) {
            logger.log(Level.SEVERE, ""Exception in copyFile"", exception);
        } finally {
            try {
                if (sourceChannel != null) sourceChannel.close();
            } catch (Throwable tt) {
            }
            try {
                if (destChannel != null) destChannel.close();
            } catch (Throwable tt) {
            }
        }
        return wasOk;
    }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"logonToServer,ftpClient,ftpAddress,noRetries,remoteHomeDir,noRetriesSoFar,reply",,4,9,0,,0,GA,2906,1.1182366212209065,failed,"[';logonToServer = 0', ';print(logonToServer)', ';ftpClient = 0', ';print(ftpClient)', ';ftpAddress = 0', ';print(noRetriesSoFar)', ';reply = 0', ';logonToGuest = 0', ';ctpPort = 0', ';ftbConn = 0', ';ftpConnect = 0', '; ftpclient = 0', ';ftpcConnect = 0', ';ftprPort = 0', ';ftportaddress = 0', '; ftpPort = 0', ';remoteHomePath = 0', ';remoteHostPath = 0', ';remoteRootDir = 0', ';prefix = 0']"
447,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public InputSource resolveEntity(String publicId, String systemId) {
        String resolved = getResolvedEntity(publicId, systemId);
        if (resolved != null) {
            try {
                InputSource iSource = new InputSource(resolved);
                iSource.setPublicId(publicId);
                URL url = new URL(resolved);
                InputStream iStream = url.openStream();
                iSource.setByteStream(iStream);
                return iSource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);
                return null;
            }
        }
        return null;
    }
",279,,LABEL_0,LABEL_0,LABEL_0,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,9,32,0,,0,GA,7041,2.6466123183568318,failed,"[';createOutputStream = 0', ';inFile = 0', ';outFile = 0', ';k_blockSize = 0', ';byteCount = 0', ';targetDirectory = 0', ';inDir = 0', ';k_lineInfo = 0', ';k_BlockSize = 0', '; bytecount = 0', ';bytecount = 0']"
448,"    @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",79,,LABEL_0,LABEL_0,LABEL_0,-1,"encriptPassword,passwd,md,hash",,4,8,0,,0,GA,1627,0.5978493054707845,failed,"[';print(encriptPassword)', ';print(passwd)', ';print(md)', ';hash = 0', '; desryptPass = 0', '; enjectSecret = 0', '; desryptpassword = 0', '; descodePass = 0']"
449,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
 <SPLIT>     private static void copyFile(String src, String target) throws IOException {
        FileChannel ic = new FileInputStream(src).getChannel();
        FileChannel oc = new FileOutputStream(target).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
",113,,LABEL_1,LABEL_1,LABEL_1,-1,"source,process,processStdOut,processStdIn",,4,10,0,,0,GA,1523,0.5591346700986226,failed,[';print(master)']
450,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",391,"    private static boolean genCustRatingFileAndMovieIndexFile(String successMusic, String configPath, String CustRateFileDesc, String MovieIndexClassName) {
        try {
            File  infile = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + configPath);
            FileChannel inCI = new FileInputStream( infile).getChannel();
            File outFileId = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + MovieIndexClassName);
            FileChannel outCFFirst = new FileOutputStream(outFileId, true).getChannel();
            File outDirectory2 = new File(successMusic + fSep + ""SmartGRAPE"" + fSep + CustRateFileDesc);
            FileChannel outCache1 = new FileOutputStream(outDirectory2, true).getChannel();
            int bufferMode = (int) inCI.size();
            int totalNoPageRues = bufferMode / 7;
            ByteBuffer mippedURL = inCI.map(FileChannel.MapMode.READ_ONLY, 0, bufferMode);
            int  startRow = 1, depth = 0;
            short thismovie = 1;
            while (mippedURL.hasRemaining()) {
                depth++;
                short movieInfo = mippedURL.getShort();
                int  customers = mippedURL.getInt();
                byte url = mippedURL.get();
                if (movieInfo != thismovie) {
                    ByteBuffer outBaft1 = ByteBuffer.allocate(10);
                    outBaft1.putShort(thismovie);
                    outBaft1.putInt( startRow);
                    outBaft1.putInt(depth - 1);
                    outBaft1.flip();
                    outCFFirst.write(outBaft1);
                    thismovie = movieInfo;
                     startRow = depth;
                }
                ByteBuffer outWBuf200 = ByteBuffer.allocate(5);
                outWBuf200.putInt( customers);
                outWBuf200.put(url);
                outWBuf200.flip();
                outCache1.write(outWBuf200);
            }
            ByteBuffer endOfindexFiles = ByteBuffer.allocate(10);
            endOfindexFiles.putShort(thismovie);
            endOfindexFiles.putInt( startRow);
            endOfindexFiles.putInt(100480506);
            endOfindexFiles.flip();
            outCFFirst.write(endOfindexFiles);
            outCFFirst.close();
            outCache1.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile","genCustRatingFileAndMovieIndexFile:-0.02619856595993042,completePath:0.003457307815551758,masterFile:-0.0037227272987365723,CustRatingFileName:0.0076781511306762695,MovieIndexFileName:0.0065212249755859375,inFile:0.0028406381607055664,inC:-0.003778696060180664,outFile1:-0.003493368625640869,outC1:-0.015922069549560547,outFile2:-0.004805266857147217,outC2:-0.0054288506507873535,fileSize:0.007992327213287354,totalNoDataRows:0.0004372596740722656,mappedBuffer:0.00712275505065918,startIndex:0.0200844407081604,count:0.029823362827301025,currentMovie:0.013465702533721924,movieName:-0.0011744499206542969,customer:-0.004277944564819336,rating:-0.019281208515167236,outBuf1:0.024349868297576904,outBuf2:0.060194313526153564,endOfIndexFile:0.04858434200286865,",22,72,0,"outBuf2:outWBuf200,endOfIndexFile:endOfindexFiles,count:depth,outBuf1:outBaft1,startIndex: startRow,currentMovie:thismovie,fileSize:bufferMode,CustRatingFileName:CustRateFileDesc,mappedBuffer:mippedURL,MovieIndexFileName:MovieIndexClassName,completePath:successMusic,inFile: infile,totalNoDataRows:totalNoPageRues,movieName:movieInfo,outFile1:outFileId,masterFile:configPath,inC:inCI,customer: customers,outFile2:outDirectory2,outC2:outCache1,outC1:outCFFirst,rating:url,",0,Greedy,1023,0.3829980293909709,replace,[]
451,"    private IProject createJavaProject() {
        IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(""DefaultFolderPropertiesTest"");
        if (!proj.exists()) {
            try {
                proj.create(null);
                proj.open(null);
                IProjectDescription desc = proj.getDescription();
                desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
                proj.setDescription(desc, null);
                IJavaProject javaProject = JavaCore.create(proj);
                javaProject.open(null);
                IFolder srcFolder1 = proj.getFolder(new Path(""src""));
                srcFolder1.create(true, true, null);
                IFolder srcFolder2 = proj.getFolder(new Path(""custom_src""));
                srcFolder2.create(true, true, null);
                IClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };
                javaProject.setRawClasspath(classpathEntries, null);
                IFolder binFolder = proj.getFolder(new Path(""bin""));
                if (!binFolder.exists()) {
                    binFolder.create(true, true, null);
                }
                javaProject.setOutputLocation(binFolder.getFullPath(), null);
                IFolder testFolder = proj.getFolder(new Path(""test""));
                testFolder.create(true, true, null);
                IFolder resultFolder = proj.getFolder(new Path(""result""));
                resultFolder.create(true, true, null);
            } catch (CoreException e) {
                fail(e.getMessage());
            }
        }
        return proj;
    }
 <SPLIT> 	public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver, ftpport);
		ftpClient.login(username, password);
		return ftpClient;
	}
",332,,LABEL_0,LABEL_0,LABEL_0,-1,"createJavaProject,proj,desc,javaProject,srcFolder1,srcFolder2,classpathEntries,binFolder,testFolder,resultFolder",,10,37,0,,0,GA,4564,1.7221871852874755,failed,"[';createJavaProject = 0', ';print(createJavaProject)', ';print(proj)', ';print(desc)', ';print(javaProject)', ';print(srcFolder1)', ';print(produjs)', ';print(roud)', ';print(perjp)', ';print(profjs)', ';print(produjo)', ';print(produjp)', ';print(upbj)', ';print(doc)', ';print(def)', ';print(javaPlugin)', ';print( javaApp)', ';print(rubyProject)', ';print( javaPlugin)']"
452,"    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals(""xmlns"") || attribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",206,,LABEL_1,LABEL_1,LABEL_1,-1,"getDigest,attribute,digestAlgorithm,digest,md",,5,22,0,,0,GA,2363,0.8785956501960754,failed,"[';getDigest = 0', ';print(getDigest)', ';attribute = 0', ';digestAlgorithm = 0', ';getSignest = 0', ';getSignHash = 0', ';address = 0', ';variable = 0']"
453,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = """";
        if (useragent) sp = ""agent""; else sp = ""user"";
        String userbooksql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                userbooksql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                userbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals(""WL"")) {
                    String chartavailupdsql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdsql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoach + ""\""] "";
                    chartavailupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentcoach.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>""; else userbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                userbooksql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
",420,,LABEL_0,LABEL_1,,-4,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed",,,,0,,0,Greedy,1,0.0008260488510131836,,[]
454,"    public static String getHash(String uri) throws NoSuchAlgorithmException {
        MessageDigest mDigest = MessageDigest.getInstance(""MD5"");
        mDigest.update(uri.getBytes());
        byte d[] = mDigest.digest();
        StringBuffer hash = new StringBuffer();
        for (int i = 0; i < d.length; i++) {
            hash.append(Integer.toHexString(0xFF & d[i]));
        }
        return hash.toString();
    }
 <SPLIT>     public static String CheckUrl(String urlvalue) {
        String inputLine = """";
        try {
            URL url = new URL(urlvalue);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            inputLine = in.readLine().toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return inputLine;
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"getHash,uri,mDigest,d,hash,i",,6,16,0,,0,GA,2479,0.9106652776400248,failed,"[';getHash = 0', ';uri = 0', ';mDigest = 0', ';d = 0', ';hash = 0', ';GetHash = 0', ';toHash = 0', ';attribute = 0', ';throw = 0']"
455,"    private String hashPassword(String password) throws NoSuchAlgorithmException {
        String hash = null;
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        log.debug(""secure hash on password "" + password);
        md.update(password.getBytes());
        hash = new String(Base64.encodeBase64(md.digest()));
        log.debug(""returning hash "" + hash);
        return hash;
    }
 <SPLIT>             @Override
            protected Reader openConnection(URL url) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnection(url);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
",83,,LABEL_0,LABEL_0,LABEL_0,-1,"hashPassword,password,hash,md",,4,14,0,,0,GA,1789,0.6529054005940755,failed,[]
456,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",230,"    public static void archive(File url, File connection) throws IOException {
        if (url.exists() && url != null && connection != null) {
            if (!out.exists()) {
                if (url.isDirectory()) {
                    connection.mkdirs();
                } else {
                    connection.createNewFile();
                }
            }
            String source = url.isDirectory() ? ""directory"" : ""file"";
            String target = connection.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = url.listFiles();
                    for (File url : files) {
                        archive(url, new File(connection, url.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(url).getChannel();
                    FileChannel outCh = new FileOutputStream(connection).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,source,target,files,file,inCh,outCh","copy:0.010347545146942139,in:0.0015341639518737793,out:0.0029032230377197266,source:0.001005709171295166,target:0.0008336305618286133,files:-0.0017424225807189941,file:0.0018519759178161621,inCh:-0.00015044212341308594,outCh:0.0019129514694213867,",4,22,0,"copy:archive,out:connection,outCh:outCh,file:url,in:url,",0,Greedy,257,0.09304964542388916,replace,[]
457,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",335,"    public static void report(String sourcename, ArrayList<byte[]> ileTextures, ArrayList<String> FileNumbers) throws Exception {
        String moduleBased = Util.JAVA_DIR + File.separator + sourcename;
        File folderLib = new File(moduleBased);
        if (!packageDir.exists()) {
            boolean path = folderLib.mkdir();
            if (!created) {
                File currentlyDirectory = new File(""."");
                throw new Exception(""Directory "" + sourcename + "" could not be created. Current directory: "" + currentlyDirectory.getAbsolutePath());
            }
        }
        for (int li = 0; li < ileTextures.size(); li++) {
            File rule = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(li));
            FileOutputStream ofos = new FileOutputStream(rule);
            ofos.write(ileTextures.get(li));
            ofos.flush();
            ofos.close();
        }
        for (int li = 0; li < FileNumbers.size(); li++) {
            File fileAsRC = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(li));
            File fileFst = new File(moduleBased + File.separator + FileNumbers.get(li));
            BufferedReader server = new BufferedReader(new FileReader(fileAsRC));
            BufferedWriter connection = new BufferedWriter(new FileWriter(fileFst));
            connection.append(""package "" + sourcename + "";
"");
            String url = """";
            while ((url = server.readLine()) != null) connection.append(url + ""
"");
            connection.flush();
            connection.close();
            server.close();
        }
    }
;save = 0",LABEL_1,LABEL_1,LABEL_1,1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:-0.005025506019592285,packageName:0.0005574822425842285,fileContents:-0.009838521480560303,fileNames:0.003544926643371582,dirBase:-0.00133514404296875,packageDir:0.004028737545013428,created:1.4543533325195312e-05,currentPath:0.005278170108795166,i:-0.14196622371673584,file:-0.01251077651977539,fos:-0.0326080322265625,fileSrc:0.00011444091796875,fileDst:-0.0070151686668396,reader:0.003947913646697998,writer:0.012717068195343018,line:0.005530714988708496,",16,54,0,"writer:connection,line:url,currentPath:currentlyDirectory,packageDir:folderLib,reader:server,fileNames:FileNumbers,packageName:sourcename,fileSrc:fileAsRC,created:path,dirBase:moduleBased,save:report,fileDst:fileFst,fileContents:ileTextures,file:rule,fos:ofos,i:li,",0,Greedy,699,0.2593453526496887,inesrt,[';save = 0']
458,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     @Override
    public void export(final Library lib) throws PluginException {
        try {
            new Thread(new Runnable() {

                public void run() {
                    formatter.format(lib, writer);
                    writer.flush();
                    writer.close();
                }
            }).start();
            ftp.connect(host);
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                ftp.disconnect();
                throw new PluginException(""Unable to connect to FTP"");
            }
            ftp.login(user, pass);
            ftp.pasv();
            ftp.changeWorkingDirectory(dir);
            ftp.storeFile(file, inStream);
            ftp.logout();
        } catch (SocketException e) {
            throw new PluginException(e);
        } catch (IOException e) {
            throw new PluginException(e);
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,source,dest,in,out",,5,16,0,,0,GA,2332,0.8550406376520793,failed,"[';source = 0', ';print(source)', ';dest = 0', ';out = 0', ';print(out)', ';print(site)', ';use = 0', ';print(IN)', ';print(OUT)']"
459,"        public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) connection.setRequestProperty(""Referer"", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + contentType);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals(""application/zip"");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) contentType = ""application/atom+xml"";
                    }
                    if (contentType.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d(""continue with next part: "" + url);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
 <SPLIT>     private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
",898,"        public void runInternal() {
            lc = null;
            boolean itemsLoadedCopials = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(path.toString(), -1);
                    visited.add(path.toString());
                    long startLineStng = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = path.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    lc = (HttpURLConnection) conn;
                    lc.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) lc.setRequestProperty(""Referer"", referer);
                    lc.setInstanceFollowRedirects(true);
                    lc.setAllowUserInteraction(false);
                    lc.setConnectTimeout(CONNECT_TIMEOUT);
                    lc.setReadTimeout(READ_TIMEOUT);
                    lc.setDoInput(true);
                    String fileName = null;
                    String disp = lc.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = lc.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String documentTyp = lc.getContentType();
                    String contentEncoding = lc.getContentEncoding();
                    int contentLen = lc.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + documentTyp);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(path.toString(), contentLen);
                    InputStream os = lc.getInputStream();
                    delayedProgress.cancel();
                    os = new ProgressInputStream(os, startLineStng, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = documentTyp != null && documentTyp.equals(""application/zip"");
                    if (expectedType != null) documentTyp = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (os.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        os.close();
                        os = null;
                        os = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) documentTyp = ""application/atom+xml"";
                    }
                    if (documentTyp.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(os);
                        itemsLoadedCopials = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                path = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(path.toString());
                                L.d(""continue with next part: "" + path);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(documentTyp, path.toString(), os, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedCopials = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + path.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (lc != null) try {
                        lc.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedCopials) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
",LABEL_0,LABEL_0,LABEL_1,1,"runInternal,connection,visited,startTimeStamp,delayedProgress,conn,fileName,disp,p,response,contentType,contentEncoding,contentLen,is,url,loadNext,itemsLoadedPartially","runInternal:0.00010800361633300781,connection:0.019161880016326904,visited:0.0024756789207458496,startTimeStamp:0.01092076301574707,delayedProgress:-0.001614689826965332,conn:-0.0013233423233032227,fileName:0.003073275089263916,disp:0.00208967924118042,p:0.0015301704406738281,response:0.005349338054656982,contentType:0.02718418836593628,contentEncoding:0.0010579228401184082,contentLen:0.006680130958557129,is:0.019289910793304443,url:0.010524630546569824,loadNext:0.000527501106262207,itemsLoadedPartially:0.020231008529663086,",6,51,0,"contentType:documentTyp,itemsLoadedPartially:itemsLoadedCopials,is:os,connection:lc,startTimeStamp:startLineStng,url:path,",0,Greedy,306,0.12419045766194661,replace,[]
460,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,2372,0.8656328479448955,failed,"[';sourceFile = 0', ';destinationFile = 0', ';sourceFileChannel = 0', ';split = 0', ';resourceDirectory = 0', '; sourceDirectory = 0']"
461,"    private void runGetAppListing() {
        DataStorage.clearAppListings();
        GenericUrl url = new GoogleUrl(EnterpriseMarketplaceUrl.generateAppListingUrl() + DataStorage.getVendorProfile().vendorId);
        AppListingList appListingList;
        try {
            HttpRequest request = requestFactory.buildGetRequest(url);
            request.addParser(jsonHttpParser);
            request.readTimeout = readTimeout;
            HttpResponse response = request.execute();
            appListingList = response.parseAs(AppListingList.class);
            if (appListingList != null && appListingList.appListings != null) {
                operationStatus = true;
                DataStorage.setAppListings(appListingList.appListings);
            }
            response.getContent().close();
        } catch (IOException e) {
            AppsMarketplacePluginLog.logError(e);
        }
    }
 <SPLIT>     public void test() {
        try {
            String query = ""* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>"" + ""* <http://xmlns.com/foaf/0.1/knows> *"";
            String url = ""http://sindice.com/api/v2/search?qt=advanced&q="" + URLEncoder.encode(query, ""utf-8"") + ""&qt=advanced"";
            URL urlObj = new URL(url);
            URLConnection con = urlObj.openConnection();
            if (con != null) {
                Model model = ModelFactory.createDefaultModel();
                model.read(con.getInputStream(), null);
            }
            System.out.println(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",135,,LABEL_0,LABEL_0,LABEL_0,-1,"runGetAppListing,url,appListingList,request,readTimeout,response",,4,11,0,,0,GA,2870,1.0669320106506348,failed,"[';runGetAppListing = 0', ';print(runGetAppListing)', ';url = 0', ';appListingList = 0', ';print(appListingList)', ';request = 0', ';readTimeout = 0', ';runGetApplicationlistling = 0', ';runGetApplicationlistings = 0', ';runGetApplicationlistInfo = 0', ';runGetApplistInfo = 0', ';runGetApplicationListInfo = 0', ';address = 0', ';appListningResult = 0', ';appListitinglist = 0', ';print(appListitinglist)', ';appPoolingGroup = 0', ';print(appPoolingGroup)', ';appListningList = 0', ';print(appListningList)', ';appListiningGroup = 0', ';print(appListiningGroup)', ';appLingMap = 0', ';appListingsMap = 0', ';appListeningEx = 0', ';applistningResult = 0', ';readerTimeout = 0', ';output = 0']"
462,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",672,,LABEL_0,LABEL_1,,-4,"sendExceptionToServer,server,ex,config,prob,dataSB,trace",,,,0,,0,Greedy,1,0.0007526795069376628,,[]
463,"    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cxn = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cxn.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
 <SPLIT>     private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                log.warn(""\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");
            } else {
                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
                long outageID = -1;
                ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                if (seqRS.next()) {
                    outageID = seqRS.getLong(1);
                }
                seqRS.close();
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, outageID);
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, nodeID);
                newOutageWriter.setString(4, ipAddr);
                newOutageWriter.setLong(5, serviceID);
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                newOutageWriter.executeUpdate();
                newOutageWriter.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            }
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeLostService\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"resourceExists,location,url,cxn,is,byteBuffer",,1,2,0,,0,GA,2495,0.9629613081614177,failed,"[';resourceExists = 0', ';cxn = 0', ';is = 0', ';print(fl)', ';obj = 0', ';print(page)', ';web = 0', ';blog = 0']"
464,"    @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
 <SPLIT>     public static byte[] encrypt(String x) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(x.getBytes());
        return d.digest();
    }
",146,,LABEL_1,LABEL_1,LABEL_1,-1,"saveUser,user,digest,hash,bigInt,hashtext",,6,19,0,,0,GA,2676,0.9740903615951538,failed,[';print(bigString)']
465,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
 <SPLIT>     public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
",78,,LABEL_1,LABEL_1,LABEL_1,-1,"createFile,src,filename,fis,fos",,5,11,0,,0,GA,2165,0.7811153650283813,failed,[';print(CreateFolder)']
466,"    public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter(""width""));
            int h = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL url = new URL(filename);
                in = url.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""\n"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",185,"    public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter(""width""));
            int h = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL io = new URL(filename);
                in = io.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""
"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"init,filename,dim,w,h,in,ff,url","init:-9.924173355102539e-05,filename:-0.0008488297462463379,dim:-0.0002872347831726074,w:2.9265880584716797e-05,h:5.626678466796875e-05,in:-0.0016134977340698242,ff:-0.0007700920104980469,url:9.816884994506836e-05,",1,2,0,"url:io,",0,Greedy,61,0.022015058994293214,replace,[]
467,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL url = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
",288,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,6,23,0,,0,GA,3311,1.3491390268007915,failed,"[';updateUser = 0', ';copyRows = 0', '; insertRole = 0', ';print(insertRsoots)', ';shadow = 0', ';print(shadow)']"
468,"    public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
 <SPLIT>     public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
",243,,LABEL_0,LABEL_0,LABEL_0,-1,"getProcess,processId,req,resp,xmlable,p",,6,15,0,,0,GA,2290,0.8631316264470418,failed,"[';getProcess = 0', ';print(getProcess)', ';processId = 0', ';req = 0']"
469,"    private static List runITQLQuery(String itqlQuery) throws Exception {
        String escapedItqlQuery = URLEncoder.encode(itqlQuery, ""UTF-8"");
        String url = ""http://"" + Config.getProperty(""FEDORA_SOAP_HOST"") + "":"" + Config.getProperty(""FEDORA_SOAP_ACCESS_PORT"") + ""/fedora/risearch?type=tuples"" + ""&lang=iTQL"" + ""&format=CSV"" + ""&distinct=on"" + ""&stream=on"" + ""&query="" + escapedItqlQuery;
        logger.debug(""url for risearch query: "" + url);
        URL urlObject = new URL(url);
        HttpURLConnection con = (HttpURLConnection) urlObject.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        logger.debug(""response code: "" + con.getResponseCode());
        if (con.getResponseCode() != 200 && con.getResponseCode() != 302) {
            throw new FedoraAccessException(""Could not access the risearch service at url: "" + url);
        }
        ArrayList arrayList = new ArrayList();
        String inputLine;
        int counter = 0;
        while ((inputLine = br.readLine()) != null) {
            logger.debug(""reading line:"" + inputLine);
            if (inputLine.indexOf(""<html>"") >= 0) {
                logger.error(""problem quering the relationship"");
                throw new Exception(""Problem querying relationships; probably a bad ITQL query:"" + itqlQuery);
            }
            if (counter >= 1 && inputLine.indexOf(""/"") >= 0 && inputLine.trim().length() > 0) {
                logger.debug(""adding line:"" + inputLine);
                inputLine = inputLine.substring(inputLine.indexOf(""/"") + 1);
                arrayList.add(inputLine);
                logger.debug(""found relationship to item: "" + inputLine);
            }
            counter++;
        }
        br.close();
        logger.debug(""num relationships found: "" + arrayList.size());
        return arrayList;
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",360,,LABEL_0,LABEL_0,LABEL_0,-1,"runITQLQuery,itqlQuery,escapedItqlQuery,url,urlObject,con,br,arrayList,inputLine,counter",,10,40,0,,0,GA,4741,1.834845530986786,failed,"[';runITQLQuery = 0', ';itqlQuery = 0', ';con = 0', ';arrayList = 0', ';runITQString = 0', ';runITSQLString = 0', ';pitSQLString = 0', ';itSQLString = 0', ';itSQLquery = 0', ';address = 0', '; arrayArray = 0']"
470,"    public String shorten(String url) {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""version"", ""2.0.1""));
        qparams.add(new BasicNameValuePair(""longUrl"", url));
        if (login != null) {
            qparams.add(new BasicNameValuePair(""login"", login));
            qparams.add(new BasicNameValuePair(""apiKey"", apiKey));
            qparams.add(new BasicNameValuePair(""history"", ""1""));
        }
        try {
            BasicHttpParams params = new BasicHttpParams();
            DefaultHttpClient httpclient = new DefaultHttpClient(params);
            URI uri = URIUtils.createURI(""http"", ""api.j.mp"", -1, ""/shorten"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            if (logger.isDebugEnabled()) logger.debug(""HttpGet.uri={}"", httpget.getURI());
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                JsonFactory f = new JsonFactory();
                JsonParser jp = f.createJsonParser(instream);
                JmpShortenResponse responseObj = new JmpShortenResponse();
                for (; ; ) {
                    JsonToken token = jp.nextToken();
                    String fieldname = jp.getCurrentName();
                    if (logger.isDebugEnabled()) logger.debug(""Token={}, currentName={}"", token, fieldname);
                    if (token == JsonToken.START_OBJECT) {
                        continue;
                    }
                    if (token == JsonToken.END_OBJECT) {
                        break;
                    }
                    if (""errorCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorCode(jp.getIntValue());
                    } else if (""errorMessage"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorMessage(jp.getText());
                    } else if (""statusCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setStatusCode(jp.getText());
                    } else if (""results"".equals(fieldname)) {
                        Map<String, ShortenedUrl> results = parseResults(jp);
                        responseObj.setResults(results);
                    } else {
                        throw new IllegalStateException(""Unrecognized field '"" + fieldname + ""'!"");
                    }
                }
                Map<String, ShortenedUrl> results = responseObj.getResults();
                if (results == null) {
                    return null;
                }
                ShortenedUrl shortened = results.get(url);
                if (shortened == null) {
                    return null;
                }
                if (logger.isDebugEnabled()) logger.debug(""JmpShortenResponse: {}"", responseObj);
                if (""OK"".equals(responseObj.getStatusCode())) {
                    return shortened.getShortUrl();
                }
                if (logger.isWarnEnabled()) logger.warn(""JmpShortenResponse: {}"", responseObj);
            }
        } catch (IOException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        } catch (URISyntaxException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        }
        return null;
    }
 <SPLIT>     public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
",644,,LABEL_0,LABEL_0,LABEL_0,-1,"shorten,url,qparams,params,httpclient,uri,httpget,response,entity,instream,f,jp,responseObj,token,fieldname",,15,62,0,,0,GA,6510,2.6060750762621563,failed,"[';shorten = 0', ';print(shorten)', ';qparams = 0', ';print(qparams)', ';params = 0', ';httpclient = 0', ';uri = 0', ';httpget = 0', ';instream = 0', ';print(instream)', ';f = 0', ';jp = 0', ';print(jp)', ';responseObj = 0', ';print(responseObj)', ';fieldname = 0', ';Shorten = 0', ';shortener = 0', ';shortening = 0', ';offening = 0', '; Shortening = 0', ';address = 0', ';version = 0', ';key = 0', '; qtypes = 0', ';kparams = 0', ';Qtypes = 0', ';questproperties = 0', ';reqproperties = 0', ';qutags = 0', ';reqtags = 0', ';Qplugins = 0', ';qvals = 0', ';sqchanges = 0', ';reqparams = 0', ';qParameters = 0', ';sqtags = 0', ';print(sqtags)', ';print(qunames)']"
471,"    private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,is,os,buffer,len,ok",,8,24,0,,0,GA,3185,1.186557157834371,failed,[';print(oS)']
472,"    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
 <SPLIT>     private String retrieveTemplate() throws Exception {
        if (cachedTemplate == null) {
            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());
            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            final StringBuilder result = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
            in.close();
            cachedTemplate = result.toString();
        }
        return cachedTemplate;
    }
",137,,LABEL_0,LABEL_0,LABEL_0,-1,"hash,saltBefore,content,saltAfter,repeatedHashingCount,digest,digestLength,i",,7,24,0,,0,GA,3746,1.380761722723643,failed,"[';hash = 0', ';saltBefore = 0', ';saltAfter = 0', ';repeatedHashingCount = 0', ';digestLength = 0', ';match = 0', ';expression = 0', ';value = 0', ';repeatedHashesNumber = 0']"
473,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,2030,0.7543267011642456,failed,"[';sourceFileChannel = 0', ';destinationFileChannel = 0', '; sourceFiles = 0', ';resourceDirectory = 0', '; sourceDirectory = 0']"
474,"    private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");
        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File f = File.createTempFile(""tempabca"", ""bdfafad"");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + ""/"";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith(""native"")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = """";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";
        System.out.println(""Using native/"" + arch + ""/"");
        addLibraryPath(parent + ""native/"" + arch + ""/"");
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        String sFTP = ""ftp.miservidor.com"";
        String sUser = ""usuario"";
        String sPassword = ""password"";
        try {
            System.out.println(""Conectandose a "" + sFTP);
            client.connect(sFTP);
            boolean login = client.login(sUser, sPassword);
            if (login) {
                System.out.println(""Login correcto"");
                boolean logout = client.logout();
                if (logout) {
                    System.out.println(""Logout del servidor FTP"");
                }
            } else {
                System.out.println(""Error en el login."");
            }
            System.out.println(""Desconectando."");
            client.disconnect();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",484,,LABEL_0,LABEL_1,,-4,"setup,path,jarFile,f,parent,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,arch,key,property,x64",,,,0,,0,Greedy,1,0.0006752530733744303,,[]
475,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] buffer = new byte[2048];
        int nread;
        InputStream map;
        OutputStream output;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            output = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(buffer, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                buffer[i] ^= magicKey;
                magicKey += 43;
            }
            output.write(buffer, 0, nread);
        }
        map.close();
        output.close();
    }
 <SPLIT>     public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
",170,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] url = new byte[2048];
        int nread;
        InputStream map;
        OutputStream sort;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            sort = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(url, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                url[i] ^= magicKey;
                magicKey += 43;
            }
            sort.write(url, 0, nread);
        }
        map.close();
        sort.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"DecodeMapFile,mapFile,outputFile,magicKey,buffer,nread,map,output,i","DecodeMapFile:0.0006049871444702148,mapFile:7.95125961303711e-05,outputFile:0.0013199448585510254,magicKey:-0.0030017495155334473,buffer:0.0038820505142211914,nread:0.001808464527130127,map:0.003182649612426758,output:0.005875110626220703,i:-0.0016229748725891113,",2,8,0,"output:sort,buffer:url,",0,Greedy,131,0.05163892904917399,replace,[]
476,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static boolean downloadFile(String from, String to, ProgressMonitor pm) {
        try {
            FileOutputStream out = new FileOutputStream(to);
            URL url = new URL(from);
            URLConnection conn = url.openConnection();
            InputStream in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int read = 0;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
                if (pm != null) pm.addToProgress(read);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));
            return false;
        }
        return true;
    }
",272,,LABEL_0,LABEL_0,LABEL_0,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,10,42,0,,0,GA,4443,1.6871557831764221,failed,"[';hdRead = 0', ';print(hdRead)']"
477,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"CopyTo,dest,in,out,c",,0,0,0,,0,GA,2412,0.8953036467234293,failed,[]
478,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",142,,LABEL_0,LABEL_0,LABEL_0,-1,"readPage,ignoreComments,in,inputLine,html",,5,20,0,,0,GA,2219,0.8708033084869384,failed,"[';in = 0', ';print(inputLine)']"
479,"    public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {
        if (key == null || key.length == 0) {
            throw new IllegalArgumentException(""Argument 'key' cannot be null or an empty array."");
        }
        if (salt == null || salt.length == 0) {
            throw new IllegalArgumentException(""Argument 'salt' cannot be null or an empty array."");
        }
        final MessageDigest _md = MessageDigest.getInstance(""MD5"");
        _md.update(key);
        _md.update(MAGIC.getBytes());
        _md.update(salt);
        final MessageDigest md2 = MessageDigest.getInstance(""MD5"");
        md2.update(key);
        md2.update(salt);
        md2.update(key);
        byte[] abyFinal = md2.digest();
        for (int n = key.length; n > 0; n -= 16) {
            _md.update(abyFinal, 0, n > 16 ? 16 : n);
        }
        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int j = 0, i = key.length; i != 0; i >>>= 1) {
            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);
        }
        final StringBuilder sbPasswd = new StringBuilder();
        sbPasswd.append(MAGIC);
        sbPasswd.append(new String(salt));
        sbPasswd.append('$');
        abyFinal = _md.digest();
        for (int n = 0; n < 1000; n++) {
            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");
            if ((n & 1) != 0) {
                md3.update(key);
            } else {
                md3.update(abyFinal);
            }
            if ((n % 3) != 0) {
                md3.update(salt);
            }
            if ((n % 7) != 0) {
                md3.update(key);
            }
            if ((n & 1) != 0) {
                md3.update(abyFinal);
            } else {
                md3.update(key);
            }
            abyFinal = md3.digest();
        }
        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };
        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
        to64(sbPasswd, anFinal[11], 2);
        return sbPasswd.toString();
    }
 <SPLIT>     public String transformByMD5(String password) throws XSServiceException {
        MessageDigest md5;
        byte[] output;
        StringBuffer bufferPass;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.warn(""DataAccessException thrown while getting MD5 algorithm:"" + e.getMessage(), e);
            throw new XSServiceException(""Database error while saving user"");
        }
        md5.reset();
        md5.update(password.getBytes());
        output = md5.digest();
        bufferPass = new StringBuffer();
        for (byte b : output) {
            bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? ""0"" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));
        }
        return bufferPass.toString();
    }
",906,,LABEL_1,LABEL_0,,-4,"md5Crypt,key,salt,_md,md2,abyFinal,n,j,i,sbPasswd,md3",,,,0,,0,Greedy,1,0.0008556127548217773,,[]
480,"    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = """";
        if (useragent) sp = ""agent""; else sp = ""user"";
        String userbooksql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                userbooksql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                userbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals(""WL"")) {
                    String chartavailupdsql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdsql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoach + ""\""] "";
                    chartavailupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentcoach.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>""; else userbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                userbooksql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
 <SPLIT>     public static String md5(String message, boolean base64) {
        MessageDigest md5 = null;
        String digest = message;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(message.getBytes());
            byte[] digestData = md5.digest();
            if (base64) {
                Base64Encoder enc = new Base64Encoder();
                enc.translate(digestData);
                digest = new String(enc.getCharArray());
            } else {
                digest = byteArrayToHex(digestData);
            }
        } catch (NoSuchAlgorithmException e) {
            LOG.warn(""MD5 not supported. Using plain string as password!"");
        } catch (Exception e) {
            LOG.warn(""Digest creation failed. Using plain string as password!"");
        }
        return digest;
    }
",863,"    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String arp = """";
        if (useragent) arp = ""agent""; else arp = ""user"";
        String otherbookssql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentpoaching;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                otherbookssql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                otherbookssql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentpoaching = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentpoaching.equals(""WL"")) {
                    String chartavailupdatessql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdatessql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + arp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdatessql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentpoaching + ""\""] "";
                    chartavailupdatessql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdatessql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdatessql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentpoaching.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + arp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentpoaching + ""</coach><seat>"" + currentseat + ""</seat></person>""; else otherbookssql += ""<person><coach>"" + currentpoaching + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                otherbookssql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(otherbookssql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(otherbookssql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"Reserve,stbookings,stchartwl,sp,userbooksql,agentbooksql,bookingid,currentcoach,currentseat,tickpos,chartavailupdsql","Reserve:0.040675342082977295,stbookings:-0.01501917839050293,stchartwl:-0.0035990476608276367,sp:0.213772714138031,userbooksql:0.08463174104690552,agentbooksql:0.0035812854766845703,bookingid:0.001132667064666748,currentcoach:0.0729859471321106,currentseat:-0.007320821285247803,tickpos:-0.005456686019897461,chartavailupdsql:0.12109220027923584,",4,25,0,"sp:arp,chartavailupdsql:chartavailupdatessql,userbooksql:otherbookssql,currentcoach:currentpoaching,",0,Greedy,259,0.10819214979807536,replace,[]
481,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {
        boolean update = false;
        try {
            stm = conexion.prepareStatement(""update clientes set nombre='"" + nombre.toUpperCase().trim() + ""' , paterno='"" + paterno.toUpperCase().trim() + ""' ,"" + ""materno='"" + materno.toUpperCase().trim() + ""',ocupacion='"" + ocupacion.toUpperCase().trim() + ""',rfc='"" + rfc.trim() + ""' where IDcliente ='"" + IDcliente + ""' "");
            stm.executeUpdate();
            conexion.commit();
            update = true;
        } catch (SQLException e) {
            System.out.println(""error al actualizar registro en la tabla clientes  "" + e.getMessage());
            try {
                conexion.rollback();
            } catch (SQLException ee) {
                System.out.println(ee.getMessage());
            }
            return update = false;
        }
        return update;
    }
",78,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,tmp,md",,4,9,0,,0,GA,1882,0.6891088922818501,failed,"[';getMD5 = 0', ';source = 0', ';tmp = 0', ';getSHA4 = 0', ';getMD4 = 0', ';getSHA256 = 0', ';address = 0', ';slice = 0', ';cmp = 0']"
482,"    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String folder = """";
        String server = """";
        String login = """";
        String password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer message = new StringBuffer();
        message.append(""Status:<BR>"");
        if (action.equals(""Upload"")) {
            server = (String) user.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            login = (String) user.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (object.equals(""Media"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (action.equals(""Delete"")) {
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (action.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(server);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.login(login, password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        message.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(server);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + folder);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                message.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                message.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            message.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    message.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cSServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            message.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            message.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(server);
        if (action.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            message.append(""Deleting file "" + fileName + ""<BR>"");
                            message.append(""from folder "" + folderName + ""<BR>"");
                            message.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    message.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cISServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            message.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            message.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (message.toString());
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",2233,"    public static String uploadOrDeleteMediaOrTemplates(String plugin, String address, String numElements, HttpServletRequest req, HttpSession connection) {
        FTPClient FTP = new FTPClient();
        CofaxToolsUser comment = (CofaxToolsUser) connection.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String uri = """";
        String erver = """";
        String path = """";
        String Password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer header = new StringBuffer();
        header.append(""Status:<BR>"");
        if (plugin.equals(""Upload"")) {
            erver = (String) comment.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            path = (String) comment.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            Password = (String) comment.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (address.equals(""Media"")) {
                uri = (String) comment.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                uri = (String) comment.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (plugin.equals(""Delete"")) {
            path = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            Password = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                uri = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                uri = (String) comment.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (plugin.equals(""Upload"")) {
            try {
                int reply;
                FTP.connect(erver);
                CofaxToolsUtil.log(FTP.getReplyString());
                reply = FTP.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    FTP.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    FTP.path(path, Password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        FTP.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        FTP.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + FTP.getReplyString());
                        header.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                FTP.logout();
                FTP.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            path = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            Password = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) comment.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(erver);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    FTP.connect(connectServer);
                    CofaxToolsUtil.log(FTP.getReplyString());
                    reply = FTP.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        FTP.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        FTP.path(path, Password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + uri);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, uri, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = FTP.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                header.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = FTP.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                header.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = FTP.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + FTP.getReplyString());
                            header.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    FTP.logout();
                    FTP.disconnect();
                    header.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cSServers = (String) comment.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, uri, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            header.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            header.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(erver);
        if (plugin.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    FTP.connect(connectServer);
                    CofaxToolsUtil.log(FTP.getReplyString());
                    reply = FTP.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        FTP.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        FTP.path(path, Password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            FTP.changeWorkingDirectory(folderName);
                            FTP.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + FTP.getReplyString());
                            header.append(""Deleting file "" + fileName + ""<BR>"");
                            header.append(""from folder "" + folderName + ""<BR>"");
                            header.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    header.append(""Success<BR><BR>"");
                    FTP.logout();
                    FTP.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cISServers = (String) comment.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            header.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            header.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (header.toString());
    }
",LABEL_0,LABEL_0,LABEL_1,1,"uploadOrDeleteMediaOrTemplates,action,object,numElements,req,session,ftp,user,links,folders,folder,server,login,password,fileTransferFolder,liveFolder,servers,message","uploadOrDeleteMediaOrTemplates:0.09342765808105469,action:0.4293256998062134,object:0.3507480025291443,numElements:-0.0060253143310546875,req:0.1402043104171753,session:0.14324575662612915,ftp:1.7259637713432312,user:1.0035400390625,links:0.07702964544296265,folders:0.06896775960922241,folder:0.3322674632072449,server:0.4210011959075928,login:0.6572892069816589,password:0.2745444178581238,fileTransferFolder:0.00872194766998291,liveFolder:0.0965222716331482,servers:0.0695112943649292,message:0.2740495204925537,",10,134,0,"ftp:FTP,user:comment,login:path,action:plugin,server:erver,object:address,folder:uri,password:Password,message:header,session:connection,",0,Greedy,625,0.32758613030115763,replace,[]
483,"    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",225,"    private void readTextoLog(URL file, Map<String, JMenuItem> status) {
        try {
            BufferedReader err = new BufferedReader(new InputStreamReader(file.openStream()));
            String outputFile;
            while ((outputFile = err.readLine()) != null) {
                int commandTimeCreate = outputFile.indexOf("">"") + 1;
                int commandPathBegin = outputFile.indexOf(""</a>"");
                JMenuItem el = new JMenuItem(""<html>"" + outputFile + ""</html>"");
                if (status == allRooms) {
                    el.setActionCommand(""/room "" + outputFile.substring(commandTimeCreate, commandPathBegin));
                } else {
                    el.setActionCommand(""/"" + outputFile.substring(commandTimeCreate, commandPathBegin) + "" "");
                }
                el.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent l) {
                        jTextField1.setText(l.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                status.put(outputFile.substring(commandTimeCreate, commandPathBegin), el);
            }
            err.close();
        } catch (Exception l) {
            l.printStackTrace();
        }
    }
;inputLine = 0",LABEL_1,LABEL_1,LABEL_1,1,"readIntoList,url,list,in,inputLine,commandNameBegin,commandNameEnd,item,e","readIntoList:0.006373941898345947,url:0.00746530294418335,list:0.005723178386688232,in:-0.016208529472351074,inputLine:-0.0019013285636901855,commandNameBegin:-0.0011931657791137695,commandNameEnd:-0.0006799101829528809,item:0.014292240142822266,e:-0.005128204822540283,",9,34,0,"item:el,url:file,readIntoList:readTextoLog,list:status,commandNameEnd:commandPathBegin,commandNameBegin:commandTimeCreate,inputLine:outputFile,e:l,in:err,",0,Greedy,472,0.17135124603907267,inesrt,[';inputLine = 0']
484,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i",,7,20,0,,0,GA,3048,1.1165151437123617,failed,"[';checkInputStream = 0', ';cmp = 0', '; checkInputSteam = 0', ';iterator = 0', ';slice = 0']"
485,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed processEntrys(String urlStr, String currentFlag) throws UnsupportedEncodingException, IOException, JDOMException {
        String key = ""processEntrys@"" + urlStr + ""_"" + currentFlag;
        if (cache.containsKey(key)) {
            return (ReaderFeed) cache.get(key);
        }
        List<Post> postList = new ArrayList<Post>();
        URL url = new URL(urlStr);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Cookie"", ""SID="" + sid);
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
        SAXBuilder builder = new SAXBuilder(false);
        Document doc = builder.build(reader);
        Element root = doc.getRootElement();
        Namespace grNamespace = root.getNamespace(""gr"");
        Namespace namespace = root.getNamespace();
        String newflag = root.getChildText(""continuation"", grNamespace);
        String title = root.getChildText(""title"", namespace);
        String subTitle = root.getChildText(""subtitle"", namespace);
        List<Element> entryList = root.getChildren(""entry"", namespace);
        DateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Element e : entryList) {
            Post post = new Post();
            post.setTitle(e.getChildText(""title"", namespace));
            try {
                post.setDate(sdf.parse(e.getChildText(""published"", namespace)));
            } catch (ParseException e1) {
            }
            post.setUrl(e.getChild(""link"", namespace).getAttributeValue(""href""));
            post.setSauthor(e.getChild(""author"", namespace).getChildText(""name"", namespace));
            String content = e.getChildText(""content"", namespace);
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""description"", namespace);
            }
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""summary"", namespace);
            }
            post.setContent(content);
            postList.add(post);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(title);
        readerFeed.setSubTitle(subTitle);
        readerFeed.setFlag(newflag);
        readerFeed.setPostList(postList);
        cache.put(key, readerFeed);
        return readerFeed;
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",498,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed runEntris(String fileSTR, String nextTag) throws UnsupportedEncodingException, IOException, JDOMException {
        Strifixkey = ""processEntrys@"" + fileSTR + ""_"" + nextTag;
        if (cache.containsKey(fix)) {
            return (ReaderFeed) cache.get(fix);
        }
        List<Post> PostList = new ArrayList<Post>();
        URL ufile= new URL(fileSTR);
        HttpURLConnection cchannel= (HttpURLConnection) file.openConnection();
        channel.setRequestMethod(""GET"");
        channel.setRequestProperty(""Cookie"", ""SID="" + sid);
        BufferedReadreaderder = new BufferedReader(new InputStreamReader(channel.getInputStream(), ""UTF-8""));
        SAXBuilder builder = new SAXBuilder(false);
        Document dir = builder.build(reader);
        Element root = dir.getRootElement();
        Namespace grNamespace = root.getNamespace(""gr"");
        Namespace Namesase = root.getNamespace();
        String newflag = root.getChildText(""continuation"", grNamespace);
        Stringtitlee = root.getChildText(titlee"", Namesase);
        StringSubTitlee = root.getChildText(""subtitle"", Namesase);
        List<Element>entryLt = root.getChildren(""entry"", Namesase);
        DateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Elemeet e : entryL) {
            Post copy = new Post();
           copyt.setTitleee.getChildText(titlee"", Namesase));
            try {
               copyt.setDatesdff.parseee.getChildText(""published"", Namesase)));
            } catch (ParseException e1) {
            }
           copyt.setUrlee.getChild(""link"", Namesase).getAttributeValue(""href""));
          copyst.setSauthoe(e.getChild(""author"", Namesase).getChildText(""name"", Namesase));
            Stringcontentt =ee.getChildText(contentt"", Namesase);
            if (StringUtils.isEmpty(content)) {
               contentt =ee.getChildText(""description"", Namesase);
            }
            if (StringUtils.isEmpty(content)) {
               contentt =ee.getChildText(""summary"", Namesase);
            }
            copy.setContent(content);
            PostList.add(copy);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(title);
        readerFeed.setSubTitle(SubTitle);
        readerFeed.setFlag(newflag);
        readerFeed.setPostList(PostList);
        cache.put(fix, readerFeed);
        return readerFeed;
    }
",LABEL_0,LABEL_0,0.5041073560714722,1,"processEntrys,urlStr,currentFlag,key,postList,url,connection,reader,builder,doc,root,grNamespace,namespace,newflag,title,subTitle,entryList,sdf,e,post,content",,17,57,36,"processEntrys:runEntris,urlStr:fileSTR,currentFlag:nextTag,key:fix,postList:PostList,url:file,connection:channel,reader:reader,builder:builder,doc:dir,root:root,grNamespace:grNamespace,namespace:Namesase,newflag:newflag,title:title,subTitle:SubTitle,entryList:entryL,sdf:sdf,e:e,post:copy,content:content,",9,GA,3056,1.2611537019411723,ga,"[';processEntrys = 0', ';urlStr = 0', ';print(urlStr)', ';currentFlag = 0', ';key = 0', ';postList = 0', ';print(postList)', ';url = 0', ';connection = 0', ';title = 0', ';path = 0', ';query = 0', ';search = 0', ';ey = 0', ';part = 0', ';PostList = 0', ';POSTList = 0', ';print(POSTList)', ';PostGroup = 0', ';print(PostGroup)', ';print(POSTCollection)', ';postlist = 0', ';print(postlist)', '; postlist = 0', ';POSTlist = 0', ';print(POSTlist)', ';print( postCollection)', ';print(postCollection)', ';feed = 0', ';proxy = 0', ';print(proxy)', ';path = 0', ';log = 0', ';print(log)', ';sl = 0', ';print(xml)', ';ler = 0', ';summary = 0', ';line = 0', ';d = 0', ';output = 0', ';print(output)', ';path = 0', ';archive = 0', ';summary = 0']"
486,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     public void create() {
        Connection conn = OrmHandler.getInstance().getSession().getConnection(this);
        Statement stat = null;
        StringBuilder sql = new StringBuilder(256);
        try {
            getRenderer().printCreateDatabase(this, sql);
            conn = createConnection();
            stat = conn.createStatement();
            stat.executeUpdate(sql.toString());
            conn.commit();
            if (LOGGER.isLoggable(Level.INFO)) {
                LOGGER.info(sql.toString());
            }
        } catch (Throwable e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
                }
            }
            throw new IllegalArgumentException(""Statement error:\n"" + sql, e);
        } finally {
            try {
                close(conn, stat, null, true);
            } catch (IllegalStateException ex) {
                LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
            }
        }
    }
",1214,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email external = null;
            if (isHtml) {
                external = new HtmlEmail();
            } else {
                external = new MultiPartEmail();
            }
            external.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                external.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                external.addHeader(""Return-Path"", _returnPath.getAddress());
                external.addHeader(""Errors-To"", _returnPath.getAddress());
                external.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                external.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                external.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                external.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                external.setBcc(aux);
            }
            external.setSubject(subject);
            Date now = new Date();
            external.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (external instanceof MultiPartEmail) {
                            ((MultiPartEmail) external).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        external.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        external.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                external.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                external.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    external.addHeader(""Importance"", priority);
                    external.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    external.addHeader(""Importance"", priority);
                    external.addHeader(""X-priority"", ""5"");
                }
            }
            if (external instanceof HtmlEmail) {
                ((HtmlEmail) external).setHtmlMsg(body);
            } else {
                external.setMsg(body);
            }
            external.setMailSession(session);
            external.buildMimeMessage();
            MimeMessage mime = external.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(external));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc","send:0.07815110683441162,hsession:0.19176733493804932,session:0.07282662391662598,repositoryName:0.1385939121246338,ideIdint:-0.005007266998291016,to:0.15139728784561157,cc:0.1424301266670227,bcc:0.14077699184417725,subject:0.169147789478302,body:0.30660587549209595,attachments:0.42675697803497314,isHtml:-0.018077313899993896,charset:0.24839848279953003,headers:0.20201653242111206,priority:0.07705992460250854,email:1.365614414215088,user:0.11204075813293457,identity:0.5016438364982605,_returnPath:0.08496910333633423,_from:0.27296924591064453,_replyTo:-0.0388716459274292,_to:0.3513335585594177,_cc:0.35853683948516846,_bcc:0.012811422348022461,",1,31,0,"email:external,",0,Greedy,183,0.07435247103373209,replace,[]
487,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL url : templates) {
                String fileName = url.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = url.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""\n"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",403,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL ob : templates) {
                String fileName = ob.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = ob.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""
"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"populateResources,templates,url,fileName,templateResource,is,strBuff,br,str,images,i,img,imgProperty","populateResources:0.0023963451385498047,templates:-0.0023250579833984375,url:0.024273574352264404,fileName:0.0029561519622802734,templateResource:-0.04147911071777344,is:-0.0036827921867370605,strBuff:-0.008945167064666748,br:-0.0010332465171813965,str:-0.0024069547653198242,images:-0.013836681842803955,i:-0.009469091892242432,img:-0.004467666149139404,imgProperty:-0.00040543079376220703,",1,3,0,"url:ob,",0,Greedy,98,0.036006486415863036,replace,[]
488,"    private VelocityEngine newVelocityEngine() {
        VelocityEngine velocityEngine = null;
        InputStream is = null;
        try {
            URL url = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);
            is = url.openStream();
            Properties props = new Properties();
            props.load(is);
            velocityEngine = new VelocityEngine(props);
            velocityEngine.init();
        } catch (Exception e) {
            throw new RuntimeException(""can not find velocity props file, file="" + VELOCITY_PROPS_FILE, e);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return velocityEngine;
    }
 <SPLIT>     public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",125,,LABEL_0,LABEL_0,LABEL_0,-1,"newVelocityEngine,velocityEngine,is,url,props",,5,16,0,,0,GA,1488,0.5672975699106853,failed,[]
489,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File in = null;
        String dest = output;
        if (input.equals(STDIN)) {
            try {
                in = File.createTempFile(""tmp"", "".jp2"");
                input = in.getAbsolutePath();
                in.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), in);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(input, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            try {
                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));
                w.write(bi, os);
                os.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + dest);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + dest);
                throw new DjatokaException(e);
            }
        }
        if (in != null) in.delete();
    }
",111,,LABEL_0,LABEL_0,LABEL_0,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,5,15,0,,0,GA,2356,0.8760320544242859,failed,"[';getPasswordMD5 = 0', ';hexString = 0', ';getpasswordMD5 = 0', ';omalgo = 0', ';Alphabet = 0', ';geest = 0', ';alphabet = 0', '; messagedigest = 0', '; messagedigester = 0', ';textBuffer = 0', ';hexLine = 0', ';print(hexLine)', '; hexBuffer = 0', ';print( hexBuffer)', ';checkFunction = 0', ';I = 0', ';print(phi)', ';info = 0']"
490,"    public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
 <SPLIT>     private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",137,,LABEL_1,LABEL_1,LABEL_1,-1,"testReadPerMemberSixSmall,gzin,i,count2,count3,countEnd",,6,17,0,,0,GA,2698,0.9913132588068644,failed,"[';print(cigIN)', ';print(gcIn)']"
491,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
 <SPLIT>     public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",370,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult url = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    url = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (url == null) return null;
                if (url.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + url.getStatus());
                reactToHandshakeStatus(url.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"write,byteBuffers,m_initialOutBuffer,buffer,buffers,result,encrypted","write:-0.015003681182861328,byteBuffers:-0.0384373664855957,m_initialOutBuffer:-0.014569461345672607,buffer:-0.22009432315826416,buffers:-0.095039963722229,result:-0.036166608333587646,encrypted:-0.030629515647888184,",1,6,0,"m_initialOutBuffer:m_initialOutBuffer,write:write,encrypted:encrypted,result:url,",0,Greedy,269,0.10324385563532511,replace,[]
492,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     @Before
    public void setUp() throws Exception {
        connectionDigestHandler = new ConnectionDigestHandlerDefaultImpl();
        URL url = null;
        try {
            url = new URL(""http://dev2dev.bea.com.cn/bbs/servlet/D2DServlet/download/64104-35000-204984-2890/webwork2guide.pdf"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        try {
            uc = url.openConnection();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",288,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,7,36,0,,0,GA,3612,1.3674103498458863,failed,[]
493,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0007520119349161783,,[]
494,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     @Override
    protected <T> T execute(final HttpMethod method, final String url, Parameters parameters, final Handler<T> handler) throws FoursquareException {
        HttpURLConnection connection = null;
        try {
            switch(method) {
                case GET:
                    connection = openConnection(url.concat(""?"").concat(formEncode(parameters)));
                    connection.setRequestMethod(""GET"");
                    connection.connect();
                    break;
                case POST:
                    connection = openConnection(url);
                    connection.setRequestMethod(""POST"");
                    connection.setDoOutput(true);
                    connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                    connection.connect();
                    final OutputStream out = connection.getOutputStream();
                    out.write(formEncode(parameters).getBytes());
                    out.flush();
                    out.close();
                    break;
            }
            final int statusCode = connection.getResponseCode();
            if (statusCode / 100 != 2) {
                final Error error = parseBody(connection.getErrorStream(), new ErrorHandler());
                if (error == null) throw new FoursquareException(connection.getResponseMessage()); else if (""error"".equals(error.getType())) throw new FoursquareException(error.getMessage()); else if (""unauthorized"".equals(error.getType())) throw new AuthenticationException(error.getMessage()); else if (""ratelimited"".equals(error.getType())) throw new RateLimitingException(error.getMessage()); else throw new FoursquareException(connection.getResponseMessage());
            }
            return parseBody(connection.getInputStream(), handler);
        } catch (final IOException e) {
            throw new FoursquareException(e);
        } catch (final ParserConfigurationException e) {
            throw new FoursquareException(e);
        } catch (final SAXException e) {
            throw new FoursquareException(e);
        } finally {
            if (connection != null) connection.disconnect();
        }
    }
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.0008378823598225912,,[]
495,"    private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",128,,LABEL_1,LABEL_1,LABEL_1,-1,"createMD5,pwd,md,pd,app,i,s2",,7,20,0,,0,GA,3184,1.1618250370025636,failed,[]
496,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            pst.setBoolean(6, contact.isArchived());
            pst.setInt(7, contact.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
 <SPLIT>     private void insertService(String table, int type) {
        Connection con = null;
        log.info("""");
        log.info(""正在生成"" + table + ""的服务。。。。。。。"");
        try {
            con = DODataSource.getDefaultCon();
            con.setAutoCommit(false);
            Statement stmt = con.createStatement();
            Statement stmt2 = con.createStatement();
            String serviceUid = UUIDHex.getInstance().generate();
            DOBO bo = DOBO.getDOBOByName(table);
            List props = new ArrayList();
            StringBuffer mainSql = null;
            String name = """";
            String l10n = """";
            String prefix = table;
            String serviceType = ""null"";
            Boolean isNew = null;
            switch(type) {
                case 1:
                    name = prefix + ""_insert"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = getInsertSql(props, table);
                    serviceType = ""8"";
                    isNew = Boolean.TRUE;
                    break;
                case 2:
                    name = prefix + ""_update"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = this.getModiSql(props, table);
                    serviceType = ""7"";
                    isNew = Boolean.FALSE;
                    break;
                case 3:
                    DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);
                    if (property == null || property.getColName() == null) {
                        return;
                    }
                    name = prefix + ""_delete"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""delete from "").append(table).append("" where "").append(this.keyCol).append("" = ?"");
                    serviceType = ""5"";
                    break;
                case 4:
                    property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);
                    if (property == null || property.getColName() == null) {
                        return;
                    }
                    name = prefix + ""_browse"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""select * from "").append(table).append("" where "").append(this.keyCol).append("" = ?"");
                    serviceType = ""10"";
                    break;
                case 5:
                    serviceType = ""2"";
                    name = prefix + ""_list"";
                    l10n = name;
                    mainSql = new StringBuffer(""select * from "").append(table);
            }
            this.setParaLinkBatch(props, stmt2, serviceUid, isNew);
            StringBuffer aSql = new StringBuffer(""insert into DO_Service(objuid,l10n,name,bouid,mainSql,type) values("").append(""'"").append(serviceUid).append(""','"").append(l10n).append(""','"").append(name).append(""','"").append(this.getDOBOUid(table)).append(""','"").append(mainSql).append(""',"").append(serviceType).append("")"");
            log.info(""Servcice's Sql:"" + aSql.toString());
            stmt.executeUpdate(aSql.toString());
            stmt2.executeBatch();
            con.commit();
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException ex2) {
                ex2.printStackTrace();
            }
            ex.printStackTrace();
        } finally {
            try {
                if (!con.isClosed()) {
                    con.close();
                }
            } catch (SQLException ex1) {
                ex1.printStackTrace();
            }
        }
    }
",284,,LABEL_1,LABEL_1,LABEL_1,-1,"update,o,contact,pst",,4,27,0,,0,GA,1684,0.686454963684082,failed,[';update = 0']
497,"    public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",103,,LABEL_1,LABEL_1,LABEL_1,-1,"upload,destDir,fos",,1,1,0,,0,GA,1209,0.45412938594818114,failed,"[';upload = 0', ';destDir = 0', ';url = 0', ';delete = 0', ';srcdir = 0', ';srcDIR = 0', ';srcDir = 0', ';distDIR = 0', ';pos = 0']"
498,"    public static boolean dump(File source, File target) {
        boolean done = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return done;
    }
 <SPLIT>     protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
",102,,LABEL_1,LABEL_1,LABEL_1,-1,"dump,source,target,is,os,done",,3,5,0,,0,GA,2131,0.7891042590141296,failed,"[';dump = 0', ';print(dump)', ';source = 0', ';target = 0', ';Dir = 0', ';info = 0', ';copy = 0', ';store = 0', ';dir = 0', ';address = 0', ';string = 0', ';pos = 0']"
499,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""edit"") != null) {
            try {
                User cu = (User) request.getSession().getAttribute(""currentuser"");
                UserDetails ud = cu.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = request.getParameter(""password"");
                    MessageDigest md = MessageDigest.getInstance(""MD5"");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter(""fname""));
                ud.setLastName(request.getParameter(""lname""));
                ud.setEmailAddress(request.getParameter(""email""));
                ud.setAddress(request.getParameter(""address""));
                ud.setZipcode(request.getParameter(""zipcode""));
                ud.setTown(request.getParameter(""town""));
                ud.setCountry(request.getParameter(""country""));
                ud.setTrackingColor(request.getParameter(""input1""));
                String vis = request.getParameter(""visibility"");
                if (vis.equals(""self"")) {
                    cu.setVisibility(0);
                } else if (vis.equals(""friends"")) {
                    cu.setVisibility(1);
                } else if (vis.equals(""all"")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
 <SPLIT>     public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair(""query"", ""Queue='"" + queueName + ""' AND Status='open'""));
        params.add(new BasicNameValuePair(""format"", ""i""));
        params.add(new BasicNameValuePair(""orderby"", ""-id""));
        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains(""does not exist."")) {
                                return null;
                            }
                            if (line.startsWith(""ticket/"")) {
                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");
            }
        }
        return tickets;
    }
",419,"    protected void doPost(HttpServletRequest queue, HttpServletResponse response) throws ServletException, IOException {
        if (queue.getParameter(""edit"") != null) {
            try {
                User lc = (User) queue.getSession().getAttribute(""currentuser"");
                UserDetails uli = lc.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = queue.getParameter(""password"");
                    MessageDigest cd = MessageDigest.getInstance(""MD5"");
                    cd.update(new String(password).getBytes());
                    byte[] hash = cd.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    lc.setClientPassword(pass);
                }
                uli.setFirstName(queue.getParameter(""fname""));
                uli.setLastName(queue.getParameter(""lname""));
                uli.setEmailAddress(queue.getParameter(""email""));
                uli.setAddress(queue.getParameter(""address""));
                uli.setZipcode(queue.getParameter(""zipcode""));
                uli.setTown(queue.getParameter(""town""));
                uli.setCountry(queue.getParameter(""country""));
                uli.setTrackingColor(queue.getParameter(""input1""));
                String cross = queue.getParameter(""visibility"");
                if (cross.equals(""self"")) {
                    lc.setVisibility(0);
                } else if (cross.equals(""friends"")) {
                    lc.setVisibility(1);
                } else if (cross.equals(""all"")) {
                    lc.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(lc);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
;doPost = 0;print(doPost);print(returnTo);print(hash);print(pass);print(vis);complete = 0;print(complete)",LABEL_0,LABEL_0,LABEL_0,1,"doPost,request,response,cu,ud,returnTo,password,md,hash,pass,vis","doPost:-0.011245787143707275,request:-0.03759646415710449,response:-0.05137896537780762,cu:-0.026133418083190918,ud:-0.14326870441436768,returnTo:-0.002108931541442871,password:-0.010533571243286133,md:-0.025092124938964844,hash:-0.0019393563270568848,pass:-0.0055977702140808105,vis:-0.015315592288970947,",5,37,0,"hash:hash,returnTo:returnTo,pass:pass,password:password,doPost:doPost,vis:cross,md:cd,cu:lc,request:queue,response:response,ud:uli,",0,Greedy,613,0.2379610498746236,inesrt,"[';doPost = 0', ';print(doPost)', ';print(returnTo)', ';print(hash)', ';print(pass)', ';print(vis)', ';complete = 0', ';print(complete)']"
500,"    public InputStream retrieveStream(String url) {
        HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse getResponse = getClient().execute(getRequest);
            final int statusCode = getResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(getClass().getSimpleName(), ""Error "" + statusCode + "" for URL "" + url);
                return null;
            }
            HttpEntity getResponseEntity = getResponse.getEntity();
            return getResponseEntity.getContent();
        } catch (Exception e) {
            getRequest.abort();
            Log.w(getClass().getSimpleName(), ""Error for URL "" + url, e);
        }
        return null;
    }
 <SPLIT>     private String copyImageFile(String urlString, String filePath) {
        FileOutputStream destination = null;
        File destination_file = null;
        String inLine;
        String dest_name = """";
        byte[] buffer;
        int bytes_read;
        int last_offset = 0;
        int offset = 0;
        InputStream imageFile = null;
        try {
            URL url = new URL(urlString);
            imageFile = url.openStream();
            dest_name = url.getFile();
            offset = 0;
            last_offset = 0;
            offset = dest_name.indexOf('/', offset + 1);
            while (offset > -1) {
                last_offset = offset + 1;
                offset = dest_name.indexOf('/', offset + 1);
            }
            dest_name = filePath + File.separator + dest_name.substring(last_offset);
            destination_file = new File(dest_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    if (!destination_file.canWrite()) {
                        System.out.println(""FileCopy: destination "" + ""file is unwriteable: "" + dest_name);
                    }
                    System.out.println(""File "" + dest_name + "" already exists. File will be overwritten."");
                } else {
                    System.out.println(""FileCopy: destination "" + ""is not a file: "" + dest_name);
                }
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) {
                    System.out.println(""FileCopy: destination "" + ""directory doesn't exist: "" + dest_name);
                }
                if (!parentdir.canWrite()) {
                    System.out.println(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);
                }
            }
            destination = new FileOutputStream(dest_name);
            buffer = new byte[1024];
            while (true) {
                bytes_read = imageFile.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } catch (MalformedURLException ex) {
            System.out.println(""Bad URL "" + urlString);
        } catch (IOException ex) {
            System.out.println("" IO error: "" + ex.getMessage());
        } finally {
            if (imageFile != null) {
                try {
                    imageFile.close();
                } catch (IOException e) {
                }
            }
            if (destination != null) {
                try {
                    destination.close();
                } catch (IOException e) {
                }
            }
        }
        return (dest_name);
    }
",139,,LABEL_0,LABEL_0,LABEL_0,-1,"retrieveStream,url,getRequest,getResponse,statusCode,getResponseEntity",,6,16,0,,0,GA,1875,0.7309993664423625,failed,"[';http = 0', ';filename = 0', ';host = 0', ';print(URL)', ';fr = 0', ';config = 0', ';file = 0', ';print(file)', ';print(route)', ';print(request)', ';layer = 0', '; getSession = 0', ';checkSession = 0', ';findResponse = 0', ';findRequest = 0', ';findUrl = 0', ';getStatus = 0']"
501,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(buffer.getPayload().toString().replaceAll(""\r\n|\n|\r"", """"));
    }
 <SPLIT>     @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
",294,,LABEL_1,LABEL_1,LABEL_1,-1,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,9,33,0,,0,GA,4197,1.6011902213096618,failed,"[';logging = 0', ';print(logging)', ';wrap = 0', ';buffer = 0', ';encoding = 0', ';getEncoding = 0', ';logger = 0', ';Loging = 0', ';loging = 0', ';Logting = 0', '; logting = 0', ';Logger = 0', '; loging = 0', ';logting = 0', ';Logging = 0', ';handler = 0', ';lock = 0', ';binary = 0', ';Is = 0']"
502,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",697,,LABEL_0,LABEL_1,,-4,"f,in,cbuf,read,totRead,out,i",,,,0,,0,Greedy,1,0.0008109966913859049,,[]
503,"    public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {
        LOG.info(""Unzipping zip file '"" + file.getAbsolutePath() + ""' to directory '"" + targetDirectory.getAbsolutePath() + ""'."");
        assert (file.exists() && file.isFile());
        if (targetDirectory.exists() == false) {
            LOG.debug(""Creating target directory."");
            if (targetDirectory.mkdirs() == false) {
                throw new BusinessException(""Could not create target directory at '"" + targetDirectory.getAbsolutePath() + ""'!"");
            }
        }
        ZipInputStream zipin = null;
        try {
            zipin = new ZipInputStream(new FileInputStream(file));
            ZipEntry entry = null;
            while ((entry = zipin.getNextEntry()) != null) {
                LOG.debug(""Unzipping entry '"" + entry.getName() + ""'."");
                if (entry.isDirectory()) {
                    LOG.debug(""Skipping directory."");
                    continue;
                }
                final File targetFile = new File(targetDirectory, entry.getName());
                final File parentTargetFile = targetFile.getParentFile();
                if (parentTargetFile.exists() == false) {
                    LOG.debug(""Creating directory '"" + parentTargetFile.getAbsolutePath() + ""'."");
                    if (parentTargetFile.mkdirs() == false) {
                        throw new BusinessException(""Could not create target directory at '"" + parentTargetFile.getAbsolutePath() + ""'!"");
                    }
                }
                InputStream input = null;
                FileOutputStream output = null;
                try {
                    input = zipFile.getInputStream(entry);
                    if (targetFile.createNewFile() == false) {
                        throw new BusinessException(""Could not create target file '"" + targetFile.getAbsolutePath() + ""'!"");
                    }
                    output = new FileOutputStream(targetFile);
                    int readBytes = 0;
                    byte[] buffer = new byte[BUFFER_SIZE];
                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {
                        output.write(buffer, 0, readBytes);
                    }
                } finally {
                    FileUtil.closeCloseable(input);
                    FileUtil.closeCloseable(output);
                }
            }
        } catch (IOException e) {
            throw new BusinessException(""Could not unzip file '"" + file.getAbsolutePath() + ""'!"", e);
        } finally {
            FileUtil.closeCloseable(zipin);
        }
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",450,"    public static void unzip(File url, ZipFile zipFile, File targetDirectory) throws BusinessException {
        LOG.info(""Unzipping zip file '"" + url.getAbsolutePath() + ""' to directory '"" + targetDirectory.getAbsolutePath() + ""'."");
        assert (url.exists() && url.isFile());
        if (targetDirectory.exists() == false) {
            LOG.debug(""Creating target directory."");
            if (targetDirectory.mkdirs() == false) {
                throw new BusinessException(""Could not create target directory at '"" + targetDirectory.getAbsolutePath() + ""'!"");
            }
        }
        ZipInputStream zipin = null;
        try {
            zipin = new ZipInputStream(new FileInputStream(url));
            ZipEntry entry = null;
            while ((entry = zipin.getNextEntry()) != null) {
                LOG.debug(""Unzipping entry '"" + entry.getName() + ""'."");
                if (entry.isDirectory()) {
                    LOG.debug(""Skipping directory."");
                    continue;
                }
                final File targetFile = new File(targetDirectory, entry.getName());
                final File parentTargetFile = targetFile.getParentFile();
                if (parentTargetFile.exists() == false) {
                    LOG.debug(""Creating directory '"" + parentTargetFile.getAbsolutePath() + ""'."");
                    if (parentTargetFile.mkdirs() == false) {
                        throw new BusinessException(""Could not create target directory at '"" + parentTargetFile.getAbsolutePath() + ""'!"");
                    }
                }
                InputStream input = null;
                FileOutputStream output = null;
                try {
                    input = zipFile.getInputStream(entry);
                    if (targetFile.createNewFile() == false) {
                        throw new BusinessException(""Could not create target file '"" + targetFile.getAbsolutePath() + ""'!"");
                    }
                    output = new FileOutputStream(targetFile);
                    int readBytes = 0;
                    byte[] buffer = new byte[BUFFER_SIZE];
                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {
                        output.write(buffer, 0, readBytes);
                    }
                } finally {
                    FileUtil.closeCloseable(input);
                    FileUtil.closeCloseable(output);
                }
            }
        } catch (IOException e) {
            throw new BusinessException(""Could not unzip file '"" + url.getAbsolutePath() + ""'!"", e);
        } finally {
            FileUtil.closeCloseable(zipin);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"unzip,file,zipFile,targetDirectory,zipin,entry,targetFile,parentTargetFile,input,output,readBytes,buffer","unzip:-0.0013217926025390625,file:0.009299278259277344,zipFile:-0.0007163286209106445,targetDirectory:0.00011610984802246094,zipin:-0.04994797706604004,entry:-0.010467529296875,targetFile:-0.03140270709991455,parentTargetFile:-0.010951995849609375,input:-0.037455081939697266,output:-0.04521209001541138,readBytes:0.0021359920501708984,buffer:0.00115966796875,",1,9,0,"file:url,",0,Greedy,127,0.0512383778889974,replace,[]
504,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     @Test
    public void testCopyUnknownSize() throws IOException {
        final InputStream in = new ByteArrayInputStream(TEST_DATA);
        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);
        final int cpySize = ExtraIOUtils.copy(in, out, (-1));
        assertEquals(""Mismatched copy size"", TEST_DATA.length, cpySize);
        final byte[] outArray = out.toByteArray();
        assertArrayEquals(""Mismatched data"", TEST_DATA, outArray);
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,7,16,0,,0,GA,3105,1.146687114238739,failed,"[';uncaughtException = 0', ';print(uncaughtException)', ';message = 0', ';print(message)', ';e1 = 0', ';print(e1)', ';CaughtException = 0', ';print(CaughtException)', ';uncachedexc = 0', ';uncatchedexc = 0', ';CatchedEvent = 0', ';Catchedexc = 0', ';uncatchedException = 0', ';unchandledException = 0', ';unchandledexc = 0', ';CatchedException = 0', ';uncatchedEvent = 0', ';status = 0', ';sym = 0', ';address = 0']"
505,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,5,15,0,,0,GA,1686,0.6273171305656433,failed,[]
506,"    public static void init(Locale lng) {
        try {
            Locale toLoad = lng != null ? lng : DEFAULT_LOCALE;
            URL url = ClassLoader.getSystemResource(""locales/"" + toLoad.getISO3Language() + "".properties"");
            if (url == null) {
                url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
            }
            PROPS.clear();
            PROPS.load(url.openStream());
        } catch (IOException ioe) {
            try {
                URL url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
                PROPS.clear();
                PROPS.load(url.openStream());
            } catch (Exception e) {
                e.printStackTrace();
                System.exit(99);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(99);
        }
    }
 <SPLIT>     public boolean register(Object o) {
        String passwordAsText;
        if (o == null) throw new IllegalArgumentException(""object cannot be null"");
        if (!(o instanceof User)) {
            throw new IllegalArgumentException(""passed argument is not an instance of the User class"");
        }
        User newUser = (User) o;
        passwordAsText = newUser.getPassword();
        newUser.setPassword(passwordEncoder.encodePassword(passwordAsText, null));
        newUser.setRegDate(new Date());
        logger.debug(""Setting default Authority {} to new user!"", Authority.DEFAULT_NAME);
        newUser.getAuthorities().add(super.find(Authority.class, 1));
        logger.debug(""Creating hash from email address! using Base64"");
        newUser.setHash(new String(Base64.encodeBase64(newUser.getEmail().getBytes())));
        logger.debug(""Creating phpBB forum User, by calling URL: {}"", forumUrl);
        try {
            StringBuilder urlString = new StringBuilder(forumUrl);
            urlString.append(""phpBB.php?action=register"").append(""&login="").append(newUser.getLogin()).append(""&password="").append(passwordAsText).append(""&email="").append(newUser.getEmail());
            sqlInjectionPreventer(urlString.toString());
            logger.debug(""Connecting to URL: {}"", urlString.toString());
            URL url = new URL(urlString.toString());
            URLConnection urlCon = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) newUser.setForumID(Integer.valueOf(inputLine));
            in.close();
        } catch (IOException io) {
            logger.error(""Connecting failed! Msg: {}"", io.getMessage());
            throw new RuntimeException(""Couldn't conntect to phpBB"");
        } catch (NumberFormatException e) {
            logger.error(""phpBB user generation failed! Msg: {}"", e.getMessage());
            throw new RuntimeException(""phpBB user generation failed!"");
        }
        entityManager.persist(newUser);
        try {
            sendConfirmationEmail(newUser);
            return true;
        } catch (MailException ex) {
            return false;
        }
    }
",182,,LABEL_0,LABEL_0,LABEL_0,-1,"init,lng,toLoad,url",,2,4,0,,0,GA,1809,0.6858618378639221,failed,"[';init = 0', ';print(init)', ';lng = 0', ';print(lng)', ';toLoad = 0', ';print(toLoad)', ';url = 0', ';info = 0', ';setup = 0', ';reset = 0', ';parse = 0', ';toAdd = 0', ';string = 0']"
507,"    private String makeLoginRequest(URL url) throws IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod(""POST"");
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(true);
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        StringBuilder content = new StringBuilder();
        content.append(""Email="").append(URLEncoder.encode(EMAIL, ""UTF-8""));
        content.append(""&Passwd="").append(URLEncoder.encode(PASSWORD, ""UTF-8""));
        content.append(""&service="").append(URLEncoder.encode(SERVICE, ""UTF-8""));
        content.append(""&source="").append(URLEncoder.encode(""Google Base data API"", ""UTF-8""));
        OutputStream outputStream = urlConnection.getOutputStream();
        outputStream.write(content.toString().getBytes(""UTF-8""));
        outputStream.close();
        int responseCode = urlConnection.getResponseCode();
        InputStream inputStream;
        if (responseCode == HttpURLConnection.HTTP_OK) {
            inputStream = urlConnection.getInputStream();
        } else {
            inputStream = urlConnection.getErrorStream();
        }
        return toString(inputStream);
    }
 <SPLIT>     private String cookieString(String url, String ip) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());
            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);
            return null;
        }
    }
",250,,LABEL_0,LABEL_0,LABEL_0,-1,"makeLoginRequest,url,urlConnection,content,outputStream,responseCode,inputStream",,6,25,0,,0,GA,2443,0.9371615966161092,failed,[]
508,"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {
        StringBuilder json = new StringBuilder();
        String requestUrl = ""http://api.meetup.com/events.json/?group_urlname="" + groupIdentifier + ""&key="" + key;
        try {
            URL url = new URL(requestUrl.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                json.append(inputLine);
            }
            in.close();
        } catch (IOException e) {
            throw new GtugsException(e);
        }
        List<Event> events = new ArrayList<Event>();
        JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());
        JSONArray results = (JSONArray) jsonObj.get(""results"");
        for (int i = 0; i < results.size(); i++) {
            JSONObject result = (JSONObject) results.get(i);
            Event e = new Event();
            e.setAttendeeCount(Integer.parseInt((String) result.get(""rsvpcount"")));
            e.setCity((String) result.get(""venue_city""));
            e.setDescription((String) result.get(""description""));
            e.setLatitude(Double.parseDouble((String) result.get(""venue_lat"")));
            e.setLongitude(Double.parseDouble((String) result.get(""venue_lon"")));
            e.setName((String) result.get(""name""));
            Date myDate = null;
            String time = (String) result.get(""time"");
            try {
                myDate = meetupDateFormat.parse(time);
                e.setStartTime(timeDateFormat.format(myDate));
                e.setEndTime(timeDateFormat.format(myDate));
                e.setStartDate(myDate);
                e.setEndDate(myDate);
                String tz = tzDateFormat.format(myDate);
                if (tz != null && tz.startsWith(""+"")) {
                    tz = tz.substring(1);
                }
                e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));
            } catch (ParseException ex) {
                ex.printStackTrace();
                continue;
            }
            e.setState((String) result.get(""venue_state""));
            StringBuilder addressBuilder = new StringBuilder();
            if (result.get(""venue_address1"") != null) {
                addressBuilder.append((String) result.get(""venue_address1"") + "" "");
            }
            if (result.get(""venue_address2"") != null) {
                addressBuilder.append((String) result.get(""venue_address2"") + "" "");
            }
            if (result.get(""venue_address3"") != null) {
                addressBuilder.append((String) result.get(""venue_address3"") + "" "");
            }
            if (result.get(""venue_address4"") != null) {
                addressBuilder.append((String) result.get(""venue_address4""));
            }
            e.setStreetAddress(addressBuilder.toString().trim());
            e.setZipCode((String) result.get(""venue_zip""));
            e.setUrl((String) result.get(""event_url""));
            events.add(e);
        }
        return events;
    }
",127,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex",,6,18,0,,0,GA,2314,0.9112102508544921,failed,"[';encryptPassword = 0', ';password = 0', ';encryptedPassword = 0', ';md5 = 0', ';digest = 0', ';encressString = 0', ';encryptedString = 0']"
509,"    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
 <SPLIT>     public static void copyFromTo(File srcFile, File destFile) {
        FileChannel in = null, out = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(srcFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + srcFile.toString());
            System.out.println(""file does not exist, "" + ""is a directory rather than a regular file, "" + ""or for some other reason cannot be opened for reading"");
            System.exit(-1);
        }
        try {
            fos = new FileOutputStream(destFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + destFile.toString());
            System.out.println(""file exists but is a directory rather than a regular file, "" + ""does not exist but cannot be created, "" + ""or cannot be opened for any other reason"");
            System.exit(-1);
        }
        try {
            in = fis.getChannel();
            out = fos.getChannel();
            in.transferTo(0, in.size(), out);
            fos.flush();
            fos.close();
            out.close();
            fis.close();
            in.close();
            System.out.println(""Completed copying "" + srcFile.toString() + "" to "" + destFile.toString());
        } catch (IOException ioe) {
            System.out.println(""IOException copying file: "" + ioe.getMessage());
            System.exit(-1);
        }
        long srcModified = srcFile.lastModified();
        if (srcModified > 0L && destFile.exists()) {
            destFile.setLastModified(srcModified);
        }
    }
",438,,LABEL_1,LABEL_1,LABEL_1,-1,"doPost,request,response,is,page,os,rootUrl,isMultipart,rd,upload,webUrl,iter,item,name,baos,wpIs,u",,17,69,0,,0,GA,7878,3.1253931283950807,failed,"[';document = 0', ';method = 0', ';instance = 0', ';parent = 0', ';socket = 0']"
510,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     @Test
    public void testCopyUnknownSize() throws IOException {
        final InputStream in = new ByteArrayInputStream(TEST_DATA);
        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);
        final int cpySize = ExtraIOUtils.copy(in, out, (-1));
        assertEquals(""Mismatched copy size"", TEST_DATA.length, cpySize);
        final byte[] outArray = out.toByteArray();
        assertArrayEquals(""Mismatched data"", TEST_DATA, outArray);
    }
",1387,,LABEL_1,LABEL_0,,-4,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e",,,,0,,0,Greedy,1,0.0011027177174886067,,[]
511,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
",765,"    public void unception(File src, File img) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean haspixelData = p.getReadTag() == Tags.PixelData;
            boolean Inflation = haspixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int txln = p.getReadLength();
            if (haspixelData) {
                if (Inflation) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    txln = txln * 4 / 3;
                }
                if (txln != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (haspixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = txln + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) txln);
                    out.write((byte) (txln >> 8));
                    out.write((byte) (txln >> 16));
                    out.write((byte) (txln >> 24));
                }
                if (Inflation) {
                    int b2, b3;
                    for (; txln > 0; txln -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; txln > 0; --txln) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",7,35,0,"pxlen:txln,hasPixelData:haspixelData,dest:img,inflate:Inflation,in:login,convert:unception,format:url,",0,Greedy,367,0.14360063076019286,replace,[]
512,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",230,"    public static void ssh(File login, File connection) throws IOException {
        if (login.exists() && login != null && connection != null) {
            if (!out.exists()) {
                if (login.isDirectory()) {
                    connection.mkdirs();
                } else {
                    connection.createNewFile();
                }
            }
            String source = login.isDirectory() ? ""directory"" : ""file"";
            String target = connection.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = login.listFiles();
                    for (File url : files) {
                        ssh(url, new File(connection, url.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(login).getChannel();
                    FileChannel inch = new FileOutputStream(connection).getChannel();
                    inCh.transferTo(0, inCh.size(), inch);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,source,target,files,file,inCh,outCh","copy:0.010347545146942139,in:0.0015341639518737793,out:0.0029032230377197266,source:0.001005709171295166,target:0.0008336305618286133,files:-0.0017424225807189941,file:0.0018519759178161621,inCh:-0.00015044212341308594,outCh:0.0019129514694213867,",5,24,0,"copy:ssh,out:connection,outCh:inch,file:url,in:login,",0,Greedy,257,0.0920994480450948,replace,[]
513,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""edit"") != null) {
            try {
                User cu = (User) request.getSession().getAttribute(""currentuser"");
                UserDetails ud = cu.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = request.getParameter(""password"");
                    MessageDigest md = MessageDigest.getInstance(""MD5"");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter(""fname""));
                ud.setLastName(request.getParameter(""lname""));
                ud.setEmailAddress(request.getParameter(""email""));
                ud.setAddress(request.getParameter(""address""));
                ud.setZipcode(request.getParameter(""zipcode""));
                ud.setTown(request.getParameter(""town""));
                ud.setCountry(request.getParameter(""country""));
                ud.setTrackingColor(request.getParameter(""input1""));
                String vis = request.getParameter(""visibility"");
                if (vis.equals(""self"")) {
                    cu.setVisibility(0);
                } else if (vis.equals(""friends"")) {
                    cu.setVisibility(1);
                } else if (vis.equals(""all"")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
 <SPLIT>     public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",419,,LABEL_1,LABEL_0,,-4,"doPost,request,response,cu,ud,returnTo,password,md,hash,pass,vis",,,,0,,0,Greedy,1,0.0007299582163492838,,[]
514,"        private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
 <SPLIT>     public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",121,,LABEL_1,LABEL_1,LABEL_1,-1,"loadBinaryStream,streamName,streamToLoad,sz,req,resp,out,bos",,8,21,0,,0,GA,3465,1.2676329255104064,failed,[]
515,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",697,,LABEL_1,LABEL_1,LABEL_1,-1,"f,in,cbuf,read,totRead,out,i",,6,92,0,,0,GA,4342,1.973923416932424,failed,[]
516,"    @Override
    public void parse() throws IOException {
        URL url = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA));
        URLConnection con = url.openConnection();
        BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String str;
        bStream.readLine();
        while ((str = bStream.readLine()) != null) {
            String[] tokens = str.split(""(\\s+)"");
            String charCode = tokens[0].replaceAll(""([0-9+])"", """");
            Float value = Float.parseFloat(tokens[2].trim().replace("","", "".""));
            CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER);
            this.set.add(unit);
        }
    }
 <SPLIT>     private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",169,"    @Override
    public void parse() throws IOException {
        URL path = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA));
        URLConnection file = path.openConnection();
        BufferedReader bStream = new BufferedReader(new InputStreamReader(file.getInputStream()));
        String str;
        bStream.readLine();
        while ((str = bStream.readLine()) != null) {
            String[] token = str.split(""(\\s+)"");
            String charCode = token[0].replaceAll(""([0-9+])"", """");
            Float value = Float.parseFloat(token[2].trim().replace("","", "".""));
            CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER);
            this.set.add(unit);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"parse,url,con,bStream,str,tokens,charCode,value,unit","parse:-0.004629552364349365,url:0.003145754337310791,con:0.003152906894683838,bStream:-0.007193505764007568,str:0.0011587738990783691,tokens:0.0033350586891174316,charCode:0.0017901062965393066,value:0.0018393993377685547,unit:-0.0025345683097839355,",3,7,0,"tokens:token,con:file,url:path,",0,Greedy,160,0.059048044681549075,replace,[]
517,"    protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String path = request.getPathInfo();
        if (!path.startsWith(alias)) {
            throw new ServletException(""Path '"" + path + ""' does not start with registered alias '"" + alias + ""'"");
        }
        String internal;
        if (alias.equals(""/"")) {
            internal = name + path;
        } else {
            internal = name + path.substring(alias.length(), path.length());
        }
        URL resource = httpContext.getResource(internal);
        if (resource == null) {
            return false;
        }
        String mimeType = servletContext.getMimeType(internal);
        if (mimeType != null) {
            response.setContentType(mimeType);
        }
        InputStream is = resource.openStream();
        OutputStream os = response.getOutputStream();
        IOUtils.copyAndClose(is, os);
        return true;
    }
 <SPLIT>     public void descargarArchivo() {
        try {
            FileInputStream fis = new FileInputStream(resultados.elementAt(materialSelccionado).getRuta());
            FileOutputStream fos = new FileOutputStream(rutaDestinoDescarga);
            FileChannel inChannel = fis.getChannel();
            FileChannel outChannel = fos.getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
            fis.close();
            fos.close();
        } catch (IOException ioe) {
            System.err.println(""Error al Generar Copia del Material\n"" + ioe);
        }
    }
",181,,LABEL_1,LABEL_1,LABEL_1,-1,"doRequest,request,response,path,internal,resource,mimeType,is,os",,8,22,0,,0,GA,4159,1.6284191966056825,failed,"[';print( mileInfo)', ';print(mimeInfo)', ';print(mimePath)', ';print(maxtype)', ';print(modName)', ';print(mimeTypes)', ';print( mimeInfo)', ';print( mileType)', ';print(mimesInfo)', ';print( mimePath)', ';print(smIMEType)', ';print(mipType)', ';print(mpeType)', ';print(mileTypes)', ';print(mIMEName)', ';print(pimePath)', ';print( mileTypes)', ';print(manceType)', ';print(pimetype)', ';print(manceTypes)', ';print(mancePath)', ';print(monsetype)', ';print(monseType)', ';print(smimeType)', ';print(smIMEName)', ';print(milePath)', ';print(pimeTypes)', ';print(maxName)', ';print(smimeInfo)', ';print(maxType)', ';print(pipTypes)', ';print(mileInfo)', ';print(modType)', ';print(mipPath)', ';print(mileType)', ';print(modInfo)', ';print(mIMEType)', ';print(mancetype)', ';print(mipTypes)', ';print(modtype)', ';print(mimesTypes)', ';print(mimesPath)', ';print(miptype)', ';print(mIMEtype)', ';print( mimeTypes)', ';print(mimeName)', ';print(mimesType)', ';print( milePath)', ';print(IS)', ';print(Is)', ';print(nos)']"
518,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,5,11,0,,0,GA,3095,1.623304045200348,failed,[]
519,"    protected String readUrl(String svnUrl) throws IOException {
        URL url = new URL(svnUrl);
        URLConnection uc = url.openConnection();
        if (url.getProtocol().equals(""https"")) {
            String userPassword = user + "":"" + password;
            String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());
            uc.setRequestProperty(""Authorization"", ""Basic "" + encoding);
        }
        InputStream is = null;
        String in = null;
        try {
            is = uc.getInputStream();
            in = read(is);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
        return in;
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",144,"    protected String readUrl(String svnFile) throws IOException {
        URL path = new URL(svnFile);
        URLConnection ssl = path.openConnection();
        if (path.getProtocol().equals(""https"")) {
            String userpassword = user + "":"" + password;
            String encoding = new sun.misc.BASE64Encoder().encode(userpassword.getBytes());
            ssl.setRequestProperty(""Authorization"", ""Basic "" + encoding);
        }
        InputStream is = null;
        String line = null;
        try {
            is = ssl.getInputStream();
            line = read(is);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
        return line;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"readUrl,svnUrl,url,uc,userPassword,encoding,is,in","readUrl:8.499622344970703e-05,svnUrl:-1.7881393432617188e-06,url:-3.17692756652832e-05,uc:1.6808509826660156e-05,userPassword:-5.900859832763672e-06,encoding:-0.0001055598258972168,is:-0.0006180405616760254,in:0.0008560419082641602,",5,13,0,"in:line,readUrl:readUrl,uc:ssl,svnUrl:svnFile,userPassword:userpassword,url:path,",0,Greedy,233,0.11685570081075032,replace,[]
520,"    public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
 <SPLIT>         private boolean doCSVImport(String tableName, final boolean hasHeader) {
            StringBuffer sql = new StringBuffer();
            sql.append(""INSERT INTO "");
            sql.append(tableName + ""("");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append("""" + colNames.get(i) + "","");
            }
            sql.setLength(sql.length() - 1);
            sql.append("") VALUES( "");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append(""?,"");
            }
            sql.setLength(sql.length() - 1);
            sql.append("")"");
            Connection conn = null;
            int lineNumber = 0;
            int colNumber = 0;
            String line[] = null;
            try {
                conn = DBExplorer.getConnection(false);
                conn.setAutoCommit(false);
                PreparedStatement pstmt = conn.prepareStatement(sql.toString());
                for (; lineNumber < csvData.size(); lineNumber++) {
                    if (hasHeader && lineNumber == 0) continue;
                    dlg.UpdateProgressBar(lineNumber);
                    if (cancel) {
                        break;
                    }
                    line = (String[]) csvData.get(lineNumber);
                    pstmt.clearParameters();
                    for (colNumber = 0; colNumber < colTypes.size(); colNumber++) {
                        if (line[colNumber].equals("""") && colNullAllowed.get(colNumber).toString().equals(""true"")) {
                            pstmt.setNull(colNumber + 1, Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        } else {
                            pstmt.setObject(colNumber + 1, line[colNumber], Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        }
                    }
                    pstmt.executeUpdate();
                }
                if (cancel) conn.rollback(); else conn.commit();
                conn.setAutoCommit(true);
                conn.close();
                conn = null;
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        if (!cancel) {
                            dlg.showMessage(title, ""Imported "" + maxsize + "" rows successfully."");
                            statusLabel.setText(""Import complete."");
                        } else {
                            dlg.UpdateProgressBar(0);
                            statusLabel.setText(""Import aborted."");
                        }
                    }
                });
                return true;
            } catch (final Exception e) {
                if (conn != null) try {
                    conn.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        statusLabel.setText(""Import failed"");
                        dlg.showError(title, e.getMessage());
                        dlg.UpdateProgressBar(0);
                    }
                });
                return false;
            } finally {
                if (conn != null) try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
",884,,LABEL_0,LABEL_1,,-4,"init,backupFile,buff,in,out,read,reportWriter,restarting",,,,0,,0,Greedy,1,0.0011728405952453613,,[]
521,"        public final String hashPassword(String password) {
            try {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(password.getBytes());
                byte[] hash = md.digest();
                return ""{SHA}"" + byteToString(hash, 60);
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Error getting password hash - "" + nsae.getMessage());
                return null;
            }
        }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        StringBuffer sb = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",85,,LABEL_1,LABEL_1,LABEL_1,-1,"hashPassword,password,md,hash",,4,10,0,,0,GA,1714,0.7087439219156901,failed,"[';printPassword = 0', ';print(printPassword)', '; hashSecret = 0', '; hashpassword = 0', ';address = 0']"
522,"    @ActionMethod
    public void list() throws IOException {
        final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/list?version=1000"");
        final HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
        final InputStream in = con.getInputStream();
        final byte[] buf = new byte[4096];
        textArea.setText("""");
        for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) {
            textArea.append(new String(buf, 0, bytesRead));
        }
    }
 <SPLIT>     public static void main(String[] args) {
        File srcDir = new File(args[0]);
        File dstDir = new File(args[1]);
        File[] srcFiles = srcDir.listFiles();
        for (File f : srcFiles) {
            if (f.isDirectory()) continue;
            try {
                FileChannel srcChannel = new FileInputStream(f).getChannel();
                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();
                ByteBuffer buffer = ByteBuffer.allocate(1024);
                int nr = 0;
                srcChannel.position(nr);
                nr += srcChannel.read(buffer);
                while (nr < f.length()) {
                    buffer.flip();
                    dstChannel.write(buffer);
                    buffer.clear();
                    nr += srcChannel.read(buffer);
                }
                srcChannel.close();
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
",139,"    @ActionMethod
    public void export() throws IOException {
        final URL file = new URL(""http://127.0.0.1:"" + testPort + ""/list?version=1000"");
        final HttpURLConnection exec = (HttpURLConnection) file.openConnection();
        exec.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
        exec.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
        final InputStream ins = exec.getInputStream();
        final byte[] sb = new byte[4096];
        textArea.setText("""");
        for (int BytesWrite; (BytesWrite = ins.read(sb)) != -1; ) {
            textArea.append(new String(sb, 0, BytesWrite));
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"list,url,con,in,buf,bytesRead","list:-0.00013655424118041992,url:0.0004202127456665039,con:-0.0008905529975891113,in:-2.658367156982422e-05,buf:-0.0009504556655883789,bytesRead:0.00033867359161376953,",6,15,0,"url:file,bytesRead:BytesWrite,in:ins,list:export,con:exec,buf:sb,",0,Greedy,262,0.09800301790237427,replace,[]
523,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     public static String mysqlPasswordHash(String string) {
        try {
            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);
            try {
                digest.update(string.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            byte[] encodedPassword = digest.digest();
            digest.update(encodedPassword);
            encodedPassword = digest.digest();
            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();
            while (hash.length() < 40) {
                hash = ""0"" + hash;
            }
            return ""*"" + hash;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,5,15,0,,0,GA,2208,0.8146464705467225,failed,[]
524,"    public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {
        if (TESTING) {
            HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();
            ret.add(new Tuple<String, ArrayList<String>>(""teste"", new ArrayList<String>()));
            return ret;
        }
        int retries = 0;
        while (retries < 3) {
            try {
                ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();
                String reqPre = ""<?xml version=\""1.0\""?>\r\n"" + (getGazeteerIds ? ""<GetFeature"" : ""<GetParsing"") + "" xmlns=\""http://www.opengis.net/gp\"" xmlns:wfs=\""http://www.opengis.net/wfs\"""" + "" xmlns:xsi=\""http://www.w3.org/2000/10/XMLSchema-instance\"""" + "" xsi:schemaLocation=\""http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\""\r\n"" + "" wfs:outputFormat=\""GML2\"">"" + ""<wfs:Query wfs:TypeName=\""PlaceName\"" />"" + ""<Resource mine=\""text/plain\"">"" + ""<Contents></Contents>"" + ""</Resource>"" + (getGazeteerIds ? ""</GetFeature>"" : ""</GetParsing>"");
                Document doc = DocumentHelper.parseText(reqPre);
                doc.getRootElement().element(""Resource"").element(""Contents"").setText(recordContent);
                URL url = new URL(geoParserBaseUrl + ""?request="" + URLEncoder.encode(doc.asXML(), ""ISO8859-1""));
                InputStreamReader reader = new InputStreamReader(url.openStream(), ""UTF-8"");
                BufferedReader buffered = new BufferedReader(reader);
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = buffered.readLine()) != null) {
                    sb.append(line);
                }
                Document d = DocumentHelper.parseText(sb.toString());
                HashSet<String> places = new HashSet<String>();
                for (Iterator<Element> it = d.getRootElement().element(""EntryCollection"").elementIterator(""PlaceName""); it.hasNext(); ) {
                    Element plcEl = it.next();
                    String val = plcEl.elementTextTrim(""TermName"");
                    if (!val.equals("""") && !places.contains(val)) {
                        places.add(val);
                        String entryID = plcEl.attributeValue(""entryID"");
                        Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());
                        for (Iterator<Element> it2 = d.getRootElement().element(""EntryCollection"").elementIterator(""GazetteerEntry""); it2.hasNext(); ) {
                            Element idEl = it2.next();
                            if (idEl.attributeValue(""entryID"").equals(entryID)) plc.getV2().add(idEl.attributeValue(""id""));
                        }
                        ret.add(plc);
                    }
                }
                return ret;
            } catch (Exception e) {
                log.debug(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage(), e);
                System.out.println(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage());
                retries++;
            }
        }
        System.out.println(""Too many retries. Giving up."");
        return new HashSet<Tuple<String, ArrayList<String>>>();
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",691,,LABEL_1,LABEL_0,,-4,"readGeoParserResult,recordContent,getGazeteerIds,ret,retries,reqPre,outputFormat,doc,url,reader",,,,0,,0,Greedy,1,0.0008817116419474283,,[]
525,"    public String put(String resourceID, Map<String, String> headersMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(resourceID);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPut.addHeader(iterator.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersArray = httpPut.getAllHeaders();
        String[] fields = { Response.Location };
        HashMap<String, String> occiHeaders = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header header = headersArray[H];
            logger.info(""header - request  -"" + header.toString());
            logger.info(""	headerName - "" + header.getName());
            logger.info(""	headerValue - "" + header.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse httpResponse = httpClient.execute(httpPut);
            statusLine = httpResponse.getStatusLine().toString();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + httpResponse.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + httpResponse.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + httpResponse.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = httpResponse.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header header = headers[i];
                logger.info(""header - response - "" + header.toString());
                logger.info(""	headerName - "" + header.getName());
                logger.info(""	headerValue - "" + header.getValue());
                for (int h = 0; h < fields.length; h++) {
                    logger.info(""	Looking for  - "" + fields[h]);
                    if (fields[h].equals(header.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + header.getName());
                        occiHeaders.put(header.getName(), header.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + occiHeaders);
        if (occiHeaders.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + statusLine);
            return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + statusLine);
        return statusLine;
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",727,"    public String put(String resourceID, Map<String, String> headersMap) {
        HttpClient  httpCase = new DefaultHttpClient();
         httpCase.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(resourceID);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPut.addHeader(iterator.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersArray = httpPut.getAllHeaders();
        String[] lines = { Response.Location };
        HashMap<String, String> ocsiHeader = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header file = headersArray[H];
            logger.info(""header - request  -"" + file.toString());
            logger.info(""	headerName - "" + file.getName());
            logger.info(""	headerValue - "" + file.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse templateLine =  httpCase.execute(httpPut);
            statusLine = templateLine.getStatusLine().toString();
            int statusCode = templateLine.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + templateLine.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + templateLine.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + templateLine.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = templateLine.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header file = headers[i];
                logger.info(""header - response - "" + file.toString());
                logger.info(""	headerName - "" + file.getName());
                logger.info(""	headerValue - "" + file.getValue());
                for (int h = 0; h < lines.length; h++) {
                    logger.info(""	Looking for  - "" + lines[h]);
                    if (lines[h].equals(file.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + file.getName());
                        ocsiHeader.put(file.getName(), file.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
             httpCase.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + ocsiHeader);
        if (ocsiHeader.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + statusLine);
            return ocsiHeader.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + statusLine);
        return statusLine;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"put,resourceID,headersMap,httpClient,httpPut,headersList,iterator,headersArray,fields,occiHeaders,H,header,statusLine,httpResponse,statusCode","put:0.006465613842010498,resourceID:-0.010487914085388184,headersMap:0.018227994441986084,httpClient:0.22705471515655518,httpPut:0.026592791080474854,headersList:0.0023983120918273926,iterator:0.028522908687591553,headersArray:0.024852871894836426,fields:0.03812462091445923,occiHeaders:0.09893178939819336,H:0.018282830715179443,header:0.029513061046600342,statusLine:-0.08497124910354614,httpResponse:0.04681217670440674,statusCode:0.00465315580368042,",5,35,0,"httpClient: httpCase,occiHeaders:ocsiHeader,httpResponse:templateLine,fields:lines,header:file,",0,Greedy,262,0.1027862826983134,replace,[]
526,"    @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
 <SPLIT>     void run(PseudolocalizerArguments arguments) throws IOException {
        List<String> fileNames = arguments.getFileNames();
        PseudolocalizationPipeline pipeline = arguments.getPipeline();
        if (arguments.isInteractive()) {
            runStdin(pipeline);
            return;
        }
        if (fileNames.size() == 0) {
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());
            writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);
            return;
        }
        String suffix = arguments.getVariant();
        if (suffix == null) {
            suffix = ""_pseudo"";
        } else {
            suffix = ""_"" + suffix;
        }
        for (String fileName : fileNames) {
            File file = new File(fileName);
            if (!file.exists()) {
                System.err.println(""File "" + fileName + "" not found"");
                continue;
            }
            int lastDot = fileName.lastIndexOf('.');
            String extension;
            String outFileName;
            if (lastDot >= 0) {
                extension = fileName.substring(lastDot + 1);
                outFileName = fileName.substring(0, lastDot) + suffix + ""."" + extension;
            } else {
                extension = """";
                outFileName = fileName + suffix;
            }
            System.out.println(""Processing "" + fileName + "" into "" + outFileName);
            String fileType = arguments.getType();
            if (fileType == null) {
                fileType = extension;
            }
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);
            InputStream inputStream = new FileInputStream(file);
            List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);
            OutputStream outputStream = new FileOutputStream(new File(outFileName));
            writeMessages(msgCat, processedMessages, outputStream);
        }
    }
",1314,"    @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String chararsset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) chararsset = fieldValueItem.getValue();
            if (chararsset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) chararsset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = chararsset == null;
        if (charsetWasNull) chararsset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, chararsset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(chararsset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(chararsset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) chararsset = contentTypeCharset; else chararsset = htmlProvider.getMetaCharset();
            if (chararsset != null) htmlProvider = findBestProvider(chararsset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.chararsset, chararsset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"parseContent,streamLimiter,forcedLang,charset,sourceDocument,fieldValueItem,charsetWasNull,writer,htmlProvider,contentType,contentTypeCharset","parseContent:0.01971834897994995,streamLimiter:-0.003020763397216797,forcedLang:-0.001120924949645996,charset:0.16241687536239624,sourceDocument:0.016778290271759033,fieldValueItem:0.000965118408203125,charsetWasNull:-0.15348339080810547,writer:0.00023412704467773438,htmlProvider:0.12904781103134155,contentType:0.03612089157104492,contentTypeCharset:-0.16717195510864258,",1,15,0,"charset:chararsset,",0,Greedy,186,0.08259092569351197,replace,[]
527,"    private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {
        HttpURLConnection urlConn = null;
        try {
            String params = generatorParamString(parameters);
            URL url = new URL(reqUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setRequestMethod(""POST"");
            urlConn.setConnectTimeout(5000);
            urlConn.setReadTimeout(5000);
            urlConn.setDoOutput(true);
            byte[] b = params.getBytes();
            urlConn.getOutputStream().write(b, 0, b.length);
            urlConn.getOutputStream().flush();
            urlConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return urlConn;
    }
 <SPLIT>     public static String generateHash(String key) {
        key += ""use_your_key_here"";
        MessageDigest md;
        try {
            md = java.security.MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            StringBuffer buff = new StringBuffer();
            for (int l = 0; l < bytes.length; l++) {
                String hx = Integer.toHexString(0xFF & bytes[l]);
                if (hx.length() == 1) buff.append(""0"");
                buff.append(hx);
            }
            return buff.toString().trim();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"sendPost,reqUrl,parameters,urlConn,params,url,b",,5,18,0,,0,GA,2856,1.0611105958620708,failed,[';Sendpost = 0']
528,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     public Bitmap retrieveBitmap(String urlString) {
        Log.d(Constants.LOG_TAG, ""making HTTP trip for image:"" + urlString);
        Bitmap bitmap = null;
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            bitmap = BitmapFactory.decodeStream(conn.getInputStream());
        } catch (MalformedURLException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, malformed URL"", e);
        } catch (IOException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, IO error"", e);
        }
        return bitmap;
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,4,14,0,,0,GA,2006,0.7569515864054362,failed,"[';connect = 0', ';print(connect)', ';status = 0', ';isConnected = 0', ';close = 0', ';socket = 0', ';output = 0', ';Status = 0', ';address = 0']"
529,"    @ActionMethod
    public void list() throws IOException {
        final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/list?version=1000"");
        final HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
        final InputStream in = con.getInputStream();
        final byte[] buf = new byte[4096];
        textArea.setText("""");
        for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) {
            textArea.append(new String(buf, 0, bytesRead));
        }
    }
 <SPLIT>     @Override
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        boolean askRestart = false;
        if (cmd == null) return;
        if (cmd.equals(""GRAPHVIZ"")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter(""exe""));
            chooser.setDialogTitle(""Open exe file"");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, ""GRAPHVIZ"", """");
                graphVizPath.setText("""");
                owner.mToolsAuxGraphviz.setEnabled(false);
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, ""GRAPHVIZ"", """");
                graphVizPath.setText("""");
                owner.mToolsAuxGraphviz.setEnabled(false);
                return;
            }
            Suku.kontroller.putPref(owner, ""GRAPHVIZ"", filename);
            graphVizPath.setText(filename);
            owner.mToolsAuxGraphviz.setEnabled(true);
        }
        if (cmd.equals(""IMAGEMAGICK"")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter(""exe""));
            chooser.setDialogTitle(""Open exe file"");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, ""IMAGEMAGICK"", """");
                imageMagickPath.setText("""");
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, ""IMAGEMAGICK"", """");
                imageMagickPath.setText("""");
                return;
            }
            Suku.kontroller.putPref(owner, ""IMAGEMAGICK"", filename);
            imageMagickPath.setText(filename);
        }
        if (cmd.equals(""FINFAMILY.XLS"")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter(""xls""));
            chooser.setDialogTitle(""Open xls file"");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, ""FINFAMILY.XLS"", """");
                excelPath.setText("""");
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, ""FINFAMILY.XLS"", """");
                excelPath.setText("""");
                return;
            }
            Suku.kontroller.putPref(owner, ""FINFAMILY.XLS"", filename);
            excelPath.setText(filename);
            missingKeys = checkForMissingNames(filename);
        }
        if (cmd.equals(Resurses.OK)) {
            String newPath = Suku.kontroller.getPref(owner, ""FINFAMILY.XLS"", """");
            if (!newPath.equals(exPath)) {
                askRestart = true;
                Suku.setFinFamilyXls(newPath);
            }
            String input = (String) serverUrl.getSelectedItem();
            if (input == null) {
                input = """";
            }
            if (input.isEmpty()) {
                Suku.kontroller.putPref(owner, ""SERVERURL"", """");
                if (!originUrl.isEmpty()) {
                    askRestart = true;
                }
            } else {
                URL url;
                String resp = null;
                try {
                    url = new URL(input + ""SukuServlet"");
                    HttpURLConnection uc = (HttpURLConnection) url.openConnection();
                    int resu = uc.getResponseCode();
                    if (resu == 200) {
                        byte buff[] = new byte[1024];
                        InputStream in = uc.getInputStream();
                        int len = in.read(buff);
                        resp = new String(buff, 0, len);
                        uc.disconnect();
                    }
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
                if (resp != null && resp.toLowerCase().startsWith(""finfamily"")) {
                    Suku.kontroller.putPref(owner, ""SERVERURL"", input);
                    if (!input.equals(originUrl)) {
                        askRestart = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, Resurses.getString(""SERVER_ERROR""), Resurses.getString(Resurses.SUKU), JOptionPane.ERROR_MESSAGE);
                }
            }
            int newLoca = loca.getSelectedIndex();
            Suku.kontroller.putPref(owner, Resurses.LOCALE, locas[newLoca]);
            if (!originLanguage.equals(locas[newLoca])) {
                askRestart = true;
            }
            int newLang = repolang.getSelectedIndex();
            if (newLang >= 0) {
                Suku.kontroller.putPref(owner, Resurses.REPOLANG, Suku.getRepoLanguage(newLang, true));
                Resurses.setLanguage(Suku.getRepoLanguage(newLang, true));
            }
            int imageScaler = imageScaling.getSelectedIndex();
            Suku.kontroller.putPref(owner, ""SCALE_IMAGE"", """" + imageScaler);
            owner.setImageScalerIndex(imageScaler);
            int seleId = defaultCountryCode.getSelectedIndex();
            if (seleId >= 0) {
                selectedCc = ccodes[seleId];
            }
            try {
                Resurses.setDefaultCountry(selectedCc);
            } catch (SukuException e1) {
                owner.setStatus(e1.getMessage());
            }
            int newDateIndex = dateFormat.getSelectedIndex();
            Suku.kontroller.putPref(owner, Resurses.DATEFORMAT, dateCodes[newDateIndex]);
            Resurses.setDateFormat(dateCodes[newDateIndex]);
            Utils.resetSukuModel();
            boolean openStreetMap = useOpenStreetMap.isSelected();
            Suku.kontroller.putPref(owner, ""USE_OPEN_STREETMAP"", """" + openStreetMap);
            String fntSize = dbFontSize.getText();
            Suku.kontroller.putPref(owner, ""DB_VIEW_FONTSIZE"", fntSize);
            String lf = lfNames[lookAndFeel.getSelectedIndex()];
            Suku.kontroller.putPref(owner, ""LOOK_AND_FEEL"", lf);
            int lfIdx = -1;
            for (int i = 0; i < lafInfo.length; i++) {
                if (lafInfo[i].getName().equalsIgnoreCase(lf)) {
                    lfIdx = i;
                    break;
                }
            }
            try {
                if (lfIdx < 0) {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } else {
                    UIManager.setLookAndFeel(lafInfo[lfIdx].getClassName());
                }
                SwingUtilities.updateComponentTreeUI(owner);
            } catch (Exception e1) {
                logger.log(Level.WARNING, ""look_and_feel"", e1);
            }
            setVisible(false);
            if (askRestart) {
                if (missingKeys != null && !missingKeys.isEmpty()) {
                    SukuPad pad = new SukuPad(this, missingKeys);
                    pad.setVisible(true);
                }
                JOptionPane.showMessageDialog(this, Resurses.getString(""RESTART_FINFAMILY""), Resurses.getString(Resurses.SUKU), JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
",139,"    @ActionMethod
    public void list() throws IOException {
        final URL file = new URL(""http://127.0.0.1:"" + testPort + ""/list?version=1000"");
        final HttpURLConnection con = (HttpURLConnection) file.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
        final InputStream ins = con.getInputStream();
        final byte[] buf = new byte[4096];
        textArea.setText("""");
        for (int wordsread; (wordsread = ins.read(buf)) != -1; ) {
            textArea.append(new String(buf, 0, wordsread));
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"list,url,con,in,buf,bytesRead","list:-0.00013655424118041992,url:0.0004202127456665039,con:-0.0008905529975891113,in:-2.658367156982422e-05,buf:-0.0009504556655883789,bytesRead:0.00033867359161376953,",3,7,0,"url:file,bytesRead:wordsread,in:ins,",0,Greedy,134,0.05449350674947103,replace,[]
530,"    public void removeRealm(final List<Integer> realmIds) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));
                    Iterator<Integer> iter = realmIds.iterator();
                    int realmId;
                    while (iter.hasNext()) {
                        realmId = iter.next();
                        psImpl.setInt(1, realmId);
                        psImpl.executeUpdate();
                        cmDB.removeRealm(realmId);
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",202,,LABEL_0,LABEL_0,LABEL_0,-1,"removeRealm,realmIds,psImpl,iter,realmId",,5,14,0,,0,GA,2490,0.9405151645342509,failed,"[';removeRelam = 0', ';deleteRealam = 0', ';print(deleteRealam)', ';deleteRealm = 0', ';removeBroadms = 0', ';deleteRealms = 0', ';realmPathids = 0', ';realmByIdes = 0', ';realmIntes = 0', ';realmPathos = 0', ';realmIdids = 0', ';realMIdids = 0', '; psIter = 0', ';line = 0', ';ler = 0', ';next = 0', ';loop = 0', ';izer = 0', ';reader = 0', ';print(reader)', ';print(ner)', ';print(inc)', ';ir = 0', ';print(ir)', ';page = 0', ';print(page)', ';ator = 0', ';print(ator)', ';iterator = 0', ';print(iterator)', ';Iter = 0', ';init = 0', ';cher = 0', ';parse = 0', ';err = 0', ';list = 0', ';realmOffset = 0', ';realmnOffset = 0', ';ironmaId = 0', ';realdmConfig = 0', ';realmInt = 0', ';realmPath = 0', ';print(realmPath)', ';realmsName = 0', ';print(realmsName)', ';print(workmNum)', ';print(realmeId)', ';print(realmid)', ';print(ironmRef)', ';print(ironmID)', ';print( realmOffset)', ';print(realmID)', ';print(workmId)', ';print(workfID)', ';print(workfid)', ';print(realmnHash)', ';print(workmid)', ';print(realarmName)', ';print(realrmRef)']"
531,"    public static void copy(File sourceFile, File destinationFile) {
        try {
            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {
                System.out.println(""sourceFile & destinationFile is null"");
                System.exit(-1);
            }
            if (sourceFile.isDirectory()) {
                File[] tmp = sourceFile.listFiles();
                File f;
                for (int i = 0; i < tmp.length; i++) {
                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());
                    f.getParentFile().mkdirs();
                    copy(tmp[i], f);
                }
            } else {
                System.out.println(""\nCopy from: "" + sourceFile + ""\n\n     to: "" + destinationFile);
                FileChannel source = new FileInputStream(sourceFile).getChannel();
                FileChannel destination = new FileOutputStream(destinationFile).getChannel();
                destination.transferFrom(source, 0, source.size());
                source.close();
                destination.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,tmp,f,i,source,destination",,8,37,0,,0,GA,3617,1.3799617687861125,failed,[]
532,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
 <SPLIT>     protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = new FileInputStream(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                int count;
                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
",370,"    public static void main(String[] argumentv) {
        if (1 < argumentv.length) {
            File[] sources = Source(argumentv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argumentv);
                    if (null != targets) {
                        final long rscln = src.length();
                        try {
                            FileChannel url = new FileInputStream(src).getChannel();
                            try {
                                for (File hgz : targets) {
                                    FileChannel url = new FileOutputStream(hgz).getChannel();
                                    try {
                                        url.transferTo(0L, rscln, url);
                                    } finally {
                                        url.close();
                                    }
                                    System.out.printf(""Updated %s
"", hgz.getPath());
                                    File[] desires = Delete(src, hgz);
                                    if (null != desires) {
                                        for (File del : desires) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(hgz);
                                }
                            } finally {
                                url.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'
"", argumentv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
;argv = 0;print(argv);sources = 0;deletes = 0; argV = 0;psresources = 0;statources = 0;print(psource);sors = 0; sors = 0; tokens = 0; tokencies = 0; srplength = 0;copy = 0",LABEL_1,LABEL_1,LABEL_1,1,"argv,sources,targets,srclen,source,tgt,target,deletes,del","argv:-0.0004093050956726074,sources:0.006989598274230957,targets:0.002063751220703125,srclen:0.00033223628997802734,source:-0.01266932487487793,tgt:-0.0021424293518066406,target:-0.0032171010971069336,deletes:-0.000767052173614502,del:0.006089985370635986,",6,21,0,"sources:sources,del:del,targets:targets,srclen:rscln,argv:argumentv,deletes:desires,tgt:hgz,target:url,source:url,",0,Greedy,847,0.33678086996078493,inesrt,"[';argv = 0', ';print(argv)', ';sources = 0', ';deletes = 0', '; argV = 0', ';psresources = 0', ';statources = 0', ';print(psource)', ';sors = 0', '; sors = 0', '; tokens = 0', '; tokencies = 0', '; srplength = 0', ';copy = 0']"
533,"    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File in = null;
        String dest = output;
        if (input.equals(STDIN)) {
            try {
                in = File.createTempFile(""tmp"", "".jp2"");
                input = in.getAbsolutePath();
                in.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), in);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(input, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            try {
                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));
                w.write(bi, os);
                os.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + dest);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + dest);
                throw new DjatokaException(e);
            }
        }
        if (in != null) in.delete();
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",289,"    public void extractImage(String url, String file, DjatokaDecodeParam photos, IWriter w) throws DjatokaException {
        File img = null;
        String route = file;
        if (url.equals(STDIN)) {
            try {
                img = File.createTempFile(""tmp"", "".jp2"");
                url = img.getAbsolutePath();
                img.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), img);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(url, photos);
        if (bi != null) {
            if (photos.getScalingFactor() != 1.0 || photos.getScalingDimensions() != null) bi = applyScaling(bi, photos);
            if (photos.getTransform() != null) bi = photos.getTransform().run(bi);
            try {
                BufferedOutputStream pos = new BufferedOutputStream(new FileOutputStream(new File(route)));
                w.write(bi, pos);
                pos.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + route);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + route);
                throw new DjatokaException(e);
            }
        }
        if (img != null) img.delete();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"extractImage,input,output,params,w,in,dest,bi,os","extractImage:-0.006173908710479736,input:-0.0013173222541809082,output:0.000982046127319336,params:3.5822391510009766e-05,w:-0.008994340896606445,in:0.005554854869842529,dest:0.0014209151268005371,bi:-0.02469635009765625,os:0.0009521245956420898,",6,27,0,"in:img,dest:route,output:file,os:pos,params:photos,input:url,",0,Greedy,365,0.13580698966979982,replace,[]
534,"    public InputStream retrieveStream(String url) {
        HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse getResponse = getClient().execute(getRequest);
            final int statusCode = getResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(getClass().getSimpleName(), ""Error "" + statusCode + "" for URL "" + url);
                return null;
            }
            HttpEntity getResponseEntity = getResponse.getEntity();
            return getResponseEntity.getContent();
        } catch (Exception e) {
            getRequest.abort();
            Log.w(getClass().getSimpleName(), ""Error for URL "" + url, e);
        }
        return null;
    }
 <SPLIT>     public static byte[] getSystemStateHash() {
        MessageDigest sha1;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
        } catch (Exception e) {
            throw new Error(""Error in RandomSeed, no sha1 hash"");
        }
        sha1.update((byte) System.currentTimeMillis());
        sha1.update((byte) Runtime.getRuntime().totalMemory());
        sha1.update((byte) Runtime.getRuntime().freeMemory());
        sha1.update(stackDump(new Throwable()));
        try {
            Properties props = System.getProperties();
            Enumeration names = props.propertyNames();
            while (names.hasMoreElements()) {
                String name = (String) names.nextElement();
                sha1.update(name.getBytes());
                sha1.update(props.getProperty(name).getBytes());
            }
        } catch (Throwable t) {
            sha1.update(stackDump(t));
        }
        sha1.update((byte) System.currentTimeMillis());
        try {
            sha1.update(InetAddress.getLocalHost().toString().getBytes());
        } catch (Throwable t) {
            sha1.update(stackDump(t));
        }
        sha1.update((byte) System.currentTimeMillis());
        Runtime.getRuntime().gc();
        sha1.update((byte) Runtime.getRuntime().freeMemory());
        sha1.update((byte) System.currentTimeMillis());
        return sha1.digest();
    }
",139,,LABEL_0,LABEL_0,LABEL_0,-1,"retrieveStream,url,getRequest,getResponse,statusCode,getResponseEntity",,5,15,0,,0,GA,2649,0.9822701533635457,failed,[]
535,"    public boolean getContent(String userId, String latestMsgId) {
        try {
            String targetUrl = ""http://api.fanfou.com/statuses/user_timeline.xml?id="" + userId + ""&since_id="" + latestMsgId;
            URL url = new URL(targetUrl);
            InputStream in = url.openStream();
            ArrayList<MessageObj> list;
            if (in != null) {
                MessageListDOMParser parser = new MessageListDOMParser();
                list = (ArrayList<MessageObj>) parser.parseXML(in);
                TransactionDAO dao = new TransactionDAO();
                dao.insert(list);
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
 <SPLIT>     public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession session = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (mapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            session.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                session.setAttribute(""classifyResult"", ccBean);
                session.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (mapping.findForward(status));
    }
",120,,LABEL_0,LABEL_0,LABEL_0,-1,"getContent,userId,latestMsgId,targetUrl,url,in,list,parser,dao",,9,19,0,,0,GA,3698,1.4594983418782552,failed,"[';print(getContent)', ';userId = 0', ';targetUrl = 0', ';print(targetUrl)', ';print(latestMsgTime)']"
536,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
 <SPLIT>     private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",156,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,srcFile,destFile,in,out,buffer,no",,7,23,0,,0,GA,3168,1.1625045816103616,failed,"[';in = 0', ';print(in)', ';print(destFilename)', ';print(inationFilename)', ';stdfile = 0', ';print(stdfile)', ';print(endPath)', ';print(targetFilename)', ';print(endFilename)', ';wave = 0', ';print(wave)']"
537,"    @Test(expected = GadgetException.class)
    public void malformedGadgetSpecIsCachedAndThrows() throws Exception {
        HttpRequest request = createCacheableRequest();
        expect(pipeline.execute(request)).andReturn(new HttpResponse(""malformed junk"")).once();
        replay(pipeline);
        try {
            specFactory.getGadgetSpec(createContext(SPEC_URL, false));
            fail(""No exception thrown on bad parse"");
        } catch (GadgetException e) {
        }
        specFactory.getGadgetSpec(createContext(SPEC_URL, false));
    }
 <SPLIT>     private static void loadDefaultPreferences() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.defaults.properties"");
            preferences.load(url.openStream());
        } catch (FileNotFoundException e) {
            log.error(""Default preferences file not found"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"malformedGadgetSpecIsCachedAndThrows,request",,2,3,0,,0,GA,924,0.33439757029215494,failed,"[';malformedGadgetSpecIsCachedAndThrows = 0', ';print(server)', ';print(report)']"
538,"    public byte[] getBytesFromUrl(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toByteArray(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     public void loadExistingAntlibs(ClassLoader classLoader) {
        URL antlibUrl;
        URI antlibUri;
        try {
            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                InputStream stream = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, ""UTF-8""));
                for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                    String pkg = line.trim();
                    URI uri = URI.create(""antlib:"" + pkg);
                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? """" : ""/"") + ""antlib.xml"");
                    antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);
                    try {
                        antlibUrl = antlibUri.toURL();
                    } catch (IllegalArgumentException e) {
                        System.err.println(""base uri: "" + url);
                        System.err.println(""relativepath: "" + resource2antlib);
                        System.err.println(""target uri: "" + antlibUri);
                        throw new RuntimeException(antlibUri.toString(), e);
                    }
                    loadAntLib(antlibUrl, uri);
                }
                reader.close();
                stream.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
",96,,LABEL_0,LABEL_0,LABEL_0,-1,"getBytesFromUrl,url,get,response,entity",,3,6,0,,0,GA,2243,0.8296504298845927,failed,"[';getBytesFromUrl = 0', ';url = 0', ';get = 0', ';response = 0', ';entity = 0', ';getBytesfromString = 0']"
539,"    protected static Parser buildParser(URL url) throws IOException, ParserException {
        Parser parser;
        URLConnection connection = openConnection(url);
        if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {
            parser = new Parser(connection);
        } else {
            parser = null;
        }
        return parser;
    }
 <SPLIT>     private void updateFile(File file) throws FileNotFoundException, IOException {
        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!destFile.exists()) {
                destFile.getParentFile().mkdirs();
                destFile.createNewFile();
            }
            in = new FileInputStream(file).getChannel();
            out = new FileOutputStream(destFile).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (out != null) out.close();
            if (in != null) in.close();
        }
    }
",69,"    protected static Parser buildHandler(URL path) throws IOException, SSLExc {
        Parser class;
        URLConnection application = openConnection(path);
        if (!(application instanceof HttpURLConnection) || ((HttpURLConnection) application).getResponseCode() == 200) {
            class = new Parser(application);
        } else {
            class = null;
        }
        return class;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"buildParser,url,ParserException,parser,connection","buildParser:-0.0027881264686584473,url:-0.003300309181213379,ParserException:0.00018990039825439453,parser:0.010440051555633545,connection:0.0006078481674194336,",5,12,0,"parser:class,connection:application,ParserException:SSLExc,buildParser:buildHandler,url:path,",0,Greedy,182,0.06455148458480835,replace,[]
540,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
 <SPLIT>     private void extractZipFile(String filename, JTextPane progressText) throws IOException {
        String destinationname = """";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(filename));
        while ((zipentry = zipinputstream.getNextEntry()) != null) {
            String entryName = zipentry.getName();
            if (progressText != null) {
                progressText.setText(""extracting "" + entryName);
            }
            int n;
            FileOutputStream fileoutputstream;
            if (zipentry.isDirectory()) {
                (new File(destinationname + entryName)).mkdir();
                continue;
            }
            fileoutputstream = new FileOutputStream(destinationname + entryName);
            while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
            fileoutputstream.close();
            zipinputstream.closeEntry();
        }
        if (progressText != null) {
            progressText.setText(""Files extracted"");
        }
        zipinputstream.close();
    }
",839,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest url, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(url);
            Mail mailInstance = getMailInstance(url);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(url);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(url);
                Send sendInstance = getSendInstance(url);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    url.setAttribute(""action"", ""compose"");
                } else {
                    url.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                url.setAttribute(""exception"", ""The form is null"");
                url.setAttribute(""newLocation"", null);
                doTrace(url, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            url.setAttribute(""exception"", errorMessage);
            doTrace(url, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(url, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(url, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doExecute,mapping,form,request,response,errors,isMultipart,mailInstance,fields,attachments,items,iter,item,aux,part,baos,body,preferencesInstance","doExecute:-0.014151930809020996,mapping:0.07546395063400269,form:0.15714174509048462,request:0.6052727103233337,response:0.03837305307388306,errors:0.10209894180297852,isMultipart:0.008002817630767822,mailInstance:0.06138920783996582,fields:0.5623016357421875,attachments:0.11868643760681152,items:0.07753556966781616,iter:0.11158555746078491,item:0.42472726106643677,aux:0.11617761850357056,part:0.27126455307006836,baos:0.09243571758270264,body:0.13956010341644287,preferencesInstance:0.03828155994415283,",1,15,0,"request:url,",0,Greedy,151,0.058506206671396895,replace,[]
541,"    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
 <SPLIT>     private JSONObject executeHttpGet(String uri) throws Exception {
        HttpGet req = new HttpGet(uri);
        HttpClient client = new DefaultHttpClient();
        HttpResponse resLogin = client.execute(req);
        BufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));
        StringBuilder sb = new StringBuilder();
        String s = null;
        while ((s = r.readLine()) != null) {
            sb.append(s);
        }
        return new JSONObject(sb.toString());
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"getMessageDigest,digest,node,external,messageDigest",,5,14,0,,0,GA,2361,0.8681886672973633,failed,"[';getMessageDigest = 0', ';print(getMessageDigest)', ';digest = 0', ';node = 0', ';external = 0', ';messageDigest = 0', ';getmessageDigests = 0', ';getMessageHashature = 0', ';digiter = 0', ';reference = 0']"
542,"    public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
 <SPLIT>     @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
",322,,LABEL_0,LABEL_0,LABEL_0,-1,"getWebByUrl,strUrl,charset,fileIndex,url,conn,is,filePath,pw,fos,writer,bReader,sb,rLine,tmp_rLine,str_len",,16,50,0,,0,GA,7017,2.644122819105784,failed,[]
543,"    public void load(String url) throws IOException {
        this.url = url;
        int col = url.indexOf(':');
        if (col > 1 && col < 5) {
            load(new URL(url).openStream());
        } else {
            if (new File(url).exists()) {
                System.out.println(""Loading JAD from file : "" + url);
                FileInputStream fin = new FileInputStream(url);
                try {
                    load(fin);
                } finally {
                    fin.close();
                }
            } else {
                InputStream in = getClass().getResourceAsStream(url);
                if (in != null) {
                    System.out.println(""Loading JAD from classpath : "" + url);
                    load(in);
                } else {
                    throw new IOException(""\"""" + url + ""\"" was found in file system or classpath"");
                }
            }
        }
    }
 <SPLIT>     public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
",169,,LABEL_0,LABEL_0,LABEL_0,-1,"load,url,col,fin,in",,5,25,0,,0,GA,2545,0.9388803402582805,failed,[]
544,"    public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",67,,LABEL_0,LABEL_0,LABEL_0,-1,"pageAddress,url,in,inputLine",,4,11,0,,0,GA,1858,0.6832226554552714,failed,[';print(in)']
545,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",68,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,2236,0.8076032320658366,failed,"[';base = 0', ';buffer = 0', ';parent = 0', ';name = 0', ';string = 0', ';prefix = 0']"
546,"    public static DigitalObjectContent byReference(final InputStream inputStream) {
        try {
            File tempFile = File.createTempFile(""tempContent"", ""tmp"");
            tempFile.deleteOnExit();
            FileOutputStream out = new FileOutputStream(tempFile);
            IOUtils.copyLarge(inputStream, out);
            out.close();
            return new ImmutableContent(tempFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new IllegalStateException(""Could not create content for input stream: "" + inputStream);
    }
 <SPLIT>     protected File getFile() throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", getFilePrefix());
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"byReference,inputStream,tempFile,out",,4,11,0,,0,GA,1788,0.6516147534052531,failed,"[';byReference = 0', ';inputStream = 0', ';tempFile = 0', ';ofReference = 0', ';toReference = 0', ';InputObject = 0', ';outputString = 0', ';InputString = 0']"
547,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",101,"    public static int[] ubblingsort(int... work) {
        boolean Swap;
        do {
            Swap = false;
            for (int module = 0; module < work.length - 1; module++) {
                if (work[module] > work[module + 1]) {
                    int opp = work[module];
                    work[module] = work[module + 1];
                    work[module + 1] = opp;
                    Swap = true;
                }
            }
        } while (Swap);
        return work;
    }
;au = 0;print(ata);print(another);print(area);sup = 0;print(fi);print(next);print(qi);ip = 0",LABEL_0,LABEL_0,LABEL_0,1,"bubbleSort,a,swapped,i,tmp","bubbleSort:0.057962000370025635,a:-0.0007004737854003906,swapped:-0.002331554889678955,i:0.0006887316703796387,tmp:-0.0002587437629699707,",5,25,0,"bubbleSort:ubblingsort,i:module,tmp:opp,a:work,swapped:Swap,",0,Greedy,534,0.20731752316157023,inesrt,"[';au = 0', ';print(ata)', ';print(another)', ';print(area)', ';sup = 0', ';print(fi)', ';print(next)', ';print(qi)', ';ip = 0']"
548,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",108,"    public static void transferfile(File source, File dest) throws IOException {
        FileChannel url = null, url = null;
        try {
            url = new FileInputStream(source).getChannel();
            url = new FileOutputStream(dest).getChannel();
            url.transferTo(0, url.size(), url);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (url != null) url.close();
            if (url != null) url.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,source,dest,in,out","copyFile:0.00026929378509521484,source:4.863739013671875e-05,dest:1.6808509826660156e-05,in:0.0002740621566772461,out:0.0002841353416442871,",3,12,0,"out:url,in:url,copyFile:transferfile,",0,Greedy,149,0.05288058121999105,replace,[]
549,"    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream in = new FileInputStream(args[0]);
            int length;
            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);
            in.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
 <SPLIT>     private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
",206,"    public static void main(String[] args) {
        if (args.pull != 1) {
            System.url.println(""Usage: GZip source"");
            return;
        }
        String fileName = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream url = new FileOutputStream(fileName);
            zipout = new GZIPOutputStream(url);
        } catch (IOException e) {
            System.url.println(""Couldn't create "" + fileName + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream login = new FileInputStream(args[0]);
            int pull;
            while ((pull = login.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, pull);
            login.close();
        } catch (IOException e) {
            System.url.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"zipname,zipout,out,buffer,in,length","zipname:0.002261817455291748,zipout:-0.0032625794410705566,out:0.010106861591339111,buffer:-0.007960319519042969,in:0.0026296377182006836,length:0.006231784820556641,",4,15,0,"out:url,length:pull,in:login,zipname:fileName,",0,Greedy,228,0.08220072189966837,replace,[]
550,"    private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
 <SPLIT>     public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",138,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFileTo,destination,srcChannel,destChannel",,4,14,0,,0,GA,1289,0.503083324432373,failed,"[';copyFileTo = 0', ';print(copyFileTo)', ';destination = 0', ';srcChannel = 0', ';destChannel = 0', ';copyChannelTO = 0', '; copyFileFrom = 0', ';copyfileFrom = 0', '; copyfileFrom = 0', ';copyChannelFrom = 0', ';separinator = 0', ';separination = 0', ';targetinations = 0', ';targetruction = 0', ';targetinate = 0', ';rcContext = 0']"
551,"    @Override
    public EntrySet read(EntrySet set) throws ReadFailedException {
        if (!SourceCache.contains(url)) {
            SSL.certify(url);
            try {
                super.setParser(Parser.detectParser(url.openStream()));
                final PipedInputStream in = new PipedInputStream();
                final PipedOutputStream forParser = new PipedOutputStream(in);
                new Thread(new Runnable() {

                    public void run() {
                        try {
                            OutputStream out = SourceCache.startCaching(url);
                            InputStream is = url.openStream();
                            byte[] buffer = new byte[100000];
                            while (true) {
                                int amountRead = is.read(buffer);
                                if (amountRead == -1) {
                                    break;
                                }
                                forParser.write(buffer, 0, amountRead);
                                out.write(buffer, 0, amountRead);
                            }
                            forParser.close();
                            out.close();
                            SourceCache.finish(url);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }).start();
                super.setIos(in);
            } catch (Exception e) {
                throw new ReadFailedException(e);
            }
            return super.read(set);
        } else {
            try {
                return SourceCache.get(url).read(set);
            } catch (IOException e) {
                throw new ReadFailedException(e);
            }
        }
    }
 <SPLIT>         private long getSize(String url) throws ClientProtocolException, IOException {
            url = normalizeUrl(url);
            Log.i(LOG_TAG, ""Head "" + url);
            HttpHead httpGet = new HttpHead(url);
            HttpResponse response = mHttpClient.execute(httpGet);
            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                throw new IOException(""Unexpected Http status code "" + response.getStatusLine().getStatusCode());
            }
            Header[] clHeaders = response.getHeaders(""Content-Length"");
            if (clHeaders.length > 0) {
                Header header = clHeaders[0];
                return Long.parseLong(header.getValue());
            }
            return -1;
        }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"read,set,in,forParser,out,is,buffer,amountRead",,5,16,0,,0,GA,3720,1.3986059506734212,failed,"[';read = 0', ';print(read)', ';set = 0', ';print(set)', ';in = 0', ';print(in)', ';forParser = 0', ';out = 0', ';amountRead = 0', ';index = 0', ';copy = 0', ';add = 0', ';current = 0', ';socket = 0', ';find = 0', ';type = 0', ';withFile = 0', ';forFile = 0', ';output = 0', ';copy = 0', ';ex = 0', ';socket = 0', ';address = 0', '; numberWrite = 0']"
552,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
 <SPLIT>     public void run() {
        RandomAccessFile file = null;
        InputStream stream = null;
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""Range"", ""bytes="" + downloaded + ""-"");
            connection.connect();
            if (connection.getResponseCode() / 100 != 2) {
                error();
            }
            int contentLength = connection.getContentLength();
            if (contentLength < 1) {
                error();
            }
            if (size == -1) {
                size = contentLength;
                stateChanged();
            }
            file = new RandomAccessFile(destination, ""rw"");
            file.seek(downloaded);
            stream = connection.getInputStream();
            while (status == DOWNLOADING) {
                byte buffer[];
                if (size - downloaded > MAX_BUFFER_SIZE) {
                    buffer = new byte[MAX_BUFFER_SIZE];
                } else {
                    buffer = new byte[size - downloaded];
                }
                int read = stream.read(buffer);
                if (read == -1) break;
                file.write(buffer, 0, read);
                downloaded += read;
                stateChanged();
            }
            if (status == DOWNLOADING) {
                status = COMPLETE;
                stateChanged();
            }
        } catch (Exception e) {
            error();
        } finally {
            if (file != null) {
                try {
                    file.close();
                } catch (Exception e) {
                }
            }
            if (stream != null) {
                try {
                    stream.close();
                } catch (Exception e) {
                }
            }
        }
    }
",142,,LABEL_0,LABEL_0,LABEL_0,-1,"readPage,ignoreComments,in,inputLine,html",,5,20,0,,0,GA,2245,0.8431861917177836,failed,"[';readPage = 0', ';print(readPage)', ';ignoreComments = 0', ';in = 0', ';inputLine = 0', ';readPages = 0', ';findPage = 0', ';findPages = 0', ';includeTags = 0']"
553,"    public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",604,,LABEL_0,LABEL_1,,-4,"copyFile,source_name,dest_name,source_file,destination_file,source,destination,buffer,bytes_read,in,response,parentdir",,,,0,,0,Greedy,1,0.0007718801498413086,,[]
554,"    private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {
        StringBuilder pageHTML = new StringBuilder();
        HttpURLConnection connection = null;
        try {
            URL url = new URL(pageURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""MSIE 7.0"");
            connection.connect();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));
            String line = null;
            while ((line = br.readLine()) != null) {
                pageHTML.append(line);
                pageHTML.append(""\r\n"");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            connection.disconnect();
        }
        if (dirPath != null) {
            File file = new File(dirPath);
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
            bufferedWriter.write(pageHTML.toString());
            bufferedWriter.close();
        }
        return pageHTML.toString();
    }
 <SPLIT>     private String retrieveTemplate() throws Exception {
        if (cachedTemplate == null) {
            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());
            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            final StringBuilder result = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
            in.close();
            cachedTemplate = result.toString();
        }
        return cachedTemplate;
    }
",206,,LABEL_1,LABEL_1,LABEL_1,-1,"getHTML,pageURL,encoding,dirPath,pageHTML,connection,url,br,line,e,file,bufferedWriter",,0,0,0,,0,GA,5411,2.0008940656979877,failed,[]
555,"    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""arguments: sourcefile destfile"");
            System.exit(1);
        }
        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);
        while (in.read(buffer) != -1) {
            buffer.flip();
            out.write(buffer);
            buffer.clear();
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",117,,LABEL_1,LABEL_1,LABEL_1,-1,"in,out,buffer",,3,10,0,,0,GA,1508,0.587110960483551,failed,"[';in = 0', ';print(in)', ';out = 0']"
556,"    public static String generateHash(String key) {
        key += ""use_your_key_here"";
        MessageDigest md;
        try {
            md = java.security.MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            StringBuffer buff = new StringBuffer();
            for (int l = 0; l < bytes.length; l++) {
                String hx = Integer.toHexString(0xFF & bytes[l]);
                if (hx.length() == 1) buff.append(""0"");
                buff.append(hx);
            }
            return buff.toString().trim();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     private void setProfile(String loginName, SimpleUserProfile profile) throws MM4UCannotStoreUserProfileException {
        try {
            OutputStream outStream = null;
            URL url = new URL(this.profileURI + profile.getID() + FILE_SUFFIX);
            if (url.getProtocol().equals(""file"")) {
                File file = new File(url.getFile());
                outStream = new FileOutputStream(file);
            } else {
                URLConnection connection = url.openConnection();
                connection.setDoOutput(true);
                outStream = connection.getOutputStream();
            }
            OutputStreamWriter writer = new OutputStreamWriter(outStream);
            Enumeration myEnum = profile.keys();
            while (myEnum.hasMoreElements()) {
                String key = myEnum.nextElement().toString();
                if (key != ""id"") writer.write(key + ""="" + profile.getStringValue(key) + System.getProperty(""line.separator""));
            }
            writer.flush();
            writer.close();
        } catch (Exception e) {
            throw new MM4UCannotStoreUserProfileException(this, ""setProfile"", e.toString());
        }
    }
",160,,LABEL_0,LABEL_0,LABEL_0,-1,"generateHash,key,md,bytes,buff,l,hx",,7,23,0,,0,GA,3190,1.1902485807736716,failed,"[';generateHash = 0', ';print(generateHash)', ';key = 0', ';md = 0', ';bytes = 0', ';hx = 0', ';generateKey = 0', ';string = 0', ';address = 0', ';char = 0', ';lines = 0', ';vals = 0', ';values = 0', ';cast = 0', ';length = 0', ';dhex = 0']"
557,"    public static String generateStackHashKey() {
        Exception e = null;
        try {
            throw new Exception();
        } catch (Exception ex) {
            e = ex;
        }
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(getStackTrace(e).getBytes());
            byte[] hash = digest.digest();
            String rtn = Base64.encode(new String(hash));
            if (keys.contains(rtn)) {
                return generatedIterStackHashKey(rtn);
            }
            keys.add(rtn);
            return rtn;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"generateStackHashKey,e,digest,hash,rtn",,5,16,0,,0,GA,2332,0.8530882636706034,failed,[]
558,"    public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
 <SPLIT>     public static ArrayList<String> loadURLToStrings(URL url, int maxLines, String userAgent, int timeout) throws IOException {
        URLConnection connection = url.openConnection();
        if (userAgent != null && userAgent.trim().length() > 0) {
            connection.setRequestProperty(""User-Agent"", userAgent);
        } else {
            connection.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (compatible; astrominer/1.0;)"");
        }
        if (timeout > 0) {
            connection.setConnectTimeout(timeout);
        }
        connection.connect();
        return loadURLToStrings(connection, maxLines);
    }
",168,,LABEL_0,LABEL_0,LABEL_0,-1,"actualizarDatosPrevia,idJugadorDiv,idRonda,idPareoRival,color,flotante,intResult,sql,connection,ps",,2,9,0,,0,GA,4727,1.7568788965543112,failed,"[';actualizarDatosPrevia = 0', ';print(actualizarDatosPrevia)', ';idJugadorDiv = 0', ';idRonda = 0', ';idPareoRival = 0', ';color = 0', ';sql = 0', '; actualizarDatdosPrefil = 0', '; actualizarDatosCalpar = 0', '; actualizarDatos_par = 0', ';idJuggrarRev = 0', ';idTrola = 0', ';idsRhonda = 0', ';idrarta = 0', ';idsRhona = 0', ';idRarta = 0', ';idBraba = 0', ';idPareoRaiv = 0', ';idParelloBrival = 0', ';idPareoBroval = 0', ';idPareoRoval = 0', ';idParelloBrive = 0', ';idPareoBrivalent = 0', ';length = 0']"
559,"    public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",137,,LABEL_1,LABEL_1,LABEL_1,-1,"testReadPerMemberSixSmall,gzin,i,count2,count3,countEnd",,1,2,0,,0,GA,2667,0.9944661339124043,failed,"[';testReadPerMemberSixSmall = 0', ';i = 0', ';print(i)', ';count2 = 0', ';count3 = 0', '; testReadPerMemberFourSquare = 0', '; testReadPermembersixsmall = 0', '; testReadPermembersixSquare = 0', '; testReadPermemberSixSmall = 0', '; testReadPerMemberFoursmall = 0', '; testReadPerMembersixsmall = 0', '; testReadPerMemberFourSmall = 0', '; testReadPerMemberSixsmall = 0', '; testReadPerMembersixSmall = 0', '; testReadPerMemberSixSquare = 0', '; testReadPermembersixSmall = 0', '; testReadPermemberSixSquare = 0', ';print( testReadPermemberSixSquare)', '; testReadPerMembersixSquare = 0', ';zigwith = 0', ';cfgIn = 0', ';syncout = 0', ';gtout = 0', ';wxarin = 0', ';wxIN = 0', ';cfgwith = 0']"
560,"    @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
 <SPLIT>     private void loadDynamically(File result, String extraPath) {
        URL url = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            url = new URL(homeServerUrl + extraPath);
            is = url.openStream();
            fos = new FileOutputStream(result);
            byte[] buff = new byte[8192];
            int nbRead;
            while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);
        } catch (IOException e) {
            throw new StellariumException(""Cannot dynamically load "" + result + "" from "" + url);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
        }
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"test_lookupResourceType_FullSearch_TwoWordsInMiddle,url,connection",,3,9,0,,0,GA,1411,0.5240530411402384,failed,"[';test_lookupResourceType_FullSearch_TwoWordsInMiddle = 0', ';string = 0', ';path = 0', ';address = 0', ';user = 0', ';document = 0', ';location = 0', ';channel = 0', ';position = 0', ';method = 0', ';position = 0']"
561,"    public static String eventHash(String eventstr) {
        try {
            if (md == null) {
                md = MessageDigest.getInstance(""MD5"");
            }
            md.update(eventstr.getBytes(""utf-8""));
            byte[] theDigest = md.digest();
            return new BASE64Encoder().encode(theDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     private BufferedImage _getImage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.connect();
        InputStream in = null;
        try {
            in = conn.getInputStream();
            return ImageIO.read(in);
        } finally {
            IOUtilities.close(in);
        }
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"eventHash,eventstr,md,theDigest",,4,9,0,,0,GA,1762,0.6343845566113789,failed,"[';eventstr = 0', ';md = 0', ';theDigest = 0', ';bytehash = 0', ';messageKey = 0', ';Eventstring = 0', ';errorstring = 0']"
562,"            @Override
            protected Reader openConnection(URL url) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnection(url);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",53,"            @Override
            protected Reader openConnector(URL file) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnector(file);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
;print(openChannel);print(closeConnect);print(closeConnection);print(OpenConnect);print(createConnector);print(createConn);print(closeConnector);print(OpenConnection);print(openConnect);print(OpenConnector);print(OpenConn);path = 0;print(path);print(address);print(buffer)",LABEL_0,LABEL_0,LABEL_0,1,"openConnection,url","openConnection:0.0001938939094543457,url:0.0001963973045349121,",2,4,0,"url:file,openConnection:openConnector,",0,Greedy,113,0.04310894807179769,inesrt,"[';print(openChannel)', ';print(closeConnect)', ';print(closeConnection)', ';print(OpenConnect)', ';print(createConnector)', ';print(createConn)', ';print(closeConnector)', ';print(OpenConnection)', ';print(openConnect)', ';print(OpenConnector)', ';print(OpenConn)', ';path = 0', ';print(path)', ';print(address)', ';print(buffer)']"
563,"    static void copy(String src, String dest) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        FileChannel fc = new FileOutputStream(""data2.txt"").getChannel();
        fc.write(ByteBuffer.wrap(""Some text"".getBytes()));
        fc.close();
        fc = new FileInputStream(""data2.txt"").getChannel();
        ByteBuffer buff = ByteBuffer.allocate(BSIZE);
        fc.read(buff);
        buff.flip();
        System.out.println(buff.asCharBuffer());
        buff.rewind();
        String encoding = System.getProperty(""file.encoding"");
        System.out.println(""Decoded using "" + encoding + "": "" + Charset.forName(encoding).decode(buff));
        fc = new FileOutputStream(""data2.txt"").getChannel();
        fc.write(ByteBuffer.wrap(""Some text"".getBytes(""UTF-16BE"")));
        fc.close();
        fc = new FileInputStream(""data2.txt"").getChannel();
        buff.clear();
        fc.read(buff);
        buff.flip();
        System.out.println(buff.asCharBuffer());
        fc = new FileOutputStream(""data2.txt"").getChannel();
        buff = ByteBuffer.allocate(24);
        buff.asCharBuffer().put(""Some text"");
        fc.write(buff);
        fc.close();
        fc = new FileInputStream(""data2.txt"").getChannel();
        buff.clear();
        fc.read(buff);
        buff.flip();
        System.out.println(buff.asCharBuffer());
    }
",111,"    static void clip(String src, String dest) throws IOException {
        InputStream url = null;
        OutputStream img = null;
        try {
            url = new FileInputStream(src);
            img = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = url.read(buf)) > 0) img.write(buf, 0, n);
        } finally {
            if (url != null) url.close();
            if (img != null) img.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,src,dest,in,out,buf,n","copy:0.004798829555511475,src:-0.0001652240753173828,dest:-1.0192394256591797e-05,in:0.0009961128234863281,out:0.0010448694229125977,buf:0.0006529688835144043,n:0.0003114938735961914,",3,11,0,"copy:clip,out:img,in:url,",0,Greedy,164,0.058664917945861816,replace,[]
564,"    public static String encrypt(String text) throws NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        try {
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
 <SPLIT>     public static synchronized String getMD5_Base64(String input) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(input.getBytes(""UTF-8""));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] rawData = msgDigest.digest();
        byte[] encoded = Base64.encode(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
",91,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,text,md,md5hash",,4,11,0,,0,GA,1681,0.619154175122579,failed,"[';buffer = 0', ';class = 0', ';output = 0', ';number = 0', ';pattern = 0', '; md4sum = 0']"
565,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(buffer.getPayload().toString().replaceAll(""\r\n|\n|\r"", """"));
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",294,,LABEL_0,LABEL_0,LABEL_0,-1,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,6,17,0,,0,GA,3859,1.4761833747227986,failed,"[';logging = 0', ';wrap = 0', ';encoding = 0', ';logger = 0', ';loging = 0', ';copy = 0', ';report = 0', ';ref = 0']"
566,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""usage: "" + EvaluatorHelper.class.getName() + "" <output> <data set file>"");
            System.exit(1);
        }
        Helper helper = Helper.getHelper(args[1]);
        Dataset dataset = helper.read(args[1]);
        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);
        Enumeration entries = zip.entries();
        Unit<?>[] performance = new Unit<?>[LIMIT];
        int index = 0;
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (entry.getName().endsWith("".out"")) {
                File temp = File.createTempFile(""PARSER"", "".zip"");
                temp.deleteOnExit();
                PrintStream writer = new PrintStream(new FileOutputStream(temp));
                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));
                byte[] buffer = new byte[4096];
                int read = -1;
                while ((read = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, read);
                }
                writer.close();
                reader.close();
                BufferedReader outfile = new BufferedReader(new FileReader(temp));
                String line = null;
                RuleParser parser = new RuleParser();
                ProbabilisticRuleList list = new ProbabilisticRuleList();
                while ((line = outfile.readLine()) != null) {
                    if (line.startsWith(""IF"")) {
                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());
                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));
                    }
                }
                outfile.close();
                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();
                performance[index] = measure.evaluate(dataset, list);
                System.out.println(entry.getName() + "": "" + performance[index]);
                index++;
                if (index >= LIMIT) {
                    break;
                }
            }
        }
        System.out.println(UnitAveragingMode.get(Double.class).average(performance));
    }
",210,"    public static void copyFile(File url, File about) throws IOException {
        assert (url != null);
        assert (about != null);
        if (!about.exists()) {
            File parentDir = about.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            about.createNewFile();
        }
        FileInputStream url = null;
        FileOutputStream out = null;
        try {
            url = new FileInputStream(url);
            try {
                out = new FileOutputStream(about);
                FileChannel ic = url.getChannel();
                try {
                    FileChannel nic = out.getChannel();
                    try {
                        nic.transferFrom(ic, 0, url.length());
                    } finally {
                        if (nic != null) {
                            nic.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (url != null) {
                url.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,from,to,parentDir,in,out,ic,oc","copyFile:0.0036118626594543457,from:-0.00010496377944946289,to:-0.00013595819473266602,parentDir:0.000789344310760498,in:0.0004665851593017578,out:0.0014544129371643066,ic:0.0011513233184814453,oc:0.0002681612968444824,",4,19,0,"copyFile:copyFile,out:out,ic:ic,parentDir:parentDir,in:url,oc:nic,from:url,to:about,",0,Greedy,385,0.14175588289896648,replace,[]
567,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {
        FileReader reader = null;
        Writer writer = null;
        try {
            reader = new FileReader(sourceFile);
            logger.info(""Using source file: "" + trimPath(userDir, sourceFile));
            if (!destinationFile.getParentFile().exists()) {
                createDirectory(destinationFile.getParentFile());
            }
            writer = new FileWriter(destinationFile);
            logger.info(""Destination file:  "" + trimPath(userDir, destinationFile));
            execute(reader, writer, conversionType, java2HtmlConfig);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    writer = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                    reader = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",227,"    public static void saveAttachmentBody(Context connection, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long adachmentID = localAttachment.mId;
            InputStream url = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(connection, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(connection, accountId, adachmentID);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(url, out);
            url.close();
            out.close();
            String contentUristring = AttachmentProvider.getAttachmentUri(accountId, adachmentID).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUristring;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUristring);
            Uri  url = ContentUris.withAppendedId(Attachment.CONTENT_URI, adachmentID);
            connection.getContentResolver().update( url, cv, null, null);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri","saveAttachmentBody:-0.009188950061798096,context:0.026529014110565186,part:0.0005080699920654297,localAttachment:-0.009604334831237793,accountId:-0.002080559730529785,attachmentId:0.0021439194679260254,in:0.0026214122772216797,saveIn:-0.006115555763244629,saveAs:-0.05166584253311157,out:-0.015802443027496338,copySize:-0.013251066207885742,contentUriString:0.016383826732635498,mSize:-0.0007593631744384766,mContentUri:0.0019120573997497559,cv:0.054199934005737305,uri:0.006252884864807129,",5,16,0,"cv:cv,context:connection,contentUriString:contentUristring,uri: url,in:url,attachmentId:adachmentID,",0,Greedy,385,0.13946195046106974,replace,[]
568,"    public void handleHandshake(Packet2Handshake par1Packet2Handshake) {
        boolean flag = true;
        String s = par1Packet2Handshake.username;
        if (s == null || s.trim().length() == 0) {
            flag = false;
        } else if (!s.equals(""-"")) {
            try {
                Long.parseLong(s, 16);
            } catch (NumberFormatException numberformatexception) {
                flag = false;
            }
        }
        if (!flag) {
            netManager.networkShutdown(""disconnect.genericReason"", new Object[] { ""The server responded with an invalid server key"" });
        } else if (par1Packet2Handshake.username.equals(""-"")) {
            addToSendQueue(new Packet1Login(mc.session.username, 29));
        } else {
            try {
                URL url = new URL((new StringBuilder()).append(""http://session.minecraft.net/game/joinserver.jsp?user="").append(mc.session.username).append(""&sessionId="").append(mc.session.sessionId).append(""&serverId="").append(par1Packet2Handshake.username).toString());
                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s1 = bufferedreader.readLine();
                bufferedreader.close();
                if (s1.equalsIgnoreCase(""ok"")) {
                    addToSendQueue(new Packet1Login(mc.session.username, 29));
                } else {
                    netManager.networkShutdown(""disconnect.loginFailedInfo"", new Object[] { s1 });
                }
            } catch (Exception exception) {
                exception.printStackTrace();
                netManager.networkShutdown(""disconnect.genericReason"", new Object[] { (new StringBuilder()).append(""Internal client error: "").append(exception.toString()).toString() });
            }
        }
    }
 <SPLIT>     public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",346,,LABEL_0,LABEL_0,LABEL_0,-1,"handleHandshake,par1Packet2Handshake,s,flag,url,bufferedreader,s1",,7,22,0,,0,GA,3272,1.2395629604657492,failed,[]
569,"    private String md5(String uri) throws ConnoteaRuntimeException {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(uri.getBytes());
            byte[] bytes = messageDigest.digest();
            StringBuffer stringBuffer = new StringBuffer();
            for (byte b : bytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    stringBuffer.append('0');
                }
                stringBuffer.append(hex);
            }
            return stringBuffer.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new ConnoteaRuntimeException(e);
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",125,,LABEL_1,LABEL_1,LABEL_1,-1,"md5,uri,messageDigest,bytes,stringBuffer,b,hex",,6,16,0,,0,GA,3020,1.1093089699745178,failed,"[';md5 = 0', ';uri = 0', ';messageDigest = 0', ';bytes = 0', ';address = 0', ';url = 0', ';reference = 0', ';attribute = 0', ';objectString = 0', '; stringLength = 0']"
570,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",765,"    public void Conversion(File url, File img) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean showsPixeldata = p.getReadTag() == Tags.PixelData;
            boolean inflation = showsPixeldata && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (showsPixeldata) {
                if (inflation) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (showsPixeldata) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflation) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",7,27,0,"pxlen:pxlen,hasPixelData:showsPixeldata,dest:img,inflate:inflation,in:login,convert:Conversion,format:url,src:url,",0,Greedy,437,0.17222253878911337,replace,[]
571,"    private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",124,,LABEL_1,LABEL_1,LABEL_1,-1,"getZipAsFile,digOb,folderName,tmpFolder,zip,out",,6,17,0,,0,GA,2032,0.8022722681363423,failed,"[';digOb = 0', ';getZipAsDir = 0']"
572,"    public static String sendPost(String url, String param) {
        String result = """";
        try {
            URL httpurl = new URL(url);
            HttpURLConnection httpConn = (HttpURLConnection) httpurl.openConnection();
            httpConn.setRequestProperty(""Accept-Language"", ""zh-CN"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            PrintWriter out = new PrintWriter(httpConn.getOutputStream());
            out.print(param);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), ""UTF-8""));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
            in.close();
        } catch (Exception e) {
            MsgPrint.showMsg(e.getMessage());
        }
        return result;
    }
 <SPLIT>     private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");
        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File f = File.createTempFile(""tempabca"", ""bdfafad"");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + ""/"";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith(""native"")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = """";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";
        System.out.println(""Using native/"" + arch + ""/"");
        addLibraryPath(parent + ""native/"" + arch + ""/"");
    }
",174,"    public static String executepost(String file, String path) {
        String output = """";
        try {
            URL baseconfig = new URL(file);
            HttpURLConnection perConn = (HttpURLConnection) baseconfig.openConnection();
            perConn.setRequestProperty(""Accept-Language"", ""zh-CN"");
            perConn.setDoOutput(true);
            perConn.setDoInput(true);
            PrintWriter out = new PrintWriter(perConn.getOutputStream());
            out.print(path);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(perConn.getInputStream(), ""UTF-8""));
            String lines;
            while ((lines = in.readLine()) != null) {
                output += lines;
            }
            in.close();
        } catch (Exception e) {
            MsgPrint.showMsg(e.getMessage());
        }
        return output;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sendPost,url,param,result,httpurl,httpConn,out,in,line","sendPost:-0.0012223124504089355,url:-0.012362360954284668,param:-0.00492173433303833,result:-0.017536520957946777,httpurl:-0.0004068613052368164,httpConn:-0.03290998935699463,out:-0.06848752498626709,in:-0.03771597146987915,line:-0.006629526615142822,",7,19,0,"httpurl:baseconfig,sendPost:executepost,param:path,line:lines,url:file,result:output,httpConn:perConn,",0,Greedy,275,0.10258554220199585,replace,[]
573,"    private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
 <SPLIT>     private InputStream getInputStream(String item) {
        InputStream is = null;
        URLConnection urlc = null;
        try {
            URL url = new URL(item);
            urlc = url.openConnection();
            is = urlc.getInputStream();
            current_source = url.getProtocol() + ""://"" + url.getHost() + "":"" + url.getPort() + url.getFile();
        } catch (Exception ee) {
            System.err.println(ee);
        }
        int i = 0;
        udp_port = -1;
        udp_baddress = null;
        while (urlc != null) {
            String s = urlc.getHeaderField(i);
            String t = urlc.getHeaderFieldKey(i);
            if (s == null) {
                break;
            }
            i++;
            if (""udp-port"".equals(t)) {
                try {
                    udp_port = Integer.parseInt(s);
                } catch (Exception e) {
                }
            } else if (""udp-broadcast-address"".equals(t)) {
                udp_baddress = s;
            }
        }
        return is;
    }
",62,,LABEL_0,LABEL_0,LABEL_0,-1,"loadProperties,properties,url",,3,6,0,,0,GA,1431,0.5210959394772847,failed,"[';loadProperties = 0', ';properties = 0', ';getproproperties = 0', ';loadPropertyperties = 0', ';address = 0']"
574,"    public static String checksum(URL url, String algorithm) {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance(algorithm);
        } catch (Exception ex) {
            throw new RuntimeException(""Could not create an instance of MessageDigest"", ex);
        }
        byte[] bytes = new byte[4 * 1024];
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                int nBytesRead = 0;
                while ((nBytesRead = in.read(bytes)) > 0) {
                    messageDigest.update(bytes, 0, nBytesRead);
                }
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(""Could not read message digest for: "" + url.toExternalForm() + "" using algorithm: "" + algorithm);
        }
        byte[] checksumValue = messageDigest.digest();
        return digestAsString(checksumValue);
    }
 <SPLIT>     public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
",174,,LABEL_0,LABEL_0,LABEL_0,-1,"checksum,url,algorithm,messageDigest,bytes,in,nBytesRead,checksumValue",,8,24,0,,0,GA,3544,1.327875292301178,failed,"[';checksum = 0', ';print(checksum)', ';bytes = 0', ';nBytesRead = 0', ';checksumValue = 0', ';address = 0', ';malgorith = 0', ';exgebra = 0', ';exgorithm = 0', ';messageSignse = 0', ';messageRegator = 0', ';limits = 0', ';lines = 0', ';blocks = 0', ';bps = 0', ';loads = 0', ';vals = 0', ';ips = 0', ';size = 0', ';Bytes = 0', ';resses = 0', ';ls = 0', ';vs = 0', ';socket = 0', ';conn = 0', ';err = 0', ';nByteLength = 0', ';nBytesLength = 0', ';nWordsCount = 0', '; nBytesCount = 0']"
575,"        public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                BufferedInputStream in = new BufferedInputStream(con.getInputStream());
                FileOutputStream fos = new FileOutputStream(toFile);
                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);
                byte[] data = new byte[1024];
                int x = 0;
                while ((x = in.read(data, 0, 1024)) >= 0) {
                    bout.write(data, 0, x);
                    lastIteraction = System.currentTimeMillis();
                }
                bout.flush();
                bout.close();
                fos.flush();
                fos.close();
                in.close();
                con.disconnect();
                finish = true;
            } catch (Exception e) {
                this.e = e;
            }
        }
 <SPLIT>     private String getFullScreenUrl() {
        progressDown.setIndeterminate(true);
        System.out.println(""Har: "" + ytUrl);
        String u = ytUrl;
        URLConnection conn = null;
        String line = null;
        String data = """";
        String fullUrl = """";
        try {
            URL url = new URL(u);
            conn = url.openConnection();
            conn.setDoOutput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = rd.readLine()) != null) {
                if (line.contains(""fullscreenUrl"")) {
                    data = line.trim();
                }
            }
            rd.close();
            System.out.println(data);
            int start = 0;
            String[] lines = data.split(""&"");
            String[] tmp = null;
            String video_id = null;
            String t = null;
            String title = null;
            for (int i = 0; i < lines.length; i++) {
                if (lines[i].startsWith(""video_id="")) {
                    tmp = lines[i].split(""="");
                    video_id = tmp[1];
                }
                if (lines[i].startsWith(""t="")) {
                    tmp = lines[i].split(""="");
                    t = tmp[1];
                }
                if (lines[i].startsWith(""title="")) {
                    tmp = lines[i].split(""="");
                    title = tmp[1].substring(0, (tmp[1].length() - 2));
                }
                System.out.println(lines[i]);
            }
            System.out.println(""So we got..."");
            System.out.println(""video_id: "" + video_id);
            System.out.println(""t: "" + t);
            System.out.println(""title: "" + title);
            ytTitle = title;
            fullUrl = ""http://www.youtube.com/get_video.php?video_id="" + video_id + ""&t="" + t;
        } catch (Exception e) {
            System.err.println(""Error: "" + e.getLocalizedMessage());
        }
        progressDown.setIndeterminate(false);
        return fullUrl;
    }
",228,,LABEL_0,LABEL_0,LABEL_0,-1,"run,con,encodedPassword,encoder,in,fos,bout,data,x,lastIteraction,e",,8,26,0,,0,GA,4890,1.8656997084617615,failed,"[';run = 0', ';print(run)', ';con = 0', ';print(con)', ';encodedPassword = 0', ';encoder = 0', ';data = 0', ';x = 0', ';execute = 0', ';encryptedpassword = 0', ';encryptedPassword = 0', ';Encryptedpassword = 0', ';enccodedpassword = 0', '; encoding = 0']"
576,"    synchronized List<String> getDatasetsList(String surl) {
        if (datasetsList == null) {
            datasetsList = new HashMap<String, List<String>>();
        }
        List<String> result = datasetsList.get(surl);
        if (result == null) {
            BufferedReader reader = null;
            try {
                URL url = new URL(surl + ""?server=list"");
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                ArrayList<String> list = new ArrayList<String>();
                while (s != null) {
                    list.add(s);
                    s = reader.readLine();
                }
                datasetsList.put(surl, list);
            } catch (IOException ex) {
                Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);
                throw new RuntimeException(ex);
            } finally {
                try {
                    reader.close();
                } catch (IOException ex) {
                    Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return datasetsList.get(surl);
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",238,,LABEL_1,LABEL_1,LABEL_1,-1,"getDatasetsList,surl,datasetsList,result,reader,url,s,list",,8,27,0,,0,GA,3717,1.4113250811894735,failed,"[';line = 0', '; lines = 0']"
577,"    private int[] sortRows(int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] > rows[j + 1]) {
                    int temp = rows[j];
                    rows[j] = rows[j + 1];
                    rows[j + 1] = temp;
                }
            }
        }
        return rows;
    }
 <SPLIT>     public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
",100,"    private int[] ortLRow(int[] rows) {
        for (int index = 0; index < rows.length; index++) {
            for (int job = 0; job < rows.length - 1; job++) {
                if (rows[job] > rows[job + 1]) {
                    int temp = rows[job];
                    rows[job] = rows[job + 1];
                    rows[job + 1] = temp;
                }
            }
        }
        return rows;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sortRows,rows,i,j,temp","sortRows:0.10615593194961548,rows:-0.0067615509033203125,i:0.002246677875518799,j:0.0029903650283813477,temp:0.0006558895111083984,",3,13,0,"sortRows:ortLRow,j:job,i:index,",0,Greedy,135,0.04755499760309855,replace,[]
578,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",272,"    private static void readAndRewrite(File loginFilename, File outFile) throws IOException {
        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciris);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, ciris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + loginFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmSecParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmSecParam);
        ds.writeHeader(url, dcmSecParam, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",5,27,0,"outFile:outFile,readAndRewrite:readAndRewrite,inFile:loginFilename,iis:ciris,dcmEncParam:dcmSecParam,dcmParser:dmissionPlugin,out:url,",0,Greedy,396,0.14584965705871583,replace,[]
579,"    public static URLConnection openProxiedConnection(URL url) throws IOException {
        if (proxyHost != null) {
            System.getProperties().put(""proxySet"", ""true"");
            System.getProperties().put(""proxyHost"", proxyHost);
            System.getProperties().put(""proxyPort"", proxyPort);
        }
        URLConnection cnx = url.openConnection();
        if (proxyUsername != null) {
            cnx.setRequestProperty(""Proxy-Authorization"", proxyEncodedPassword);
        }
        return cnx;
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"openProxiedConnection,url,cnx",,3,6,0,,0,GA,1398,0.5676869511604309,failed,[]
580,"            @Override
            protected Reader openConnection(URL url) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnection(url);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
 <SPLIT>     public FileParse(String fileStr, String type) throws MalformedURLException, IOException {
        this.inFile = fileStr;
        this.type = type;
        System.out.println(""File str "" + fileStr);
        if (fileStr.indexOf(""http://"") == 0) {
            URL url = new URL(fileStr);
            urlconn = url.openConnection();
            inStream = urlconn.getInputStream();
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""File"")) {
            File inFile = new File(fileStr);
            size = inFile.length();
            inStream = new FileInputStream(inFile);
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""URL"")) {
            URL url = new URL(fileStr);
            urlconn = url.openConnection();
            inStream = urlconn.getInputStream();
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""URLZip"")) {
            URL url = new URL(fileStr);
            inStream = new GZIPInputStream(url.openStream(), 16384);
            InputStreamReader zis = new InputStreamReader(inStream);
            bufReader = new BufferedReader(zis, 16384);
        } else {
            System.out.println(""Unknown FileParse inType "" + type);
        }
    }
",53,,LABEL_0,LABEL_0,LABEL_0,-1,"openConnection,url",,2,4,0,,0,GA,787,0.29144906997680664,failed,"[';openConnection = 0', ';url = 0', ';closeConnect = 0', ';closeChannel = 0', ';createChannel = 0', ';path = 0', ';address = 0']"
581,"    public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",162,,LABEL_1,LABEL_1,LABEL_1,-1,"getUniqueKey,digest,md,timeVal,localHost,randVal,val",,0,0,0,,0,GA,3051,1.1327484885851542,failed,[]
582,"    public static void copyFile(File in, File out) throws IOException {
        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",122,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,inChannel,outChannel",,5,16,0,,0,GA,2225,0.8216131965319315,failed,"[';copyFile = 0', ';print(copyFile)', ';in = 0', ';out = 0', ';inChannel = 0', ';outChannel = 0', ';index = 0', ';output = 0', ';user = 0', ';version = 0', ';OUT = 0', ';c = 0', ';outs = 0', ';outside = 0', ';at = 0', ';target = 0', ';inc = 0', ';object = 0', ';x = 0', ';conn = 0', ';name = 0', ';print(name)', ';exec = 0', ';print(exec)', ';Out = 0', ';print(Out)', ';writer = 0', ';print(writer)', ';update = 0', ';print(update)', ';err = 0', ';print(err)', ';b = 0', ';print(b)', ';vert = 0', ';print(vert)', ';this = 0', ';print(this)', ';print(inputChannel)', ';inputchannel = 0', ';inContext = 0', ';print(inContext)', ';outchannel = 0']"
583,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",131,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,7,22,0,,0,GA,2599,0.9457122564315796,failed,[]
584,"    protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(""POST"");
            request.setDoOutput(true);
            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
            out.print(getParametersString(parameters));
            out.flush();
            out.close();
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
 <SPLIT>     public static String getPagina(String strurl) {
        String resp = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL url = new URL(strurl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                resp += str;
            }
            in.close();
        } catch (MalformedURLException e) {
            resp = e.toString();
        } catch (IOException e) {
            resp = e.toString();
        } catch (Exception e) {
            resp = e.toString();
        }
        return resp;
    }
",240,,LABEL_1,LABEL_0,,-4,"callApiPost,apiUrl,parameters,expected,url,request,headerName,out",,,,0,,0,Greedy,1,0.0005735317866007487,,[]
585,"    private String getPrefsKey(String key) {
        try {
            if (MD5 == null) MD5 = MessageDigest.getInstance(""MD5"");
            MD5.reset();
            MD5.update(key.getBytes(""UTF-8""));
            byte[] resultBytes = MD5.digest();
            return toHexString(resultBytes);
        } catch (Exception nsae) {
            return key;
        }
    }
 <SPLIT>     public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",77,,LABEL_1,LABEL_1,LABEL_1,-1,"getPrefsKey,key,MD5,resultBytes",,4,12,0,,0,GA,1798,0.6487945954004923,failed,[]
586,"    private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
",522,,LABEL_0,LABEL_0,LABEL_0,-1,"addQDInformation,qdDate,qdFile,_qdFileDate,ii,info,_qdValue,reader,urlName,url,stream,file,line,_qdDate,pos,projectNum,value",,16,66,0,,0,GA,8007,3.1387179374694822,failed,"[';print(addQDInformation)', ';print(qa)']"
587,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     public void testHttpsConnection() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);
            checkConnectionStateParameters(connection, peerSocket);
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",570,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip",,15,60,0,,0,GA,7499,2.9733675797780355,failed,[]
588,"    @Test
    public void testCopy_readerToOutputStream_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out, ""UTF16"");
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",123,,LABEL_1,LABEL_1,LABEL_1,-1,"testCopy_readerToOutputStream_Encoding,in,reader,baout,out,bytes",,6,16,0,,0,GA,2365,0.8793647130330403,failed,"[';testCopy_readerToOutputStream_Encoding = 0', ';testCopy_readerToOutputStreamForencoded = 0', ';testCopy_readerToOutputStream_encoded = 0', ';testCopy_readerToOutputStream_Coding = 0', ';testCopy_readerToOutputStream_encode = 0', ';testCopy_readerToOutputStream_Integoder = 0', ';testCopy_readerToOutputStreamForEncode = 0', ';testCopy_readerToOutputStream_Integode = 0', ';testCopy_readerToOutputStreamForencode = 0', ';print(testCopy_readerToOutputStreamForencode)', ';testCopy_readerToOutputStream_Encode = 0', ';print(testCopy_readerToOutputStream_Encode)', ';testCopy_readerToOutputStream_Integoding = 0', ';file = 0', ';init = 0', ';write = 0']"
589,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""edit"") != null) {
            try {
                User cu = (User) request.getSession().getAttribute(""currentuser"");
                UserDetails ud = cu.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = request.getParameter(""password"");
                    MessageDigest md = MessageDigest.getInstance(""MD5"");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter(""fname""));
                ud.setLastName(request.getParameter(""lname""));
                ud.setEmailAddress(request.getParameter(""email""));
                ud.setAddress(request.getParameter(""address""));
                ud.setZipcode(request.getParameter(""zipcode""));
                ud.setTown(request.getParameter(""town""));
                ud.setCountry(request.getParameter(""country""));
                ud.setTrackingColor(request.getParameter(""input1""));
                String vis = request.getParameter(""visibility"");
                if (vis.equals(""self"")) {
                    cu.setVisibility(0);
                } else if (vis.equals(""friends"")) {
                    cu.setVisibility(1);
                } else if (vis.equals(""all"")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
",81,,LABEL_0,LABEL_0,LABEL_0,-1,"serialize,out,parser,on_disk,in",,2,5,0,,0,GA,2288,0.8510232488314311,failed,"[';serialize = 0', ';out = 0', ';parser = 0', ';on_disk = 0', ';serializable = 0', ';Serialize = 0', ';string = 0']"
590,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT> 	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection(""jdbc:postgresql://localhost/test"", ""user"", ""password"");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement(""UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?"");
		ps.setString(1, myField);
		ps.setString(2, condition1);
		ps.setString(3, condition2);
		
		// If more than 10 entries change, panic and rollback
		int numChanged = ps.executeUpdate();
		if(numChanged > 10) {
			connection.rollback();
		} else {
			connection.commit();
		}
		
		ps.close();
		connection.close();
	}
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.0007929563522338867,,[]
591,"    private String encode(String str) {
        StringBuffer buf = new StringBuffer();
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(str.getBytes());
            byte bytes[] = md5.digest();
            for (int i = 0; i < bytes.length; i++) {
                String s = Integer.toHexString(bytes[i] & 0xff);
                if (s.length() == 1) {
                    buf.append(""0"");
                }
                buf.append(s);
            }
        } catch (Exception ex) {
        }
        return buf.toString();
    }
 <SPLIT>     public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));
            pst.setString(1, item.getDescription());
            pst.setDouble(2, item.getUnit_price());
            pst.setInt(3, item.getQuantity());
            pst.setDouble(4, item.getVat());
            pst.setInt(5, item.getIdProject());
            pst.setInt(6, item.getIdCurrency());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id_item) from item"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",130,,LABEL_0,LABEL_0,LABEL_0,-1,"encode,str,buf,md5,bytes,i,s",,6,19,0,,0,GA,3195,1.1848469535509745,failed,"[';encode = 0', ';print(encode)', ';print(str)', ';print(buf)', ';print(enccod)', ';print(encquote)', ';print(enquote)']"
592,"    private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
 <SPLIT>     public String insertSmsInf(Sms sms) throws Exception {
        String smsId = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append(""INSERT INTO COMTNSMS\n"");
            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n"");
            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n"");
            buffer.append(""VALUES\n"");
            buffer.append(""(?, ?, ?, ?, SYSDATE())"");
            conn = SmsBasicDBUtil.getConnection();
            conn.setAutoCommit(false);
            smsId = getNextId(conn);
            pstmt = conn.prepareStatement(buffer.toString());
            int index = 0;
            pstmt.setString(++index, smsId);
            pstmt.setString(++index, sms.getTrnsmitTelno());
            pstmt.setString(++index, sms.getTrnsmitCn());
            pstmt.setString(++index, sms.getFrstRegisterId());
            pstmt.executeUpdate();
            conn.commit();
            return smsId;
        } catch (Exception ex) {
            if (conn != null) {
                conn.rollback();
            }
            throw ex;
        } finally {
            SmsBasicDBUtil.close(null, pstmt, conn);
        }
    }
",266,,LABEL_0,LABEL_0,LABEL_0,-1,"getWave,url,Word,FF,url2,stream,Fdel,outstream,bwriter,binput,len",,11,30,0,,0,GA,4799,1.8123034755388896,failed,[]
593,"    public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(reqxml);
        return """";
    }
 <SPLIT>     public void googleImageSearch(String search, String start) {
        try {
            String u = ""http://images.google.com/images?q="" + search + start;
            if (u.contains("" "")) {
                u = u.replace("" "", ""+"");
            }
            URL url = new URL(u);
            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
            httpcon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");
            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
            googleImages.clear();
            String text = """";
            String lin = """";
            while ((lin = readIn.readLine()) != null) {
                text += lin;
            }
            readIn.close();
            if (text.contains(""\n"")) {
                text = text.replace(""\n"", """");
            }
            String[] array = text.split(""\\Qhref=\""/imgres?imgurl=\\E"");
            for (String s : array) {
                if (s.startsWith(""http://"") || s.startsWith(""https://"") && s.contains(""&amp;"")) {
                    String s1 = s.substring(0, s.indexOf(""&amp;""));
                    googleImages.add(s1);
                }
            }
        } catch (Exception ex4) {
            MusicBoxView.showErrorDialog(ex4);
        }
        MusicBoxView.jButton7.setEnabled(true);
        ImageIcon icon;
        try {
            icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));
            ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));
            MusicBoxView.albumArtLabel.setIcon(ico);
        } catch (MalformedURLException ex1) {
            MusicBoxView.showErrorDialog(ex1);
        }
    }
",698,,LABEL_0,LABEL_0,LABEL_0,-1,"sendRequest,servletName,request,reqxml,retdoc,myurl,myport,codebase,serverURL,ipdig,url,urlconn,os,req1xml,cos",,9,26,0,,0,GA,6394,2.6462134957313537,failed,[]
594,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public static void copyFile(String fromPath, String toPath) {
        try {
            File inputFile = new File(fromPath);
            String dirImg = (new File(toPath)).getParent();
            File tmp = new File(dirImg);
            if (!tmp.exists()) {
                tmp.mkdir();
            }
            File outputFile = new File(toPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
        }
    }
",97,"    public static void transferfile(File url, File point) throws IOException {
        FileChannel inStream = new FileInputStream(url).getChannel();
        FileChannel netStream = new FileOutputStream(point).getChannel();
        try {
            inStream.transferTo(0, inStream.size(), netStream);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inStream != null) inStream.close();
            if (netStream != null) netStream.close();
        }
    }
;print(insConnection);print( inchannel);print(inchannel);print(loginChan);print(loginChannel);print(Inchannel);print(loginchannel);print(loginStream);print(INConnection);print(iniGate);print(OutConnection);print(OutChannel);print(inchannel);print( outChar);print(outputStream);print(netStream);print(outConnection);print( outGate);print(inGate);print(outputChan);print(inConnection);print( outStream);print(outputChar);print(outGate);inChar = 0;print(inChar);print( outchannel)",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,in,out,inChannel,outChannel","copyFile:0.00019669532775878906,in:0.00016307830810546875,out:8.416175842285156e-05,inChannel:0.0002830028533935547,outChannel:0.000276029109954834,",5,14,0,"inChannel:inStream,outChannel:netStream,copyFile:transferfile,in:url,out:point,",0,Greedy,537,0.21596532662709553,inesrt,"[';print(insConnection)', ';print( inchannel)', ';print(inchannel)', ';print(loginChan)', ';print(loginChannel)', ';print(Inchannel)', ';print(loginchannel)', ';print(loginStream)', ';print(INConnection)', ';print(iniGate)', ';print(OutConnection)', ';print(OutChannel)', ';print(inchannel)', ';print( outChar)', ';print(outputStream)', ';print(netStream)', ';print(outConnection)', ';print( outGate)', ';print(inGate)', ';print(outputChan)', ';print(inConnection)', ';print( outStream)', ';print(outputChar)', ';print(outGate)', ';inChar = 0', ';print(inChar)', ';print( outchannel)']"
595,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     public void register(MinecraftSession session, String username, String verificationKey) {
        if (Configuration.getConfiguration().isVerifyingNames()) {
            long salt = HeartbeatManager.getHeartbeatManager().getSalt();
            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();
            MessageDigest digest;
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(""No MD5 algorithm!"");
            }
            digest.update(hash.getBytes());
            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {
                session.getActionSender().sendLoginFailure(""Illegal name."");
                return;
            }
        }
        char[] nameChars = username.toCharArray();
        for (char nameChar : nameChars) {
            if (nameChar < ' ' || nameChar > '\177') {
                session.getActionSender().sendLoginFailure(""Invalid name!"");
                return;
            }
        }
        for (Player p : playerList.getPlayers()) {
            if (p.getName().equalsIgnoreCase(username)) {
                p.getSession().getActionSender().sendLoginFailure(""Logged in from another computer."");
                break;
            }
        }
        final Player player = new Player(session, username);
        if (!playerList.add(player)) {
            player.getSession().getActionSender().sendLoginFailure(""Too many players online!"");
            return;
        }
        session.setPlayer(player);
        final Configuration c = Configuration.getConfiguration();
        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);
        LevelGzipper.getLevelGzipper().gzipLevel(session);
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,0,0,0,,0,GA,1254,0.4729668617248535,failed,[]
596,"    public static void main(String args[]) {
        int[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };
        int sort = 0;
        for (int j = 0; j < (mas.length); j++) {
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    sort = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = sort;
                }
            }
        }
        for (int i = 0; i < mas.length; i++) {
            System.out.print("" "" + mas[i]);
        }
    }
 <SPLIT>     public TableDirectory(RandomAccessFile raf) throws IOException {
        version = raf.readInt();
        numTables = raf.readShort();
        searchRange = raf.readShort();
        entrySelector = raf.readShort();
        rangeShift = raf.readShort();
        entries = new DirectoryEntry[numTables];
        for (int i = 0; i < numTables; i++) {
            entries[i] = new DirectoryEntry(raf);
        }
        boolean modified = true;
        while (modified) {
            modified = false;
            for (int i = 0; i < numTables - 1; i++) {
                if (entries[i].getOffset() > entries[i + 1].getOffset()) {
                    DirectoryEntry temp = entries[i];
                    entries[i] = entries[i + 1];
                    entries[i + 1] = temp;
                    modified = true;
                }
            }
        }
    }
",162,,LABEL_1,LABEL_0,,-4,"mas,sort,j,i",,,,0,,0,Greedy,1,0.000558769702911377,,[]
597,"    private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType(""image/"" + type + """");
        Point imgSize = null;
        if (width > 0 || height > 0) {
            imgSize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imgSize = imageFormats.get(fmt);
        }
        InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageInputStream == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imgSize == null) {
            IOUtils.copy(imageInputStream, response.getOutputStream());
        } else {
            byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);
            response.setContentLength(imageBytes.length);
            response.getOutputStream().write(imageBytes);
        }
        response.getOutputStream().flush();
        response.getOutputStream().close();
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",196,"    private void doimageProcess(HttpServletRequest url, HttpServletResponse status) throws IOException {
        status.setContentType(""image/"" + type + """");
        Point imagesize = null;
        if (width > 0 || height > 0) {
            imagesize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imagesize = imageFormats.get(fmt);
        }
        InputStream imageUploadView = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageUploadView == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imagesize == null) {
            IOUtils.copimageUploadViewam, status.getOutputStream());
        } else {
            byte[] iimgBuffer= getImageBytes(type, imagesize, imageUploadView);
            status.setContentLength(imgBuffer.length);
            status.getOutputStream().write(imgBuffer);
        }
        status.getOutputStream().flush();
        status.getOutputStream().close();
    }
",LABEL_1,LABEL_1,0.5541425943374634,1,"doImageProcess,request,response,imgSize,imageInputStream,imageBytes",,6,21,0,"doImageProcess:doimageProcess,request:url,response:status,imgSize:imagesize,imageInputStream:imageUploadView,imageBytes:imgBuffer,",0,GA,1101,0.4401157816251119,ga,"[';imageReadFile = 0', ';print(imgBytes)', ';print(pictureBlocks)']"
598,"    String fetch_pls(String pls) {
        InputStream pstream = null;
        if (pls.startsWith(""http://"")) {
            try {
                URL url = null;
                if (running_as_applet) {
                    url = new URL(getCodeBase(), pls);
                } else {
                    url = new URL(pls);
                }
                URLConnection urlc = url.openConnection();
                pstream = urlc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (pstream == null && !running_as_applet) {
            try {
                pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + pls);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline(pstream);
            } catch (Exception e) {
            }
            if (line == null) {
                break;
            }
            if (line.startsWith(""File1="")) {
                byte[] foo = line.getBytes();
                int i = 6;
                for (; i < foo.length; i++) {
                    if (foo[i] == 0x0d) {
                        break;
                    }
                }
                return line.substring(6, i);
            }
        }
        return null;
    }
 <SPLIT>     private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",266,"    String fetch_Pls(String yls) {
        InputStream ppstream = null;
        if (yls.startsWith(""http://"")) {
            try {
                URL path = null;
                if (running_as_applet) {
                    path = new URL(getCodeBase(), yls);
                } else {
                    path = new URL(yls);
                }
                URLConnection Urlconn = path.openConnection();
                ppstream = Urlconn.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (ppstream == null && !running_as_applet) {
            try {
                ppstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + yls);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String val = null;
        while (true) {
            try {
                val = readline(ppstream);
            } catch (Exception e) {
            }
            if (val == null) {
                break;
            }
            if (val.startsWith(""File1="")) {
                byte[] header = val.getBytes();
                int I = 6;
                for (; I < header.length; I++) {
                    if (header[I] == 0x0d) {
                        break;
                    }
                }
                return val.substring(6, I);
            }
        }
        return null;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"fetch_pls,pls,pstream,url,urlc,line,foo,i","fetch_pls:0.001658797264099121,pls:-0.00044608116149902344,pstream:-0.036060333251953125,url:-0.004340410232543945,urlc:-0.005109250545501709,line:-0.05393451452255249,foo:0.001189887523651123,i:0.0019993185997009277,",8,31,0,"i:I,fetch_pls:fetch_Pls,foo:header,pls:yls,url:path,urlc:Urlconn,pstream:ppstream,line:val,",0,Greedy,396,0.15182621876398722,replace,[]
599,"    public static void main(String[] args) throws IOException {
        String urltext = ""http://www.vogella.de"";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
 <SPLIT>     static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",82,"    public static void main(String[] args) throws IOException {
        String feedbr = ""http://www.vogella.de"";
        URL string = new URL(feedbr);
        BufferedReader in = new BufferedReader(new InputStreamReader(string.openStream()));
        String outputStream;
        while ((outputStream = in.readLine()) != null) {
            System.out.println(outputStream);
        }
        in.close();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"urltext,url,in,inputLine","urltext:-0.0052721500396728516,url:-0.0031456947326660156,in:-0.008139073848724365,inputLine:0.015803217887878418,",3,7,0,"inputLine:outputStream,url:string,urltext:feedbr,",0,Greedy,115,0.04095220963160197,replace,[]
600,"    public void loadSourceCode() {
        int length = MAX_SOURCE_LENGTH;
        try {
            File file = new File(filename);
            length = (int) file.length();
        } catch (SecurityException ex) {
        }
        char[] buff = new char[length];
        InputStream is;
        InputStreamReader isr;
        CodeViewer cv = new CodeViewer();
        URL url;
        try {
            url = getClass().getResource(filename);
            is = url.openStream();
            isr = new InputStreamReader(is);
            BufferedReader reader = new BufferedReader(isr);
            sourceCode = new String(""<html><pre>"");
            String line = reader.readLine();
            while (line != null) {
                sourceCode += cv.syntaxHighlight(line) + "" \n "";
                line = reader.readLine();
            }
            sourceCode += ""</pre></html>"";
        } catch (Exception ex) {
            sourceCode = getString(""SourceCode.error"");
        }
    }
 <SPLIT>     private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
",180,"    public void loadSourceCode() {
        int filename = MAX_SOURCE_LENGTH;
        try {
            File File = new File(filename);
            filename = (int) File.filename();
        } catch (SecurityException ex) {
        }
        char[] buff = new char[filename];
        InputStream uri;
        InputStreamReader isr;
        CodeViewer cv = new CodeViewer();
        URL url;
        try {
            url = getClass().getResource(filename);
            uri = url.openStream();
            isr = new InputStreamReader(uri);
            BufferedReader reader = new BufferedReader(isr);
            sourceCode = new String(""<html><pre>"");
            String write = reader.readLine();
            while (write != null) {
                sourceCode += cv.syntaxHighlight(write) + "" 
 "";
                write = reader.readLine();
            }
            sourceCode += ""</pre></html>"";
        } catch (Exception ex) {
            sourceCode = getString(""SourceCode.error"");
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"loadSourceCode,length,file,buff,is,isr,cv,url,reader,sourceCode,line","loadSourceCode:0.0010796189308166504,length:0.009224176406860352,file:0.014804363250732422,buff:0.0024349093437194824,is:0.0073313117027282715,isr:0.0017821192741394043,cv:0.004086911678314209,url:-0.003954648971557617,reader:0.00047010183334350586,sourceCode:0.00046902894973754883,line:0.027819931507110596,",4,13,0,"line:write,file:File,length:filename,is:uri,",0,Greedy,237,0.0888606627782186,replace,[]
601,"    public void insertDomain(final List<String> domains) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""domain.add""));
                    Iterator<String> iter = domains.iterator();
                    String domain;
                    while (iter.hasNext()) {
                        domain = iter.next();
                        psImpl.setString(1, domain);
                        psImpl.setString(2, domain.toLowerCase(locale));
                        psImpl.executeUpdate();
                    }
                }
            });
            connection.commit();
            cmDB.updateDomains(null, null);
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                    log.error(ex);
                }
            }
        }
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(""http://hostname:80"");
            URLConnection conn = url.openConnection();
            for (int i = 0; ; i++) {
                String headerName = conn.getHeaderFieldKey(i);
                String headerValue = conn.getHeaderField(i);
                if (headerName == null && headerValue == null) {
                    break;
                }
                if (headerName == null) {
                }
            }
        } catch (Exception e) {
        }
    }
",225,,LABEL_0,LABEL_0,LABEL_0,-1,"insertDomain,domains,psImpl,iter,domain",,2,5,0,,0,GA,2257,0.8372046629587809,failed,"[';print(insertDomain)', ';domains = 0', ';print(domains)', ';psImpl = 0', ';print(psImpl)', ';iter = 0', ';domain = 0', '; insertdomain = 0', ';adddomain = 0', ';addDomain = 0', '; insertHost = 0', ';updateDomain = 0', ';addDom = 0', ';dimains = 0', ';dimands = 0', ';dimages = 0', ';dimales = 0', ';messances = 0', ';commances = 0', ';osimpl = 0', ';qsimpl = 0', ';ipsManager = 0', ';PSFactory = 0', ';psFactory = 0', ';psInstance = 0', ';paramsInterface = 0', '; psFactory = 0', ';paramsManager = 0', ';index = 0', ';Iterator = 0']"
602,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
",250,,LABEL_0,LABEL_0,LABEL_0,-1,"doVersionCheck,view,url,in,bin,line,version,build",,8,29,0,,0,GA,3846,1.435380188624064,failed,"[';doVersionCheck = 0', ';print(doVersionCheck)', ';view = 0', ';in = 0', ';bin = 0', ';line = 0', ';doversionScan = 0', '; doversioncheck = 0', ';stream = 0', ';bug = 0', ';loc = 0', ';buffer = 0', ';pin = 0', ';input = 0', ';bis = 0', ';con = 0', ';inner = 0', ';s = 0', ';ins = 0', ';is = 0', ';reader = 0', ';binary = 0', ';data = 0', ';file = 0', ';stream = 0', ';IN = 0', ';reader = 0', ';binary = 0', ';lines = 0', ';file = 0', ';Line = 0']"
603,"    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String ext = G_File.getExtensao(address);
        if (ext.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);
        }
        File temp = new File(localFileName + "".tmp"");
        if (temp.exists()) temp.delete();
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            try {
                URL url = new URL(address);
                conn = url.openConnection();
                in = conn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            out = new BufferedOutputStream(new FileOutputStream(temp));
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localFileName);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File nomeFinal = new File(localFileName);
        temp.renameTo(nomeFinal);
    }
 <SPLIT>     public static String ReadURL(URL url, boolean textonly) {
        try {
            URLConnection uconn = url.openConnection();
            Object ucont = uconn.getContent();
            if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly); else return """" + ucont;
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",307,,LABEL_0,LABEL_0,LABEL_0,-1,"download,address,localFileName,ext,temp,out,conn,in,url,buffer,numRead,numWritten,oldArq,nomeFinal",,13,41,0,,0,GA,6572,2.478393888473511,failed,"[';download = 0', ';print(download)', ';address = 0', ';localFileName = 0', ';print(localFileName)', ';ext = 0', ';temp = 0', ';url = 0', ';numRead = 0', ';output = 0', ';copy = 0', ';mode = 0']"
604,"    private void _checkLanguagesFiles(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {
        List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);
        for (int i = 0; i < list.size(); i++) {
            long langId = ((Language) list.get(i)).getId();
            try {
                String filePath = getGlobalVariablesPath() + ""cms_language_"" + langId + "".properties"";
                boolean copy = false;
                File from = new java.io.File(filePath);
                if (!from.exists()) {
                    from.createNewFile();
                    copy = true;
                }
                String tmpFilePath = getTemporyDirPath() + ""cms_language_"" + langId + ""_properties.tmp"";
                File to = new java.io.File(tmpFilePath);
                if (!to.exists()) {
                    to.createNewFile();
                    copy = true;
                }
                if (copy) {
                    FileChannel srcChannel = new FileInputStream(from).getChannel();
                    FileChannel dstChannel = new FileOutputStream(to).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                }
            } catch (IOException e) {
                Logger.error(this, ""_checkLanguagesFiles:Property File Copy Failed "" + e, e);
            }
        }
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",266,"    private void _checkLanes2(ActionRequest query, ActionResponse ps, PortletConfig cb, ActionForm obj) throws Exception {
        List li = (List) query.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);
        for (int pi = 0; pi < li.size(); pi++) {
            long blockCode = ((Language) li.get(pi)).getId();
            try {
                String  fileUrl = getGlobalVariablesPath() + ""cms_language_"" + blockCode + "".properties"";
                boolean copy = false;
                File url = new java.io.File( fileUrl);
                if (!url.exists()) {
                    url.createNewFile();
                    copy = true;
                }
                String tmpFilePath = getTemporyDirPath() + ""cms_language_"" + blockCode + ""_properties.tmp"";
                File to = new java.io.File(tmpFilePath);
                if (!to.exists()) {
                    to.createNewFile();
                    copy = true;
                }
                if (copy) {
                    FileChannel inputConnection = new FileInputStream(url).getChannel();
                    FileChannel drcConnection = new FileOutputStream(to).getChannel();
                    drcConnection.transferFrom(inputConnection, 0, inputConnection.size());
                    inputConnection.close();
                    drcConnection.close();
                }
            } catch (IOException e) {
                Logger.error(this, ""_checkLanguagesFiles:Property File Copy Failed "" + e, e);
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"_checkLanguagesFiles,req,res,config,form,list,i,langId,filePath,from,tmpFilePath,to,copy,srcChannel,dstChannel","_checkLanguagesFiles:0.011686325073242188,req:0.00031810998916625977,res:0.00038319826126098633,config:0.00031429529190063477,form:-2.855062484741211e-05,list:-0.0005588531494140625,i:-0.013030827045440674,langId:-0.0005785822868347168,filePath:-0.003908336162567139,from:-0.015533983707427979,tmpFilePath:-0.02151668071746826,to:-0.032356202602386475,copy:-0.08144664764404297,srcChannel:-0.007925808429718018,dstChannel:0.003503859043121338,",12,29,0,"_checkLanguagesFiles:_checkLanes2,dstChannel:drcConnection,res:ps,req:query,config:cb,form:obj,list:li,langId:blockCode,filePath: fileUrl,srcChannel:inputConnection,i:pi,from:url,",0,Greedy,492,0.18066242535909016,replace,[]
605,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",352,"    public static void link(File string, File site) {
        boolean result;
        if (string.isDirectory()) {
            File[] ubPages = string.listFiles();
            for (int uri = 0; uri < ubPages.length; uri++) {
                File nowDir = new File(site, ubPages[uri].getName());
                result = false;
                if (ubPages[uri].isDirectory()) {
                    if (nowDir.exists()) result = true; else result = nowDir.mkdirs();
                } else if (ubPages[uri].isFile()) {
                    try {
                        result = nowDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + nowDir, e);
                        result = false;
                    }
                }
                if (result) link(ubPages[uri], nowDir);
            }
        } else if (string.isFile()) {
            FileInputStream url = null;
            FileOutputStream img = null;
            try {
                url = new FileInputStream(string);
                img = new FileOutputStream(site);
                int pagelength = (int) string.length();
                char stringMatrix[] = new char[pagelength];
                int part;
                int eachCor;
                while ((eachCor = url.read()) != -1) {
                    img.write(eachCor);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (url != null) url.close();
                    if (img != null) img.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:0.009539902210235596,from:-0.006477534770965576,to:0.00048363208770751953,result:-0.008753955364227295,subFiles:-0.00022846460342407227,i:0.0007169246673583984,newDir:5.3882598876953125e-05,in:-0.002238929271697998,out:0.0019382238388061523,fileLength:0.00019603967666625977,charBuff:0.0003020167350769043,len:0.00029850006103515625,oneChar:0.0011864900588989258,",12,50,0,"copy:link,out:img,oneChar:eachCor,i:uri,to:site,charBuff:stringMatrix,len:part,fileLength:pagelength,newDir:nowDir,subFiles:ubPages,in:url,from:string,",0,Greedy,583,0.21311081250508626,replace,[]
606,"    public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(reqxml);
        return """";
    }
 <SPLIT>     protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
",698,"    public String processObject(java.lang.String servletUrl, java.lang.String message) {
        String Requestdocument = """";
        org.jdom.Document retdoc = null;
        String MyUrl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.myID == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) myID = codebase.getHost(); else myID = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                myID = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog idDig = new newgen.presentation.component.IPAddressPortNoDialog(MyUrl, myport);
            idDig.show();
            myID = MyUrl = idDig.getIPAddress();
            myport = idDig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", myID);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(myID);
        }
        try {
            System.out.println(""http://"" + myID + "":"" + myport + ""/newgenlibctxt/"" + servletUrl);
            java.net.URL url = new java.net.URL(""http://"" + myID + "":"" + myport + ""/newgenlibctxt/"" + servletUrl);
            java.net.URLConnection httpcon = (java.net.URLConnection) url.openConnection();
            httpcon.setDoOutput(true);
            httpcon.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream us = httpcon.getOutputStream();
            String request1txt = message;
            java.util.zip.CheckedOutputStream  bytes = new java.util.zip.CheckedOutputStream(us, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream( bytes);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(request1txt);
            dos.write(request1txt);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + httpcon.getContentEncoding() + ""  "" + httpcon.getContentType());
            java.io.InputStream ios = httpcon.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(Requestdocument);
        return """";
    }
;servleVersion = 0;print(servleVersion);servletonName = 0;print(servletonName); servletVersion = 0;print( servletVersion);servletsPath = 0;servletonPath = 0;serverDirectory = 0;print(serverDirectory)",LABEL_0,LABEL_0,LABEL_0,1,"sendRequest,servletName,request,reqxml,retdoc,myurl,myport,codebase,serverURL,ipdig,url,urlconn,os,req1xml,cos","sendRequest:0.0026572346687316895,servletName:0.0004630088806152344,request:0.0004724264144897461,reqxml:0.0004696846008300781,retdoc:-0.005245089530944824,myurl:0.002269566059112549,myport:0.0071395039558410645,codebase:0.004068255424499512,serverURL:0.0035445094108581543,ipdig:-0.007839202880859375,url:0.005289435386657715,urlconn:-0.04403311014175415,os:-0.015539348125457764,req1xml:-0.0022069811820983887,cos:0.000315248966217041,",11,38,0,"myport:myport,url:url,codebase:codebase,serverURL:myID,sendRequest:processObject,myurl:MyUrl,request:message,reqxml:Requestdocument,servletName:servletUrl,cos: bytes,req1xml:request1txt,retdoc:retdoc,ipdig:idDig,os:us,urlconn:httpcon,",0,Greedy,993,0.4163107673327128,inesrt,"[';servleVersion = 0', ';print(servleVersion)', ';servletonName = 0', ';print(servletonName)', '; servletVersion = 0', ';print( servletVersion)', ';servletsPath = 0', ';servletonPath = 0', ';serverDirectory = 0', ';print(serverDirectory)']"
607,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
 <SPLIT>     private DialogHelper(String title, final URL imageURL) {
        jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setAlwaysOnTop(true);
        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));
        jd.setTitle(title);
        JLabel jl = new JLabel();
        ImageIcon icon = new ImageIcon(imageURL);
        jl.setIcon(icon);
        jd.add(new JScrollPane(jl));
        final JFileChooser chooser = getSaveImageChooser();
        JPanel jp = new JPanel();
        JButton jb = new JButton(getMessage(""btn_save_as""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int returnVal = chooser.showSaveDialog(jd);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    String fileName = file.getPath();
                    String ext = StringUtil.getLowerExtension(fileName);
                    if (!""png"".equals(ext)) {
                        fileName += "".png"";
                        file = new File(fileName);
                    }
                    boolean doIt = true;
                    if (file.exists()) {
                        int i = JOptionPane.showConfirmDialog(jd, getMessage(""warn_file_exist""));
                        if (i != JOptionPane.YES_OPTION) doIt = false;
                    } else if (!file.getParentFile().exists()) {
                        doIt = file.getParentFile().mkdirs();
                    }
                    if (doIt) {
                        FileChannel src = null;
                        FileChannel dest = null;
                        try {
                            src = new FileInputStream(imageURL.getPath()).getChannel();
                            dest = new FileOutputStream(fileName).getChannel();
                            src.transferTo(0, src.size(), dest);
                        } catch (FileNotFoundException e1) {
                            warn(jd, getMessage(""err_no_source_file""));
                        } catch (IOException e2) {
                            warn(jd, getMessage(""err_output_target""));
                        } finally {
                            try {
                                if (src != null) src.close();
                            } catch (IOException e1) {
                            }
                            try {
                                if (dest != null) dest.close();
                            } catch (IOException e1) {
                            }
                            src = null;
                            dest = null;
                        }
                    }
                }
            }
        });
        jp.add(jb);
        jb = new JButton(getMessage(""btn_close""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jd.dispose();
            }
        });
        jp.add(jb);
        jd.add(jp);
        jd.pack();
        setCentral(jd);
    }
",78,,LABEL_1,LABEL_1,LABEL_1,-1,"createFile,src,filename,fis,fos",,5,11,0,,0,GA,1125,0.44225605328877765,failed,"[';createFile = 0', ';src = 0', ';filename = 0', ';fis = 0', ';createFolder = 0', ';string = 0', ';path = 0', ';slice = 0']"
608,"    public void read() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Reading the camera log, "" + url);
        }
        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        int i = 0;
        try {
            while ((line = in.readLine()) != null) {
                i++;
                try {
                    final CameraLogRecord logDatum = new CameraLogRecord(line);
                    records.add(logDatum);
                } catch (LogParseException e) {
                    if (log.isInfoEnabled()) {
                        log.info(""Bad record in "" + url + "" at line:"" + i);
                    }
                }
            }
        } finally {
            in.close();
        }
        Collections.sort(records);
        if (log.isInfoEnabled()) {
            log.info(""Finished reading the camera log, "" + url);
        }
    }
 <SPLIT>     public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",170,,LABEL_1,LABEL_1,LABEL_1,-1,"read,in,line,i,logDatum",,0,0,0,,0,GA,2396,0.8947213292121887,failed,[]
609,"    public final void navigate(final URL url) {
        try {
            EncogLogging.log(EncogLogging.LEVEL_INFO, ""Navigating to page:"" + url);
            final URLConnection connection = url.openConnection();
            final InputStream is = connection.getInputStream();
            navigate(url, is);
            is.close();
        } catch (final IOException e) {
            EncogLogging.log(EncogLogging.LEVEL_ERROR, e);
            throw new BrowseError(e);
        }
    }
 <SPLIT>     public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
",89,,LABEL_0,LABEL_0,LABEL_0,-1,"navigate,url,connection,is",,4,11,0,,0,GA,1880,0.683208171526591,failed,[]
610,"    private JButton getButtonSonido() {
        if (buttonSonido == null) {
            buttonSonido = new JButton();
            buttonSonido.setText(Messages.getString(""gui.AdministracionResorces.15""));
            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png"")));
            buttonSonido.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new SoundFilter());
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""sonidos/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setSonidoURL(rutaRelativa);
                            System.out.println(rutaGlobal + "" "" + rutaRelativa);
                            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png"")));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonSonido;
    }
 <SPLIT>     public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
",331,"    private JButton getbuttonSenira() {
        if (buttonSenardo == null) {
            buttonSenardo = new JButton();
            buttonSenardo.setText(Messages.getString(""gui.AdministracionResorces.15""));
            buttonSenardo.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png"")));
            buttonSenardo.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent  pe) {
                    JFileChooser flo = new JFileChooser();
                    flo.addChoosableFileFilter(new SoundFilter());
                    int continueValue = flo.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));
                    if (continueValue == JFileChooser.APPROVE_OPTION) {
                        File url = flo.getSelectedFile();
                        String rugaInternational = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + url.getName();
                        String rutaMalarivism = rutaDatos + ""sonidos/"" + url.getName();
                        try {
                            FileInputStream vIs = new FileInputStream(url);
                            FileOutputStream fileops = new FileOutputStream(rugaInternational, true);
                            FileChannel canalJuento = vIs.getChannel();
                            FileChannel canelCampania = fileops.getChannel();
                            canalJuento.transferTo(0, canalJuento.size(), canelCampania);
                            vIs.close();
                            fileops.close();
                            imagen.setSonidoURL(rutaMalarivism);
                            System.out.println(rugaInternational + "" "" + rutaMalarivism);
                            buttonSenardo.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png"")));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonSenardo;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"getButtonSonido,buttonSonido,e,fc,returnVal,file,rutaGlobal,rutaRelativa,fis,fos,canalFuente,canalDestino","getButtonSonido:0.01050865650177002,buttonSonido:-0.12029904127120972,e:-0.02439594268798828,fc:-0.10207360982894897,returnVal:-0.09242850542068481,file:-0.12344056367874146,rutaGlobal:-0.017664730548858643,rutaRelativa:-0.027021467685699463,fis:0.06186485290527344,fos:0.17139774560928345,canalFuente:0.00033539533615112305,canalDestino:0.009802639484405518,",12,36,0,"fos:fileops,fis:vIs,getButtonSonido:getbuttonSenira,canalDestino:canelCampania,canalFuente:canalJuento,rutaGlobal:rugaInternational,e: pe,rutaRelativa:rutaMalarivism,returnVal:continueValue,fc:flo,buttonSonido:buttonSenardo,file:url,",0,Greedy,525,0.19461248715718588,replace,[]
611,"    public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);
                AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();
                prepTable.deleteLinkType(stmt, name);
                ObjectLinkTable objectLinkTable = new ObjectLinkTable();
                objectLinkTable.deleteLinkType(stmt, name);
                String sql = ""delete from ClassLinkTypes where LinkName = '"" + name + ""'"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
 <SPLIT>     public void deleteAuthors() throws Exception {
        if (proposalIds.equals("""") || usrIds.equals("""")) throw new Exception(""No proposal or author selected."");
        String[] pids = proposalIds.split("","");
        String[] uids = usrIds.split("","");
        int pnum = pids.length;
        int unum = uids.length;
        if (pnum == 0 || unum == 0) throw new Exception(""No proposal or author selected."");
        int i, j;
        PreparedStatement prepStmt = null;
        try {
            con = database.getConnection();
            con.setAutoCommit(false);
            String pStr = ""delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?"";
            prepStmt = con.prepareStatement(pStr);
            for (i = 0; i < pnum; i++) {
                for (j = 0; j < unum; j++) {
                    if (!uids[j].equals(userId)) {
                        prepStmt.setString(1, pids[i]);
                        prepStmt.setString(2, uids[j]);
                        prepStmt.executeUpdate();
                    }
                }
            }
            con.commit();
        } catch (Exception e) {
            if (!con.isClosed()) {
                con.rollback();
                prepStmt.close();
                con.close();
            }
            throw e;
        }
    }
",200,"    public void connection(String url) throws FidoDatabaseException, CannotDeleteSysLinkError, ClassLinkTypeNotFoundRequest {
        try {
            Connection conn = null;
            Statement estsql = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                estsql = conn.createStatement();
                if (isSystemLink(estsql, url) == true) throw new CannotDeleteSysLinkError(url);
                AdjectivePrepositionTable parType = new AdjectivePrepositionTable();
                parType.deleteLinkType(estsql, url);
                ObjectLinkTable objectlinkTab = new ObjectLinkTable();
                objectlinkTab.deleteLinkType(estsql, url);
                String url = ""delete from ClassLinkTypes where LinkName = '"" + url + ""'"";
                estsql.executeUpdate(url);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (estsql != null) estsql.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
;delete = 0;CannotDeleteSystemLinkException = 0;print(CannotDeleteSystemLinkException);ClassLinkTypeNotFoundException = 0;objectLinkTable = 0;address = 0",LABEL_1,LABEL_1,LABEL_1,1,"delete,name,CannotDeleteSystemLinkException,ClassLinkTypeNotFoundException,conn,stmt,prepTable,objectLinkTable,sql","delete:-0.0031533241271972656,name:0.002216339111328125,CannotDeleteSystemLinkException:-0.007539212703704834,ClassLinkTypeNotFoundException:-0.011079847812652588,conn:0.014397203922271729,stmt:-0.002350032329559326,prepTable:-0.0033931732177734375,objectLinkTable:-0.0033032894134521484,sql:0.0025588274002075195,",8,25,0,"conn:conn,sql:url,name:url,stmt:estsql,delete:connection,objectLinkTable:objectlinkTab,prepTable:parType,CannotDeleteSystemLinkException:CannotDeleteSysLinkError,ClassLinkTypeNotFoundException:ClassLinkTypeNotFoundRequest,",0,Greedy,495,0.1872588833173116,inesrt,"[';delete = 0', ';CannotDeleteSystemLinkException = 0', ';print(CannotDeleteSystemLinkException)', ';ClassLinkTypeNotFoundException = 0', ';objectLinkTable = 0', ';address = 0']"
612,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        StringBuffer sb = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg",,9,39,0,,0,GA,4066,1.5353496392567954,failed,[]
613,"    public static String generateStackHashKey() {
        Exception e = null;
        try {
            throw new Exception();
        } catch (Exception ex) {
            e = ex;
        }
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(getStackTrace(e).getBytes());
            byte[] hash = digest.digest();
            String rtn = Base64.encode(new String(hash));
            if (keys.contains(rtn)) {
                return generatedIterStackHashKey(rtn);
            }
            keys.add(rtn);
            return rtn;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     public static String md5(String text) {
        String encrypted = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            encrypted = hex(md.digest());
        } catch (NoSuchAlgorithmException nsaEx) {
        }
        return encrypted;
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"generateStackHashKey,e,digest,hash,rtn",,5,16,0,,0,GA,1952,0.7207896153132121,failed,[]
614,"    public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public String httpRequestByPOST(String url, int timeout, List<NameValuePair> params) {
        String response = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);
            httpPost.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));
            HttpResponse serverResponse = httpClient.execute(httpPost);
            StatusLine statusLine = serverResponse.getStatusLine();
            if (statusLine.getStatusCode() < 400) {
                InputStream inputStream = serverResponse.getEntity().getContent();
                InputStreamReader inputReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputReader);
                StringBuffer buffer = new StringBuffer();
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    buffer.append(line);
                }
                response = buffer.toString();
                inputStream.close();
            } else {
                this.lastErrorCode = String.valueOf(statusLine.getStatusCode());
                this.lastErrorMessage = statusLine.getReasonPhrase();
                return null;
            }
        } catch (IOException e) {
            this.lastErrorCode = ""-1"";
            this.lastErrorMessage = e.getLocalizedMessage();
            return null;
        }
        return response;
    }
",1317,,LABEL_0,LABEL_1,,-4,"reader,ks,key,chain,os,stamper,appearance",,,,0,,0,Greedy,1,0.001223886013031006,,[]
615,"    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",403,,LABEL_1,LABEL_1,LABEL_1,-1,"setContenu,contenuFichier,fichierElectronique,utilisateurCourant,support,ficheDocument,nomFichier,extension,fichierElectroniqueExistant,idIgid,inputStream,outputStream,typeMime,tailleFichier",,13,59,0,,0,GA,6854,2.7084498484929402,failed,"[';print(fraudCompany)', ';fcheDocument = 0', ';print(fcheDocument)', '; fcheMatrix = 0', ';print( fcheMatrix)', '; ficheDocuments = 0', ';foiceDirectory = 0', ';fagueDirectory = 0', ';financeNumber = 0', ';fielCompany = 0', ';fichierElectroniquesXclusive = 0', ';print(fichierElectroniquesXclusive)', ';eventSteam = 0']"
616,"    private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",106,"    private void copyZip(File url, File edst) throws IOException {
        FileChannel sourceChannel = null;
        FileChannel DestChan = null;
        try {
            sourceChannel = new FileInputStream(url).getChannel();
            DestChan = new FileOutputStream(edst).getChannel();
            DestChan.transferFrom(sourceChannel, 0, sourceChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            sourceChannel.close();
            DestChan.close();
        }
    }
; srcConnection = 0;print( srcConnection);print(rcSocket);print(sourceConnection);print( srcchannel);print(srcSocket);print(dspConnection);print(DestConnection);print(DstConnection);dstsStream = 0;print( dstchannel);print(dstsConnection);print(ddestChan);print(DdestConnection);print(drestChannel);print(dstConnection);print(ddestConnection);drestchannel = 0;print(drestchannel);print(dstschannel);print(dstsChan);print(Dstchannel);ddestChannel = 0;print(ddestChannel);print(destConnection);print(ddestchannel);dstChan = 0;print(dstChan);dstchannel = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyJar,src,dst,srcChannel,dstChannel","copyJar:0.0009882450103759766,src:3.236532211303711e-05,dst:-0.0003508925437927246,srcChannel:0.0005211830139160156,dstChannel:0.0005294084548950195,",5,14,0,"copyJar:copyZip,dstChannel:DestChan,srcChannel:sourceChannel,src:url,dst:edst,",0,Greedy,528,0.21009546518325806,inesrt,"['; srcConnection = 0', ';print( srcConnection)', ';print(rcSocket)', ';print(sourceConnection)', ';print( srcchannel)', ';print(srcSocket)', ';print(dspConnection)', ';print(DestConnection)', ';print(DstConnection)', ';dstsStream = 0', ';print( dstchannel)', ';print(dstsConnection)', ';print(ddestChan)', ';print(DdestConnection)', ';print(drestChannel)', ';print(dstConnection)', ';print(ddestConnection)', ';drestchannel = 0', ';print(drestchannel)', ';print(dstschannel)', ';print(dstsChan)', ';print(Dstchannel)', ';ddestChannel = 0', ';print(ddestChannel)', ';print(destConnection)', ';print(ddestchannel)', ';dstChan = 0', ';print(dstChan)', ';dstchannel = 0']"
617,"    public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {
        String urlStr = System.getProperty(propertyName);
        if (urlStr == null || urlStr.length() == 0) {
            return null;
        }
        InputStream in = null;
        DOMRetriever xmlDoc = null;
        try {
            URL url = new URL(urlStr);
            xmlDoc = new DOMRetriever(in = url.openStream());
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        } finally {
            if (in != null) in.close();
        }
        return newInstance(xmlDoc);
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"loadFromSystemProperty,propertyName,urlStr,in,xmlDoc,url",,6,16,0,,0,GA,2478,0.9174538652102152,failed,"[';loadFromSystemProperty = 0', ';print(loadFromSystemProperty)', ';propertyName = 0', ';urlStr = 0', ';loadFromsystemProperty = 0', ';loadFromLocalproperty = 0', ';loadFormsystemproperty = 0', ';loadFormSystemString = 0', ';propertyValue = 0']"
618,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
",116,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,sourceFile,destFile,source,destination",,5,18,0,,0,GA,2331,0.8516620000203451,failed,"[';copyFile = 0', ';print(copyFile)', ';sourceFile = 0', ';print(sourceFile)', ';destFile = 0', ';print(destFile)', ';print(source)', ';print(destination)', ';print(cloneFile)', ';transferFiles = 0', ';print(transferFiles)', ';print(SourceDir)', ';print(destDirectory)', ';print(sourceDir)', ';SourceDirectory = 0', ';print(SourceDirectory)', ';print( sourceDir)', ';print(destfile)', ';print(srcFile)', ';ourceFile = 0', ';print(ourceFile)', ';print(SourceFolder)', ';print(sourceUrl)', ';output = 0', ';print(output)', ';print(server)']"
619,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String path = request.getPathInfo();
        if (!path.startsWith(alias)) {
            throw new ServletException(""Path '"" + path + ""' does not start with registered alias '"" + alias + ""'"");
        }
        String internal;
        if (alias.equals(""/"")) {
            internal = name + path;
        } else {
            internal = name + path.substring(alias.length(), path.length());
        }
        URL resource = httpContext.getResource(internal);
        if (resource == null) {
            return false;
        }
        String mimeType = servletContext.getMimeType(internal);
        if (mimeType != null) {
            response.setContentType(mimeType);
        }
        InputStream is = resource.openStream();
        OutputStream os = response.getOutputStream();
        IOUtils.copyAndClose(is, os);
        return true;
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0007565577824910481,,[]
620,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {
        retryTimes--;
        try {
            String url = getServiceUrl() + ""/"" + invocation.getMethod().getName();
            HttpPost postMethod = new HttpPost(url);
            if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));
            HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);
            StatusLine sl = rsp.getStatusLine();
            if (sl.getStatusCode() >= 300) {
                throw new RuntimeException(""Did not receive successful HTTP response: status code = "" + sl.getStatusCode() + "", status message = ["" + sl.getReasonPhrase() + ""]"");
            }
            HttpEntity entity = rsp.getEntity();
            StringBuilder sb = new StringBuilder();
            InputStream is = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""utf-8""));
            String line;
            while ((line = reader.readLine()) != null) sb.append(line).append(""\n"");
            reader.close();
            is.close();
            String responseBody = null;
            if (sb.length() > 0) {
                sb.deleteCharAt(sb.length() - 1);
                responseBody = sb.toString();
            }
            Type t = invocation.getMethod().getGenericReturnType();
            if (t.equals(Void.class) || responseBody == null) return null;
            return JsonUtils.fromJson(responseBody, t);
        } catch (ConnectTimeoutException e) {
            if (retryTimes < 0) throw e;
            if (urlFromDiscovery) {
                String serviceUrl = discoverServiceUrl(getServiceInterface().getName());
                if (!serviceUrl.equals(getServiceUrl())) {
                    setServiceUrl(serviceUrl);
                    log.info(""relocate service url:"" + serviceUrl);
                }
            }
            return invoke(invocation, retryTimes);
        }
    }
",182,,LABEL_0,LABEL_0,LABEL_0,-1,"uncaughtException,t,e,display,shell,message,e1",,4,10,0,,0,GA,3107,1.1781184951464334,failed,"[';uncaughtException = 0', ';print(uncaughtException)', ';t = 0', ';print(t)', ';e = 0', ';print(e)', ';display = 0', ';shell = 0', ';message = 0', ';e1 = 0', ';CaughtException = 0', ';print(CaughtException)', ';uncatchedexc = 0', ';uncaughtEvent = 0', ';CatchedEvent = 0', ';Catchedexc = 0', ';type = 0', ';object = 0', ';status = 0', ';copy = 0', ';math = 0', ';environment = 0', ';log = 0', ';exec = 0', ';status = 0', ';sym = 0', '; exception = 0', ';address = 0']"
621,"    @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
 <SPLIT>     public SRWGuiClient(String initialURL) {
        super(""Simple Swing Browser"");
        this.initialURL = initialURL;
        addWindowListener(new ExitListener());
        WindowUtilities.setNativeLookAndFeel();
        JPanel topPanel = new JPanel();
        topPanel.setBackground(Color.lightGray);
        homeButton = new JIconButton(""home.gif"");
        homeButton.addActionListener(this);
        JLabel urlLabel = new JLabel(""URL:"");
        urlField = new JTextField(30);
        urlField.setText(initialURL);
        urlField.addActionListener(this);
        topPanel.add(homeButton);
        topPanel.add(urlLabel);
        topPanel.add(urlField);
        getContentPane().add(topPanel, BorderLayout.NORTH);
        try {
            URL url = new URL(initialURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            boolean xml = true;
            String inputLine;
            StringBuffer content = new StringBuffer(), stylesheet = null;
            Transformer transformer = null;
            inputLine = in.readLine();
            if (inputLine == null) {
                System.out.println(""No input read from URL: "" + initialURL);
                return;
            }
            if (!inputLine.startsWith(""<?xml "")) {
                xml = false;
                content.append(inputLine);
            }
            if (xml) {
                inputLine = in.readLine();
                if (inputLine.startsWith(""<?xml-stylesheet "")) {
                    int offset = inputLine.indexOf(""href="");
                    String href = (inputLine.substring(inputLine.indexOf(""href="") + 6));
                    href = href.substring(0, href.indexOf('""'));
                    System.out.println(""href="" + href);
                    url = new URL(url, href);
                    String stylesheetURL = url.toString();
                    System.out.println(""stylesheet URL="" + url.toString());
                    transformer = (Transformer) transformers.get(stylesheetURL);
                    if (transformer == null) {
                        BufferedReader sheetIn = new BufferedReader(new InputStreamReader(url.openStream()));
                        sheetIn.readLine();
                        stylesheet = new StringBuffer();
                        while ((inputLine = sheetIn.readLine()) != null) stylesheet.append(inputLine).append('\n');
                        System.out.println(stylesheet.toString());
                        TransformerFactory tFactory = TransformerFactory.newInstance();
                        StreamSource xslSource = new StreamSource(new StringReader(stylesheet.toString()));
                        transformer = tFactory.newTransformer(xslSource);
                        transformers.put(stylesheetURL, transformer);
                    }
                }
            }
            while ((inputLine = in.readLine()) != null) content.append(inputLine).append('\n');
            htmlPane = new JEditorPane();
            if (transformer != null) {
                StringReader stringRecordReader = new StringReader(content.toString());
                StringWriter xmlRecordWriter = new StringWriter();
                StreamSource streamXMLRecord = new StreamSource(stringRecordReader);
                transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));
                String html = xmlRecordWriter.toString();
                int i = html.indexOf('>');
                html = ""<html>"" + html.substring(html.indexOf('>') + 1);
                System.out.println(html);
                htmlPane.setContentType(""text/html"");
                htmlPane.setText(""<html><head><META http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""><title>GSAFD Thesaurus</title></head><body><center><h2>GSAFD Thesaurus</h2></center><p>A thesaurus of genre terms to support the \""Guidelines on Subject Access to Individual Works of Fiction , Drama\"" (GSAFD)</p><table cellspacing=\""5\"" width=\""100%\""><tr><td><h3>Search</h3><p></p></td><td valign=\""top\""><h3>Browse</h3></td></tr></table></body></html>"");
            } else htmlPane.setText(content.toString());
            htmlPane.setEditable(false);
            htmlPane.addHyperlinkListener(this);
            JScrollPane scrollPane = new JScrollPane(htmlPane);
            getContentPane().add(scrollPane, BorderLayout.CENTER);
        } catch (IOException ioe) {
            warnUser(""Can't build HTML pane for "" + initialURL + "": "" + ioe);
        } catch (TransformerException e) {
        }
        Dimension screenSize = getToolkit().getScreenSize();
        int width = screenSize.width * 8 / 10;
        int height = screenSize.height * 8 / 10;
        setBounds(width / 8, height / 8, width, height);
        setVisible(true);
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"test_lookupResourceType_FullSearch_TwoWordsInMiddle,url,connection",,2,8,0,,0,GA,1436,0.5718677600224813,failed,"[';test_lookupResourceType_FullSearch_TwoWordsInMiddle = 0', ';print(test_lookupResourceType_FullSearch_TwoWordsInMiddle)', ';url = 0']"
622,"    private void Connect() throws NpsException {
        try {
            client = new FTPClient();
            client.connect(host.hostname, host.remoteport);
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                client = null;
                com.microfly.util.DefaultLog.error_noexception(""FTP Server:"" + host.hostname + ""refused connection."");
                return;
            }
            client.login(host.uname, host.upasswd);
            client.enterLocalPassiveMode();
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
 <SPLIT>     @Override
    public void run() {
        try {
            FTPClient ftp = new FTPClient();
            try {
                ftp.connect(""localhost"", 21);
                ftp.login(""ftpuser"", ""ftpuser123"");
                System.out.println(""Current: "" + ftp.printWorkingDirectory());
                System.out.println(""Dir status: "" + ftp.makeDirectory(DIR));
                ftp.changeWorkingDirectory(DIR);
                System.out.println(""File status: "" + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));
            } finally {
                ftp.disconnect();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",146,,LABEL_1,LABEL_1,LABEL_1,-1,"Connect,client,reply",,3,12,0,,0,GA,1259,0.4689493576685588,failed,[]
623,"    private String readTwitterFead() {
        StringBuilder builder = new StringBuilder();
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(""http://twitter.com/statuses/user_timeline/vogella.json"");
        try {
            HttpResponse response = client.execute(httpGet);
            StatusLine statusLine = response.getStatusLine();
            int statusCode = statusLine.getStatusCode();
            if (statusCode == 200) {
                HttpEntity entity = response.getEntity();
                InputStream content = entity.getContent();
                BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                String line;
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
            } else {
                Log.e(AndroidJsonTestingActivity.class.getName(), ""Failed to download file"");
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return builder.toString();
    }
 <SPLIT>     public void generate(String urlString, String target) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        BufferedInputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target));
        byte[] buf = new byte[10 * 1024];
        int len;
        while ((len = inputStream.read(buf, 0, buf.length)) != -1) {
            outputStream.write(buf, 0, len);
        }
        inputStream.close();
        outputStream.close();
        urlConnection.disconnect();
    }
",184,,LABEL_0,LABEL_0,LABEL_0,-1,"readTwitterFead,builder,client,httpGet,response,statusLine,statusCode,entity,content,reader,line",,2,6,0,,0,GA,4818,1.7840237617492676,failed,"[';readTwitterFead = 0', ';builder = 0', ';client = 0', ';httpGet = 0', ';response = 0', ';statusLine = 0', ';statusCode = 0', ';string = 0', ';output = 0', ';message = 0', ';statusResponse = 0', '; statusResponse = 0', ';statusBlock = 0', ';statusStatus = 0', ';statusCount = 0', '; statusType = 0', ';output = 0', ';object = 0', ';conn = 0', ';char = 0', ';iter = 0', ';str = 0', ';code = 0', ';point = 0']"
624,"    public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {
        this.zipFileName = url.toString();
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        unzipNativeFormatFile(inputStream);
        parseAlertFiles();
        deleteAlertFiles();
    }
",1317,,LABEL_0,LABEL_1,,-4,"reader,ks,key,chain,os,stamper,appearance",,,,0,,0,Greedy,1,0.0010615189870198567,,[]
625,"    public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preStm = null;
        String sql = ""insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)"";
        String cleanSql = ""delete from COFFICE_JOBLOG_CHECKAUTH where "" + ""user_id = '"" + userId + ""' and check_type = '"" + checkType + ""' and obj_type = '"" + objType + ""'"";
        try {
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            preStm = connection.prepareStatement(cleanSql);
            int dCount = preStm.executeUpdate();
            String sHaveIns = "","";
            preStm = connection.prepareStatement(sql);
            for (int j = 0; j < checkId.length; j++) {
                if (sHaveIns.indexOf("","" + checkId[j] + "","") < 0) {
                    preStm.setInt(1, Integer.parseInt(userId));
                    preStm.setInt(2, Integer.parseInt(checkId[j]));
                    preStm.setInt(3, Integer.parseInt(checkType));
                    preStm.setInt(4, Integer.parseInt(objType));
                    preStm.executeUpdate();
                    sHaveIns += checkId[j] + "","";
                }
            }
            connection.commit();
        } catch (Exception ex) {
            log.debug((new Date().toString()) + "" ������Ȩ��ʧ��! "");
            try {
                connection.rollback();
            } catch (SQLException e) {
                throw e;
            }
            throw ex;
        } finally {
            close(null, null, preStm, connection, dbo);
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",321,,LABEL_0,LABEL_0,LABEL_0,-1,"insertJobLog,userId,checkId,checkType,objType,dbo,connection,preStm,sql,cleanSql,dCount,sHaveIns,j",,12,43,0,,0,GA,6181,2.3879807591438293,failed,[';userId = 0']
626,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",452,"    public void modifyExternalMsg(String localales, String msgKey, String responseVal) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File EnglishFiles = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesfileURL = i18nPath + ""TranubeConstants_"" + localales + "".properties"";
            File file = new File(propertiesfileURL);
            if (!file.exists()) {
                FileReader in = new FileReader(EnglishFiles);
                FileWriter out = new FileWriter(file);
                int cont;
                while ((cont = in.read()) != -1) out.write(cont);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + localales + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String url = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((url = breader.readLine()) != null) {
                if (url.startsWith(""#"")) strBuilder.append(url).append(""
""); else {
                    String[] circle = url.split(""="");
                    if (circle.length == 2) {
                        if (circle[0].trim().equals(msgKey)) {
                            strBuilder.append(circle[0].trim() + "" = "" + responseVal + ""
"");
                            found = true;
                        } else strBuilder.append(url).append(""
"");
                    } else strBuilder.append(url).append(""
"");
                }
            }
            if (!found) strBuilder.append(msgKey).append("" = "").append(responseVal).append(""
"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found","modifyApplicationMessage:-0.0026243925094604492,locale:-0.0008435249328613281,messageName:-0.005095779895782471,messageValue:-0.0016861557960510254,properties:-0.001723945140838623,i18nPath:0.008132398128509521,englishFile:-0.0076354146003723145,propertiesFilePath:0.003213226795196533,file:-0.032259464263916016,in:-0.01792246103286743,out:-0.018219947814941406,c:-0.0037780404090881348,is:-0.0808568000793457,breader:-0.028967320919036865,line:-0.014657139778137207,strBuilder:-0.04737520217895508,pieces:0.0001392960548400879,found:-0.023095905780792236,",9,29,0,"i18nPath:i18nPath,propertiesFilePath:propertiesfileURL,pieces:circle,locale:localales,messageValue:responseVal,properties:properties,modifyApplicationMessage:modifyExternalMsg,c:cont,messageName:msgKey,englishFile:EnglishFiles,line:url,",0,Greedy,482,0.18310493230819702,replace,[]
627,"    public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {
        File destFile = new File(dest);
        InputStream in = new FileInputStream(new File(src));
        OutputStream out = new FileOutputStream(destFile);
        byte buf[] = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     public static Reader getReader(String url) throws MalformedURLException, IOException {
        if (url.startsWith(""file:"")) return new FileReader(url.substring(5)); else if (url.startsWith(""http:"")) return new InputStreamReader(new URL(url).openStream());
        throw new MalformedURLException(""Invalid URI schema, file: or http: expected."");
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFileTo,src,dest,destFile,in,out,buf,len",,8,19,0,,0,GA,2610,0.9684508800506592,failed,"[';copyFileTo = 0', ';src = 0', ';out = 0', '; copyFilesTo = 0', ';copyfileInfo = 0', ';string = 0', ';slice = 0', ';targetDir = 0']"
628,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
",96,,LABEL_1,LABEL_0,,-4,"copyFile,in,out,inChannel,outChannel",,,,0,,0,Greedy,1,0.0007450103759765625,,[]
629,"    @ActionMethod
    public void upload() throws IOException {
        final int fileResult = fileChooser.showOpenDialog(frame);
        if (fileResult != JFileChooser.APPROVE_OPTION) {
            return;
        }
        final InputStream in = new FileInputStream(fileChooser.getSelectedFile());
        try {
            final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/databases/"" + fileChooser.getSelectedFile().getName());
            final HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(""PUT"");
            con.setDoOutput(true);
            con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
            con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
            con.setRequestProperty(Http11Header.CONTENT_LENGTH, Long.toString(fileChooser.getSelectedFile().length()));
            con.setRequestProperty(Http11Header.CONTENT_TYPE, ""application/octet-stream"");
            final OutputStream out = con.getOutputStream();
            try {
                Util.copy(in, out);
                con.connect();
                final InputStream in2 = con.getInputStream();
                try {
                    textArea.setText("""");
                    final byte[] buf = new byte[4096];
                    for (int bytesRead; (bytesRead = in2.read(buf)) != -1; ) {
                        textArea.append(new String(buf, 0, bytesRead));
                    }
                } finally {
                    in2.close();
                }
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
 <SPLIT>     public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",300,,LABEL_0,LABEL_0,LABEL_0,-1,"upload,fileResult,in,url,con,out,in2,buf,bytesRead",,8,29,0,,0,GA,4038,1.521197541554769,failed,[]
630,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL url = new URL(""http"", HOST, FILE);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
 <SPLIT>     public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.getWriter().write(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
        try {
            s.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
",129,"    private static InputStream getCMSResultAsStream(String riliquery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL string = new URL(""http"", HOST, FILE);
            URLConnection conn = string.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(riliquery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getCMSResultAsStream,rqlQuery,osr,url,conn","getCMSResultAsStream:-6.449222564697266e-05,rqlQuery:6.562471389770508e-05,osr:-7.790327072143555e-05,url:1.9848346710205078e-05,conn:-4.178285598754883e-05,",2,4,0,"rqlQuery:riliquery,url:string,",0,Greedy,91,0.032715022563934326,replace,[]
631,"    public static String connRemote(JSONObject jsonObject, String OPCode) {
        String retSrc = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
 <SPLIT>     public static String sendPost(String url, String param) {
        String result = """";
        try {
            URL httpurl = new URL(url);
            HttpURLConnection httpConn = (HttpURLConnection) httpurl.openConnection();
            httpConn.setRequestProperty(""Accept-Language"", ""zh-CN"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            PrintWriter out = new PrintWriter(httpConn.getOutputStream());
            out.print(param);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), ""UTF-8""));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
            in.close();
        } catch (Exception e) {
            MsgPrint.showMsg(e.getMessage());
        }
        return result;
    }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"connRemote,jsonObject,OPCode,retSrc,httpClient,httpPost,httpParams,nameValuePair,response",,7,17,0,,0,GA,4011,1.4842941761016846,failed,"[';connRemote = 0', ';print(connRemote)', ';jsonObject = 0', ';OPCode = 0', ';retSrc = 0', ';httpParams = 0', ';nameValuePair = 0', '; jsonString = 0', ';javaString = 0', ';nameValuePointair = 0', ';throw = 0', ';status = 0']"
632,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
",862,,LABEL_1,LABEL_1,LABEL_1,-1,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,23,113,0,,0,GA,10164,4.346502248446146,failed,[';split = 0']
633,"    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == jbutton) {
            try {
                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";
                URL servleturl = new URL(toservlet);
                URLConnection servletconnection = servleturl.openConnection();
                servletconnection.setDoInput(true);
                servletconnection.setDoOutput(true);
                servletconnection.setUseCaches(false);
                servletconnection.setDefaultUseCaches(false);
                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                inputFromClient.readByte();
                OutputStream fos = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");
                byte[] buf = new byte[1024];
                int bytesread;
                while ((bytesread = inputFromClient.read(buf)) > -1) {
                    fos.write(buf, 0, bytesread);
                }
                inputFromClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>     private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {
        if (increasePkBy < 1) increasePkBy = 1;
        String where = ""where eoentity_name = '"" + entityName + ""'"";
        if (false) {
            EOEditingContext ec = ERXEC.newEditingContext();
            ec.lock();
            try {
                EODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);
                dbc.lock();
                try {
                    EOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);
                    EOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();
                    NSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);
                    return (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();
                } finally {
                    dbc.unlock();
                }
            } finally {
                ec.unlock();
            }
        } else {
            ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);
            Connection con = broker.getConnection();
            try {
                try {
                    con.setAutoCommit(false);
                    con.setReadOnly(false);
                } catch (SQLException e) {
                    log.error(e, e);
                }
                for (int tries = 0; tries < count; tries++) {
                    try {
                        ResultSet resultSet = con.createStatement().executeQuery(""select pk_value from pk_table "" + where);
                        con.commit();
                        boolean hasNext = resultSet.next();
                        long pk = 1;
                        if (hasNext) {
                            pk = resultSet.getLong(""pk_value"");
                            con.createStatement().executeUpdate(""update pk_table set pk_value = "" + (pk + increasePkBy) + "" "" + where);
                        } else {
                            pk = maxIdFromTable(entityName);
                            con.createStatement().executeUpdate(""insert into pk_table (eoentity_name, pk_value) values ('"" + entityName + ""', "" + (pk + increasePkBy) + "")"");
                        }
                        con.commit();
                        return new Long(pk);
                    } catch (SQLException ex) {
                        String s = ex.getMessage().toLowerCase();
                        boolean creationError = (s.indexOf(""error code 116"") != -1);
                        creationError |= (s.indexOf(""pk_table"") != -1 && s.indexOf(""does not exist"") != -1);
                        creationError |= s.indexOf(""ora-00942"") != -1;
                        if (creationError) {
                            try {
                                con.rollback();
                                log.info(""creating pk table"");
                                con.createStatement().executeUpdate(""create table pk_table (eoentity_name varchar(100) not null, pk_value integer)"");
                                con.createStatement().executeUpdate(""alter table pk_table add primary key (eoentity_name)"");
                                con.commit();
                            } catch (SQLException ee) {
                                throw new NSForwardException(ee, ""could not create pk table"");
                            }
                        } else {
                            throw new NSForwardException(ex, ""Error fetching PK"");
                        }
                    }
                }
            } finally {
                broker.freeConnection(con);
            }
        }
        throw new IllegalStateException(""Couldn't get PK"");
    }
",170,,LABEL_0,LABEL_0,LABEL_0,-1,"actionPerformed,ae,toservlet,servleturl,servletconnection,inputFromClient,fos,buf,bytesread",,8,23,0,,0,GA,4024,2.055415443579356,failed,[';print(ee)']
634,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,6,16,0,,0,GA,2701,1.198110028107961,failed,"[';copyFile = 0', ';fis = 0', ';print(canalFuente)', ';jmodel2 = 0']"
635,"    private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",138,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFileTo,destination,srcChannel,destChannel",,0,0,0,,0,GA,1702,0.6344259103139241,failed,[]
636,"    private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
 <SPLIT>     @Override
    public URLConnection openConnection(URL url) throws IOException {
        if (!url.getProtocol().equals(""file"")) {
            String name = url.getFile();
            File f = new File(cacheFolder, ((name.charAt(0) == '/') ? name.substring(1) : name).replace('/', File.separatorChar));
            if (!f.exists()) {
                File f2 = new File(f.getParentFile(), f.getName() + ""-not_found"");
                if (!f2.exists()) {
                    try {
                        f.getParentFile().mkdirs();
                        downloadFile(url, f);
                    } catch (IOException e) {
                        f.delete();
                        throw e;
                    }
                }
            }
            return f.toURI().toURL().openConnection();
        }
        return super.openConnection(url);
    }
",361,,LABEL_0,LABEL_1,,-4,"forBundle,manip,bout,zout,bundle,files,url,name,mf,tmpFile,ref",,,,0,,0,Greedy,1,0.0006279826164245605,,[]
637,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",131,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,4,13,0,,0,GA,2173,0.8150391141573589,failed,"[';outputStream = 0', ';print(outputStream)', ';inputChannel = 0', ';outputChannel = 0', ';replace = 0', ';cmp = 0', ';split = 0', ';put = 0', ';fpTo = 0', '; fileTarget = 0', ';outputPath = 0', ';referenceSteam = 0', ';referenceSocket = 0']"
638,"    public Wget2(URL url, File f) throws IOException {
        System.out.println(""bajando: "" + url);
        if (f == null) {
            by = new ByteArrayOutputStream();
        } else {
            by = new FileOutputStream(f);
        }
        URLConnection uc = url.openConnection();
        if (uc instanceof HttpURLConnection) {
            leerHttp((HttpURLConnection) uc);
        } else {
            throw new IOException(""solo se pueden descargar url http"");
        }
    }
 <SPLIT>     public static String getURLContent(String urlPath, String requestData, String charset) {
        BufferedReader reader = null;
        HttpURLConnection conn = null;
        StringBuffer buffer = new StringBuffer();
        OutputStreamWriter out = null;
        try {
            URL url = new URL(urlPath);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setDefaultUseCaches(false);
            conn.setConnectTimeout(10000);
            conn.setReadTimeout(60000);
            out = new OutputStreamWriter(conn.getOutputStream(), charset);
            out.write(requestData);
            out.flush();
            int repCode = conn.getResponseCode();
            if (repCode == 200) {
                int count = 0;
                char[] chBuffer = new char[1024];
                BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream(), charset));
                while ((count = input.read(chBuffer)) != -1) {
                    buffer.append(chBuffer, 0, count);
                }
            }
        } catch (Exception ex) {
            logger.error("""", ex);
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
                if (reader != null) {
                    reader.close();
                }
                if (conn != null) {
                    conn.disconnect();
                }
            } catch (Exception ex) {
            }
        }
        return buffer.toString();
    }
",89,,LABEL_0,LABEL_0,LABEL_0,-1,"url,f,by,uc",,4,12,0,,0,GA,1970,0.7309770266215007,failed,"[';url = 0', ';print(url)', ';f = 0']"
639,"    public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
 <SPLIT>     public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {
        ProjectDeploymentConfiguration config = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProjectDeploymentConfigurations"" + ""(projectID, name, description) VALUES ("" + projectID + "", '"" + name + ""', '"" + description + ""')"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProjectDeploymentConfigurations WHERE "" + "" projectID   = "" + projectID + ""  AND "" + "" name        = '"" + name + ""' AND "" + "" description = '"" + description + ""'"";
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create "" + ""ProjectDeploymentConfiguration failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            config = getProjectDeploymentConfiguration(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProjectDeploymentConfig"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return config;
    }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"getUniqueKey,digest,md,timeVal,localHost,randVal,val",,4,11,0,,0,GA,3074,1.146544913450877,failed,"[';getUniqueKey = 0', ';print(getUniqueKey)', ';digest = 0', ';md = 0', ';timeVal = 0', ';randVal = 0', ';getStringLink = 0', ';getStringHash = 0']"
640,"    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == jbutton) {
            try {
                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";
                URL servleturl = new URL(toservlet);
                URLConnection servletconnection = servleturl.openConnection();
                servletconnection.setDoInput(true);
                servletconnection.setDoOutput(true);
                servletconnection.setUseCaches(false);
                servletconnection.setDefaultUseCaches(false);
                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                inputFromClient.readByte();
                OutputStream fos = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");
                byte[] buf = new byte[1024];
                int bytesread;
                while ((bytesread = inputFromClient.read(buf)) > -1) {
                    fos.write(buf, 0, bytesread);
                }
                inputFromClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",170,"    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == jbutton) {
            try {
                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";
                URL servletfile = new URL(toservlet);
                URLConnection servletconnection = servletfile.openConnection();
                servletconnection.setDoInput(true);
                servletconnection.setDoOutput(true);
                servletconnection.setUseCaches(false);
                servletconnection.setDefaultUseCaches(false);
                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                inputFromClient.readByte();
                OutputStream Foses = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");
                byte[] buf = new byte[1024];
                int bytesread;
                while ((bytesread = inputFromClient.read(buf)) > -1) {
                    Foses.write(buf, 0, bytesread);
                }
                inputFromClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"actionPerformed,ae,toservlet,servleturl,servletconnection,inputFromClient,fos,buf,bytesread","actionPerformed:-0.0011284947395324707,ae:0.0007008910179138184,toservlet:0.0014796257019042969,servleturl:0.004014313220977783,servletconnection:-0.01773858070373535,inputFromClient:-0.010427474975585938,fos:0.005379378795623779,buf:-0.004429221153259277,bytesread:0.0032640695571899414,",2,4,0,"fos:Foses,servleturl:servletfile,",0,Greedy,92,0.033165963490804036,replace,[]
641,"    private InputStream openStreamRaw(String filename) {
        InputStream stream = null;
        if (filename == null) return null;
        if (filename.length() == 0) {
            return null;
        }
        try {
            URL url = new URL(filename);
            stream = url.openStream();
            return stream;
        } catch (MalformedURLException mfue) {
        } catch (FileNotFoundException fnfe) {
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        ClassLoader cl = getClass().getClassLoader();
        stream = cl.getResourceAsStream(""data/"" + filename);
        if (stream != null) {
            String cn = stream.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return stream;
            }
        }
        stream = cl.getResourceAsStream(filename);
        if (stream != null) {
            String cn = stream.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return stream;
            }
        }
        return stream;
    }
 <SPLIT>     private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String ext = G_File.getExtensao(address);
        if (ext.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);
        }
        File temp = new File(localFileName + "".tmp"");
        if (temp.exists()) temp.delete();
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            try {
                URL url = new URL(address);
                conn = url.openConnection();
                in = conn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            out = new BufferedOutputStream(new FileOutputStream(temp));
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localFileName);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File nomeFinal = new File(localFileName);
        temp.renameTo(nomeFinal);
    }
",204,,LABEL_0,LABEL_0,LABEL_0,-1,"openStreamRaw,filename,stream,url,cl,cn",,6,28,0,,0,GA,2966,1.124962365627289,failed,"[';openStreamRaw = 0', ';print(openStreamRaw)', ';filename = 0', ';print(filename)', ';stream = 0', ';url = 0', ';cl = 0', ';createStreamAsync = 0', ';print(createStreamAsync)', ';size = 0', ';prefix = 0', ';fd = 0', ';sql = 0', ';phrase = 0']"
642,"    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.getWriter().write(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
        try {
            s.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
",69,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFileByNIO,in,out,sourceChannel,destinationChannel",,5,12,0,,0,GA,2243,0.817054005463918,failed,"[';copyFileByNIO = 0', ';sourceChannel = 0', ';string = 0', ';target = 0', ';prefix = 0']"
643,"    public InputSource resolveEntity(String publicId, String systemId) {
        String resolved = getResolvedEntity(publicId, systemId);
        if (resolved != null) {
            try {
                InputSource iSource = new InputSource(resolved);
                iSource.setPublicId(publicId);
                URL url = new URL(resolved);
                InputStream iStream = url.openStream();
                iSource.setByteStream(iStream);
                return iSource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);
                return null;
            }
        }
        return null;
    }
 <SPLIT>     public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"resolveEntity,publicId,systemId,resolved,iSource,url,iStream",,5,13,0,,0,GA,3008,1.1091525236765543,failed,"[';print( publicData)', '; publicID = 0']"
644,"    public void postData(String protocol, String host, String form, String data) throws Exception {
        if ((protocol == null) || (protocol.equals(""""))) {
            protocol = DEFAULT_PROTOCOL;
        }
        if ((host == null) || (host.equals(""""))) {
            host = DEFAULT_HOST;
        }
        if (form == null) {
            form = DEFAULT_FORM;
        }
        if (data == null) {
            throw new IllegalArgumentException(""Invalid data"");
        }
        URL url = new URL(protocol, host, form);
        URLConnection con = url.openConnection();
        con.setDoOutput(true);
        con.setDoInput(true);
        con.setUseCaches(false);
        con.setRequestProperty(""Content-type"", ""application/x-www-form-urlencoded"");
        con.setRequestProperty(""Content-length"", String.valueOf(data.length()));
        PrintStream out = new PrintStream(con.getOutputStream(), true);
        out.print(data);
        out.close();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        while (in.readLine() != null) {
        }
        in.close();
    }
 <SPLIT>     public static ArrayList<String> loadURLToStrings(URL url, int maxLines, String userAgent, int timeout) throws IOException {
        URLConnection connection = url.openConnection();
        if (userAgent != null && userAgent.trim().length() > 0) {
            connection.setRequestProperty(""User-Agent"", userAgent);
        } else {
            connection.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (compatible; astrominer/1.0;)"");
        }
        if (timeout > 0) {
            connection.setConnectTimeout(timeout);
        }
        connection.connect();
        return loadURLToStrings(connection, maxLines);
    }
",237,,LABEL_0,LABEL_0,LABEL_0,-1,"postData,protocol,host,form,data,url,con,out,in",,3,14,0,,0,GA,4310,1.6109565059343973,failed,"[';postData = 0', ';print(postData)', ';protocol = 0', ';host = 0', ';form = 0', ';data = 0', ';url = 0', ';con = 0', '; postText = 0', ';postBody = 0', ';scheec = 0', ';prototype = 0', ';print(prototype)', ';base = 0', ';print(URL)', ';fl = 0', ';print(connection)', ';open = 0', ';print(open)']"
645,"    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == jbutton) {
            try {
                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";
                URL servleturl = new URL(toservlet);
                URLConnection servletconnection = servleturl.openConnection();
                servletconnection.setDoInput(true);
                servletconnection.setDoOutput(true);
                servletconnection.setUseCaches(false);
                servletconnection.setDefaultUseCaches(false);
                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                inputFromClient.readByte();
                OutputStream fos = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");
                byte[] buf = new byte[1024];
                int bytesread;
                while ((bytesread = inputFromClient.read(buf)) > -1) {
                    fos.write(buf, 0, bytesread);
                }
                inputFromClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",170,,LABEL_0,LABEL_0,LABEL_0,-1,"actionPerformed,ae,toservlet,servleturl,servletconnection,inputFromClient,fos,buf,bytesread",,8,23,0,,0,GA,3997,1.5052396337191263,failed,"[';actionPerformed = 0', ';print(actionPerformed)', ';ae = 0', ';print(ae)', ';toservlet = 0', ';print(toservlet)', ';servleturl = 0', ';print(servleturl)', ';servletconnection = 0', ';print(servletconnection)', ';inputFromClient = 0', ';print(inputFromClient)', ';fos = 0', ';buf = 0', ';print(buf)', ';bytesread = 0', ';print(bytesread)', ';print(actionConressed)', ';actionPeruted = 0', ';print(actionPeruted)', ';actionExecformed = 0', ';actionExecressed = 0', ';eventPerressed = 0', ';actionConuted = 0', ';toseserveet = 0', ';toseservelete = 0', ';topserverler = 0', ';topserverle = 0', ';outputfromURL = 0', ';outputfromCL = 0', ';uint = 0']"
646,"    private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",194,,LABEL_1,LABEL_1,LABEL_1,-1,"recurseFiles,root,file,zaos,absolute,files,file2,filename,zae,fis",,7,28,0,,0,GA,4603,1.7890854040781656,failed,"[';recurseFiles = 0', ';print(recurseFiles)', ';root = 0', ';print(root)', ';file = 0', ';zaos = 0', ';absolute = 0', ';file2 = 0', ';zae = 0', ';fis = 0', '; recursiveItems = 0', ';recorderFiles = 0', ';recorderImages = 0', ';directory = 0', ';path = 0', ';string = 0', ';dir = 0', ';prefix = 0', ';number = 0', ';attribute = 0']"
647,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",272,"    private static void readAndrewrap(File loginFilename, File offPlace) throws IOException {
        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciris);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, ciris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + loginFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(offPlace)));
        DcmEncodeParam dcmSecPart = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmSecPart);
        ds.writeHeader(url, dcmSecPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + offPlace + ""..."");
        PixelDataWriter ddReader = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        ddReader.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",8,33,0,"outFile:offPlace,readAndRewrite:readAndrewrap,inFile:loginFilename,iis:ciris,dcmEncParam:dcmSecPart,dcmParser:dmissionPlugin,out:url,pdWriter:ddReader,",0,Greedy,423,0.1529577851295471,replace,[]
648,"        public MobileAgentProperties(Class declaringClass, String propertyFile) throws IOException {
            this.defaults = (MobileAgent) AnnotationElement.getAnyAnnotation(declaringClass, MobileAgent.class);
            URL url = getClass().getClassLoader().getResource(propertyFile);
            if (url != null) {
                props.load(url.openStream());
                log.info(""MobileAgent parameters loaded from file "" + url);
            }
        }
 <SPLIT>     public static Reader getReader(String url) throws MalformedURLException, IOException {
        if (url.startsWith(""file:"")) return new FileReader(url.substring(5)); else if (url.startsWith(""http:"")) return new InputStreamReader(new URL(url).openStream());
        throw new MalformedURLException(""Invalid URI schema, file: or http: expected."");
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"declaringClass,propertyFile,defaults,url",,4,9,0,,0,GA,948,0.35584720770517986,failed,"[';print(url)', ';declaringLine = 0', ';DecliningClass = 0', ';DeclaringClass = 0', ';claringLine = 0', ';claredLine = 0', ';print(claredLine)', ';declacingClass = 0', ';decliningLine = 0', ';PropertyString = 0', ';propertyName = 0', ';propertyString = 0']"
649,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",279,,LABEL_0,LABEL_0,LABEL_0,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,10,35,0,,0,GA,7151,2.7065710107485454,failed,"[';createOutputStream = 0', ';inFile = 0', ';outFile = 0', ';k_blockSize = 0', ';byteCount = 0', ';targetDirectory = 0']"
650,"    public void update(String channelPath, String dataField, String fatherDocId) {
        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = '"" + fatherDocId + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherDocId + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String url = """";
            boolean flag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(sqlInitial);
            rs = ps.executeQuery();
            if (rs.next()) url = rs.getString(1);
            if (!url.equals("""")) {
                st = new StringTokenizer(url, "","");
                String sortDocId = """";
                while (st.hasMoreTokens()) {
                    if (flag) {
                        sortDocId = ""'"" + st.nextToken() + ""'"";
                        flag = false;
                    } else {
                        sortDocId = sortDocId + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;
                ps = conn.prepareStatement(sqlsort);
                rs = ps.executeQuery();
                String sortURL = """";
                boolean sortflag = true;
                while (rs.next()) {
                    if (sortflag) {
                        sortURL = rs.getString(1);
                        sortflag = false;
                    } else {
                        sortURL = sortURL + "","" + rs.getString(1);
                    }
                }
                ps = conn.prepareStatement(sqlsortURL);
                ps.setString(1, sortURL);
                ps.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, ps, conn, dbo);
        }
    }
 <SPLIT>     public String kodetu(String testusoila) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        try {
            md.update(testusoila.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",437,,LABEL_0,LABEL_0,LABEL_0,-1,"update,channelPath,dataField,fatherDocId,sqlInitial,sqlsortURL,conn,rs,ps,dbo,url,st,sortDocId,flag,sqlsort,sortURL,sortflag",,6,30,0,,0,GA,7764,3.0152143279711408,failed,"[';update = 0', ';print(update)', ';print(edit)', ';print( sqlInitialized)', ';print(sqlInitialized)', ';print(qlInitialized)', ';print(sqlsendSSL)', ';print(ports)']"
651,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, ""SJIS""));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, ""UTF8""));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println(""An I/O Exception Occurred: "" + e);
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,6,16,0,,0,GA,2594,0.950752874215444,failed,[]
652,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
",85,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,s,m",,2,5,0,,0,GA,1330,0.5000171065330505,failed,"[';getMD5 = 0', ';s = 0', ';m = 0', ';comments = 0', ';c = 0', ';lines = 0', ';str = 0', ';sym = 0']"
653,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",120,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,0,0,0,,0,GA,3019,1.0935884396235147,failed,[]
654,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",267,,LABEL_1,LABEL_1,LABEL_1,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5",,11,35,0,,0,GA,5636,2.118572807312012,failed,[]
655,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",230,"    public static void ssh(File in, File connection) throws IOException {
        if (in.exists() && in != null && connection != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    connection.mkdirs();
                } else {
                    connection.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""url"";
            String target = connection.isDirectory() ? ""directory"" : ""url"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File url : files) {
                        ssh(url, new File(connection, url.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel inch = new FileOutputStream(connection).getChannel();
                    inCh.transferTo(0, inCh.size(), inch);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,source,target,files,file,inCh,outCh","copy:0.010347545146942139,in:0.0015341639518737793,out:0.0029032230377197266,source:0.001005709171295166,target:0.0008336305618286133,files:-0.0017424225807189941,file:0.0018519759178161621,inCh:-0.00015044212341308594,outCh:0.0019129514694213867,",4,17,0,"copy:ssh,out:connection,outCh:inch,file:url,",0,Greedy,206,0.07846918900807699,replace,[]
656,"    private String hashPassword(String password) throws NoSuchAlgorithmException {
        String hash = null;
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        log.debug(""secure hash on password "" + password);
        md.update(password.getBytes());
        hash = new String(Base64.encodeBase64(md.digest()));
        log.debug(""returning hash "" + hash);
        return hash;
    }
 <SPLIT>     public static String encryptPassword(String plainPassword) {
        StringBuffer sb = new StringBuffer();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(plainPassword.getBytes());
            byte[] digestBytes = messageDigest.digest();
            String hex = null;
            for (int i = 0; i < digestBytes.length; i++) {
                hex = Integer.toHexString(0xFF & digestBytes[i]);
                if (hex.length() < 2) sb.append(""0"");
                sb.append(hex);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return new String(sb);
    }
",83,,LABEL_1,LABEL_1,LABEL_1,-1,"hashPassword,password,hash,md",,4,14,0,,0,GA,1461,0.545243748029073,failed,"[';string = 0', ';path = 0', ';address = 0', ';pattern = 0', ';addr = 0']"
657,"    private void copyParseFileToCodeFile() throws IOException {
        InputStream in = new FileInputStream(new File(filenameParse));
        OutputStream out = new FileOutputStream(new File(filenameMisc));
        byte[] buffer = new byte[1024];
        int length;
        while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);
        in.close();
        out.close();
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
",89,,LABEL_1,LABEL_1,LABEL_1,-1,"copyParseFileToCodeFile,in,out,buffer,length",,5,13,0,,0,GA,2348,0.8544711629549663,failed,"[';copyParseFileToCodeFile = 0', '; copyParseFileToOutputClass = 0', '; copyParseFileToMapClass = 0']"
658,"    public static String encrypt(String text) throws NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        try {
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
 <SPLIT>     public static boolean copyTextFile(File src, File dst) {
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[1024];
            int readsize = 0;
            while ((readsize = bis.read(buf)) != -1) {
                bos.write(buf, 0, readsize);
            }
            bos.flush();
            bos.close();
            bis.close();
        } catch (IOException e) {
            ServerConsoleServlet.printSystemLog(e.toString() + "" "" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);
            return false;
        }
        return true;
    }
",91,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,text,md,md5hash",,4,11,0,,0,GA,1690,0.6224720279375712,failed,[]
659,"    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",500,"    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownParameterException {
        try {
            CmdLineParser mdLineReader = new CmdLineParser();
            Option lengthParameter = mdLineReader.addStringOption('f', ""format"");
            Option outputEncordingParameter = mdLineReader.addStringOption('c', ""outcharset"");
            Option inputChachingOption = mdLineReader.addStringOption('i', ""incharset"");
            mdLineReader.parse(args);
            String sort = (String) mdLineReader.getOptionValue(lengthParameter);
            String inputChryption = (String) mdLineReader.getOptionValue(outputEncordingParameter);
            if (inputChryption == null || inputChryption.trim().equals("""")) {
                inputChryption = ""utf-8"";
                System.debug.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) mdLineReader.getOptionValue(inputChachingOption);
            if (inputEncoding == null || inputChryption.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.debug.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] removingParts = mdLineReader.getRemainingArgs();
            if (removingParts.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(removingParts[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + removingParts[0] + "" does not exist. "");
            }
            if (sort == null || sort.trim().equals("""")) {
                sort = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File operationFile = new File(removingParts[1]);
            if (!operationFile.exists()) {
                operationFile.createNewFile();
            }
            System.debug.println(""format detected: "" + sort);
            if (""html"".equals(sort)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter debug = new OutputStreamWriter(new FileOutputStream(operationFile), inputChryption);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        debug.write(buffer, 0, read);
                    }
                } while (read != -1);
                debug.flush();
                debug.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"UnknownOptionException,cmdLineParser,formatOption,outputEncodingOption,inputEncodingOption,format,outputEncoding,inputEncoding,remainingArgs,inputFile,outputFile,out","UnknownOptionException:0.0025581717491149902,cmdLineParser:-0.009767532348632812,formatOption:0.0023308992385864258,outputEncodingOption:0.0029329657554626465,inputEncodingOption:0.0036891698837280273,format:-0.01254945993423462,outputEncoding:-0.006308019161224365,inputEncoding:-0.017511367797851562,remainingArgs:-0.021994471549987793,inputFile:-0.030507802963256836,outputFile:-0.02778571844100952,out:-0.021395981311798096,",10,46,0,"inputEncodingOption:inputChachingOption,outputEncodingOption:outputEncordingParameter,UnknownOptionException:UnknownParameterException,formatOption:lengthParameter,outputEncoding:inputChryption,cmdLineParser:mdLineReader,format:sort,inputEncoding:inputEncoding,out:debug,remainingArgs:removingParts,outputFile:operationFile,",0,Greedy,611,0.23445411523183188,replace,[]
660,"    public void parse() throws ParserConfigurationException, SAXException, IOException {
        DefaultHttpClient httpclient = initialise();
        HttpResponse result = httpclient.execute(new HttpGet(urlString));
        SAXParserFactory spf = SAXParserFactory.newInstance();
        if (spf != null) {
            SAXParser sp = spf.newSAXParser();
            sp.parse(result.getEntity().getContent(), this);
        }
    }
 <SPLIT>     public String uploadFile(String url, int port, String uname, String upass, InputStream input) {
        String serverPath = config.getServerPath() + DateUtil.getSysmonth();
        FTPClient ftp = new FTPClient();
        try {
            int replyCode;
            ftp.connect(url, port);
            ftp.login(uname, upass);
            replyCode = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(replyCode)) {
                ftp.disconnect();
                return config.getServerPath();
            }
            if (!ftp.changeWorkingDirectory(serverPath)) {
                ftp.makeDirectory(DateUtil.getSysmonth());
                ftp.changeWorkingDirectory(serverPath);
            }
            ftp.storeFile(getFileName(), input);
            input.close();
            ftp.logout();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return serverPath;
    }
",79,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,SAXException,IOException,httpclient,result,spf,sp",,7,13,0,,0,GA,2712,0.9913017948468527,failed,"[';parse = 0', ';print(parse)', ';SAXException = 0', ';IOException = 0', ';result = 0', ';execute = 0', ';throw = 0', ';SAXEX = 0', ';status = 0']"
661,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
 <SPLIT>     public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
",839,"    protected ActionForward doSendRun(ActionMapping mapper, ActionForm url, HttpServletRequest method, HttpServletResponse result) throws Exception {
        ActionMessages  messaging = new ActionMessages();
        try {
            booleanisMultiipoundt = FileUpload.isMultipartContent(method);
            Mail emailinstancee = getMailInstance(method);
            if (isMultiipound) {
                Map atts = new HashMap();
                Vector attachees = new Vector();
                Listqss = diskFileUpload.parseRequest(method);
                Iteratipter = qs.iterator();
                while (ip.hasNext()) {
                    FileIteitemem = (FileItem) ip.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] asc = item.getString().split("":"");
                            MailPartObj paformat  emailinstance.getAttachment(asc[0], asc[1]);
                            attachees.addElement(format);
                        } else {
                            atts.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj format = new MailPartObj();
                                format.setAttachent(baos.toByteArray());
                                format.setContentType(item.getContentType());
                                format.setName(item.getName());
                                format.setSize(item.getSize());
                                attachees.addElement(format);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String url = """";
                if (atts.get(""taBody"") != null) {
                  urldy = (String) atts.get(""taBody"");
                } else if (atts.get(""taReplyBody"") != null) {
                  urldy = (String) atts.get(""taReplyBody"");
                }
                PreferencesprefeesCliente = getPreferencesInstance(method);
                Send sendInstance = getSendInstance(method);
                String mid = (String) atts.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    method.setAttribute(""action"", ""compose"");
                } else {
                    method.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) atts.get(""isHtml""))) {
                    isHtml = new Boolean(prefeesClient.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) atts.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) atts.get(""identity"")), (String) atts.get(""to""), (String) atts.get(""cc""), (String) atts.get(""bcc""), (String) atts.get(""subjecturlbodyattacheests, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) atts.get(""priority""));
            } else {
                 messaging.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                method.setAttribute(""exception"", ""The form is null"");
                method.setAttribute(""newLocation"", null);
                doTrace(method, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
             messaging.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            method.setAttribute(""exception"", errorMessage);
            doTrace(method, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if ( messaging.isEmpty()) {
            doTrace(method, DLog.INFO, getClass(), ""OK"");
            return mapper.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(method,  messaging);
            return mapper.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",LABEL_1,LABEL_1,0.7650725841522217,1,"doExecute,mapping,form,request,response,errors,isMultipart,mailInstance,fields,attachments,items,iter,item,aux,part,baos,body,preferencesInstance",,16,73,16,"doExecute:doSendRun,mapping:mapper,form:url,request:method,response:result,errors: messaging,isMultipart:isMultiipound,mailInstance: emailinstance,fields:atts,attachments:attachees,items:qs,iter:ip,item:item,aux:asc,part:format,baos:baos,body:url,preferencesInstance:prefeesClient,",2,GA,4044,1.7114044904708863,ga,[]
662,"    protected String doRawRequest(String postData) throws IOException {
        URL url = new URL(SERVICE_URL);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(postData);
        wr.flush();
        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        StringBuffer sb = new StringBuffer();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        wr.close();
        rd.close();
        return sb.toString();
    }
 <SPLIT>     public static void main(String[] args) throws IOException {
        PostParameter a1 = new PostParameter(""v"", Utils.encode(""1.0""));
        PostParameter a2 = new PostParameter(""api_key"", Utils.encode(RenRenConstant.apiKey));
        PostParameter a3 = new PostParameter(""method"", Utils.encode(""feed.publishTemplatizedAction""));
        PostParameter a4 = new PostParameter(""call_id"", System.nanoTime());
        PostParameter a5 = new PostParameter(""session_key"", Utils.encode(""5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914""));
        PostParameter a8 = new PostParameter(""format"", Utils.encode(""JSON""));
        PostParameter a9 = new PostParameter(""template_id"", Utils.encode(""1""));
        PostParameter a10 = new PostParameter(""title_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        PostParameter a11 = new PostParameter(""body_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ps.addParameter(a1);
        ps.addParameter(a2);
        ps.addParameter(a3);
        ps.addParameter(a4);
        ps.addParameter(a5);
        ps.addParameter(a8);
        ps.addParameter(a9);
        ps.addParameter(a10);
        ps.addParameter(a11);
        System.out.println(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        URL url = new URL(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",133,"    protected String DoDirectMessage(String PostPart) throws IOException {
        URL config = new URL(SERVICE_URL);
        URLConnection sync = config.openConnection();
        sync.setDoOutput(true);
        OutputStreamWriter wer = new OutputStreamWriter(sync.getOutputStream());
        wer.write(PostPart);
        wer.flush();
        BufferedReader writer = new BufferedReader(new InputStreamReader(sync.getInputStream()));
        StringBuffer bps = new StringBuffer();
        String file;
        while ((file = writer.readLine()) != null) {
            bps.append(file);
        }
        wer.close();
        writer.close();
        return bps.toString();
    }
;doRawRequest = 0;url = 0;DoDirectResponse = 0;doPostResponse = 0;doDirectRequest = 0;POSTPart = 0; postPart = 0;postString = 0;Connection = 0;cb = 0;fd = 0",LABEL_1,LABEL_1,LABEL_1,1,"doRawRequest,postData,url,conn,wr,rd,sb,line","doRawRequest:-0.0016111135482788086,postData:-0.0023993849754333496,url:-0.004212021827697754,conn:-0.011598765850067139,wr:-0.0420987606048584,rd:-0.015602588653564453,sb:-0.008428037166595459,line:-0.008197903633117676,",8,22,0,"doRawRequest:DoDirectMessage,postData:PostPart,url:config,line:file,sb:bps,conn:sync,rd:writer,wr:wer,",0,Greedy,715,0.2873941858609517,inesrt,"[';doRawRequest = 0', ';url = 0', ';DoDirectResponse = 0', ';doPostResponse = 0', ';doDirectRequest = 0', ';POSTPart = 0', '; postPart = 0', ';postString = 0', ';Connection = 0', ';cb = 0', ';fd = 0']"
663,"    protected String downloadURLtoString(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer sb = new StringBuffer(100 * 1024);
        String str;
        while ((str = in.readLine()) != null) {
            sb.append(str);
        }
        in.close();
        return sb.toString();
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",80,"    protected String  downloadUrlasString(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer xb = new StringBuffer(100 * 1024);
        String read;
        while ((read = in.readLine()) != null) {
            xb.append(read);
        }
        in.close();
        return xb.toString();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"downloadURLtoString,url,in,sb,str","downloadURLtoString:-0.000999748706817627,url:-0.01299905776977539,in:-0.01513129472732544,sb:-0.00746077299118042,str:-0.009617269039154053,",3,7,0,"downloadURLtoString: downloadUrlasString,sb:xb,str:read,",0,Greedy,137,0.04866127967834473,replace,[]
664,"    private boolean authenticate(Module module) throws Exception {
        SecureRandom rand = SecureRandom.getInstance(""SHA1PRNG"");
        rand.setSeed(System.currentTimeMillis());
        byte[] challenge = new byte[16];
        rand.nextBytes(challenge);
        String b64 = Util.base64(challenge);
        Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + ""\n"");
        String reply = Util.readLine(in);
        if (reply.indexOf("" "") < 0) {
            Util.writeASCII(out, AT_ERROR + "": bad response\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""bad response"");
        }
        String user = reply.substring(0, reply.indexOf("" ""));
        String response = reply.substring(reply.indexOf("" "") + 1);
        if (!module.users.contains(user)) {
            Util.writeASCII(out, AT_ERROR + "": user "" + user + "" not allowed\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""user "" + user + "" not allowed"");
        }
        LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));
        MessageDigest md4 = MessageDigest.getInstance(""BrokenMD4"");
        String line;
        while ((line = secrets.readLine()) != null) {
            if (line.startsWith(user + "":"")) {
                String passwd = line.substring(line.lastIndexOf("":"") + 1);
                md4.update(new byte[4]);
                md4.update(passwd.getBytes(""US-ASCII""));
                md4.update(b64.getBytes(""US-ASCII""));
                String hash = Util.base64(md4.digest());
                if (hash.equals(response)) {
                    secrets.close();
                    return true;
                } else {
                    Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
                    if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
                    socket.close();
                    secrets.close();
                    logger.error(""auth failed on module "" + module.name);
                    return false;
                }
            }
        }
        Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
        if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
        socket.close();
        secrets.close();
        logger.error(""auth failed on module "" + module.name);
        return false;
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",553,,LABEL_1,LABEL_0,,-4,"authenticate,module,rand,challenge,b64,reply,user,response,secrets,md4,line,passwd,hash",,,,0,,0,Greedy,1,0.0007232308387756347,,[]
665,"    public static JSONObject getJSONData(String url) throws JSONException {
        JSONObject jObject = null;
        InputStream data = null;
        DefaultHttpClient httpClient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(url);
            HttpGet httpGet = new HttpGet(uri);
            HttpResponse response = httpClient.execute(httpGet);
            data = response.getEntity().getContent();
            String line;
            StringBuilder builder = new StringBuilder();
            BufferedReader reader;
            reader = new BufferedReader(new InputStreamReader(data), 8192);
            while ((line = reader.readLine()) != null) builder.append(line);
            reader.close();
            jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jObject;
    }
 <SPLIT>     private int addIDs(PeakListRow row, String name) {
        {
            BufferedReader in = null;
            try {
                String urlName = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + name;
                URL url = new URL(urlName);
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String inputLine, score = ""0"";
                while ((inputLine = in.readLine()) != null) {
                    String metaboliteID = """";
                    if (inputLine.contains(""href=\""Metabolites/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Metabolites/"") + 18, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""Analytes/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Analytes/"") + 15, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""ReferenceSubstances/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""ReferenceSubstances/"") + 26, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    }
                }
                in.close();
                urlName = searchMetabolite(urlName);
                if (urlName != null && urlName.contains("".aspx"")) {
                    url = new URL(urlName);
                    in = new BufferedReader(new InputStreamReader(url.openStream()));
                    while ((inputLine = in.readLine()) != null) {
                        if (inputLine.contains(""<meta http-equiv=\""keywords\"" content="")) {
                            String line = inputLine.substring(inputLine.indexOf(""<meta http-equiv=\""keywords\"" content="") + 37, inputLine.indexOf(""\"" /></head>""));
                            String[] names = line.split("", "");
                            for (String id : names) {
                                if (id.contains(""PubChem"")) {
                                    id = id.substring(id.indexOf(""PubChem"") + 8);
                                    String pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());
                                    if (pubChem.length() == 0) {
                                        pubChem += id;
                                    } else {
                                        pubChem += "", "" + id;
                                    }
                                    row.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);
                                } else if (id.contains(""ChEBI"")) {
                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);
                                    row.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);
                                } else if (id.contains(""KEGG"")) {
                                    id = id.substring(id.indexOf(""KEGG:"") + 6);
                                    row.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);
                                } else if (id.contains(""CAS"")) {
                                    id = id.substring(id.indexOf(""CAS:"") + 5);
                                    row.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);
                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {
                                } else {
                                    String synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());
                                    if (synonym.length() == 0) {
                                        synonym += id;
                                    } else {
                                        synonym += "" // "" + id;
                                    }
                                    synonym = synonym.replaceAll(""&amp;#39;"", ""'"");
                                    row.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);
                                }
                            }
                            break;
                        }
                    }
                    in.close();
                }
                return Integer.parseInt(score);
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return 0;
            }
        }
    }
",167,,LABEL_1,LABEL_1,LABEL_1,-1,"getJSONData,url,jObject,data,httpClient,uri,httpGet,response,line,builder,reader",,11,28,0,,0,GA,4866,1.983595903714498,failed,"[';print(url)', ';print(jObject)', ';loadJSONResponse = 0']"
666,"    public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {
        Calendar rightNow = Calendar.getInstance();
        String dayNamedFolderName = """" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));
        String uploadDirRoot = props.getProperty(""uploaded.files.root"");
        File file = new File(uploadDirRoot + System.getProperty(""file.separator"") + dayNamedFolderName);
        if (!file.exists()) file.mkdirs();
        String extension = FilenameUtils.getExtension(fileName);
        String outFileName;
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, ""true""))) {
            outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));
        } else {
            outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));
        }
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, ""true""))) {
            outFileName = outFileName + DOT + extension;
        }
        String outPathAndName = uploadDirRoot + System.getProperty(""file.separator"") + dayNamedFolderName + System.getProperty(""file.separator"") + props.getProperty(""uploaded.files.prefix"") + outFileName;
        File uploadedFile = new File(outPathAndName);
        _logger.info(""uploadedFile.getAbsolutePath() = {}"", uploadedFile.getAbsolutePath());
        uploadedFile.createNewFile();
        OutputStream outStream = new FileOutputStream(outPathAndName);
        IOUtils.copyLarge(inStream, outStream);
        IOUtils.closeQuietly(inStream);
        outStream.close();
        if (resize) {
            writeResizedImage(outPathAndName, extension, ""imgSize_xs"");
            writeResizedImage(outPathAndName, extension, ""imgSize_s"");
            writeResizedImage(outPathAndName, extension, ""imgSize_m"");
            writeResizedImage(outPathAndName, extension, ""imgSize_l"");
            writeResizedImage(outPathAndName, extension, ""imgSize_xl"");
        }
        String retVal = dayNamedFolderName + ""/"" + props.getProperty(""uploaded.files.prefix"") + outFileName;
        return retVal;
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",419,"    public String  transferVideo(InputStream INPath, String fileInfo, boolean resizes) throws Exception {
        Calendar  rightnow = Calendar.getInstance();
        String daydayNamedDirName"""" +  rightnow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2,  rightnow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2,  rightnow.get(Calendar.DATE));
        String uploaddirroot = props.getProperty(""uploaded.files.root"");
        Fiurlile = new Fiuploaddirrootoot + System.getProperty(""file.separator"") + dayNamedDirName);
        if (!url.exists()) url.mkdirs();
        String Extend = FilenameUtils.getExtension(fileInfo);
        String outLineSize;
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, ""true""))) {
            outLineSize = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileInfo)));
        } else {
            outLineSize = StringUtil.hash(fileInfo + Long.toString(System.currentTimeMillis()));
        }
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, ""true""))) {
         outLineSizeameoutLineSizeame + DOT + Extend;
        }
        StrioutPathOrRamameuploaddirrootoot + System.getProperty(""file.separator"") + dayNamedDirName + System.getProperty(""file.separator"") + props.getProperty(""uploaded.files.prefix"") + outLineSize;
        FiluploadedFilesle = new File(outPathOrRam);
        _logger.info(""uploadedFile.getAbsolutePath() = {}"", uploadedFiles.getAbsolutePath());
        uploadedFiles.createNewFile();
        OutputStreainSteamam = new FileOutputStream(outPathOrRam);
        IOUtils.copyLarge(INPath, inSteam);
        IOUtils.closeQuietly(INPath);
        inSteam.close();
        if (resizes) {
            writeResizedImaoutPathOrRamame, Extend, ""imgSize_xs"");
            writeResizedImaoutPathOrRamame, Extend, ""imgSize_s"");
            writeResizedImaoutPathOrRamame, Extend, ""imgSize_m"");
            writeResizedImaoutPathOrRamame, Extend, ""imgSize_l"");
            writeResizedImaoutPathOrRamame, Extend, ""imgSize_xl"");
        }
        String retVal = dayNamedDirName + ""/"" + props.getProperty(""uploaded.files.prefix"") + outLineSize;
        return retVal;
    }
",LABEL_1,LABEL_1,0.6112262010574341,1,"storeImage,inStream,fileName,resize,rightNow,dayNamedFolderName,uploadDirRoot,file,extension,outFileName,outPathAndName,uploadedFile,outStream",,12,48,0,"storeImage: transferVideo,inStream:INPath,fileName:fileInfo,resize:resizes,rightNow: rightnow,dayNamedFolderName:dayNamedDirName,uploadDirRoot:uploaddirroot,file:url,extension:Extend,outFileName:outLineSize,outPathAndName:outPathOrRam,uploadedFile:uploadedFiles,outStream:inSteam,",0,GA,2372,0.966784409681956,ga,[]
667,"    @Override
    public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {
        Node[] node = xed.getActivatedNodes();
        X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();
        FileObject mySrc = dob.getPrimaryFile();
        File mySrcF = FileUtil.toFile(mySrc);
        File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + "".x3dv.gz"");
        TransformListener co = TransformListener.getInstance();
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_starting""));
        co.message(NbBundle.getMessage(getClass(), ""Saving_as_"") + myOutF.getAbsolutePath());
        co.moveToFront();
        co.setNode(node[0]);
        try {
            String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);
            FileInputStream fis = new FileInputStream(new File(x3dvFile));
            GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));
            byte[] buf = new byte[4096];
            int ret;
            while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);
            gzos.close();
        } catch (Exception ex) {
            co.message(NbBundle.getMessage(getClass(), ""Exception:__"") + ex.getLocalizedMessage());
            return null;
        }
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_complete""));
        return myOutF.getAbsolutePath();
    }
 <SPLIT>     protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(""POST"");
            request.setDoOutput(true);
            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
            out.print(getParametersString(parameters));
            out.flush();
            out.close();
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",296,,LABEL_0,LABEL_0,LABEL_0,-1,"transformSingleFile,xed,node,dob,mySrc,mySrcF,myOutF,co,x3dvFile,fis,gzos,buf,ret",,12,36,0,,0,GA,5721,2.1954644322395325,failed,"[';transformSingleFile = 0', ';xed = 0', ';node = 0', ';dob = 0', ';mySrc = 0', ';mySrcF = 0', ';myOutF = 0', ';x3dvFile = 0', ';buf = 0', '; transformOneFiles = 0', ';transform1File = 0', '; transformOneFile = 0', ';transformOnePath = 0', ';transformsinglefile = 0', '; transformOnePath = 0', ';copy = 0', ';error = 0', ';MyAssrc = 0', ';myEsrcFile = 0', ';mySsrcFile = 0', ';mySrcFile = 0', ';myInD = 0', ';myOutputC = 0', ';MyOutFile = 0', ';myOutputF = 0', ';MyOutFF = 0', ';myInFile = 0', ';myOutputFile = 0', '; myOutputFile = 0', ';myOutFile = 0', ';myoutFile = 0', '; myOutFile = 0', ';MyInFile = 0', ';cmp = 0']"
668,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,2334,0.8542910854021708,failed,"[';copy = 0', ';sourceFile = 0', ';destinationFile = 0', ';siteDirectory = 0', ';destinatedDir = 0', ';destationDir = 0']"
669,"    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",197,,LABEL_1,LABEL_1,LABEL_1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse",,2,5,0,,0,GA,3270,1.2273820400238038,failed,"[';testTrainingBackprop = 0', ';print(testTrainingBackprop)', ';temp = 0', ';layers = 0', ';fann = 0', ';desiredError = 0', ';testTrainingBackdrop = 0', ';testTrainingBackpressure = 0', ';testTrainingFrontpressure = 0', ';testTrainBACKpressure = 0', ';testTrainBackpressure = 0', ';testTrainingFrontprop = 0', ';directory = 0', ';output = 0', ';model = 0', '; lients = 0', '; lacks = 0']"
670,"    public static void main(String args[]) throws IOException {
        String inFileName = args[0];
        String outFileName = args[1];
        long position = 0L;
        try {
            position = Long.parseLong(args[2]);
        } catch (NumberFormatException nfex1) {
            try {
                position = Long.parseLong(args[2], 16);
            } catch (NumberFormatException nfex2) {
                System.err.println(""Wrong offset"");
                System.exit(0);
            }
        }
        if (position < 1L) {
            System.err.println(""Wrong offset. Must be more than 0"");
            System.exit(0);
        }
        System.out.println(""Copying  input: "" + inFileName);
        System.out.println(""        output: "" + outFileName);
        System.out.println(""          from: "" + position);
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));
        bis.skip(position);
        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;
        bis.close();
        bos.close();
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",240,"    public static void main(String args[]) throws IOException {
        String inLineLength = args[0];
        String outSourceFileUrl = args[1];
        long sort = 0L;
        try {
            sort = Long.parseLong(args[2]);
        } catch (NumberFormatException nfex1) {
            try {
                sort = Long.parseLong(args[2], 16);
            } catch (NumberFormatException nfex2) {
                System.err.println(""Wrong offset"");
                System.exit(0);
            }
        }
        if (sort < 1L) {
            System.err.println(""Wrong offset. Must be more than 0"");
            System.exit(0);
        }
        System.out.println(""Copying  input: "" + inLineLength);
        System.out.println(""        output: "" + outSourceFileUrl);
        System.out.println(""          from: "" + sort);
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inLineLength));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outSourceFileUrl));
        bis.skip(sort);
        for (byte[] emb = new byte[1]; bis.read(emb) > 0; bos.write(emb)) ;
        bis.close();
        bos.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"inFileName,outFileName,position,bis,bos,b","inFileName:-0.0006657242774963379,outFileName:0.045065462589263916,position:-0.022002696990966797,bis:-0.1525644063949585,bos:-0.07565546035766602,b:-0.004357337951660156,",4,15,0,"outFileName:outSourceFileUrl,inFileName:inLineLength,b:emb,position:sort,",0,Greedy,237,0.0853601853052775,replace,[]
671,"    private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",178,,LABEL_1,LABEL_1,LABEL_1,-1,"unJar,jarPath,jarEntry,path,relPath,jar,ze,bin",,6,26,0,,0,GA,3722,1.3782373785972595,failed,"[';print(jarPath)', ';print(updatejar)', ';print(updateJava)', ';print(addJava)', ';print(updateServer)', ';print(jarLog)', ';print( jarPo)', ';print(jarName)', ';print(javaPath)', ';print(JarName)', ';javaDir = 0', ';print(javaDir)', ';print(browserName)', ';print(browserpath)', ';print(garEntry)', ';browserEntry = 0', ';print(browserEntry)', ';print(jarpath)', ';print(javaName)', '; jarLog = 0', ';print( jarLog)', ';print(javaEntry)', ';javaLog = 0', ';aliasEnt = 0', '; jarLog = 0', ';javaLog = 0', ';default = 0', ';address = 0']"
672,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
",188,,LABEL_1,LABEL_0,,-4,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,,,0,,0,Greedy,1,0.0006362994511922201,,[]
673,"    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new TableEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }
 <SPLIT>     public static void copyFile(String fromPath, String toPath) {
        try {
            File inputFile = new File(fromPath);
            String dirImg = (new File(toPath)).getParent();
            File tmp = new File(dirImg);
            if (!tmp.exists()) {
                tmp.mkdir();
            }
            File outputFile = new File(toPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
        }
    }
",202,"    public void read(IAction  flow) {
        int file = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell clone = new Shell((file & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer looker = new ScrollingGraphicalViewer();
        looker.createControl(clone);
        looker.setEditDomain(new DefaultEditDomain(null));
        looker.setRootEditPart(new ScalableFreeformRootEditPart());
        looker.setEditPartFactory(new TableEditPartFactory());
        looker.setContents(getContents());
        looker.flush();
        int writeMode = new PrintModeDialog(clone).open();
        if (writeMode == -1) return;
        PrintDialog colloder = new PrintDialog(clone, SWT.NULL);
        PrinterData output = colloder.open();
        if (output != null) {
            PrintGraphicalViewerOperation cop = new PrintGraphicalViewerOperation(new Printer(output), looker);
            cop.setPrintMode(writeMode);
            cop.read(selectedFile.getName());
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"run,action,style,shell,viewer,printMode,dialog,data,op","run:-0.0014699697494506836,action:-0.0004036426544189453,style:9.822845458984375e-05,shell:-0.00041604042053222656,viewer:-0.01231837272644043,printMode:-0.0019023418426513672,dialog:0.0001862049102783203,data:0.0007579922676086426,op:-0.0044103264808654785,",9,28,0,"data:output,dialog:colloder,style:file,action: flow,shell:clone,run:read,printMode:writeMode,op:cop,viewer:looker,",0,Greedy,431,0.15596125523249307,replace,[]
674,"    private String executePost(String targetURL, String urlParameters) {
        URL url;
        HttpURLConnection connection = null;
        try {
            url = new URL(targetURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setRequestProperty(""Content-Length"", """" + Integer.toString(urlParameters.getBytes().length));
            connection.setRequestProperty(""Content-Language"", ""en-US"");
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();
            InputStream is = connection.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            String line;
            StringBuffer response = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                response.append(line);
                response.append('\r');
            }
            rd.close();
            return response.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        int result = 20;
        if (args.length == 1) {
            StringBuffer urlString = new StringBuffer(args[0]);
            if (urlString.lastIndexOf(""/"") != urlString.length() - 1) {
                urlString.append('/');
            }
            urlString.append(""GetConfig.jsp"");
            URLConnection conn = new URL(urlString.toString()).openConnection();
            System.out.println(Configuration.readObject(conn.getInputStream()));
            result = 0;
        } else {
            System.err.println(""usage: GetConfig <URL>"");
        }
        System.exit(result);
    }
",265,,LABEL_0,LABEL_0,LABEL_0,-1,"executePost,targetURL,urlParameters,url,connection,wr,is,rd,line,response",,7,30,0,,0,GA,4578,1.7165345152219136,failed,"[';executePost = 0', ';print(executePost)', ';targetURL = 0', ';print(targetURL)', ';urlParameters = 0', ';print(urlParameters)', ';executePut = 0', ';sendPut = 0', ';invokePost = 0', '; executePut = 0', '; targetUrl = 0', ';lines = 0', ';Line = 0', ';lin = 0', ';err = 0', ';obj = 0']"
675,"    protected int deleteBitstreamInfo(int id, Connection conn) {
        PreparedStatement stmt = null;
        int numDeleted = 0;
        try {
            stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);
            stmt.setInt(1, id);
            numDeleted = stmt.executeUpdate();
            if (numDeleted > 1) {
                conn.rollback();
                throw new IllegalStateException(""Too many rows deleted! Number of rows deleted: "" + numDeleted + "" only one row should be deleted for bitstream id "" + id);
            }
        } catch (SQLException e) {
            LOG.error(""Problem deleting bitstream. "" + e.getMessage(), e);
            throw new RuntimeException(""Problem deleting bitstream. "" + e.getMessage(), e);
        } finally {
            cleanup(stmt);
        }
        return numDeleted;
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",135,"    protected int deletebitStreaminfo(int url, Connection stat) {
        PreparedStatement Start = null;
        int  numDelete = 0;
        try {
            Start = stat.prepareStatement(DELETE_BITSTREAM_INFO);
            Start.setInt(1, url);
             numDelete = Start.executeUpdate();
            if ( numDelete > 1) {
                stat.rollback();
                throw new IllegalStateException(""Too many rows deleted! Number of rows deleted: "" +  numDelete + "" only one row should be deleted for bitstream id "" + url);
            }
        } catch (SQLException e) {
            LOG.error(""Problem deleting bitstream. "" + e.getMessage(), e);
            throw new RuntimeException(""Problem deleting bitstream. "" + e.getMessage(), e);
        } finally {
            cleanup(Start);
        }
        return  numDelete;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"deleteBitstreamInfo,id,conn,stmt,numDeleted","deleteBitstreamInfo:-0.012911736965179443,id:-0.0050661563873291016,conn:-0.0030281543731689453,stmt:-0.0015293359756469727,numDeleted:-0.021373867988586426,",5,18,0,"stmt:Start,conn:stat,id:url,deleteBitstreamInfo:deletebitStreaminfo,numDeleted: numDelete,",0,Greedy,254,0.10080802838007609,replace,[]
676,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
 <SPLIT>     @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",181,,LABEL_0,LABEL_0,LABEL_0,-1,"deleteObject,id,conn,stmt,dbConn,selfConnection",,6,28,0,,0,GA,2598,0.960052764415741,failed,[]
677,"    public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter(""width""));
            int h = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL url = new URL(filename);
                in = url.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""\n"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
 <SPLIT>     public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",185,,LABEL_0,LABEL_1,,-4,"init,filename,dim,w,h,in,ff,url",,,,0,,0,Greedy,1,0.0005928436915079752,,[]
678,"    public static JSONObject getJSONData(String url) throws JSONException {
        JSONObject jObject = null;
        InputStream data = null;
        DefaultHttpClient httpClient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(url);
            HttpGet httpGet = new HttpGet(uri);
            HttpResponse response = httpClient.execute(httpGet);
            data = response.getEntity().getContent();
            String line;
            StringBuilder builder = new StringBuilder();
            BufferedReader reader;
            reader = new BufferedReader(new InputStreamReader(data), 8192);
            while ((line = reader.readLine()) != null) builder.append(line);
            reader.close();
            jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jObject;
    }
 <SPLIT>     public DataSet parse() throws SnifflibDatatypeException {
        NumberFormat numformat = NumberFormat.getInstance();
        if (this.headers.size() != this.types.size()) {
            throw new SnifflibDatatypeException(""Different number of headers ("" + this.headers.size() + "") and types("" + this.types.size() + "")."");
        }
        DataSet out = null;
        if (!this.dryrun) {
            out = new DataSet();
        }
        BufferedReader r = null;
        StreamTokenizer tokenizer = null;
        try {
            if (this.isURL) {
                if (this.url2goto == null) {
                    return (null);
                }
                DataInputStream in = null;
                try {
                    in = new DataInputStream(this.url2goto.openStream());
                    System.out.println(""READY TO READ FROM URL:"" + url2goto);
                    r = new BufferedReader(new InputStreamReader(in));
                } catch (Exception err) {
                    throw new RuntimeException(""Problem reading from URL "" + this.url2goto + ""."", err);
                }
            } else {
                if (this.file == null) {
                    throw new RuntimeException(""Data file to be parsed can not be null."");
                }
                if (!this.file.exists()) {
                    throw new RuntimeException(""The file "" + this.file + "" does not exist."");
                }
                r = new BufferedReader(new FileReader(this.file));
            }
            if (this.ignorePreHeaderLines > 0) {
                String strLine;
                int k = 0;
                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {
                    k++;
                }
            }
            tokenizer = new StreamTokenizer(r);
            tokenizer.resetSyntax();
            tokenizer.eolIsSignificant(true);
            tokenizer.parseNumbers();
            if (this.delimiter.equals(""\\t"")) {
                tokenizer.whitespaceChars('\t', '\t');
            }
            if (this.delimiter.equals("","")) {
                tokenizer.whitespaceChars(',', ',');
            }
            tokenizer.quoteChar('""');
            tokenizer.whitespaceChars(' ', ' ');
            boolean readingHeaders = true;
            boolean readingInitialValues = false;
            boolean readingData = false;
            boolean readingScientificNotation = false;
            if (this.headers.size() > 0) {
                readingHeaders = false;
                readingInitialValues = true;
            }
            if (this.types.size() > 0) {
                readingInitialValues = false;
                Class targetclass;
                for (int j = 0; j < this.types.size(); j++) {
                    targetclass = (Class) this.types.get(j);
                    try {
                        this.constructors.add(targetclass.getConstructor(String.class));
                    } catch (java.lang.NoSuchMethodException err) {
                        throw new SnifflibDatatypeException(""Could not find appropriate constructor for "" + targetclass + "". "" + err.getMessage());
                    }
                }
                readingData = true;
            }
            int currentColumn = 0;
            int currentRow = 0;
            this.rowcount = 0;
            boolean advanceField = true;
            while (true) {
                tokenizer.nextToken();
                switch(tokenizer.ttype) {
                    case StreamTokenizer.TT_WORD:
                        {
                            if (readingScientificNotation) {
                                throw new RuntimeException(""Problem reading scientific notation at row "" + currentRow + "" column "" + currentColumn + ""."");
                            }
                            advanceField = true;
                            if (readingHeaders) {
                                this.headers.add(tokenizer.sval);
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(String.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(String.class);
                                        this.constructors.add(construct);
                                    }
                                    try {
                                        try {
                                            try {
                                                if (!this.dryrun) {
                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                } else if (this.findingTargetValue) {
                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                        r.close();
                                                        return (null);
                                                    }
                                                }
                                            } catch (java.lang.reflect.InvocationTargetException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 1"" + err.getMessage());
                                            }
                                        } catch (java.lang.IllegalAccessException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 2"" + err.getMessage());
                                        }
                                    } catch (java.lang.InstantiationException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 3"" + err.getMessage());
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_NUMBER:
                        {
                            advanceField = true;
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""Expecting string header at row="" + currentRow + "", column="" + currentColumn + ""."");
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(Double.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(double.class);
                                        this.constructors.add(construct);
                                    }
                                    if (readingScientificNotation) {
                                        Double val = this.scientificNumber;
                                        if (!this.dryrun) {
                                            try {
                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);
                                            } catch (Exception err) {
                                                throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                            }
                                        } else if (this.findingTargetValue) {
                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                Double NVAL = new Double(tokenizer.nval);
                                                try {
                                                    this.targetValue = numformat.parse(val + ""E"" + NVAL);
                                                } catch (Exception err) {
                                                    throw new RuntimeException(""Problem parsing scientific notation at row="" + currentRow + "" col="" + currentColumn + ""."");
                                                }
                                                tokenizer.nextToken();
                                                if (tokenizer.ttype != 'e') {
                                                    r.close();
                                                    return (null);
                                                } else {
                                                    tokenizer.pushBack();
                                                }
                                            }
                                        }
                                        readingScientificNotation = false;
                                    } else {
                                        try {
                                            this.scientificNumber = new Double(tokenizer.nval);
                                            if (!this.dryrun) {
                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);
                                            } else if (this.findingTargetValue) {
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = this.scientificNumber;
                                                    r.close();
                                                    return (null);
                                                }
                                            }
                                        } catch (Exception err) {
                                            throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                        }
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOL:
                        {
                            if (readingHeaders) {
                                readingHeaders = false;
                                readingInitialValues = true;
                            } else {
                                if (readingInitialValues) {
                                    readingInitialValues = false;
                                    readingData = true;
                                }
                            }
                            if (readingData) {
                                currentRow++;
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOF:
                        {
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""End of file reached while reading headers."");
                            }
                            if (readingInitialValues) {
                                throw new SnifflibDatatypeException(""End of file reached while reading initial values."");
                            }
                            if (readingData) {
                                readingData = false;
                            }
                            break;
                        }
                    default:
                        {
                            if (tokenizer.ttype == '""') {
                                advanceField = true;
                                if (readingHeaders) {
                                    this.headers.add(tokenizer.sval);
                                } else {
                                    if (readingInitialValues) {
                                        this.types.add(String.class);
                                    }
                                    if (!this.dryrun) {
                                        if (out.getColumnCount() <= currentColumn) {
                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                        }
                                    }
                                    try {
                                        Constructor construct;
                                        if (currentColumn < this.constructors.size()) {
                                            construct = (Constructor) this.constructors.get(currentColumn);
                                        } else {
                                            Class targetclass = (Class) this.types.get(currentColumn);
                                            construct = targetclass.getConstructor(String.class);
                                            this.constructors.add(construct);
                                        }
                                        try {
                                            try {
                                                try {
                                                    if (!this.dryrun) {
                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                    } else if (this.findingTargetValue) {
                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                            r.close();
                                                            return (null);
                                                        }
                                                    }
                                                } catch (java.lang.reflect.InvocationTargetException err) {
                                                    throw new SnifflibDatatypeException(""Problem constructing 1 "" + err.getMessage());
                                                }
                                            } catch (java.lang.IllegalAccessException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 2 "" + err.getMessage());
                                            }
                                        } catch (java.lang.InstantiationException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 3 "" + err.getMessage());
                                        }
                                    } catch (java.lang.NoSuchMethodException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                    }
                                }
                            } else if (tokenizer.ttype == 'e') {
                                Class targetclass = (Class) this.types.get(currentColumn);
                                if (Number.class.isAssignableFrom(targetclass)) {
                                    currentColumn--;
                                    readingScientificNotation = true;
                                    advanceField = false;
                                }
                            } else {
                                advanceField = false;
                            }
                            break;
                        }
                }
                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
                    break;
                }
                if (advanceField) {
                    currentColumn++;
                    if (!readingHeaders) {
                        if (currentColumn >= this.headers.size()) {
                            currentColumn = 0;
                        }
                    }
                }
            }
            if (!readingHeaders) {
                this.rowcount = currentRow;
            } else {
                this.rowcount = 0;
                readingHeaders = false;
                if (this.ignorePostHeaderLines > 0) {
                    String strLine;
                    int k = 0;
                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {
                        k++;
                    }
                }
            }
            r.close();
        } catch (java.io.IOException err) {
            throw new SnifflibDatatypeException(err.getMessage());
        }
        if (!this.dryrun) {
            for (int j = 0; j < this.headers.size(); j++) {
                out.setColumnName(j, (String) this.headers.get(j));
            }
        }
        return (out);
    }
",167,,LABEL_1,LABEL_0,,-4,"getJSONData,url,jObject,data,httpClient,uri,httpGet,response,line,builder,reader",,,,0,,0,Greedy,1,0.0011301716168721518,,[]
679,"    private String hashKey(String key) {
        String hashed = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(key.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashed = hash.toString(16);
        } catch (Exception ex) {
            ex.printStackTrace();
            hashed = String.valueOf(key.hashCode());
        }
        return hashed;
    }
 <SPLIT>     public static InputStream getFileInputStream(String path) throws IOException {
        InputStream is = null;
        File file = new File(path);
        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));
        if (is == null) {
            URL url = FileUtils.class.getClassLoader().getResource(path);
            is = (url == null) ? null : url.openStream();
        }
        return is;
    }
",95,,LABEL_0,LABEL_0,LABEL_0,-1,"hashKey,key,hashed,md5,hash",,3,6,0,,0,GA,2197,0.795330798625946,failed,"[';hashKey = 0', ';print(key)', ';Hasha = 0', ';print(MD62)', ';print(v)']"
680,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public static void copy(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",690,,LABEL_1,LABEL_1,LABEL_1,-1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root",,5,56,0,,0,GA,5758,2.435349722703298,failed,"[';print(tpl)', ';model = 0', ';outDirLine = 0', ';url = 0', ';print(url)', ';print(include)']"
681,"    public static void fileDownload(String fAddress, String destinationDir) {
        int slashIndex = fAddress.lastIndexOf('/');
        int periodIndex = fAddress.lastIndexOf('.');
        String fileName = fAddress.substring(slashIndex + 1);
        URL url;
        try {
            url = new URL(fAddress);
            URLConnection uc = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            File file = new File(destinationDir + ""/download.pdf"");
            FileOutputStream fos = new FileOutputStream(file);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
            int inputLine;
            while ((inputLine = in.read()) != -1) out.write(inputLine);
            in.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",183,"    public static void fileDownload(String rfMessage, String destinationDir) {
        int slashIndex = rfMessage.lastIndexOf('/');
        int periodIndex = rfMessage.lastIndexOf('.');
        String fileName = rfMessage.substring(slashIndex + 1);
        URL path;
        try {
            path = new URL(rfMessage);
            URLConnection uc = path.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            File file = new File(destinationDir + ""/download.pdf"");
            FileOutputStream fos = new FileOutputStream(file);
            BufferedWriter copy = new BufferedWriter(new OutputStreamWriter(fos));
            int inputLine;
            while ((inputLine = in.read()) != -1) copy.write(inputLine);
            in.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fileDownload,fAddress,destinationDir,slashIndex,periodIndex,fileName,url,uc,in,file,fos,out,inputLine","fileDownload:0.007031917572021484,fAddress:0.014575719833374023,destinationDir:-0.0006821155548095703,slashIndex:0.00476992130279541,periodIndex:0.0015571117401123047,fileName:0.00323408842086792,url:0.007998049259185791,uc:0.00425487756729126,in:-0.000380098819732666,file:-0.00884997844696045,fos:0.00669097900390625,out:0.008837759494781494,inputLine:-0.0042095184326171875,",3,10,0,"fAddress:rfMessage,out:copy,url:path,",0,Greedy,169,0.06119449138641357,replace,[]
682,"    public void write() throws IOException {
        JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);
        if (includeJars != null) {
            HashSet allEntries = new HashSet(includeJars);
            if (!ignoreDependencies) expandSet(allEntries);
            for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) {
                JarFile jar = getJarFile(iterator.next());
                Enumeration jarEntries = jar.entries();
                while (jarEntries.hasMoreElements()) {
                    ZipEntry o1 = (ZipEntry) jarEntries.nextElement();
                    if (o1.getName().equalsIgnoreCase(""META-INF/MANIFEST.MF"") || o1.getSize() <= 0) continue;
                    jarOut.putNextEntry(o1);
                    InputStream entryStream = jar.getInputStream(o1);
                    IOUtils.copy(entryStream, jarOut);
                    jarOut.closeEntry();
                }
            }
        }
        jarOut.finish();
        jarOut.close();
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
",181,,LABEL_1,LABEL_1,LABEL_1,-1,"write,jarOut,allEntries,iterator,jar,jarEntries,o1,entryStream",,8,27,0,,0,GA,3675,1.4390739798545837,failed,"[';write = 0', ';jarOut = 0', ';print(jarOut)', ';allEntries = 0', ';print(allEntries)', ';iterator = 0', ';print(iterator)', ';output = 0', ';run = 0', ';file = 0', ';out = 0', ';check = 0', ';print(check)', ';print(append)']"
683,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",120,"    public static void copyFile(String binPlace, String  outPlace) {
        File url = new File(binPlace);
        File version = new File( outPlace);
        try {
            FileChannel outConnection = new FileInputStream(url).getChannel();
            FileChannel inchannel = new FileOutputStream(version).getChannel();
            try {
                outConnection.transferTo(0, outConnection.size(), inchannel);
            } finally {
                if (outConnection != null) outConnection.close();
                if (inchannel != null) inchannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
;copyFile = 0;inFile = 0;inChannel = 0;outChannel = 0;inputPlace = 0;INfile = 0;binfile = 0;InFilename = 0;binPlace = 0; inchannel = 0;inchannel = 0;sinChannel = 0;inichannel = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,inFile,outFile,in,out,inChannel,outChannel","copyFile:0.0013982653617858887,inFile:2.276897430419922e-05,outFile:-0.0002726912498474121,in:0.0002452731132507324,out:0.00022113323211669922,inChannel:9.566545486450195e-05,outChannel:6.079673767089844e-05,",6,17,0,"copyFile:copyFile,in:url,out:version,inChannel:outConnection,outChannel:inchannel,inFile:binPlace,outFile: outPlace,",0,Greedy,593,0.2413619041442871,inesrt,"[';copyFile = 0', ';inFile = 0', ';inChannel = 0', ';outChannel = 0', ';inputPlace = 0', ';INfile = 0', ';binfile = 0', ';InFilename = 0', ';binPlace = 0', '; inchannel = 0', ';inchannel = 0', ';sinChannel = 0', ';inichannel = 0']"
684,"    public static Model tryLoadURL(String url, RDFFormat format) throws MalformedURLException, IOException {
        URLConnection c = new URL(url).openConnection();
        c.addRequestProperty(""Accept"", format.getKey());
        String data = StreamUtil.toString(c.getInputStream());
        Model model = ModelFactory.createDefaultModel();
        model.read(new ByteArrayInputStream(data.getBytes()), """", format.getValue());
        return model;
    }
 <SPLIT>     public void load(URL url) throws IOException {
        ResourceLocator locator = null;
        try {
            locator = new RelativeResourceLocator(url);
        } catch (URISyntaxException use) {
            throw new IllegalArgumentException(""Bad URL: "" + use);
        }
        ResourceLocatorTool.addResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);
        InputStream stream = null;
        try {
            stream = url.openStream();
            if (stream == null) {
                throw new IOException(""Failed to load materials file '"" + url + ""'"");
            }
            logger.fine(""Loading materials from '"" + url + ""'..."");
            load(stream);
        } finally {
            if (stream != null) stream.close();
            ResourceLocatorTool.removeResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);
            locator = null;
        }
    }
",96,,LABEL_0,LABEL_0,LABEL_0,-1,"tryLoadURL,url,format,c,data,model",,6,14,0,,0,GA,1914,0.7190835634867351,failed,"[';la = 0', ';layer = 0']"
685,"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"SHA1,text,UnsupportedEncodingException,md,sha1hash",,4,11,0,,0,GA,2228,0.8267161289850871,failed,"[';SHA1 = 0', ';text = 0', ';sha1hash = 0', ';string = 0', ';path = 0', ';number = 0', ';value = 0', ';SHA2sum = 0']"
686,"    public static Object loadXmlFromUrl(URL url, int timeout, XML_TYPE xmlType) throws IOException {
        URLConnection connection = url.openConnection();
        connection.setConnectTimeout(timeout);
        connection.setReadTimeout(timeout);
        BufferedInputStream buffInputStream = new BufferedInputStream(connection.getInputStream());
        return loadXml(buffInputStream, xmlType);
    }
 <SPLIT>     public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
",63,"    public static Object loadXmlWithFile(URL path, int timeout, XML_TYPE xmlType) throws IOException {
        URLConnection directory = path.openConnection();
        directory.setConnectTimeout(timeout);
        directory.setReadTimeout(timeout);
        BufferedInputStream buffOutputStream = new BufferedInputStream(directory.getInputStream());
        return loadXml(buffOutputStream, xmlType);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"loadXmlFromUrl,url,timeout,xmlType,connection,buffInputStream","loadXmlFromUrl:0.00014603137969970703,url:7.855892181396484e-05,timeout:-0.0002976059913635254,xmlType:-0.00022864341735839844,connection:0.0007020831108093262,buffInputStream:0.00020837783813476562,",4,9,0,"connection:directory,buffInputStream:buffOutputStream,loadXmlFromUrl:loadXmlWithFile,url:path,",0,Greedy,151,0.05624073346455892,replace,[]
687,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(args[0]);
            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod(""PUT"");
            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());
            out.write(""fatal error"");
            out.close();
            System.out.println(""end"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",114,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash",,5,11,0,,0,GA,2214,0.8059808850288391,failed,[]
688,"    protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String path = request.getPathInfo();
        if (!path.startsWith(alias)) {
            throw new ServletException(""Path '"" + path + ""' does not start with registered alias '"" + alias + ""'"");
        }
        String internal;
        if (alias.equals(""/"")) {
            internal = name + path;
        } else {
            internal = name + path.substring(alias.length(), path.length());
        }
        URL resource = httpContext.getResource(internal);
        if (resource == null) {
            return false;
        }
        String mimeType = servletContext.getMimeType(internal);
        if (mimeType != null) {
            response.setContentType(mimeType);
        }
        InputStream is = resource.openStream();
        OutputStream os = response.getOutputStream();
        IOUtils.copyAndClose(is, os);
        return true;
    }
 <SPLIT>     public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
",181,,LABEL_1,LABEL_1,LABEL_1,-1,"doRequest,request,response,path,internal,resource,mimeType,is,os",,9,27,0,,0,GA,4120,1.534649650255839,failed,[]
689,"    private int[] sortRows(int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] > rows[j + 1]) {
                    int temp = rows[j];
                    rows[j] = rows[j + 1];
                    rows[j + 1] = temp;
                }
            }
        }
        return rows;
    }
 <SPLIT>     public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
",100,,LABEL_0,LABEL_0,LABEL_0,-1,"sortRows,rows,i,j,temp",,5,25,0,,0,GA,2397,0.8926715850830078,failed,"[';sortRows = 0', ';print(sortRows)', ';print(sortSlows)', ';print(sortPows)', ';print(sortSlOWS)', ';print(ortRrows)', ';print(stable)']"
690,"    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {
        ServletContext servletContext = this.getServletConfig().getServletContext();
        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        String szUrl = request.getParameter(""url"");
        System.out.println(szUrl);
        URL url;
        InputStream is = null;
        ServletOutputStream sout = null;
        try {
            url = new URL(szUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            Enumeration hNames = request.getHeaderNames();
            while (hNames.hasMoreElements()) {
                String txt = hNames.nextElement().toString();
                con.setRequestProperty(txt, request.getHeader(txt));
            }
            con.setRequestProperty(""host"", url.getHost());
            con.setRequestProperty(""refer"", szUrl);
            con.setRequestMethod(method);
            con.setDoOutput(true);
            con.setDoInput(true);
            InputStreamReader inBody = new InputStreamReader(request.getInputStream());
            char bufCh[] = new char[1024];
            int r;
            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());
            while ((r = inBody.read(bufCh)) != -1) {
                System.out.println(bufCh);
                outReq.write(bufCh, 0, r);
            }
            outReq.flush();
            outReq.close();
            inBody.close();
            System.out.println(con.getResponseCode());
            System.out.println(con.getResponseMessage());
            if (con.getResponseCode() == con.HTTP_OK) {
                response.setContentType(con.getContentType());
                response.addHeader(""Content-Encoding"", con.getContentEncoding());
                sout = response.getOutputStream();
                is = con.getInputStream();
                byte buff[] = new byte[1024];
                while ((r = is.read(buff)) != -1) {
                    sout.write(buff, 0, r);
                    System.out.print(buff);
                }
                sout.flush();
                is.close();
                sout.close();
            } else {
                response.sendError(con.getResponseCode(), con.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public TableDirectory(RandomAccessFile raf) throws IOException {
        version = raf.readInt();
        numTables = raf.readShort();
        searchRange = raf.readShort();
        entrySelector = raf.readShort();
        rangeShift = raf.readShort();
        entries = new DirectoryEntry[numTables];
        for (int i = 0; i < numTables; i++) {
            entries[i] = new DirectoryEntry(raf);
        }
        boolean modified = true;
        while (modified) {
            modified = false;
            for (int i = 0; i < numTables - 1; i++) {
                if (entries[i].getOffset() > entries[i + 1].getOffset()) {
                    DirectoryEntry temp = entries[i];
                    entries[i] = entries[i + 1];
                    entries[i + 1] = temp;
                    modified = true;
                }
            }
        }
    }
",484,"    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {
        ServletContext servletContext = this.getServletConfig().getServletContext();
        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        String szUrl = request.getParameter(""file"");
        System.out.println(szUrl);
        URL file;
        InputStream is = null;
        ServletOutputStream sout = null;
        try {
            file = new URL(szUrl);
            HttpURLConnection con = (HttpURLConnection) file.openConnection();
            Enumeration hNames = request.getHeaderNames();
            while (hNames.hasMoreElements()) {
                String txt = hNames.nextElement().toString();
                con.setRequestProperty(txt, request.getHeader(txt));
            }
            con.setRequestProperty(""host"", file.getHost());
            con.setRequestProperty(""refer"", szUrl);
            con.setRequestMethod(method);
            con.setDoOutput(true);
            con.setDoInput(true);
            InputStreamReader inBody = new InputStreamReader(request.getInputStream());
            char bufCh[] = new char[1024];
            int r;
            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());
            while ((r = inBody.read(bufCh)) != -1) {
                System.out.println(bufCh);
                outReq.write(bufCh, 0, r);
            }
            outReq.flush();
            outReq.close();
            inBody.close();
            System.out.println(con.getResponseCode());
            System.out.println(con.getResponseMessage());
            if (con.getResponseCode() == con.HTTP_OK) {
                response.setContentType(con.getContentType());
                response.addHeader(""Content-Encoding"", con.getContentEncoding());
                sout = response.getOutputStream();
                is = con.getInputStream();
                byte buff[] = new byte[1024];
                while ((r = is.read(buff)) != -1) {
                    sout.write(buff, 0, r);
                    System.out.print(buff);
                }
                sout.flush();
                is.close();
                sout.close();
            } else {
                response.sendError(con.getResponseCode(), con.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doTransfer,request,response,method,servletContext,wac,szUrl,url,is,sout,con,hNames,txt,inBody,bufCh,r,outReq,buff","doTransfer:-0.0002726316452026367,request:-0.001300513744354248,response:-0.0046579837799072266,method:-0.00017893314361572266,servletContext:8.159875869750977e-05,wac:-0.00010216236114501953,szUrl:-0.0011130571365356445,url:0.006975293159484863,is:-5.221366882324219e-05,sout:-0.0013096332550048828,con:-0.02753627300262451,hNames:-0.0027115345001220703,txt:-0.0008614063262939453,inBody:-0.0032004714012145996,bufCh:-5.453824996948242e-05,r:-0.00033801794052124023,outReq:-0.006308436393737793,buff:0.0005320906639099121,",1,5,0,"url:file,",0,Greedy,132,0.048502786954243975,replace,[]
691,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] buffer = new byte[2048];
        int nread;
        InputStream map;
        OutputStream output;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            output = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(buffer, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                buffer[i] ^= magicKey;
                magicKey += 43;
            }
            output.write(buffer, 0, nread);
        }
        map.close();
        output.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",170,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] url = new byte[2048];
        int nread;
        InputStream map;
        OutputStream sort;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            sort = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(url, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                url[i] ^= magicKey;
                magicKey += 43;
            }
            sort.write(url, 0, nread);
        }
        map.close();
        sort.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"DecodeMapFile,mapFile,outputFile,magicKey,buffer,nread,map,output,i","DecodeMapFile:0.0006049871444702148,mapFile:7.95125961303711e-05,outputFile:0.0013199448585510254,magicKey:-0.0030017495155334473,buffer:0.0038820505142211914,nread:0.001808464527130127,map:0.003182649612426758,output:0.005875110626220703,i:-0.0016229748725891113,",2,8,0,"output:sort,buffer:url,",0,Greedy,131,0.04684302806854248,replace,[]
692,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,12,38,0,,0,GA,5274,1.9626458048820496,failed,"[';compressWithZip = 0', ';print(compressWithZip)', ';fileList = 0', ';print(fileList)', ';zipFileName = 0', ';print(zipFileName)', ';fos = 0', ';zos = 0', ';iter = 0', ';fileName = 0', ';shortName = 0', ';bytesRead = 0', ';compresswithSax = 0', ';compressWithJar = 0', ';compresswithJar = 0', ';compressInJar = 0', ';modelCollection = 0', ';wordName = 0', '; fileCollection = 0', '; filelist = 0', ';stringChain = 0', '; fileString = 0', ';inputEx = 0', ';stringName = 0', ';stringlist = 0', ';wordString = 0', ';wordsLength = 0']"
693,"    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
 <SPLIT>     public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values ('"" + language + ""', "" + row + "", '"" + root + ""', '"" + surface + ""', '"" + tag + ""', "";
                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",171,,LABEL_0,LABEL_0,LABEL_0,-1,"doCopyFile,srcFile,destFile,preserveFileDate,input,output",,2,7,0,,0,GA,2513,0.9656643152236939,failed,"[';DoCopyDirectory = 0', ';DoCopyFile = 0', ';docopyfile = 0', ';doTransferfile = 0', ';DoCopfile = 0', ';doCopyDirectory = 0', ';instDir = 0', ';sourceDir = 0']"
694,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",143,"    public static void transferfileChannel(File url, File stst, boolean preserveModificationTime) throws IOException {
        FileChannel requestCode = null;
        FileChannel inputButton = null;
        long pull = 0;
        try {
            requestCode = new FileInputStream(url).getChannel();
            pull = requestCode.size();
            inputButton = new FileOutputStream(stst).getChannel();
            long i = 0;
            while (i < pull) {
                i += requestCode.transferTo(0, pull, inputButton);
            }
            if (preserveModificationTime) {
                stst.setLastModified(url.lastModified());
            }
        } finally {
            if (requestCode != null) {
                requestCode.close();
            }
            if (inputButton != null) {
                inputButton.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total","copyFileChannel:0.0028883814811706543,src:0.00017464160919189453,dst:0.0003611445426940918,preserveModificationTime:-9.578466415405273e-05,inputChannel:0.0006707310676574707,outputChannel:0.0011230707168579102,length:0.00016736984252929688,total:9.036064147949219e-05,",7,25,0,"copyFileChannel:transferfileChannel,outputChannel:inputButton,inputChannel:requestCode,dst:stst,src:url,length:pull,total:i,",0,Greedy,321,0.11471088329950968,replace,[]
695,"    public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
 <SPLIT>     public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",381,,LABEL_1,LABEL_1,LABEL_1,-1,"generate,secure,sep,messagedigest,stringbuffer,stringbuffer2,inetaddress,l,l1,abyte0,stringbuffer1,i,j,s",,13,45,0,,0,GA,6811,2.6610610127449035,failed,"[';stringbuffer = 0', ';stringbuffer2 = 0', ';inetaddress = 0', ';l1 = 0', ';stringbuffer1 = 0', ';socket = 0', ';SEp = 0', ';groupbuffer = 0', ';serialbuffer = 0', ';defaultbuf = 0', ';stringbuf = 0', ';numberbuf = 0', ';finalbufferType = 0', ';stringfbCache = 0', '; stringcode32 = 0', '; stringloopTwo = 0', ';doubleBuffer3 = 0', ';netaddress = 0', ';netaddr = 0', ';networkAddress = 0', ';networkaddr = 0', ';iterator8 = 0', ';iterator0 = 0', ';iterator000 = 0', ';index = 0']"
696,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) {
        try {
            FileChannel inChannel = null, outChannel = null;
            try {
                out.getParentFile().mkdirs();
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                outChannel.transferFrom(inChannel, 0, inChannel.size());
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (Exception e) {
            ObjectUtils.throwAsError(e);
        }
    }
",96,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel",,5,14,0,,0,GA,1192,0.45138399600982665,failed,"[';copyFile = 0', ';print(copyFile)', ';in = 0', ';inChannel = 0', ';string = 0', ';output = 0', ';OutConnection = 0']"
697,"    protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",187,,LABEL_1,LABEL_1,LABEL_1,-1,"EncodeReturn,IOException,c,tmpf,cw,encdata,pigdata,pigroute,fos,foc,fis,fic",,0,0,0,,0,GA,5104,1.920824678738912,failed,[]
698,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));
            pst.setString(1, item.getDescription());
            pst.setDouble(2, item.getUnit_price());
            pst.setInt(3, item.getQuantity());
            pst.setDouble(4, item.getVat());
            pst.setInt(5, item.getIdProject());
            pst.setInt(6, item.getIdCurrency());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id_item) from item"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",697,,LABEL_0,LABEL_1,,-4,"f,in,cbuf,read,totRead,out,i",,,,0,,0,Greedy,1,0.0008406519889831543,,[]
699,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String senha = """";
        String email = request.getParameter(""EmailLogin"");
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(request.getParameter(""SenhaLogin"").getBytes(), 0, request.getParameter(""SenhaLogin"").length());
            senha = new BigInteger(1, messageDigest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);
        String redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""?&msg=3"";
        if (request.getHeader(""REFERER"").indexOf(""?"") != -1) {
            redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""&msg=3"";
        }
        if (usuario.getNome() != null) {
            HttpSession session = request.getSession();
            session.setAttribute(""usuario"", usuario);
            redirect = ""index.jsp"";
        }
        response.sendRedirect(redirect);
    }
 <SPLIT>     public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",266,,LABEL_1,LABEL_1,LABEL_1,-1,"doPost,request,response,senha,email,messageDigest,usuario,redirect,session",,9,29,0,,0,GA,3903,1.549925716718038,failed,"[';doPost = 0', ';response = 0', ';print(response)', '; redirection = 0', ';Redirect = 0', ';print(preduce)']"
700,"    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",294,"    public static void makeBackup(File url, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = url.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(url, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c","makeBackup:-0.005908071994781494,dir:0.0035222768783569336,sourcedir:-0.0010055899620056152,destinationdir:0.0039272308349609375,destinationDirEnding:-0.004627585411071777,files:0.0019170641899108887,checkdir:0.006115078926086426,date:0.007349550724029541,msec:0.007295966148376465,checkFile:-0.023486733436584473,i:-0.016582787036895752,f:0.005177617073059082,g:-0.0053157806396484375,destinationFile:0.0003604888916015625,sourceFile:-0.008177399635314941,infile:-0.008623898029327393,outfile:0.011217176914215088,c:0.0030251145362854004,",1,3,0,"outfile:outfile,date:date,msec:msec,checkdir:checkdir,f:f,destinationdir:destinationdir,dir:url,",0,Greedy,348,0.13020782470703124,replace,[]
701,"    public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
 <SPLIT>     public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
",69,,LABEL_0,LABEL_0,LABEL_0,-1,"generateToken,code,md,bytes",,4,8,0,,0,GA,1745,0.6470332463582357,failed,"[';generateToken = 0', ';code = 0', ';bytes = 0', ';generateKey = 0', '; GenerATEKey = 0', ';generationKey = 0', ';string = 0', ';address = 0', ';value = 0', ';lines = 0', ';strings = 0']"
702,"    public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",398,"    public void appendDATA(String url, int items, int mzmin, int mzmax, long  tend, long TDatum, int[] peak) {
        PrintWriter file = getWriter(url + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int uri = mzmin; uri <= mzmax; uri++) file.print(uri + ""\t"");
        file.println();
        int nothing = 0;
        String fLOC = ""C:/abcd/"" + url + "".txt\t"";
        Date fakeDate;
        for (int uri = 0; uri < items; uri++) {
            fakeDate = new Date( tend);
             tend += TDatum;
            file.print(fLOC);
            file.print(dateFormat.format(fakeDate) + ""\t"");
            file.print(uri + 1 + ""\t"");
            double t = (double) (uri) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int p = mzmin; p <= mzmax; p++) {
                for (int j = 0; j < peak.length && !peaked; j++) {
                    if (p == peak[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (p == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"writeData,name,items,mzmin,mzmax,tstart,tdelta,peaks,file,i,nothing,fileLoc,tempDate,t,k,j,peaked,test","writeData:0.019821345806121826,name:0.0071395039558410645,items:-0.0032945871353149414,mzmin:-0.0020000338554382324,mzmax:-0.008402645587921143,tstart:0.039110660552978516,tdelta:0.01529604196548462,peaks:0.03219085931777954,file:-0.30898696184158325,i:0.049451231956481934,nothing:-0.005093872547149658,fileLoc:0.015511274337768555,tempDate:0.02559739351272583,t:-0.00962752103805542,k:0.011422216892242432,j:0.050111234188079834,peaked:-0.08596521615982056,test:-0.026666462421417236,",9,31,0,"j:j,i:uri,tstart: tend,peaks:peak,tempDate:fakeDate,writeData:appendDATA,fileLoc:fLOC,tdelta:TDatum,k:p,name:url,",0,Greedy,430,0.16707989772160847,replace,[]
703,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
 <SPLIT>     public String transformByMD5(String password) throws XSServiceException {
        MessageDigest md5;
        byte[] output;
        StringBuffer bufferPass;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.warn(""DataAccessException thrown while getting MD5 algorithm:"" + e.getMessage(), e);
            throw new XSServiceException(""Database error while saving user"");
        }
        md5.reset();
        md5.update(password.getBytes());
        output = md5.digest();
        bufferPass = new StringBuffer();
        for (byte b : output) {
            bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? ""0"" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));
        }
        return bufferPass.toString();
    }
",169,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,src,dest,bufSize,force,buffer,read,in,out",,8,27,0,,0,GA,4173,1.644972554842631,failed,[]
704,"    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
 <SPLIT>     public void resolvePlugins() {
        try {
            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsFile = new File(cacheDir, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginURL = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream is = pluginURL.openStream();
                OutputStream os = FileUtils.openOutputStream(pluginsFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(os);
                IOUtils.closeQuietly(is);
            }
            resolvePlugins(pluginsFile.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",197,,LABEL_1,LABEL_1,LABEL_1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse",,7,22,0,,0,GA,2262,0.9978655298550924,failed,"[';testTrainingBackprop = 0', ';print(testTrainingBackprop)', ';temp = 0', ';layers = 0', ';fann = 0', ';desiredError = 0', ';testTrainingBackpressure = 0', ';testTrainingFrontpointer = 0', ';testTrainingBackpointer = 0', ';testTrainingFrontpressure = 0', ';output = 0', '; lacks = 0']"
705,"    private static byte[] baseHash(String name, String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(name.toLowerCase().getBytes());
            digest.update(password.getBytes());
            return digest.digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",93,,LABEL_0,LABEL_0,LABEL_0,-1,"baseHash,name,password,digest",,1,1,0,,0,GA,1768,0.7574465433756511,failed,"[';baseHash = 0', ';print(baseHash)', ';name = 0', ';password = 0', ';baseFile = 0', '; generateHash = 0', '; chainHash = 0', '; chainhash = 0', ';address = 0', ';definition = 0', ';pattern = 0', ';attribute = 0']"
706,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>             public void run() {
                URL url;
                try {
                    url = new URL(Config.UPDATE_SITE_URL);
                    InputStream is = url.openStream();
                    Writer writer = new StringWriter();
                    char[] buffer = new char[1024];
                    Reader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                    int n;
                    while ((n = reader.read(buffer)) != -1) {
                        writer.write(buffer, 0, n);
                    }
                    String updatePage = writer.toString();
                    is.close();
                    writer.close();
                    System.out.println(""DOWNLOAD PAGE :\n"" + updatePage);
                    int pos1 = updatePage.indexOf(""[ANA-CABV]"") + 10;
                    int pos2 = updatePage.indexOf(""[/ANA-CABV]"");
                    int pos3 = updatePage.indexOf(""[ANA-CABVURL]"") + 13;
                    int pos4 = updatePage.indexOf(""[/ANA-CABVURL]"");
                    String currentVersion = updatePage.substring(pos1, pos2);
                    currentVersionLabel.setText(currentVersionLabel.getText() + currentVersion);
                    if (Double.valueOf(Config.VERSION) < Double.valueOf(currentVersion)) {
                        downloadButton.setEnabled(true);
                        label0.setText(mw.getLangMap().get(""Update_Avalaible""));
                    } else label0.setText(mw.getLangMap().get(""Update_NonAvalaible""));
                    downloadURL = updatePage.substring(pos3, pos4);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
",188,,LABEL_0,LABEL_0,LABEL_0,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,11,32,0,,0,GA,4858,1.9948810935020447,failed,"[';print(export)', ';print(log)', ';print(gen)', ';print(delete)', ';test = 0', ';print(test)', ';desc = 0', ';print(desc)', ';folder = 0', ';home = 0', ';print(home)', ';opt = 0', ';print(opt)', ';walk = 0', ';sup = 0', ';prop = 0', ';print(prop)', ';obj = 0', ';print(obj)', ';st = 0', ';transfer = 0', ';dat = 0', ';transform = 0', ';loc = 0', '; fiss = 0', ';fliss = 0', ';fisa = 0', ';fsisa = 0', '; BUFIX = 0', ';BUFIX = 0', ';MAFIX = 0', '; zi = 0', ';match = 0', ';iterator = 0', ';index = 0']"
707,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
 <SPLIT>     @Primitive
    public static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {
        try {
            final MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);
            md5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());
            return Value.createFromBlock(Block.createString(md5.digest()));
        } catch (final NoSuchAlgorithmException nsae) {
            Fail.invalidArgument(""Digest.substring"");
            return Value.UNIT;
        }
    }
",176,,LABEL_0,LABEL_0,LABEL_0,-1,"update,o,bill,pst",,4,13,0,,0,GA,1954,0.7271074175834655,failed,[]
708,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public Bitmap retrieveBitmap(String urlString) {
        Log.d(Constants.LOG_TAG, ""making HTTP trip for image:"" + urlString);
        Bitmap bitmap = null;
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            bitmap = BitmapFactory.decodeStream(conn.getInputStream());
        } catch (MalformedURLException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, malformed URL"", e);
        } catch (IOException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, IO error"", e);
        }
        return bitmap;
    }
",264,,LABEL_0,LABEL_0,LABEL_0,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,0,0,0,,0,GA,3786,1.457741955916087,failed,[]
709,"    public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",884,"    public void strap() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarsting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File lookupFolder = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarsting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(lookupFolder)) {
                try {
                    byte[] bf = new byte[32 * 1024];
                    InputStream url = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream part = new BufferedOutputStream(new FileOutputStream(lookupFolder));
                        try {
                            int search = url.search(bf);
                            while (search != -1) {
                                part.write(bf, 0, search);
                                search = url.search(bf);
                            }
                        } finally {
                            part.close();
                        }
                    } finally {
                        url.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""
"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""
"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarsting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(lookupFolder));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    lookupFolder.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"init,backupFile,buff,in,out,read,reportWriter,restarting","init:-0.022870898246765137,backupFile:-0.18559294939041138,buff:-0.10847097635269165,in:-0.21954679489135742,out:-0.1445673108100891,read:-0.16215431690216064,reportWriter:-0.7276028394699097,restarting:-0.18492960929870605,",7,26,0,"init:strap,buff:bf,out:part,read:search,restarting:restarsting,backupFile:lookupFolder,in:url,",0,Greedy,397,0.19002801179885864,replace,[]
710,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public static String mysqlPasswordHash(String string) {
        try {
            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);
            try {
                digest.update(string.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            byte[] encodedPassword = digest.digest();
            digest.update(encodedPassword);
            encodedPassword = digest.digest();
            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();
            while (hash.length() < 40) {
                hash = ""0"" + hash;
            }
            return ""*"" + hash;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
",182,,LABEL_0,LABEL_0,LABEL_0,-1,"uncaughtException,t,e,display,shell,message,e1",,7,16,0,,0,GA,3087,1.322274382909139,failed,"[';document = 0', ';print(document)', ';print(management)', ';print(content)']"
711,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
 <SPLIT>         public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                InputStream is = con.getInputStream();
                BufferedReader rd = new BufferedReader(new InputStreamReader(is));
                String line;
                StringBuffer response = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    response.append(line);
                    response.append('\n');
                    lastIteraction = System.currentTimeMillis();
                }
                rd.close();
                is.close();
                con.disconnect();
                result = response.toString();
                finish = true;
            } catch (Throwable e) {
                this.e = e;
            }
        }
",142,,LABEL_1,LABEL_1,LABEL_1,-1,"readPage,ignoreComments,in,inputLine,html",,5,20,0,,0,GA,2382,1.019615121682485,failed,"[';readPage = 0', ';print(inputLine)', ';includecomments = 0', ';ssl = 0', ';http = 0', ';print(incLine)', ';ifline = 0']"
712,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",200,"    public static boolean decodeStringToFile(final String inFile, final String  outfolder) {
        boolean roll = false;
        java.io.InputStream login = null;
        java.io.OutputStream point = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inFile)), Base64.DECODE);
            point = new java.io.BufferedOutputStream(new java.io.FileOutputStream( outfolder));
            final byte[] url = new byte[65536];
            int connect = -1;
            while ((connect = login.connect(url)) >= 0) {
                point.write(url, 0, connect);
            }
            roll = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (final Exception exc) {
            }
            try {
                point.close();
            } catch (final Exception exc) {
            }
        }
        return roll;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.006838560104370117,infile:0.0005725622177124023,outfile:0.000265657901763916,in:-0.0036667585372924805,out:-0.0021612048149108887,buffer:-0.0003275871276855469,read:-0.0029064416885375977,success:-0.010204792022705078,",8,23,0,"decodeFileToFile:decodeStringToFile,infile:inFile,outfile: outfolder,buffer:url,out:point,read:connect,in:login,success:roll,",0,Greedy,361,0.15113035440444947,replace,[]
713,"    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
 <SPLIT> 	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection(""jdbc:postgresql://localhost/test"", ""user"", ""password"");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement(""UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?"");
		ps.setString(1, myField);
		ps.setString(2, condition1);
		ps.setString(3, condition2);
		
		// If more than 10 entries change, panic and rollback
		int numChanged = ps.executeUpdate();
		if(numChanged > 10) {
			connection.rollback();
		} else {
			connection.commit();
		}
		
		ps.close();
		connection.close();
	}
",1028,,LABEL_0,LABEL_1,,-4,"inputName,outputName,stripLoggers,tempFile,jin,jout,srcChannel,dstChannel,portletApplicationName,webXml,portletXml,contextXml,src,source,zipEntries,target,webRewriter",,,,0,,0,Greedy,1,0.0010467370351155598,,[]
714,"    public static void main(String[] args) throws IOException {
        PostParameter a1 = new PostParameter(""v"", Utils.encode(""1.0""));
        PostParameter a2 = new PostParameter(""api_key"", Utils.encode(RenRenConstant.apiKey));
        PostParameter a3 = new PostParameter(""method"", Utils.encode(""feed.publishTemplatizedAction""));
        PostParameter a4 = new PostParameter(""call_id"", System.nanoTime());
        PostParameter a5 = new PostParameter(""session_key"", Utils.encode(""5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914""));
        PostParameter a8 = new PostParameter(""format"", Utils.encode(""JSON""));
        PostParameter a9 = new PostParameter(""template_id"", Utils.encode(""1""));
        PostParameter a10 = new PostParameter(""title_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        PostParameter a11 = new PostParameter(""body_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ps.addParameter(a1);
        ps.addParameter(a2);
        ps.addParameter(a3);
        ps.addParameter(a4);
        ps.addParameter(a5);
        ps.addParameter(a8);
        ps.addParameter(a9);
        ps.addParameter(a10);
        ps.addParameter(a11);
        System.out.println(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        URL url = new URL(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
 <SPLIT>     public void elimina(Cliente cli) throws errorSQL, errorConexionBD {
        System.out.println(""GestorCliente.elimina()"");
        int id = cli.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM cliente WHERE cod_cliente ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            sql = ""DELETE FROM persona WHERE id ="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt.executeUpdate(sql);
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorCliente.elimina(): "" + e);
        }
    }
",444,,LABEL_0,LABEL_0,LABEL_0,-1,"a1,a2,a3,a4,a5,a8,a9,a10,a11,ps,url,request",,11,37,0,,0,GA,4736,1.8870616833368936,failed,[]
715,"    public static String installOvalDefinitions(final String xml_location) {
        InputStream in_stream = null;
        try {
            URL url = _toURL(xml_location);
            if (url == null) {
                in_stream = new FileInputStream(xml_location);
            } else {
                in_stream = url.openStream();
            }
        } catch (IOException ex) {
            throw new OvalException(ex);
        }
        Class<OvalDefinitions> type = OvalDefinitions.class;
        OvalDefinitions object = _unmarshalObject(type, in_stream);
        String pid = _getDatastore().save(type, object);
        return pid;
    }
 <SPLIT>     private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
",106,,LABEL_0,LABEL_0,LABEL_0,-1,"installOvalDefinitions,xml_location,in_stream,url,type,object,pid",,7,18,0,,0,GA,3111,1.1357305328051248,failed,"[';in67clean = 0', ';server = 0', ';URL = 0', ';open = 0', ';api = 0', ';core = 0', ';print(function)', ';xml = 0', ';tool = 0', ';project = 0', ';part = 0']"
716,"    public void googleImageSearch() {
        if (artist.compareToIgnoreCase(previousArtist) != 0) {
            MusicBoxView.googleImageLocation = 0;
            try {
                String u = ""http://images.google.com/images?q="" + currentTrack.getArtist() + "" - "" + currentTrack.getAlbum() + ""&sa=N&start=0&ndsp=21"";
                if (u.contains("" "")) {
                    u = u.replace("" "", ""+"");
                }
                URL url = new URL(u);
                HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
                httpcon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");
                BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
                String text = """";
                String lin = """";
                while ((lin = readIn.readLine()) != null) {
                    text += lin;
                }
                readIn.close();
                if (text.contains(""\n"")) {
                    text = text.replace(""\n"", """");
                }
                String[] array = text.split(""\\Qhref=\""/imgres?imgurl=\\E"");
                for (String s : array) {
                    if (s.startsWith(""http://"") || s.startsWith(""https://"") && s.contains(""&amp;"")) {
                        String s1 = s.substring(0, s.indexOf(""&amp;""));
                        googleImages.add(s1);
                    }
                }
            } catch (Exception ex4) {
                MusicBoxView.showErrorDialog(ex4);
            }
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",300,"    public void  googleFileScan() {
        if (artist.compareToIgnoreCase(previousArtist) != 0) {
            MusicBoxView.googleUploadLocation = 0;
            try {
                String file = ""http://images.google.com/images?q="" + currentTrack.getArtist() + "" - "" + currentTrack.getAlbum() + ""&sa=N&start=0&ndsp=21"";
                if (file.contains("" "")) {
                    file = file.replace("" "", ""+"");
                }
                URL file = new URL(file);
                HttpURLConnection percon = (HttpURLConnection) file.openConnection();
                percon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");
                BufferedReader ReadStream = new BufferedReader(new InputStreamReader(percon.getInputStream()));
                String lines = """";
                String lin = """";
                while ((lin = ReadStream.readLine()) != null) {
                    lines += lin;
                }
                ReadStream.close();
                if (lines.contains(""
"")) {
                    lines = lines.replace(""
"", """");
                }
                String[] array = lines.split(""\\Qhref=\""/imgres?imgurl=\\E"");
                for (String s : array) {
                    if (s.startsWith(""http://"") || s.startsWith(""https://"") && s.contains(""&amp;"")) {
                        String  s81 = s.substring(0, s.indexOf(""&amp;""));
                        googleImages.add( s81);
                    }
                }
            } catch (Exception ception4) {
                MusicBoxView.showErrorDialog(ception4);
            }
        }
    }
;googleImageSearch = 0",LABEL_0,LABEL_0,LABEL_0,1,"googleImageSearch,MusicBoxView,googleImageLocation,u,url,httpcon,readIn,text,lin,array,s1,ex4","googleImageSearch:8.45193862915039e-05,MusicBoxView:0.00042641162872314453,googleImageLocation:-0.0004222393035888672,u:-0.009157896041870117,url:-0.009385645389556885,httpcon:-0.04027736186981201,readIn:-0.02650892734527588,text:0.0001773238182067871,lin:0.003329753875732422,array:0.0024918317794799805,s1:0.00023424625396728516,ex4:-0.0006769299507141113,",9,25,0,"lin:lin,array:array,MusicBoxView:MusicBoxView,s1: s81,text:lines,googleImageSearch: googleFileScan,googleImageLocation:googleUploadLocation,ex4:ception4,u:file,url:file,readIn:ReadStream,httpcon:percon,",0,Greedy,466,0.1715352972348531,inesrt,[';googleImageSearch = 0']
717,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
",97,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel",,5,14,0,,0,GA,1942,0.7139774163564047,failed,"[';copyFile = 0', ';in = 0', ';inChannel = 0', ';outChannel = 0', '; copyfile = 0', ';CopyChannel = 0', ';copyChannel = 0', ';index = 0', ';query = 0', ';string = 0', '; outChar = 0', ';outputChar = 0']"
718,"    private static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public void setImg() {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = """";
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File(""."" + separator + ""images"");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getPath().lastIndexOf(separator);
            String imgName = getPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getPath());
                File outputFile = new File(newPath);
                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                    FileInputStream in = new FileInputStream(inputFile);
                    FileOutputStream out = new FileOutputStream(outputFile);
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                    in.close();
                    out.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set image"", JOptionPane.ERROR_MESSAGE);
            }
            setPath(newPath);
            bckImg = new ImageIcon(getPath());
        }
    }
",83,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,sourceChannel,destinationChannel",,4,10,0,,0,GA,2245,0.8320762475331624,failed,"[';copyFile = 0', ';in = 0', ';sourceChannel = 0', ';destinationChannel = 0', ';index = 0', ';prefix = 0']"
719,"    @Override
    public void makeRead(final String user, final long databaseID, final long time) throws SQLException {
        final String query = ""insert into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        final PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            final int count = statement.executeUpdate();
            if (0 == count) {
                throw new SQLException(""Nothing updated."");
            }
            m_connection.commit();
        } catch (final SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
 <SPLIT>     private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",139,,LABEL_0,LABEL_0,LABEL_0,-1,"makeRead,user,databaseID,time,query,statement,count",,7,17,0,,0,GA,3130,1.1472403009732564,failed,"[';print(time)', ';print(string)']"
720,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public static String encrypt(String text) {
        char[] toEncrypt = text.toCharArray();
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest dig = MessageDigest.getInstance(""MD5"");
            dig.reset();
            String pw = """";
            for (int i = 0; i < toEncrypt.length; i++) {
                pw += toEncrypt[i];
            }
            dig.update(pw.getBytes());
            byte[] digest = dig.digest();
            int digestLength = digest.length;
            for (int i = 0; i < digestLength; i++) {
                hexString.append(hexDigit(digest[i]));
            }
        } catch (java.security.NoSuchAlgorithmException ae) {
            ae.printStackTrace();
        }
        return hexString.toString();
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,source,dest,in,out",,5,16,0,,0,GA,2308,0.8488085071245829,failed,[]
721,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new QuotedPrintableInputStream(in);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new Base64InputStream(in);
            }
        }
        BinaryTempFileBody tempBody = new BinaryTempFileBody();
        OutputStream out = tempBody.getOutputStream();
        IOUtils.copy(in, out);
        out.close();
        return tempBody;
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDDL,stmt,qry,q",,2,3,0,,0,GA,1837,0.6981203715006511,failed,[]
722,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static boolean copyFile(String sourceName, String destName) {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        boolean wasOk = false;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            wasOk = true;
        } catch (Throwable exception) {
            logger.log(Level.SEVERE, ""Exception in copyFile"", exception);
        } finally {
            try {
                if (sourceChannel != null) sourceChannel.close();
            } catch (Throwable tt) {
            }
            try {
                if (destChannel != null) destChannel.close();
            } catch (Throwable tt) {
            }
        }
        return wasOk;
    }
",765,"    public void CONception(File url, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",3,11,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:dest,inflate:inflate,in:in,convert:CONception,format:url,src:url,",0,Greedy,437,0.1722258726755778,replace,[]
723,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,7,16,0,,0,GA,2465,0.9905001044273376,failed,[]
724,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals(""xmlns"") || attribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,4,14,0,,0,GA,2000,0.7598355809847513,failed,[]
725,"    private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",128,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,srcFile,destDir,buffer,destFile,in,out,bytesRead",,4,13,0,,0,GA,3414,1.2790327111879984,failed,"[';copyFile = 0', ';srcFile = 0', ';destDir = 0', ';bytesRead = 0', '; copyDirectory = 0', ';rcDir = 0', ';targetdir = 0', ';targetDir = 0']"
726,"    protected static Parser buildParser(URL url) throws IOException, ParserException {
        Parser parser;
        URLConnection connection = openConnection(url);
        if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {
            parser = new Parser(connection);
        } else {
            parser = null;
        }
        return parser;
    }
 <SPLIT> 	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection(""jdbc:postgresql://localhost/test"", ""user"", ""password"");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement(""UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?"");
		ps.setString(1, myField);
		ps.setString(2, condition1);
		ps.setString(3, condition2);
		
		// If more than 10 entries change, panic and rollback
		int numChanged = ps.executeUpdate();
		if(numChanged > 10) {
			connection.rollback();
		} else {
			connection.commit();
		}
		
		ps.close();
		connection.close();
	}
",69,,LABEL_0,LABEL_0,LABEL_0,-1,"buildParser,url,ParserException,parser,connection",,4,11,0,,0,GA,2131,0.7800779700279236,failed,"[';print(ParserException)', ';connection = 0', ';print(connection)', ';constructParser = 0', ';print(constructParser)', ';constructReader = 0', ';print(constructReader)', ';makeReader = 0', ';newHandler = 0', ';makeParser = 0', ';server = 0', ';IOError = 0', '; IOExc = 0', ';SSLException = 0', ';print( Connection)', ';loc = 0']"
727,"    public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",107,,LABEL_0,LABEL_0,LABEL_0,-1,"doBody,req,resp,bis,bos",,5,14,0,,0,GA,2325,0.8490754803021748,failed,[]
728,"    @Test
    public void testCopyUnknownSize() throws IOException {
        final InputStream in = new ByteArrayInputStream(TEST_DATA);
        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);
        final int cpySize = ExtraIOUtils.copy(in, out, (-1));
        assertEquals(""Mismatched copy size"", TEST_DATA.length, cpySize);
        final byte[] outArray = out.toByteArray();
        assertArrayEquals(""Mismatched data"", TEST_DATA, outArray);
    }
 <SPLIT>     public static Model downloadModel(String url) {
        Model model = ModelFactory.createDefaultModel();
        try {
            URLConnection connection = new URL(url).openConnection();
            if (connection instanceof HttpURLConnection) {
                HttpURLConnection httpConnection = (HttpURLConnection) connection;
                httpConnection.setRequestProperty(""Accept"", ""application/rdf+xml, */*;q=.1"");
                httpConnection.setRequestProperty(""Accept-Language"", ""en"");
            }
            InputStream in = connection.getInputStream();
            model.read(in, url);
            in.close();
            return model;
        } catch (MalformedURLException e) {
            cat.debug(""Unable to download model from "" + url, e);
            throw new RuntimeException(e);
        } catch (IOException e) {
            cat.debug(""Unable to download model from "" + url, e);
            throw new RuntimeException(e);
        }
    }
",88,,LABEL_0,LABEL_0,LABEL_0,-1,"testCopyUnknownSize,in,out,cpySize,outArray",,4,8,0,,0,GA,2209,0.8092981417973836,failed,"[';testCopyUnknownSize = 0', ';in = 0', ';cpySize = 0', ';outArray = 0', ';testCopyUnknownsize = 0', ';testcopyunknownsize = 0', ';cpiMode = 0', '; cpyMode = 0', '; cpyLength = 0', ';cPyCount = 0', '; outAmount = 0', ';outputArray = 0', ';targetArray = 0']"
729,"    public synchronized String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {
        if (key == null || key.length == 0) {
            throw new IllegalArgumentException(""Argument 'key' cannot be null or an empty array."");
        }
        if (salt == null || salt.length == 0) {
            throw new IllegalArgumentException(""Argument 'salt' cannot be null or an empty array."");
        }
        final MessageDigest _md = MessageDigest.getInstance(""MD5"");
        _md.update(key);
        _md.update(MAGIC.getBytes());
        _md.update(salt);
        final MessageDigest md2 = MessageDigest.getInstance(""MD5"");
        md2.update(key);
        md2.update(salt);
        md2.update(key);
        byte[] abyFinal = md2.digest();
        for (int n = key.length; n > 0; n -= 16) {
            _md.update(abyFinal, 0, n > 16 ? 16 : n);
        }
        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int j = 0, i = key.length; i != 0; i >>>= 1) {
            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);
        }
        final StringBuilder sbPasswd = new StringBuilder();
        sbPasswd.append(MAGIC);
        sbPasswd.append(new String(salt));
        sbPasswd.append('$');
        abyFinal = _md.digest();
        for (int n = 0; n < 1000; n++) {
            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");
            if ((n & 1) != 0) {
                md3.update(key);
            } else {
                md3.update(abyFinal);
            }
            if ((n % 3) != 0) {
                md3.update(salt);
            }
            if ((n % 7) != 0) {
                md3.update(key);
            }
            if ((n & 1) != 0) {
                md3.update(abyFinal);
            } else {
                md3.update(key);
            }
            abyFinal = md3.digest();
        }
        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };
        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
        to64(sbPasswd, anFinal[11], 2);
        return sbPasswd.toString();
    }
",102,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,md,raw,hash",,5,11,0,,0,GA,2214,0.8716331402460734,failed,"[';encrypt = 0', ';plaintext = 0', ';deccrypt = 0', ';decrypt = 0']"
730,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
 <SPLIT>     public static void copyFile(String fromPath, String toPath) {
        try {
            File inputFile = new File(fromPath);
            String dirImg = (new File(toPath)).getParent();
            File tmp = new File(dirImg);
            if (!tmp.exists()) {
                tmp.mkdir();
            }
            File outputFile = new File(toPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
        }
    }
",156,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,srcFile,destFile,in,out,buffer,no",,7,23,0,,0,GA,2989,1.115861451625824,failed,"[';print(in)', ';print(out)', ';print(destFilename)', ';print(inationFilename)', ';print(stdfile)', ';print(vertFilename)', ';print(DestFilename)', ';print(endFilename)', ';print(In)', ';print(url)', ';print(b)', ';print(ac)', ';print(din)', ';print(ex)', ';print(document)', ';print(queue)', ';print(wave)']"
731,"    private String getPrefsKey(String key) {
        try {
            if (MD5 == null) MD5 = MessageDigest.getInstance(""MD5"");
            MD5.reset();
            MD5.update(key.getBytes(""UTF-8""));
            byte[] resultBytes = MD5.digest();
            return toHexString(resultBytes);
        } catch (Exception nsae) {
            return key;
        }
    }
 <SPLIT>     public String getXML(String servletURL, String request) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");
            URL url = new URL(servletURL + request);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                stringBuffer.append(inputLine);
            }
            in.close();
        } catch (MalformedURLException ex) {
            return null;
        } catch (UnsupportedEncodingException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
        return stringBuffer.toString();
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"getPrefsKey,key,MD5,resultBytes",,4,12,0,,0,GA,1595,0.5865393241246541,failed,"[';getPrefsKey = 0', ';key = 0', ';MD5 = 0', ';resultBytes = 0', ';getPrefixedSecret = 0', ';getPubixedKey = 0', ';getPrefesValue = 0', ';getPubsValue = 0', ';string = 0']"
732,"    public static String str2md5(String str) {
        try {
            MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);
            alga.update(str.getBytes());
            byte[] digesta = alga.digest();
            return byte2hex(digesta);
        } catch (NoSuchAlgorithmException ex) {
            return str;
        }
    }
 <SPLIT>     public static String encodePassword(String _originalPassword) {
        MessageDigest md = null;
        String encodedPassword = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(_originalPassword.getBytes(""UTF-8""));
            encodedPassword = (new BASE64Encoder()).encode(md.digest());
        } catch (NoSuchAlgorithmException _e) {
            _e.printStackTrace();
        } catch (UnsupportedEncodingException _e) {
            _e.printStackTrace();
        }
        return encodedPassword;
    }
",62,,LABEL_1,LABEL_1,LABEL_1,-1,"str2md5,str,alga,digesta",,4,9,0,,0,GA,1315,0.48533865610758464,failed,"[';str2md5 = 0', ';str = 0', ';str2h512 = 0', ';str2digse = 0', ';str_MD5 = 0', ';string = 0', ';char = 0']"
733,"    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",67,,LABEL_1,LABEL_1,LABEL_1,-1,"createPasswordDigest,password,salt,md,digest",,5,12,0,,0,GA,2069,0.7559625188509623,failed,"[';createPasswordDigest = 0', ';address = 0']"
734,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",765,"    public void converted(File src, File img) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean showsPixelData = p.getReadTag() == Tags.PixelData;
            boolean Inflation = showsPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (showsPixelData) {
                if (Inflation) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (showsPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (Inflation) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",6,22,0,"pxlen:pxlen,hasPixelData:showsPixelData,dest:img,inflate:Inflation,in:login,convert:converted,format:url,",0,Greedy,367,0.14727628628412884,replace,[]
735,"    private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
 <SPLIT>     public static String encryptPassword(String plainPassword) {
        StringBuffer sb = new StringBuffer();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(plainPassword.getBytes());
            byte[] digestBytes = messageDigest.digest();
            String hex = null;
            for (int i = 0; i < digestBytes.length; i++) {
                hex = Integer.toHexString(0xFF & digestBytes[i]);
                if (hex.length() < 2) sb.append(""0"");
                sb.append(hex);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return new String(sb);
    }
",151,,LABEL_1,LABEL_1,LABEL_1,-1,"getHash,string,hashTime,md5,result,hexString,i,str",,8,22,0,,0,GA,3425,1.2681015292803446,failed,[]
736,"    public static SVNConfiguracion load(URL urlConfiguracion) {
        SVNConfiguracion configuracion = null;
        try {
            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());
            configuracion = (SVNConfiguracion) xenc.readObject();
            configuracion.setFicheroConfiguracion(urlConfiguracion);
            xenc.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return configuracion;
    }
 <SPLIT>     public static boolean downloadFile(String url, String destination) throws Exception {
        BufferedInputStream bi = null;
        BufferedOutputStream bo = null;
        File destfile;
        byte BUFFER[] = new byte[100];
        java.net.URL fileurl;
        URLConnection conn;
        fileurl = new java.net.URL(url);
        conn = fileurl.openConnection();
        long fullsize = conn.getContentLength();
        long onepercent = fullsize / 100;
        MessageFrame.setTotalDownloadSize(fullsize);
        bi = new BufferedInputStream(conn.getInputStream());
        destfile = new File(destination);
        if (!destfile.createNewFile()) {
            destfile.delete();
            destfile.createNewFile();
        }
        bo = new BufferedOutputStream(new FileOutputStream(destfile));
        int read = 0;
        int sum = 0;
        long i = 0;
        while ((read = bi.read(BUFFER)) != -1) {
            bo.write(BUFFER, 0, read);
            sum += read;
            i += read;
            if (i > onepercent) {
                i = 0;
                MessageFrame.setDownloadProgress(sum);
            }
        }
        bi.close();
        bo.close();
        MessageFrame.setDownloadProgress(fullsize);
        return true;
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"load,urlConfiguracion,configuracion,xenc",,4,11,0,,0,GA,1954,0.7224047581354777,failed,"[';load = 0', ';urlConfiguracion = 0', ';xenc = 0', ';create = 0', ';parse = 0', ';transform = 0', ';urlConfigurator = 0', ';xenv = 0', '; xenv = 0']"
737,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     private String cookieString(String url, String ip) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());
            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);
            return null;
        }
    }
",212,,LABEL_0,LABEL_0,LABEL_0,-1,"handler,result,target,url,reader,line,entry,fromIndex,r",,5,11,0,,0,GA,4152,1.5439397811889648,failed,[]
738,"    public static void main(String[] args) throws IOException {
        String urltext = ""http://www.vogella.de"";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {
        StringBuilder json = new StringBuilder();
        String requestUrl = ""http://api.meetup.com/events.json/?group_urlname="" + groupIdentifier + ""&key="" + key;
        try {
            URL url = new URL(requestUrl.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                json.append(inputLine);
            }
            in.close();
        } catch (IOException e) {
            throw new GtugsException(e);
        }
        List<Event> events = new ArrayList<Event>();
        JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());
        JSONArray results = (JSONArray) jsonObj.get(""results"");
        for (int i = 0; i < results.size(); i++) {
            JSONObject result = (JSONObject) results.get(i);
            Event e = new Event();
            e.setAttendeeCount(Integer.parseInt((String) result.get(""rsvpcount"")));
            e.setCity((String) result.get(""venue_city""));
            e.setDescription((String) result.get(""description""));
            e.setLatitude(Double.parseDouble((String) result.get(""venue_lat"")));
            e.setLongitude(Double.parseDouble((String) result.get(""venue_lon"")));
            e.setName((String) result.get(""name""));
            Date myDate = null;
            String time = (String) result.get(""time"");
            try {
                myDate = meetupDateFormat.parse(time);
                e.setStartTime(timeDateFormat.format(myDate));
                e.setEndTime(timeDateFormat.format(myDate));
                e.setStartDate(myDate);
                e.setEndDate(myDate);
                String tz = tzDateFormat.format(myDate);
                if (tz != null && tz.startsWith(""+"")) {
                    tz = tz.substring(1);
                }
                e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));
            } catch (ParseException ex) {
                ex.printStackTrace();
                continue;
            }
            e.setState((String) result.get(""venue_state""));
            StringBuilder addressBuilder = new StringBuilder();
            if (result.get(""venue_address1"") != null) {
                addressBuilder.append((String) result.get(""venue_address1"") + "" "");
            }
            if (result.get(""venue_address2"") != null) {
                addressBuilder.append((String) result.get(""venue_address2"") + "" "");
            }
            if (result.get(""venue_address3"") != null) {
                addressBuilder.append((String) result.get(""venue_address3"") + "" "");
            }
            if (result.get(""venue_address4"") != null) {
                addressBuilder.append((String) result.get(""venue_address4""));
            }
            e.setStreetAddress(addressBuilder.toString().trim());
            e.setZipCode((String) result.get(""venue_zip""));
            e.setUrl((String) result.get(""event_url""));
            events.add(e);
        }
        return events;
    }
",82,,LABEL_1,LABEL_1,LABEL_1,-1,"urltext,url,in,inputLine",,4,10,0,,0,GA,1441,0.5638343493143717,failed,[]
739,"    private void setProfile(String loginName, SimpleUserProfile profile) throws MM4UCannotStoreUserProfileException {
        try {
            OutputStream outStream = null;
            URL url = new URL(this.profileURI + profile.getID() + FILE_SUFFIX);
            if (url.getProtocol().equals(""file"")) {
                File file = new File(url.getFile());
                outStream = new FileOutputStream(file);
            } else {
                URLConnection connection = url.openConnection();
                connection.setDoOutput(true);
                outStream = connection.getOutputStream();
            }
            OutputStreamWriter writer = new OutputStreamWriter(outStream);
            Enumeration myEnum = profile.keys();
            while (myEnum.hasMoreElements()) {
                String key = myEnum.nextElement().toString();
                if (key != ""id"") writer.write(key + ""="" + profile.getStringValue(key) + System.getProperty(""line.separator""));
            }
            writer.flush();
            writer.close();
        } catch (Exception e) {
            throw new MM4UCannotStoreUserProfileException(this, ""setProfile"", e.toString());
        }
    }
 <SPLIT>     public void runWeb(String beginURL, String contextRoot, String pageURI) {
        if (bDebug) System.out.println(""WEB Path"");
        List<String> vtURLs = new ArrayList<String>();
        List<String> vtRobots = getRobots(beginURL, contextRoot);
        vtURLs.add(""/"" + contextRoot + ""/"" + pageURI);
        Indexer indexer = null;
        IndexDocument indexDoc = null;
        try {
            indexer = new Indexer(""/tmp/tmp/index"");
            for (String sxURL : vtURLs) {
                if (bDebug) System.out.println(""\n\n*** INDEXING "" + sxURL);
                if (bDebug) System.out.println(""Have - "" + sxURL);
                boolean bIndexPage = true;
                if (vtRobots != null) {
                    for (String sxRobotURL : vtRobots) {
                        if (bDebug) System.out.println(""Comparing to - "" + sxRobotURL);
                        if (sxURL.startsWith(sxRobotURL)) {
                            if (bDebug) System.out.println(""Found URL - "" + sxRobotURL + "" - "" + sxURL);
                            bIndexPage = false;
                            break;
                        }
                    }
                } else {
                    bIndexPage = true;
                }
                sxURL = beginURL + sxURL;
                ParserDelegator pd = new ParserDelegator();
                CallbackHandler cb = new CallbackHandler(vtURLs, bIndexPage, contextRoot);
                try {
                    URLConnection urlConn = new URL(sxURL).openConnection();
                    urlConn.setUseCaches(false);
                    Date modDate = new Date(urlConn.getLastModified());
                    if (bDebug) System.out.println(""\nMatch - "" + sxURL + "" - Modified Date - "" + modDate);
                    BufferedReader bfReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                    pd.parse(bfReader, cb, true);
                    if (bIndexPage) {
                        if (bDebug) System.out.println(""Adding Index - "" + sxURL + ""\nContent:"" + cb.getText() + ""\nSummary:"" + cb.getSummary() + ""\nTitle:"" + cb.getTitle());
                        indexDoc = new IndexDocument();
                        indexDoc.setUID(sxURL + modDate.toString());
                        indexDoc.setPageURL(sxURL);
                        indexDoc.setModifiedDate(modDate.toString());
                        indexDoc.setContents(cb.getText());
                        indexDoc.setTitle(cb.getTitle());
                        indexDoc.setSummary(cb.getSummary());
                        indexer.addDocument(indexDoc);
                    }
                } catch (Exception ee) {
                    PetstoreUtil.getLogger().log(Level.SEVERE, ""Inner Exception"" + ee);
                }
            }
        } catch (Exception e) {
            PetstoreUtil.getLogger().log(Level.SEVERE, ""Outer Exception"" + e);
        } finally {
            try {
                if (indexer != null) {
                    indexer.close();
                }
            } catch (Exception ee) {
                ee.printStackTrace();
            }
        }
    }
",219,,LABEL_0,LABEL_0,LABEL_0,-1,"setProfile,loginName,profile,outStream,url,file,connection,writer,myEnum,key",,8,25,0,,0,GA,4641,1.820423463980357,failed,"[';setProfile = 0', ';print(setProfile)', ';loginName = 0', ';print(loginName)', ';connection = 0', ';print(connection)', ';myEnum = 0', ';print(myEnum)', ';key = 0', ';print(key)', ';updateProfile = 0', ';setAccount = 0', ';print(setAccount)', ';SetProfile = 0', ';line = 0', ';print(line)', ';line = 0', ';print(line)', ';myenque = 0']"
740,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
",220,,LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,9,31,0,,0,GA,5137,1.9419411818186443,failed,"[';unJarStart = 0', ';print(unJarStart)', ';jarPath = 0', ';jarEntryStart = 0', ';path = 0', ';relPath = 0', ';syncServerPath = 0', ';javaPath = 0', ';javaName = 0', '; jarLog = 0', '; jarDir = 0', ';javaLog = 0', ';jarDir = 0', ';relativeDir = 0']"
741,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
",1387,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest PortalEvent = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(PortalEvent.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(PortalEvent.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(PortalEvent.getCurrentHREF(), page, PortalEvent.getCurrentUser(), PortalEvent.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(PortalEvent.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!PortalEvent.isPost() && !page.isEditableBy(PortalEvent.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(PortalEvent.getCurrentHREF(), page, PortalEvent.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + PortalEvent.elapsedTime() + "" ms -->
"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""
"");
                        }
                        out.write(""<!-- Cached output produced in "" + PortalEvent.elapsedTime() + "" ms -->
"");
                        reader.close();
                        processed = true;
                        PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), PortalEvent.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->
"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, PortalEvent.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, PortalEvent.getCurrentUser().getProperties());
                    renderer.preProcess();
                    PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->
"");
                    if (!page.isEditableBy(PortalEvent.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(PortalEvent.getCurrentHREF(), page, PortalEvent.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e","doGet:0.0423809289932251,request:-0.18925058841705322,response:-0.5184682607650757,selectedPage:0.10565108060836792,page:-0.6411629319190979,portalRequest:0.20652008056640625,pageProp:0.06795591115951538,possiblePage:0.03851968050003052,property:-0.18030691146850586,referer:0.11882215738296509,e:-0.2695581316947937,",1,23,0,"portalRequest:PortalEvent,",0,Greedy,198,0.08546560605367025,replace,[]
742,"    public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
 <SPLIT>     public static String fetchUrl(String urlString) {
        try {
            URL url = new URL(urlString);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            StringBuilder builder = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            reader.close();
            return builder.toString();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return """";
    }
",456,,LABEL_0,LABEL_0,LABEL_0,-1,"getProjectTreeData,treeData,filename,urlString,urldata,factory,parser,u,is,os,iBufSize,inBuf,iNumRead,f,inputstream,document,nodelist,num,i",,16,48,0,,0,GA,8718,3.398321000734965,failed,"[';getProjectTreeData = 0', ';parser = 0', ';print(parser)', ';u = 0', ';iBufSize = 0', ';iNumRead = 0', ';getprojecttreeData = 0', ';getProjectPageMeta = 0', ';username = 0', ';prefix = 0', ';qiNumread = 0', ';outputstream = 0', ';outputStream = 0', ';outputchannel = 0', ';node = 0', '; nodename = 0', ';snodlist = 0', ';nodename = 0', ';slice = 0']"
743,"        protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {
            if (!this.hasError()) {
                try {
                    StringWriter xmlSourceWriter = new StringWriter();
                    IOUtils.copy(url.openStream(), xmlSourceWriter);
                    processSubmittedDoap(xmlSourceWriter.toString());
                } catch (FileNotFoundException e) {
                    Session.get().error(invalidUrlMsg);
                    logger.warn(""Error processing URL: "" + invalidUrlMsg);
                } catch (IOException e) {
                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    logger.warn(""Error processing URL: "" + url + ""; "" + e.getMessage(), e);
                }
            }
        }
 <SPLIT>     public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
",137,"        protected void processAddByURLSsubmitted(URL link, String invalidUrlMsg) {
            if (!this.hasError()) {
                try {
                    StringWriter jsonStringwriter = new StringWriter();
                    IOUtils.copy(link.openStream(), jsonStringwriter);
                    processSubmittedDoap(jsonStringwriter.toString());
                } catch (FileNotFoundException e) {
                    Session.get().error(invalidUrlMsg);
                    logger.warn(""Error processing URL: "" + invalidUrlMsg);
                } catch (IOException e) {
                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    logger.warn(""Error processing URL: "" + link + ""; "" + e.getMessage(), e);
                }
            }
        }
",LABEL_1,LABEL_1,LABEL_0,1,"processAddByURLSubmit,url,invalidUrlMsg,xmlSourceWriter","processAddByURLSubmit:0.09475439786911011,url:0.1865701675415039,invalidUrlMsg:-0.0009441971778869629,xmlSourceWriter:0.07035529613494873,",3,7,0,"url:link,processAddByURLSubmit:processAddByURLSsubmitted,xmlSourceWriter:jsonStringwriter,",0,Greedy,135,0.04878717263539632,replace,[]
744,"    private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
 <SPLIT>     private String executePost(String targetURL, String urlParameters) {
        URL url;
        HttpURLConnection connection = null;
        try {
            url = new URL(targetURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setRequestProperty(""Content-Length"", """" + Integer.toString(urlParameters.getBytes().length));
            connection.setRequestProperty(""Content-Language"", ""en-US"");
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();
            InputStream is = connection.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            String line;
            StringBuffer response = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                response.append(line);
                response.append('\r');
            }
            rd.close();
            return response.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
",151,,LABEL_0,LABEL_0,LABEL_0,-1,"getHash,string,hashTime,md5,result,hexString,i,str",,8,22,0,,0,GA,3573,1.3349663257598876,failed,"[';getHash = 0', ';string = 0', ';hashTime = 0', ';result = 0', ';hexString = 0', ';GetHash = 0', ';slice = 0', ';number = 0', ';value = 0', ';reference = 0', ';hashString = 0']"
745,"    @Override
    public URLConnection openConnection(URL url) throws IOException {
        if (!url.getProtocol().equals(""file"")) {
            String name = url.getFile();
            File f = new File(cacheFolder, ((name.charAt(0) == '/') ? name.substring(1) : name).replace('/', File.separatorChar));
            if (!f.exists()) {
                File f2 = new File(f.getParentFile(), f.getName() + ""-not_found"");
                if (!f2.exists()) {
                    try {
                        f.getParentFile().mkdirs();
                        downloadFile(url, f);
                    } catch (IOException e) {
                        f.delete();
                        throw e;
                    }
                }
            }
            return f.toURI().toURL().openConnection();
        }
        return super.openConnection(url);
    }
 <SPLIT>     public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
",185,,LABEL_0,LABEL_0,LABEL_0,-1,"openConnection,url,name,f,f2",,4,20,0,,0,GA,2190,0.8142959515253703,failed,[]
746,"    protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
 <SPLIT>     public static void copyFile(String fromPath, String toPath) {
        try {
            File inputFile = new File(fromPath);
            String dirImg = (new File(toPath)).getParent();
            File tmp = new File(dirImg);
            if (!tmp.exists()) {
                tmp.mkdir();
            }
            File outputFile = new File(toPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
        }
    }
",88,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,sourceFile,destinationFile,srcChannel,dstChannel",,5,12,0,,0,GA,1314,0.49397662878036497,failed,[';print( CopyFile)']
747,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
 <SPLIT>     public DataSet parse() throws SnifflibDatatypeException {
        NumberFormat numformat = NumberFormat.getInstance();
        if (this.headers.size() != this.types.size()) {
            throw new SnifflibDatatypeException(""Different number of headers ("" + this.headers.size() + "") and types("" + this.types.size() + "")."");
        }
        DataSet out = null;
        if (!this.dryrun) {
            out = new DataSet();
        }
        BufferedReader r = null;
        StreamTokenizer tokenizer = null;
        try {
            if (this.isURL) {
                if (this.url2goto == null) {
                    return (null);
                }
                DataInputStream in = null;
                try {
                    in = new DataInputStream(this.url2goto.openStream());
                    System.out.println(""READY TO READ FROM URL:"" + url2goto);
                    r = new BufferedReader(new InputStreamReader(in));
                } catch (Exception err) {
                    throw new RuntimeException(""Problem reading from URL "" + this.url2goto + ""."", err);
                }
            } else {
                if (this.file == null) {
                    throw new RuntimeException(""Data file to be parsed can not be null."");
                }
                if (!this.file.exists()) {
                    throw new RuntimeException(""The file "" + this.file + "" does not exist."");
                }
                r = new BufferedReader(new FileReader(this.file));
            }
            if (this.ignorePreHeaderLines > 0) {
                String strLine;
                int k = 0;
                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {
                    k++;
                }
            }
            tokenizer = new StreamTokenizer(r);
            tokenizer.resetSyntax();
            tokenizer.eolIsSignificant(true);
            tokenizer.parseNumbers();
            if (this.delimiter.equals(""\\t"")) {
                tokenizer.whitespaceChars('\t', '\t');
            }
            if (this.delimiter.equals("","")) {
                tokenizer.whitespaceChars(',', ',');
            }
            tokenizer.quoteChar('""');
            tokenizer.whitespaceChars(' ', ' ');
            boolean readingHeaders = true;
            boolean readingInitialValues = false;
            boolean readingData = false;
            boolean readingScientificNotation = false;
            if (this.headers.size() > 0) {
                readingHeaders = false;
                readingInitialValues = true;
            }
            if (this.types.size() > 0) {
                readingInitialValues = false;
                Class targetclass;
                for (int j = 0; j < this.types.size(); j++) {
                    targetclass = (Class) this.types.get(j);
                    try {
                        this.constructors.add(targetclass.getConstructor(String.class));
                    } catch (java.lang.NoSuchMethodException err) {
                        throw new SnifflibDatatypeException(""Could not find appropriate constructor for "" + targetclass + "". "" + err.getMessage());
                    }
                }
                readingData = true;
            }
            int currentColumn = 0;
            int currentRow = 0;
            this.rowcount = 0;
            boolean advanceField = true;
            while (true) {
                tokenizer.nextToken();
                switch(tokenizer.ttype) {
                    case StreamTokenizer.TT_WORD:
                        {
                            if (readingScientificNotation) {
                                throw new RuntimeException(""Problem reading scientific notation at row "" + currentRow + "" column "" + currentColumn + ""."");
                            }
                            advanceField = true;
                            if (readingHeaders) {
                                this.headers.add(tokenizer.sval);
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(String.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(String.class);
                                        this.constructors.add(construct);
                                    }
                                    try {
                                        try {
                                            try {
                                                if (!this.dryrun) {
                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                } else if (this.findingTargetValue) {
                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                        r.close();
                                                        return (null);
                                                    }
                                                }
                                            } catch (java.lang.reflect.InvocationTargetException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 1"" + err.getMessage());
                                            }
                                        } catch (java.lang.IllegalAccessException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 2"" + err.getMessage());
                                        }
                                    } catch (java.lang.InstantiationException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 3"" + err.getMessage());
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_NUMBER:
                        {
                            advanceField = true;
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""Expecting string header at row="" + currentRow + "", column="" + currentColumn + ""."");
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(Double.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(double.class);
                                        this.constructors.add(construct);
                                    }
                                    if (readingScientificNotation) {
                                        Double val = this.scientificNumber;
                                        if (!this.dryrun) {
                                            try {
                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);
                                            } catch (Exception err) {
                                                throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                            }
                                        } else if (this.findingTargetValue) {
                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                Double NVAL = new Double(tokenizer.nval);
                                                try {
                                                    this.targetValue = numformat.parse(val + ""E"" + NVAL);
                                                } catch (Exception err) {
                                                    throw new RuntimeException(""Problem parsing scientific notation at row="" + currentRow + "" col="" + currentColumn + ""."");
                                                }
                                                tokenizer.nextToken();
                                                if (tokenizer.ttype != 'e') {
                                                    r.close();
                                                    return (null);
                                                } else {
                                                    tokenizer.pushBack();
                                                }
                                            }
                                        }
                                        readingScientificNotation = false;
                                    } else {
                                        try {
                                            this.scientificNumber = new Double(tokenizer.nval);
                                            if (!this.dryrun) {
                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);
                                            } else if (this.findingTargetValue) {
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = this.scientificNumber;
                                                    r.close();
                                                    return (null);
                                                }
                                            }
                                        } catch (Exception err) {
                                            throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                        }
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOL:
                        {
                            if (readingHeaders) {
                                readingHeaders = false;
                                readingInitialValues = true;
                            } else {
                                if (readingInitialValues) {
                                    readingInitialValues = false;
                                    readingData = true;
                                }
                            }
                            if (readingData) {
                                currentRow++;
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOF:
                        {
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""End of file reached while reading headers."");
                            }
                            if (readingInitialValues) {
                                throw new SnifflibDatatypeException(""End of file reached while reading initial values."");
                            }
                            if (readingData) {
                                readingData = false;
                            }
                            break;
                        }
                    default:
                        {
                            if (tokenizer.ttype == '""') {
                                advanceField = true;
                                if (readingHeaders) {
                                    this.headers.add(tokenizer.sval);
                                } else {
                                    if (readingInitialValues) {
                                        this.types.add(String.class);
                                    }
                                    if (!this.dryrun) {
                                        if (out.getColumnCount() <= currentColumn) {
                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                        }
                                    }
                                    try {
                                        Constructor construct;
                                        if (currentColumn < this.constructors.size()) {
                                            construct = (Constructor) this.constructors.get(currentColumn);
                                        } else {
                                            Class targetclass = (Class) this.types.get(currentColumn);
                                            construct = targetclass.getConstructor(String.class);
                                            this.constructors.add(construct);
                                        }
                                        try {
                                            try {
                                                try {
                                                    if (!this.dryrun) {
                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                    } else if (this.findingTargetValue) {
                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                            r.close();
                                                            return (null);
                                                        }
                                                    }
                                                } catch (java.lang.reflect.InvocationTargetException err) {
                                                    throw new SnifflibDatatypeException(""Problem constructing 1 "" + err.getMessage());
                                                }
                                            } catch (java.lang.IllegalAccessException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 2 "" + err.getMessage());
                                            }
                                        } catch (java.lang.InstantiationException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 3 "" + err.getMessage());
                                        }
                                    } catch (java.lang.NoSuchMethodException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                    }
                                }
                            } else if (tokenizer.ttype == 'e') {
                                Class targetclass = (Class) this.types.get(currentColumn);
                                if (Number.class.isAssignableFrom(targetclass)) {
                                    currentColumn--;
                                    readingScientificNotation = true;
                                    advanceField = false;
                                }
                            } else {
                                advanceField = false;
                            }
                            break;
                        }
                }
                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
                    break;
                }
                if (advanceField) {
                    currentColumn++;
                    if (!readingHeaders) {
                        if (currentColumn >= this.headers.size()) {
                            currentColumn = 0;
                        }
                    }
                }
            }
            if (!readingHeaders) {
                this.rowcount = currentRow;
            } else {
                this.rowcount = 0;
                readingHeaders = false;
                if (this.ignorePostHeaderLines > 0) {
                    String strLine;
                    int k = 0;
                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {
                        k++;
                    }
                }
            }
            r.close();
        } catch (java.io.IOException err) {
            throw new SnifflibDatatypeException(err.getMessage());
        }
        if (!this.dryrun) {
            for (int j = 0; j < this.headers.size(); j++) {
                out.setColumnName(j, (String) this.headers.get(j));
            }
        }
        return (out);
    }
",267,,LABEL_0,LABEL_0,LABEL_0,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5",,10,28,0,,0,GA,5577,2.6478557070096334,failed,"[';getRandomGUID = 0', ';print(getRandomGUID)', ';secure = 0', ';md5 = 0', ';count = 0', ';valueBeforemd2 = 0', ';address = 0']"
748,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     @Test
    public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {
        Exception e = new UnsuccessfulResponseException(resp);
        expect(mockBackend.execute(host, req, ctx)).andThrow(e);
        replay(mockBackend);
        HttpResponse result = impl.execute(host, req, ctx);
        verify(mockBackend);
        assertSame(resp, result);
    }
",631,"    public static String GetString(String serviceName, String wsdlFile, String  endPoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlFile);
        mLog.debug(""Received endpoint: "" +  endPoint);
        String FILEDirectory = null;
        try {
            String tmpDir = System.getProperty(""java.io.tmpdir"");
            URL ls = new URL(wsdlFile);
            String WSDDLSourceFile = tmpDir + File.separator + serviceName + "".wsdl"";
            String tmpWDDlUrl = WSDDLSourceFile + "".tmp"";
            File requestStream = new File(WSDDLSourceFile);
            File tmpPage = new File(tmpWDDlUrl);
            if (!inputFile.exists() || requestStream.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                requestStream.createNewFile();
                InputStream conn = ls.openStream();
                FileOutputStream out = new FileOutputStream(requestStream);
                URLConnection fc = ls.openConnection();
                int channelLen = fc.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(conn);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, channelLen);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                conn.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(requestStream));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"",  endPoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpPage);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = requestStream.delete();
                if (retVal) {
                    retVal = tmpPage.renameTo(new File(WSDDLSourceFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            FILEDirectory = WSDDLSourceFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return FILEDirectory;
    }
;print(WSDLFile);print(server);print(client);print(connection);print(file);print(channel);print(web);print(ll);print(log);print(conn);print(ls);print(coll);image = 0;print(image);io = 0;print(io);print(stream);ur = 0;print(ur);ul = 0;print(ul);print(contact);f = 0;print(f)",LABEL_0,LABEL_0,LABEL_0,1,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal","getFile:0.0025216341018676758,serviceName:0.0030854344367980957,wsdlLocation:-0.0020664334297180176,endpoint:0.0008205175399780273,fileLocation:-0.017027616500854492,tempDir:-0.0027498602867126465,url:-0.0003151893615722656,WSDLFile:-0.01021963357925415,tmpWSDLFile:-0.003609955310821533,inputFile:-0.014912843704223633,tmpFile:-0.0007924437522888184,in:-0.010712087154388428,out:0.009401977062225342,con:-0.007131993770599365,fileLength:0.0004975795745849609,channelIn:0.012659251689910889,channelOut:0.023438096046447754,tmpDocument:0.028982996940612793,nl1:0.003031313419342041,i:0.01604783535003662,node1:0.004655957221984863,tmpOut:0.044813454151153564,retVal:0.0030305981636047363,",13,39,0,"tmpOut:tmpOut,tmpDocument:tmpDocument,channelOut:channelOut,i:i,channelIn:channelIn,out:out,node1:node1,serviceName:serviceName,nl1:nl1,retVal:retVal,getFile:GetString,endpoint: endPoint,fileLength:channelLen,url:ls,tmpFile:tmpPage,wsdlLocation:wsdlFile,tempDir:tmpDir,tmpWSDLFile:tmpWDDlUrl,con:fc,WSDLFile:WSDDLSourceFile,in:conn,inputFile:requestStream,fileLocation:FILEDirectory,",0,Greedy,1276,0.5245619058609009,inesrt,"[';print(WSDLFile)', ';print(server)', ';print(client)', ';print(connection)', ';print(file)', ';print(channel)', ';print(web)', ';print(ll)', ';print(log)', ';print(conn)', ';print(ls)', ';print(coll)', ';image = 0', ';print(image)', ';io = 0', ';print(io)', ';print(stream)', ';ur = 0', ';print(ur)', ';ul = 0', ';print(ul)', ';print(contact)', ';f = 0', ';print(f)']"
749,"    private static Properties loadPropertiesFromClasspath(String path) {
        Enumeration<URL> locations;
        Properties props = new Properties();
        try {
            locations = Thread.currentThread().getContextClassLoader().getResources(path);
            while (locations.hasMoreElements()) {
                URL url = locations.nextElement();
                InputStream in = url.openStream();
                props.load(in);
                in.close();
                logger.config(""Load properties from "" + url);
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""load properties from classpath \"""" + path + ""\"" failed"", e);
        }
        return props;
    }
 <SPLIT>     public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",130,"    private static Properties loadPropertiesFromClasspath(String path) {
        Enumeration<URL> locations;
        Properties props = new Properties();
        try {
            locations = Thread.currentThread().getContextClassLoader().getResources(path);
            while (locations.hasMoreElements()) {
                URL file = locations.nextElement();
                InputStream serv = file.openStream();
                props.load(serv);
                serv.close();
                logger.config(""Load properties from "" + file);
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""load properties from classpath \"""" + path + ""\"" failed"", e);
        }
        return props;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"loadPropertiesFromClasspath,path,locations,props,url,in","loadPropertiesFromClasspath:-0.00012022256851196289,path:-0.00011146068572998047,locations:-0.00015312433242797852,props:-0.00010478496551513672,url:-8.171796798706055e-05,in:0.00014859437942504883,",2,6,0,"in:serv,url:file,",0,Greedy,118,0.04195859034856161,replace,[]
750,"    private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType(""image/"" + type + """");
        Point imgSize = null;
        if (width > 0 || height > 0) {
            imgSize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imgSize = imageFormats.get(fmt);
        }
        InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageInputStream == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imgSize == null) {
            IOUtils.copy(imageInputStream, response.getOutputStream());
        } else {
            byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);
            response.setContentLength(imageBytes.length);
            response.getOutputStream().write(imageBytes);
        }
        response.getOutputStream().flush();
        response.getOutputStream().close();
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",196,,LABEL_1,LABEL_1,LABEL_1,-1,"doImageProcess,request,response,imgSize,imageInputStream,imageBytes",,6,21,0,,0,GA,2847,1.0677900552749633,failed,[]
751,"    public static String digest(String algorithm, String text) {
        MessageDigest mDigest = null;
        try {
            mDigest = MessageDigest.getInstance(algorithm);
            mDigest.update(text.getBytes(ENCODING));
        } catch (NoSuchAlgorithmException nsae) {
            _log.error(nsae, nsae);
        } catch (UnsupportedEncodingException uee) {
            _log.error(uee, uee);
        }
        byte[] raw = mDigest.digest();
        BASE64Encoder encoder = new BASE64Encoder();
        return encoder.encode(raw);
    }
 <SPLIT>     public Vector<String> getNetworkServersIPs(String netaddress) {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(netaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if ((serverline) && line.startsWith("";"")) {
                    serverline = false;
                }
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[1]);
                }
                if (line.startsWith(""!SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"digest,algorithm,text,mDigest,raw,encoder",,5,12,0,,0,GA,2693,0.991467026869456,failed,"[';digest = 0', ';algorithm = 0', ';mDigest = 0', ';digse = 0', ';generests = 0', ';Alignment = 0', ';argorithm = 0', ';string = 0', ';address = 0', ';value = 0', ';attribute = 0']"
752,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream in = new FileInputStream(args[0]);
            int length;
            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);
            in.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream IN = null;
        java.io.OutputStream out = null;
        try {
            IN = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = IN.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                IN.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.008520543575286865,infile:-0.0003605484962463379,outfile:-0.0016044378280639648,in:0.00014865398406982422,out:-0.00030547380447387695,buffer:0.0002827644348144531,read:-0.002703845500946045,success:-0.005924046039581299,",2,7,0,"encodeFileToFile:encodeFileToFile,buffer:url,in:IN,",0,Greedy,141,0.051247251033782956,replace,[]
753,"    @ActionMethod
    public void upload() throws IOException {
        final int fileResult = fileChooser.showOpenDialog(frame);
        if (fileResult != JFileChooser.APPROVE_OPTION) {
            return;
        }
        final InputStream in = new FileInputStream(fileChooser.getSelectedFile());
        try {
            final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/databases/"" + fileChooser.getSelectedFile().getName());
            final HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(""PUT"");
            con.setDoOutput(true);
            con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
            con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
            con.setRequestProperty(Http11Header.CONTENT_LENGTH, Long.toString(fileChooser.getSelectedFile().length()));
            con.setRequestProperty(Http11Header.CONTENT_TYPE, ""application/octet-stream"");
            final OutputStream out = con.getOutputStream();
            try {
                Util.copy(in, out);
                con.connect();
                final InputStream in2 = con.getInputStream();
                try {
                    textArea.setText("""");
                    final byte[] buf = new byte[4096];
                    for (int bytesRead; (bytesRead = in2.read(buf)) != -1; ) {
                        textArea.append(new String(buf, 0, bytesRead));
                    }
                } finally {
                    in2.close();
                }
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static InputStream getResourceAsStreamIfAny(String resPath) {
        URL url = findResource(resPath);
        try {
            return url == null ? null : url.openStream();
        } catch (IOException e) {
            ZMLog.warn(e, "" URL open Connection got an exception!"");
            return null;
        }
    }
",300,,LABEL_0,LABEL_0,LABEL_0,-1,"upload,fileResult,in,url,con,out,in2,buf,bytesRead",,5,21,0,,0,GA,4023,1.5178422013918558,failed,"[';copy = 0', ';print(copy)', ';outer = 0', ';resource = 0', ';server = 0', ';on = 0', ';socket = 0', ';byteLength = 0', ';bytesLength = 0']"
754,"    public static SVNConfiguracion load(URL urlConfiguracion) {
        SVNConfiguracion configuracion = null;
        try {
            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());
            configuracion = (SVNConfiguracion) xenc.readObject();
            configuracion.setFicheroConfiguracion(urlConfiguracion);
            xenc.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return configuracion;
    }
 <SPLIT>     public String insertSmsInf(Sms sms) throws Exception {
        String smsId = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append(""INSERT INTO COMTNSMS\n"");
            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n"");
            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n"");
            buffer.append(""VALUES\n"");
            buffer.append(""(?, ?, ?, ?, SYSDATE())"");
            conn = SmsBasicDBUtil.getConnection();
            conn.setAutoCommit(false);
            smsId = getNextId(conn);
            pstmt = conn.prepareStatement(buffer.toString());
            int index = 0;
            pstmt.setString(++index, smsId);
            pstmt.setString(++index, sms.getTrnsmitTelno());
            pstmt.setString(++index, sms.getTrnsmitCn());
            pstmt.setString(++index, sms.getFrstRegisterId());
            pstmt.executeUpdate();
            conn.commit();
            return smsId;
        } catch (Exception ex) {
            if (conn != null) {
                conn.rollback();
            }
            throw ex;
        } finally {
            SmsBasicDBUtil.close(null, pstmt, conn);
        }
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"load,urlConfiguracion,configuracion,xenc",,3,8,0,,0,GA,1915,0.7096731344858805,failed,[]
755,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
 <SPLIT>     public void insertDomain(final List<String> domains) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""domain.add""));
                    Iterator<String> iter = domains.iterator();
                    String domain;
                    while (iter.hasNext()) {
                        domain = iter.next();
                        psImpl.setString(1, domain);
                        psImpl.setString(2, domain.toLowerCase(locale));
                        psImpl.executeUpdate();
                    }
                }
            });
            connection.commit();
            cmDB.updateDomains(null, null);
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                    log.error(ex);
                }
            }
        }
    }
",181,,LABEL_1,LABEL_1,LABEL_1,-1,"deleteObject,id,conn,stmt,dbConn,selfConnection",,6,28,0,,0,GA,2774,1.0386794924736023,failed,"[';selfConnection = 0', ';saveItem = 0', ';deleteItem = 0', ';saveObject = 0', '; deleteObj = 0', ';removeObject = 0', ';deleteObj = 0']"
756,"    public AsciiParser(String systemID) throws GridBagException {
        String id = systemID;
        if (id.endsWith("".xml"")) {
            id = StringUtils.replace(id, "".xml"", "".gbc"");
        }
        ClassLoader loader = this.getClass().getClassLoader();
        URL url = loader.getResource(id);
        if (url == null) {
            throw new GridBagException(""Cannot located resource : \"""" + systemID + ""\""."");
        }
        try {
            InputStream inStream = url.openStream();
            constraints = getLines(inStream);
            inStream.close();
        } catch (IOException ie1) {
            throw new GridBagException(""Cannot read from resource "" + id);
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",136,"    public AsciiParser(String systemID) throws GridBagException {
        String id = systemID;
        if (id.endsWith("".xml"")) {
            id = StringUtils.replace(id, "".xml"", "".gbc"");
        }
        ClassLoader loader = this.getClass().getClassLoader();
        URL path = loader.getResource(id);
        if (path == null) {
            throw new GridBagException(""Cannot located resource : \"""" + systemID + ""\""."");
        }
        try {
            InputStream INString = path.openStream();
            contains = getLines(INString);
            INString.close();
        } catch (IOException ie1) {
            throw new GridBagException(""Cannot read from resource "" + id);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"systemID,id,loader,url,inStream,constraints","systemID:-8.761882781982422e-05,id:-7.218122482299805e-05,loader:-7.75456428527832e-05,url:-5.4836273193359375e-06,inStream:0.0002090930938720703,constraints:0.0016109943389892578,",3,7,0,"constraints:contains,inStream:INString,url:path,",0,Greedy,128,0.04610108534495036,replace,[]
757,"    public static HttpResponse createUrlResponse(final URL url, final TcpConnection connection) throws IOException, NullPointerException {
        String fullPath = url.toString();
        URLConnection conn = url.openConnection();
        InputStream in = conn.getInputStream();
        final long length = conn.getContentLength();
        if (connection.isDebugEnabled()) connection.logDebug(""Sending "" + fullPath + "" to "" + connection.getRemoteAddress() + "" (length: "" + length + "")."");
        return createInputStreamResponse(in, conn.getContentType(), length, connection);
    }
 <SPLIT>     public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mButton1 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextView1 = (TextView) findViewById(R.id.myTextView1);
        mButton1.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace(""(\r\n|\r|\n|\n\r)"", """", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
",112,,LABEL_0,LABEL_0,LABEL_0,-1,"createUrlResponse,url,connection,fullPath,conn,in,length",,0,0,0,,0,GA,2748,1.0631261825561524,failed,[]
758,"    public static GameRecord[] get(String url, float lat, float lon, int count) {
        try {
            HttpURLConnection req = (HttpURLConnection) new URL(url).openConnection();
            req.setRequestMethod(""GET"");
            req.setRequestProperty(GameRecord.GAME_LATITUDE_HEADER, df.format(lat));
            req.setRequestProperty(GameRecord.GAME_LONGITUDE_HEADER, df.format(lon));
            req.setRequestProperty(""X-GameQueryCount"", String.valueOf(count));
            req.connect();
            if (req.getResponseCode() == HttpURLConnection.HTTP_OK) {
                List<GameRecord> gl = new ArrayList<GameRecord>();
                BufferedReader br = new BufferedReader(new InputStreamReader(req.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) {
                    if (!line.startsWith(""#"")) {
                        gl.add(GameRecord.decode(line));
                    }
                }
                return gl.toArray(new GameRecord[gl.size()]);
            } else {
                System.out.println(req.getResponseMessage());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public static String getMessageDigest(String input) {
        if (input == null) {
            log.warn(""Returning SHA-1 null value for null input"");
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(input.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            return new BASE64Encoder().encode(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",242,,LABEL_0,LABEL_0,LABEL_0,-1,"get,url,lat,lon,count,req,gl,br,line",,7,25,0,,0,GA,4203,1.5816652019818624,failed,[]
759,"    private String encode(String plaintext) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(plaintext.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",99,,LABEL_1,LABEL_1,LABEL_1,-1,"encode,plaintext,md,raw",,4,9,0,,0,GA,1749,0.6359222928682963,failed,[]
760,"    private BufferedImage _getImage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.connect();
        InputStream in = null;
        try {
            in = conn.getInputStream();
            return ImageIO.read(in);
        } finally {
            IOUtilities.close(in);
        }
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",73,"    private BufferedImage _readImage(String strStr) throws IOException {
        URL path = new URL(strStr);
        HttpURLConnection ssl = (HttpURLConnection) path.openConnection();
        ssl.connect();
        InputStream ins = null;
        try {
            ins = ssl.getInputStream();
            return ImageIO.read(ins);
        } finally {
            IOUtilities.close(ins);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"_getImage,urlStr,url,conn,in","_getImage:-0.00015145540237426758,urlStr:-0.00017654895782470703,url:0.0005750060081481934,conn:0.0002358555793762207,in:0.0001239180564880371,",5,12,0,"url:path,conn:ssl,in:ins,_getImage:_readImage,urlStr:strStr,",0,Greedy,191,0.07094773054122924,replace,[]
761,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
",272,"    private static void readAndrewrap(File loginFilename, File processFilename) throws IOException {
        ImageInputStream iris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(iris);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + loginFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(processFilename)));
        DcmEncodeParam dcmEstParameter = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEstParameter);
        ds.writeHeader(url, dcmEstParameter, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + processFilename + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",7,31,0,"outFile:processFilename,readAndRewrite:readAndrewrap,inFile:loginFilename,iis:iris,dcmEncParam:dcmEstParameter,dcmParser:dmissionPlugin,out:url,",0,Greedy,396,0.14353955189387005,replace,[]
762,"    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
 <SPLIT>     public static void copyFile(File source, File target) throws IOException {
        FileChannel in = (new FileInputStream(source)).getChannel();
        FileChannel out = (new FileOutputStream(target)).getChannel();
        in.transferTo(0, source.length(), out);
        in.close();
        out.close();
    }
",201,"    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream aaaaoS = new ByteArrayOutputStream();
        WritableByteChannel url = newChannel(aaaaoS);
        HttpParams http = new BasicHttpParams();
        SessionOutputBuffer inputbuf = new SessionOutputBufferImpl(1024, 128, http);
        HttpTransportMetricsImpl metals = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder ecode = new LengthDelimitedEncoder(url, inputbuf, metals, 16);
        ecode.write(wrap(""stuff;""));
        File mpFilename = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream flagain = new FileOutputStream(mpFilename);
        OutputStreamWriter Wrtwriter = new OutputStreamWriter(flagain);
        Wrtwriter.flush();
        Wrtwriter.close();
        FileChannel hresource = new FileInputStream(mpFilename).getChannel();
        ecode.transfer(hresource, 0, 20);
        ecode.write(wrap(""more stuff""));
        String ss = aaaaoS.toString(""US-ASCII"");
        assertTrue(ecode.isCompleted());
        assertEquals(""stuff;more stuff"", ss);
        mpFilename.delete();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s","testCodingEmptyFile:0.005807638168334961,baos:-0.0009831786155700684,channel:-0.00020331144332885742,params:0.001628279685974121,outbuf:0.002900242805480957,metrics:-0.0037160515785217285,encoder:-0.012021839618682861,tmpFile:-0.007728278636932373,fout:-0.0023352503776550293,wrtout:-0.009102046489715576,fchannel:-0.0023322105407714844,s:0.00014030933380126953,",11,29,0,"testCodingEmptyFile:testCodingEmptyFile,outbuf:inputbuf,params:http,s:ss,channel:url,baos:aaaaoS,fchannel:hresource,fout:flagain,metrics:metals,tmpFile:mpFilename,wrtout:Wrtwriter,encoder:ecode,",0,Greedy,435,0.15778839588165283,replace,[]
763,"    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String folder = """";
        String server = """";
        String login = """";
        String password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer message = new StringBuffer();
        message.append(""Status:<BR>"");
        if (action.equals(""Upload"")) {
            server = (String) user.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            login = (String) user.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (object.equals(""Media"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (action.equals(""Delete"")) {
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (action.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(server);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.login(login, password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        message.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(server);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + folder);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                message.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                message.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            message.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    message.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cSServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            message.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            message.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(server);
        if (action.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            message.append(""Deleting file "" + fileName + ""<BR>"");
                            message.append(""from folder "" + folderName + ""<BR>"");
                            message.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    message.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cISServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            message.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            message.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (message.toString());
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",2233,"    public static String uploadOrDeleteMediaOrTemplates(String plugin, String address, String numElements, HttpServletRequest req, HttpSession connection) {
        FTPClient FTP = new FTPClient();
        CofaxToolsUser comment = (CofaxToolsUser) connection.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String uri = """";
        String erver = """";
        String path = """";
        String Password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer header = new StringBuffer();
        header.append(""Status:<BR>"");
        if (plugin.equals(""Upload"")) {
            erver = (String) comment.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            path = (String) comment.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            Password = (String) comment.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (address.equals(""Media"")) {
                uri = (String) comment.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                uri = (String) comment.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (plugin.equals(""Delete"")) {
            path = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            Password = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                uri = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                uri = (String) comment.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (plugin.equals(""Upload"")) {
            try {
                int reply;
                FTP.connect(erver);
                CofaxToolsUtil.log(FTP.getReplyString());
                reply = FTP.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    FTP.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    FTP.path(path, Password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        FTP.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        FTP.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + FTP.getReplyString());
                        header.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                FTP.logout();
                FTP.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            path = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            Password = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) comment.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                erver = (String) comment.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) comment.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(erver);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    FTP.connect(connectServer);
                    CofaxToolsUtil.log(FTP.getReplyString());
                    reply = FTP.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        FTP.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        FTP.path(path, Password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + uri);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, uri, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = FTP.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                header.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = FTP.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                header.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = FTP.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + FTP.getReplyString());
                            header.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    FTP.logout();
                    FTP.disconnect();
                    header.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cSServers = (String) comment.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, uri, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            header.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            header.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(erver);
        if (plugin.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    FTP.connect(connectServer);
                    CofaxToolsUtil.log(FTP.getReplyString());
                    reply = FTP.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        FTP.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        FTP.path(path, Password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            FTP.changeWorkingDirectory(folderName);
                            FTP.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + FTP.getReplyString());
                            header.append(""Deleting file "" + fileName + ""<BR>"");
                            header.append(""from folder "" + folderName + ""<BR>"");
                            header.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    header.append(""Success<BR><BR>"");
                    FTP.logout();
                    FTP.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cISServers = (String) comment.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            header.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            header.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (header.toString());
    }
",LABEL_0,LABEL_0,LABEL_1,1,"uploadOrDeleteMediaOrTemplates,action,object,numElements,req,session,ftp,user,links,folders,folder,server,login,password,fileTransferFolder,liveFolder,servers,message","uploadOrDeleteMediaOrTemplates:0.09342765808105469,action:0.4293256998062134,object:0.3507480025291443,numElements:-0.0060253143310546875,req:0.1402043104171753,session:0.14324575662612915,ftp:1.7259637713432312,user:1.0035400390625,links:0.07702964544296265,folders:0.06896775960922241,folder:0.3322674632072449,server:0.4210011959075928,login:0.6572892069816589,password:0.2745444178581238,fileTransferFolder:0.00872194766998291,liveFolder:0.0965222716331482,servers:0.0695112943649292,message:0.2740495204925537,",10,134,0,"ftp:FTP,user:comment,login:path,action:plugin,server:erver,object:address,folder:uri,password:Password,message:header,session:connection,",0,Greedy,625,0.3340427080790202,replace,[]
764,"    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",253,"    public static byte[] fetchJSONdata(String url, String ProxyAddress, int httpPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL conn = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(conn.openStream());
            } else {
                Proxy copy;
                if (ProxyAddress != null) {
                    copy = new Proxy(Type.HTTP, new InetSocketAddress(ProxyAddress, httpPort));
                } else {
                    copy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) conn.openConnection(copy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fetchURLData,url,proxyHost,proxyPort,con,is,u,proxy,baos","fetchURLData:0.008266568183898926,url:-0.12102413177490234,proxyHost:0.011965692043304443,proxyPort:0.007617950439453125,con:-2.360607922077179,is:-0.5767456889152527,u:-0.02667975425720215,proxy:-0.02095586061477661,baos:-0.43737560510635376,",5,13,0,"proxyHost:ProxyAddress,fetchURLData:fetchJSONdata,proxyPort:httpPort,proxy:copy,u:conn,",0,Greedy,201,0.08313128550847372,replace,[]
765,"    private DialogHelper(String title, final URL imageURL) {
        jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setAlwaysOnTop(true);
        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));
        jd.setTitle(title);
        JLabel jl = new JLabel();
        ImageIcon icon = new ImageIcon(imageURL);
        jl.setIcon(icon);
        jd.add(new JScrollPane(jl));
        final JFileChooser chooser = getSaveImageChooser();
        JPanel jp = new JPanel();
        JButton jb = new JButton(getMessage(""btn_save_as""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int returnVal = chooser.showSaveDialog(jd);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    String fileName = file.getPath();
                    String ext = StringUtil.getLowerExtension(fileName);
                    if (!""png"".equals(ext)) {
                        fileName += "".png"";
                        file = new File(fileName);
                    }
                    boolean doIt = true;
                    if (file.exists()) {
                        int i = JOptionPane.showConfirmDialog(jd, getMessage(""warn_file_exist""));
                        if (i != JOptionPane.YES_OPTION) doIt = false;
                    } else if (!file.getParentFile().exists()) {
                        doIt = file.getParentFile().mkdirs();
                    }
                    if (doIt) {
                        FileChannel src = null;
                        FileChannel dest = null;
                        try {
                            src = new FileInputStream(imageURL.getPath()).getChannel();
                            dest = new FileOutputStream(fileName).getChannel();
                            src.transferTo(0, src.size(), dest);
                        } catch (FileNotFoundException e1) {
                            warn(jd, getMessage(""err_no_source_file""));
                        } catch (IOException e2) {
                            warn(jd, getMessage(""err_output_target""));
                        } finally {
                            try {
                                if (src != null) src.close();
                            } catch (IOException e1) {
                            }
                            try {
                                if (dest != null) dest.close();
                            } catch (IOException e1) {
                            }
                            src = null;
                            dest = null;
                        }
                    }
                }
            }
        });
        jp.add(jb);
        jb = new JButton(getMessage(""btn_close""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jd.dispose();
            }
        });
        jp.add(jb);
        jd.add(jp);
        jd.pack();
        setCentral(jd);
    }
 <SPLIT>     public String execute() {
        String dir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\"";
        HomeMap map = new HomeMap();
        map.setDescription(description);
        Integer id = homeMapDao.saveHomeMap(map);
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(dir + id);
            IOUtils.copy(new FileInputStream(imageFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list();
    }
",522,"    private DialogHelper(String title, final URL fileurl) {
        jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setAlwaysOnTop(true);
        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));
        jd.setTitle(title);
        JLabel jl = new JLabel();
        ImageIcon icon = new ImageIcon(fileurl);
        jl.setIcon(icon);
        jd.add(new JScrollPane(jl));
        final JFileChooser chooser = getSaveImageChooser();
        JPanel jp = new JPanel();
        JButton jb = new JButton(getMessage(""btn_save_as""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int replyval = chooser.showSaveDialog(jd);
                if (replyval == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    String fileName = file.getPath();
                    String ext = StringUtil.getLowerExtension(fileName);
                    if (!""png"".equals(ext)) {
                        fileName += "".png"";
                        file = new File(fileName);
                    }
                    boolean doIt = true;
                    if (file.exists()) {
                        int i = JOptionPane.showConfirmDialog(jd, getMessage(""warn_file_exist""));
                        if (i != JOptionPane.YES_OPTION) doIt = false;
                    } else if (!file.getParentFile().exists()) {
                        doIt = file.getParentFile().mkdirs();
                    }
                    if (doIt) {
                        FileChannel src = null;
                        FileChannel dest = null;
                        try {
                            src = new FileInputStream(fileurl.getPath()).getChannel();
                            dest = new FileOutputStream(fileName).getChannel();
                            src.transferTo(0, src.size(), dest);
                        } catch (FileNotFoundException e1) {
                            warn(jd, getMessage(""err_no_source_file""));
                        } catch (IOException e2) {
                            warn(jd, getMessage(""err_output_target""));
                        } finally {
                            try {
                                if (src != null) src.close();
                            } catch (IOException e1) {
                            }
                            try {
                                if (dest != null) dest.close();
                            } catch (IOException e1) {
                            }
                            src = null;
                            dest = null;
                        }
                    }
                }
            }
        });
        jp.add(jb);
        jb = new JButton(getMessage(""btn_close""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jd.dispose();
            }
        });
        jp.add(jb);
        jd.add(jp);
        jd.pack();
        setCentral(jd);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"title,imageURL,jd,jl,icon,chooser,jp,jb,e,returnVal,file,fileName,ext,i,doIt,src,dest","title:0.06473994255065918,imageURL:0.039895713329315186,jd:0.17301011085510254,jl:-0.04119640588760376,icon:-0.016975581645965576,chooser:-0.002990126609802246,jp:-0.04436403512954712,jb:-0.1274082064628601,e:-0.010869383811950684,returnVal:0.014423191547393799,file:0.012027978897094727,fileName:-0.042369186878204346,ext:-0.004121005535125732,i:0.002504885196685791,doIt:-0.004350125789642334,src:-0.034121692180633545,dest:-0.03198510408401489,",2,5,0,"jd:jd,title:title,imageURL:fileurl,returnVal:replyval,",0,Greedy,249,0.09320098161697388,replace,[]
766,"    public static synchronized BufferedImage loadBufferedJPEGImage(URL url) {
        BufferedImage image = null;
        if (url != null) {
            InputStream in = null;
            try {
                in = url.openStream();
                JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(in);
                image = decoder.decodeAsBufferedImage();
            } catch (Exception e) {
                log.severe(""URL: "" + url + "" - "" + e.getMessage());
                image = null;
            } finally {
                try {
                    if (in != null) in.close();
                } catch (IOException ioe) {
                    log.severe(""URL: "" + url + "" - "" + ioe.getMessage());
                }
            }
            if (image != null) {
                log.config(""Image type : "" + image.getType());
                if (image.getWidth() <= 0 || image.getHeight() <= 0) {
                    log.severe(""URL: "" + url + "" =0"");
                    image = null;
                }
            }
        }
        return image;
    }
 <SPLIT>     private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
",202,,LABEL_0,LABEL_0,LABEL_0,-1,"loadBufferedJPEGImage,url,image,in,decoder",,3,16,0,,0,GA,2503,0.9847321112950643,failed,[';url = 0']
767,"    public Song(String s) {
        StringTokenizer tokenizer = new StringTokenizer(s, "";"");
        free = false;
        title = tokenizer.nextToken();
        artist = tokenizer.nextToken();
        location = tokenizer.nextToken();
        rating = Integer.parseInt(tokenizer.nextToken());
        overplay = Integer.parseInt(tokenizer.nextToken());
        String temp = tokenizer.nextToken();
        tokenizer = new StringTokenizer(temp, "",[] "");
        tags = new ArrayList<String>();
        while (tokenizer.hasMoreTokens()) {
            tags.add(tokenizer.nextToken());
        }
        byte[] bytes = new byte[40];
        try {
            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");
            hasher.update(title.getBytes());
            hasher.update(artist.getBytes());
            bytes = hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
",199,"    public Song(String s) {
        StringTokenizer logizable = new StringTokenizer(s, "";"");
        free = false;
        url = logizable.nextToken();
        genre = logizable.nextToken();
        photo = logizable.nextToken();
        ranking = Integer.parseInt(logizable.nextToken());
        opledge = Integer.parseInt(logizable.nextToken());
        String temp = logizable.nextToken();
        logizable = new StringTokenizer(temp, "",[] "");
        videos = new ArrayList<String>();
        while (logizable.hasMoreTokens()) {
            videos.add(logizable.nextToken());
        }
        byte[] videos = new byte[40];
        try {
            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");
            hasher.update(url.getBytes());
            hasher.update(genre.getBytes());
            videos = hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
;s = 0;print(s);tokenizer = 0;title = 0;artist = 0;location = 0;bytes = 0",LABEL_1,LABEL_1,LABEL_1,1,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher","s:0.004604816436767578,tokenizer:-0.019967496395111084,title:0.0010169744491577148,artist:-0.0022401809692382812,location:0.0003840923309326172,rating:-0.0017865896224975586,overplay:-0.004118502140045166,temp:0.0010647773742675781,tags:-0.040699005126953125,bytes:-0.07767248153686523,hasher:0.009299814701080322,",8,21,0,"hasher:hasher,s:s,temp:temp,title:url,location:photo,rating:ranking,artist:genre,overplay:opledge,tokenizer:logizable,tags:videos,bytes:videos,",0,Greedy,484,0.17724223136901857,inesrt,"[';s = 0', ';print(s)', ';tokenizer = 0', ';title = 0', ';artist = 0', ';location = 0', ';bytes = 0']"
768,"    protected static final byte[] digest(String s) {
        byte[] ret = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(s.getBytes());
            ret = md.digest();
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""no message digest algorithm available!"");
            System.exit(1);
        }
        return ret;
    }
 <SPLIT>     public static final String calculate(File f) {
        MessageDigest md;
        BufferedReader rd;
        StringBuffer buffer = new StringBuffer("""");
        try {
            rd = new BufferedReader(new FileReader(f));
            md = MessageDigest.getInstance(""SHA"");
            String line = """";
            while ((line = rd.readLine()) != null) buffer.append(line);
            md.update(buffer.toString().getBytes());
            byte[] digest = md.digest();
            String result = """";
            for (byte b : digest) result += String.format(""%h"", b & 0xFF);
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            return """";
        }
    }
",83,,LABEL_1,LABEL_1,LABEL_1,-1,"digest,s,ret,md",,4,11,0,,0,GA,1614,0.5982534925142924,failed,"[';digest = 0', ';s = 0', ';ret = 0', ';digit = 0', ';string = 0', ';sym = 0', ';match = 0', ';addr = 0']"
769,"    public void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {
        int iLinha = -1;
        Statement stmtLimpezaInicialDestino = null;
        OraclePreparedStatement stmtDestino = null;
        try {
            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));
            Sheet plan1 = arquivo.getSheetAt(0);
            int QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;
            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;
            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;
            int quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;
            String vSetor = """", vSubsetor = """", vSegmento = """";
            LinhaDaPlanilhaDosSetores registroAtual;
            int vPapeisPorSegmento = 0;
            stmtLimpezaInicialDestino = conDestino.createStatement();
            String sql = ""TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO"";
            stmtLimpezaInicialDestino.executeUpdate(sql);
            sql = ""INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)"";
            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosImportados = 0;
            iLinha = 8;
            while (true) {
                registroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));
                if (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    if (registroAtual.nomeDoSubsetor.equalsIgnoreCase("""")) {
                        break;
                    } else {
                        vSetor = registroAtual.nomeDoSetor;
                        vSubsetor = null;
                        vSegmento = null;
                    }
                }
                if (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    vSubsetor = registroAtual.nomeDoSubsetor;
                    vSegmento = null;
                }
                String nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals("""")) {
                    if (vSegmento != null && vPapeisPorSegmento == 0) {
                        vSegmento = vSegmento + "" "" + nomeDoSegmento;
                    } else {
                        vSegmento = nomeDoSegmento;
                    }
                    vPapeisPorSegmento = 0;
                }
                String nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals("""")) {
                    String vCodneg = registroAtual.siglaDaEmpresa;
                    stmtDestino.clearParameters();
                    stmtDestino.setStringAtName(""SIGLA_EMPRESA"", vCodneg);
                    stmtDestino.setStringAtName(""NOME_SETOR"", vSetor);
                    stmtDestino.setStringAtName(""NOME_SUBSETOR"", vSubsetor);
                    stmtDestino.setStringAtName(""NOME_SEGMENTO"", vSegmento);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    vPapeisPorSegmento++;
                }
                iLinha++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
 <SPLIT>     private String File2String(String directory, String filename) {
        String line;
        InputStream in = null;
        try {
            File f = new File(filename);
            System.out.println(""File On:>>>>>>>>>> "" + f.getCanonicalPath());
            in = new FileInputStream(f);
        } catch (FileNotFoundException ex) {
            in = null;
        } catch (IOException ex) {
            in = null;
        }
        try {
            if (in == null) {
                filename = directory + ""/"" + filename;
                java.net.URL urlFile = ClassLoader.getSystemResource(filename);
                if (urlFile == null) {
                    System.out.println(""Integrated Chips list file not found: "" + filename);
                    System.exit(-1);
                }
                in = urlFile.openStream();
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuffer xmlText = new StringBuffer();
            while ((line = reader.readLine()) != null) {
                xmlText.append(line);
            }
            reader.close();
            return xmlText.toString();
        } catch (FileNotFoundException ex) {
            System.out.println(""Integrated Chips list file not found"");
            System.exit(-1);
        } catch (IOException ex) {
            ex.printStackTrace();
            System.exit(-1);
        }
        return null;
    }
",602,"    public void importarSetor(File pArquivoTXLS, String pCabecalhoEditeur, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {
        int iLinha = -1;
        Statement stmtLimpezaIniciadestaco = null;
        OraclePreparedStatement stmtDestino = null;
        try {
            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoTXLS));
            Sheet plan1 = arquivo.getSheetAt(0);
            int QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;
            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;
            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;
            int quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;
            String vSetor = """", vSubsetor = """", vSegMENTo = """";
            LinhaDaPlanilhaDosSetores Registrosational;
            int vPapeisPorSegmento = 0;
            stmtLimpezaIniciadestaco = conDestino.createStatement();
            String sql = ""TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO"";
            stmtLimpezaIniciadestaco.executeUpdate(sql);
            sql = ""INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)"";
            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosImportados = 0;
            iLinha = 8;
            while (true) {
                Registrosational = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));
                if (Registrosational.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur)) {
                    if (Registrosational.nomeDoSubsetor.equalsIgnoreCase("""")) {
                        break;
                    } else {
                        vSetor = Registrosational.nomeDoSetor;
                        vSubsetor = null;
                        vSegMENTo = null;
                    }
                }
                if (Registrosational.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur)) {
                    vSubsetor = Registrosational.nomeDoSubsetor;
                    vSegMENTo = null;
                }
                String nomeDoSegmento = Registrosational.nomeDoSegmentoOuDaEmpresa;
                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur) && Registrosational.siglaDaEmpresa.equals("""")) {
                    if (vSegMENTo != null && vPapeisPorSegmento == 0) {
                        vSegMENTo = vSegMENTo + "" "" + nomeDoSegmento;
                    } else {
                        vSegMENTo = nomeDoSegmento;
                    }
                    vPapeisPorSegmento = 0;
                }
                String nomeDaEmpresa = Registrosational.nomeDoSegmentoOuDaEmpresa;
                if (Registrosational.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur) && !nomeDaEmpresa.equals("""")) {
                    String vCodneg = Registrosational.siglaDaEmpresa;
                    stmtDestino.clearParameters();
                    stmtDestino.setStringAtName(""SIGLA_EMPRESA"", vCodneg);
                    stmtDestino.setStringAtName(""NOME_SETOR"", vSetor);
                    stmtDestino.setStringAtName(""NOME_SUBSETOR"", vSubsetor);
                    stmtDestino.setStringAtName(""NOME_SEGMENTO"", vSegMENTo);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    vPapeisPorSegmento++;
                }
                iLinha++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXLS.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            if (stmtLimpezaIniciadestaco != null && (!stmtLimpezaIniciadestaco.isClosed())) {
                stmtLimpezaIniciadestaco.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"importarSetor,pArquivoXLS,pCabecalhoSetor,pAndamento,iLinha,stmtLimpezaInicialDestino,stmtDestino,arquivo,plan1,QUANTIDADE_DE_REGISTROS_DE_CABECALHO,QUANTIDADE_DE_REGISTROS_DE_RODAPE,QUANTIDADE_DE_REGISTROS_DE_METADADOS,quantidadeDeRegistrosEstimada,vSetor,vSubsetor,vSegmento,registroAtual,vPapeisPorSegmento,sql","importarSetor:0.017724335193634033,pArquivoXLS:0.04410964250564575,pCabecalhoSetor:0.09193581342697144,pAndamento:0.0029281973838806152,iLinha:-0.01585698127746582,stmtLimpezaInicialDestino:0.03952908515930176,stmtDestino:-0.016166329383850098,arquivo:0.0040340423583984375,plan1:-0.12757772207260132,QUANTIDADE_DE_REGISTROS_DE_CABECALHO:0.004992663860321045,QUANTIDADE_DE_REGISTROS_DE_RODAPE:-0.016764402389526367,QUANTIDADE_DE_REGISTROS_DE_METADADOS:-0.016219675540924072,quantidadeDeRegistrosEstimada:-0.02534627914428711,vSetor:-0.00508880615234375,vSubsetor:0.019638895988464355,vSegmento:0.05417656898498535,registroAtual:0.11216366291046143,vPapeisPorSegmento:-0.1941699981689453,sql:-0.08038210868835449,",5,38,0,"registroAtual:Registrosational,pCabecalhoSetor:pCabecalhoEditeur,vSegmento:vSegMENTo,pArquivoXLS:pArquivoTXLS,stmtLimpezaInicialDestino:stmtLimpezaIniciadestaco,",0,Greedy,232,0.09583853880564372,replace,[]
770,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",68,"    static void transferStream(File url, File point) throws IOException {
        FileChannel server = new FileInputStream(url).getChannel();
        FileChannel Destinations = new FileOutputStream(point).getChannel();
        server.transferTo(0, server.size(), Destinations);
        server.close();
        Destinations.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,source,destination","copyFile:-4.26173210144043e-05,in:-3.933906555175781e-06,out:0.0009134411811828613,source:0.0001392364501953125,destination:0.0001367330551147461,",5,12,0,"out:point,source:server,destination:Destinations,in:url,copyFile:transferStream,",0,Greedy,183,0.06480776866277059,replace,[]
771,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""At RandomGUID !!!"", e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.error(""At RandomGUID !!!"", e);
        }
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,sha1hash,md",,4,10,0,,0,GA,1890,0.7043553749720256,failed,"[';text = 0', ';sha1hash = 0', ';sha256 = 0', '; SHA256 = 0', ';sha384 = 0', ';string = 0', ';output = 0', ';hex = 0']"
772,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private void createButtonCopyToClipboard() {
        buttonCopyToClipboard = new Button(shell, SWT.PUSH);
        buttonCopyToClipboard.setText(""Co&py to Clipboard"");
        buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));
        buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {

            @Override
            public void widgetSelected(final SelectionEvent event) {
                IOUtils.copyToClipboard(Version.getEnvironmentReport());
            }
        });
    }
",272,"    private static void readAndrewrap(File loginFilename, File newStream) throws IOException {
        ImageInputStream iiIS = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(iiIS);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iiIS, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + loginFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(newStream)));
        DcmEncodeParam dcmSecPart = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmSecPart);
        ds.writeHeader(url, dcmSecPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + newStream + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:0.0017459988594055176,inFile:-6.687641143798828e-05,outFile:0.0026526451110839844,iis:-0.0004436969757080078,dcmParser:-0.0016906261444091797,ds:-0.007178783416748047,pdReader:-0.007293701171875,out:-0.0036382079124450684,dcmEncParam:-0.0008960366249084473,pdWriter:-0.004673898220062256,",7,31,0,"outFile:newStream,readAndRewrite:readAndrewrap,inFile:loginFilename,iis:iiIS,dcmEncParam:dcmSecPart,dcmParser:dmissionPlugin,out:url,",0,Greedy,396,0.14353454113006592,replace,[]
773,"    public boolean gerarTutorialPage() {
        try {
            File indexDir = criarDiretorioSite();
            File cssDir = criarDiretorioCss();
            File capDir = criarDiretorioCapitulos();
            File licDir = criarDiretorioLicoes();
            File midDir = criarDiretorioMidias();
            File filesDir = criarDiretorioArquivos();
            File videosDir = new File(filesDir + ""/videos"");
            videosDir.mkdir();
            File imagensDir = new File(filesDir + ""/imagens"");
            imagensDir.mkdir();
            String local = System.getProperty(""user.dir"");
            FileChannel srcCss1 = new FileInputStream(local + ""/bin/style/layout.css"").getChannel();
            FileChannel destCss1 = new FileOutputStream(cssDir + ""/layout.css"").getChannel();
            destCss1.transferFrom(srcCss1, 0, srcCss1.size());
            srcCss1.close();
            destCss1.close();
            FileChannel srcCss2 = new FileInputStream(local + ""/bin/style/elementos.css"").getChannel();
            FileChannel destCss2 = new FileOutputStream(cssDir + ""/elementos.css"").getChannel();
            destCss2.transferFrom(srcCss2, 0, srcCss2.size());
            srcCss2.close();
            destCss2.close();
            FileChannel srcCss3 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid.css"").getChannel();
            FileChannel destCss3 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid.css"").getChannel();
            destCss3.transferFrom(srcCss3, 0, srcCss3.size());
            srcCss3.close();
            destCss3.close();
            FileChannel srcCss4 = new FileInputStream(local + ""/bin/style/layout_ie.css"").getChannel();
            FileChannel destCss4 = new FileOutputStream(cssDir + ""/layout_ie.css"").getChannel();
            destCss4.transferFrom(srcCss4, 0, srcCss4.size());
            srcCss4.close();
            destCss4.close();
            FileChannel srcCss5 = new FileInputStream(local + ""/bin/style/elementos_ie.css"").getChannel();
            FileChannel destCss5 = new FileOutputStream(cssDir + ""/elementos_ie.css"").getChannel();
            destCss5.transferFrom(srcCss5, 0, srcCss5.size());
            srcCss5.close();
            destCss5.close();
            FileChannel srcCss6 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid_ie.css"").getChannel();
            FileChannel destCss6 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid_ie.css"").getChannel();
            destCss6.transferFrom(srcCss6, 0, srcCss6.size());
            srcCss6.close();
            destCss6.close();
            copiarMidias(videosDir, imagensDir);
            escreverMidiasPage(midDir);
            escreverLicoesPage(licDir);
            escreverCapitulosPages(capDir);
            FileWriter indexHtml = new FileWriter(indexDir + ""/index.html"");
            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());
            indexHtml.close();
            System.out.println(""Site gerado com sucesso"");
            JOptionPane.showMessageDialog(null, ""Web Site gerado com sucesso"", ""\\o/"", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Site não gerado"");
            JOptionPane.showMessageDialog(null, ""Web Site não gerado corretamente"", ""Ops..."", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public static int[] sortstring(int[] a1) {
        int temp;
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        return a1;
    }
",611,,LABEL_0,LABEL_1,,-4,"gerarTutorialPage,indexDir,cssDir,capDir,licDir,midDir,filesDir,videosDir,imagensDir,local,srcCss1,destCss1,srcCss2,destCss2,srcCss3,destCss3,srcCss4",,,,0,,0,Greedy,1,0.0008077343304951985,,[]
774,"    public static int save(byte[] bytes, File outputFile) throws IOException {
        InputStream in = new ByteArrayInputStream(bytes);
        outputFile.getParentFile().mkdirs();
        OutputStream out = new FileOutputStream(outputFile);
        try {
            return IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
            try {
                out.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
            try {
                in.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
        }
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",120,"    public static int save(byte[] bytes, File outputFile) throws IOException {
        InputStream url = new ByteArrayInputStream(bytes);
        outputFile.getParentFile().mkdirs();
        OutputStream temp = new FileOutputStream(outputFile);
        try {
            return IOUtils.copy(url, temp);
        } finally {
            IOUtils.closeQuietly(url);
            IOUtils.closeQuietly(temp);
            try {
                temp.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
            try {
                url.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"save,bytes,outputFile,in,out","save:-0.001055002212524414,bytes:0.0006045699119567871,outputFile:0.0005774497985839844,in:0.0017760992050170898,out:0.0012130141258239746,",2,8,0,"in:url,out:temp,",0,Greedy,122,0.045263548692067467,replace,[]
775,"    public static String eventHash(String eventstr) {
        try {
            if (md == null) {
                md = MessageDigest.getInstance(""MD5"");
            }
            md.update(eventstr.getBytes(""utf-8""));
            byte[] theDigest = md.digest();
            return new BASE64Encoder().encode(theDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {
        if (increasePkBy < 1) increasePkBy = 1;
        String where = ""where eoentity_name = '"" + entityName + ""'"";
        if (false) {
            EOEditingContext ec = ERXEC.newEditingContext();
            ec.lock();
            try {
                EODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);
                dbc.lock();
                try {
                    EOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);
                    EOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();
                    NSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);
                    return (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();
                } finally {
                    dbc.unlock();
                }
            } finally {
                ec.unlock();
            }
        } else {
            ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);
            Connection con = broker.getConnection();
            try {
                try {
                    con.setAutoCommit(false);
                    con.setReadOnly(false);
                } catch (SQLException e) {
                    log.error(e, e);
                }
                for (int tries = 0; tries < count; tries++) {
                    try {
                        ResultSet resultSet = con.createStatement().executeQuery(""select pk_value from pk_table "" + where);
                        con.commit();
                        boolean hasNext = resultSet.next();
                        long pk = 1;
                        if (hasNext) {
                            pk = resultSet.getLong(""pk_value"");
                            con.createStatement().executeUpdate(""update pk_table set pk_value = "" + (pk + increasePkBy) + "" "" + where);
                        } else {
                            pk = maxIdFromTable(entityName);
                            con.createStatement().executeUpdate(""insert into pk_table (eoentity_name, pk_value) values ('"" + entityName + ""', "" + (pk + increasePkBy) + "")"");
                        }
                        con.commit();
                        return new Long(pk);
                    } catch (SQLException ex) {
                        String s = ex.getMessage().toLowerCase();
                        boolean creationError = (s.indexOf(""error code 116"") != -1);
                        creationError |= (s.indexOf(""pk_table"") != -1 && s.indexOf(""does not exist"") != -1);
                        creationError |= s.indexOf(""ora-00942"") != -1;
                        if (creationError) {
                            try {
                                con.rollback();
                                log.info(""creating pk table"");
                                con.createStatement().executeUpdate(""create table pk_table (eoentity_name varchar(100) not null, pk_value integer)"");
                                con.createStatement().executeUpdate(""alter table pk_table add primary key (eoentity_name)"");
                                con.commit();
                            } catch (SQLException ee) {
                                throw new NSForwardException(ee, ""could not create pk table"");
                            }
                        } else {
                            throw new NSForwardException(ex, ""Error fetching PK"");
                        }
                    }
                }
            } finally {
                broker.freeConnection(con);
            }
        }
        throw new IllegalStateException(""Couldn't get PK"");
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"eventHash,eventstr,md,theDigest",,4,9,0,,0,GA,1742,0.6649610956509908,failed,"[';eventHash = 0', ';eventstr = 0', ';theDigest = 0', ';bytehash = 0', ';byteKey = 0', ';errorstring = 0']"
776,"    public void writeConfiguration(Writer out) throws IOException {
        if (myResource == null) {
            out.append(""# Unable to print configuration resource\n"");
        } else {
            URL url = myResource.getUrl();
            InputStream in = url.openStream();
            if (in != null) {
                try {
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(in);
                }
            } else {
                out.append(""# Unable to print configuration resource\n"");
            }
        }
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"writeConfiguration,out,url,in",,3,9,0,,0,GA,1889,0.690165368715922,failed,[]
777,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",220,,LABEL_0,LABEL_0,LABEL_0,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,0,0,0,,0,GA,5250,1.955937882264455,failed,[]
778,"    public static String connRemote(JSONObject jsonObject, String OPCode) {
        String retSrc = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
 <SPLIT>             public void run() {
                Log.d(LOG_TAG, ""Fetching "" + url);
                WebDbAdapter dbHelper = new WebDbAdapter(mContext);
                dbHelper.open();
                boolean errorOccurred = true;
                int notifyId = 0;
                String host = AppUtils.getHostFromUrl(url);
                try {
                    if (host == null) {
                        Log.d(LOG_TAG, ""Bad url "" + url);
                        errorOccurred = true;
                    } else {
                        notifyId = showNotification(""Fetching "" + host, ""Fetching "" + host, android.R.drawable.stat_sys_download, 0);
                        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);
                        String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));
                        Log.d(LOG_TAG, ""Using user agent="" + userAgent);
                        AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);
                        URI uri = new URI(url);
                        URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);
                        norm = norm.normalize();
                        HttpUriRequest get = new HttpGet(norm);
                        HttpResponse response = ahc.execute(get);
                        if (response.getStatusLine().getStatusCode() == 200) {
                            HttpEntity entity = response.getEntity();
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            entity.writeTo(baos);
                            String data = baos.toString();
                            for (int i = 0; i < undesirables.length; i++) {
                                Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
                                data = data.replaceAll(p.pattern(), """");
                            }
                            long sysMillis = System.currentTimeMillis();
                            String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));
                            FileOutputStream strm = new FileOutputStream(newFileName);
                            Log.d(LOG_TAG, ""Writing to "" + newFileName + "" for url "" + url);
                            String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);
                            jsData = jsData.replaceAll(""@css_file"", RETAIN_COLORS_CSS);
                            strm.write(jsData.getBytes());
                            strm.write(data.getBytes());
                            strm.write(jsData.getBytes());
                            strm.flush();
                            strm.close();
                            String entryName = getTitle(newFileName, url);
                            long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);
                            postToast(""Downloaded \"""" + entryName + ""\"""");
                            errorOccurred = false;
                            if (deleteRowId != 0) {
                                Log.d(LOG_TAG, ""Deleting rowId="" + deleteRowId);
                                dbHelper.deleteEntry(deleteRowId);
                                if (url == null) postToast(""Item Deleted"");
                                mContext.startActivity(new Intent(mContext, RetainActivity.class));
                            } else {
                                showNotification(""Download Complete"", entryName, android.R.drawable.stat_sys_download_done, newRowId);
                            }
                        } else {
                            Log.e(LOG_TAG, ""Response code="" + String.valueOf(response.getStatusLine().getStatusCode()));
                        }
                    }
                } catch (IOException ioe) {
                    Log.e(LOG_TAG, ""RETAIN IOException: "" + ioe.getMessage());
                } catch (URISyntaxException u) {
                    Log.e(LOG_TAG, ""RETAIN URISyntaxException: "" + u.getMessage());
                } catch (OutOfMemoryError oome) {
                    Log.e(LOG_TAG, ""RETAIN OutOfMemoryError: "" + oome.getMessage());
                } catch (Exception e) {
                    Log.e(LOG_TAG, ""RETAIN Exception: "" + e.getMessage());
                }
                hideNotification(notifyId);
                if (errorOccurred && host != null) {
                    showNotification(""Error Downloading"", host, android.R.drawable.stat_notify_error, 0);
                    postToast(""Error fetching "" + host);
                }
                dbHelper.close();
            }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"connRemote,jsonObject,OPCode,retSrc,httpClient,httpPost,httpParams,nameValuePair,response",,8,20,0,,0,GA,3943,1.5755639553070069,failed,"[';print(connRemote)', ';print(retSrc)']"
779,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",765,"    public void Conversion(File url, File img) throws IOException {
        InputStream login = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(login);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat url = p.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflation = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflation) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflation) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(login.read());
                        b2 = login.read();
                        b3 = login.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(login.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            login.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-0.01750195026397705,src:-0.025500893592834473,dest:-0.010704338550567627,in:-0.016048848628997803,p:-0.05863666534423828,ds:-0.2711549997329712,format:-0.01843363046646118,hasPixelData:-0.010513842105865479,inflate:-0.011509478092193604,pxlen:-0.0013159513473510742,out:-0.1792554259300232,",6,23,0,"pxlen:pxlen,hasPixelData:hasPixelData,dest:img,inflate:inflation,in:login,convert:Conversion,format:url,src:url,",0,Greedy,437,0.1718034346898397,replace,[]
780,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
",78,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,tmp,md",,4,9,0,,0,GA,1841,0.6710102876027425,failed,"[';getMD5 = 0', ';print(getMD5)', ';print(tmp)', ';print(md)', ';print(getmd4)', ';print(getMD512)', ';print(getSHA512)', ';print(getmd512)', ';print(getmd5)', ';print(slice)', ';print(result)', ';print(dest)', ';print(length)', ';print(sm)', ';seed = 0', ';print(seed)', ';print(bytes)', ';print(code)', ';zip = 0', ';foo = 0', ';print(foo)', ';buffer = 0', ';print(buffer)', ';copy = 0', ';print(copy)', ';mp = 0', '; MD = 0']"
781,"    public static String getContent(HttpUriRequest request) throws Exception {
        StringBuffer sb = new StringBuffer();
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setConnectionTimeout(httpParams, 30000);
        HttpConnectionParams.setSoTimeout(httpParams, 50000);
        HttpResponse response = client.execute(request);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""), 8192);
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            reader.close();
        }
        return sb.toString();
    }
 <SPLIT>     private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
",151,,LABEL_1,LABEL_0,,-4,"getContent,request,sb,client,httpParams,response,entity,reader,line",,,,0,,0,Greedy,1,0.0006351153055826823,,[]
782,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",335,"    public static void report(String sourcePath, ArrayList<byte[]>  fileHours, ArrayList<String> FileNumbers) throws Exception {
        String folderBased = Util.JAVA_DIR + File.separator + sourcePath;
        File folderLib = new File(folderBased);
        if (!packageDir.exists()) {
            boolean path = folderLib.mkdir();
            if (!created) {
                File currentlyDirectory = new File(""."");
                throw new Exception(""Directory "" + sourcePath + "" could not be created. Current directory: "" + currentlyDirectory.getAbsolutePath());
            }
        }
        for (int i = 0; i <  fileHours.size(); i++) {
            File rule = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(i));
            FileOutputStream vos = new FileOutputStream(rule);
            vos.write( fileHours.get(i));
            vos.flush();
            vos.close();
        }
        for (int i = 0; i < FileNumbers.size(); i++) {
            File fileAsource = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(i));
            File fileFst = new File(folderBased + File.separator + FileNumbers.get(i));
            BufferedReader server = new BufferedReader(new FileReader(fileAsource));
            BufferedWriter connection = new BufferedWriter(new FileWriter(fileFst));
            connection.append(""package "" + sourcePath + "";
"");
            String url = """";
            while ((url = server.readLine()) != null) connection.append(url + ""
"");
            connection.flush();
            connection.close();
            server.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:-0.005025506019592285,packageName:0.0005574822425842285,fileContents:-0.009838521480560303,fileNames:0.003544926643371582,dirBase:-0.00133514404296875,packageDir:0.004028737545013428,created:1.4543533325195312e-05,currentPath:0.005278170108795166,i:-0.14196622371673584,file:-0.01251077651977539,fos:-0.0326080322265625,fileSrc:0.00011444091796875,fileDst:-0.0070151686668396,reader:0.003947913646697998,writer:0.012717068195343018,line:0.005530714988708496,",15,44,0,"writer:connection,line:url,currentPath:currentlyDirectory,packageDir:folderLib,reader:server,fileNames:FileNumbers,packageName:sourcePath,fileSrc:fileAsource,created:path,dirBase:folderBased,save:report,fileDst:fileFst,fileContents: fileHours,file:rule,fos:vos,",0,Greedy,634,0.23551657597223918,replace,[]
783,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     public InputSource resolveEntity(String publicId, String systemId) {
        String resolved = getResolvedEntity(publicId, systemId);
        if (resolved != null) {
            try {
                InputSource iSource = new InputSource(resolved);
                iSource.setPublicId(publicId);
                URL url = new URL(resolved);
                InputStream iStream = url.openStream();
                iSource.setByteStream(iStream);
                return iSource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);
                return null;
            }
        }
        return null;
    }
",697,,LABEL_0,LABEL_1,,-4,"f,in,cbuf,read,totRead,out,i",,,,0,,0,Greedy,1,0.0008062481880187988,,[]
784,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession session = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (mapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            session.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                session.setAttribute(""classifyResult"", ccBean);
                session.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (mapping.findForward(status));
    }
",78,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,tmp,md",,4,9,0,,0,GA,1890,0.7445930401484172,failed,[';print(getMD5)']
785,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
",114,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,md,raw,hash",,5,11,0,,0,GA,1920,0.708318026860555,failed,"[';encrypt = 0', ';hash = 0', '; encode = 0', ';givenstring = 0']"
786,"    public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
 <SPLIT>             public void run() {
                Log.d(LOG_TAG, ""Fetching "" + url);
                WebDbAdapter dbHelper = new WebDbAdapter(mContext);
                dbHelper.open();
                boolean errorOccurred = true;
                int notifyId = 0;
                String host = AppUtils.getHostFromUrl(url);
                try {
                    if (host == null) {
                        Log.d(LOG_TAG, ""Bad url "" + url);
                        errorOccurred = true;
                    } else {
                        notifyId = showNotification(""Fetching "" + host, ""Fetching "" + host, android.R.drawable.stat_sys_download, 0);
                        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);
                        String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));
                        Log.d(LOG_TAG, ""Using user agent="" + userAgent);
                        AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);
                        URI uri = new URI(url);
                        URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);
                        norm = norm.normalize();
                        HttpUriRequest get = new HttpGet(norm);
                        HttpResponse response = ahc.execute(get);
                        if (response.getStatusLine().getStatusCode() == 200) {
                            HttpEntity entity = response.getEntity();
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            entity.writeTo(baos);
                            String data = baos.toString();
                            for (int i = 0; i < undesirables.length; i++) {
                                Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
                                data = data.replaceAll(p.pattern(), """");
                            }
                            long sysMillis = System.currentTimeMillis();
                            String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));
                            FileOutputStream strm = new FileOutputStream(newFileName);
                            Log.d(LOG_TAG, ""Writing to "" + newFileName + "" for url "" + url);
                            String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);
                            jsData = jsData.replaceAll(""@css_file"", RETAIN_COLORS_CSS);
                            strm.write(jsData.getBytes());
                            strm.write(data.getBytes());
                            strm.write(jsData.getBytes());
                            strm.flush();
                            strm.close();
                            String entryName = getTitle(newFileName, url);
                            long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);
                            postToast(""Downloaded \"""" + entryName + ""\"""");
                            errorOccurred = false;
                            if (deleteRowId != 0) {
                                Log.d(LOG_TAG, ""Deleting rowId="" + deleteRowId);
                                dbHelper.deleteEntry(deleteRowId);
                                if (url == null) postToast(""Item Deleted"");
                                mContext.startActivity(new Intent(mContext, RetainActivity.class));
                            } else {
                                showNotification(""Download Complete"", entryName, android.R.drawable.stat_sys_download_done, newRowId);
                            }
                        } else {
                            Log.e(LOG_TAG, ""Response code="" + String.valueOf(response.getStatusLine().getStatusCode()));
                        }
                    }
                } catch (IOException ioe) {
                    Log.e(LOG_TAG, ""RETAIN IOException: "" + ioe.getMessage());
                } catch (URISyntaxException u) {
                    Log.e(LOG_TAG, ""RETAIN URISyntaxException: "" + u.getMessage());
                } catch (OutOfMemoryError oome) {
                    Log.e(LOG_TAG, ""RETAIN OutOfMemoryError: "" + oome.getMessage());
                } catch (Exception e) {
                    Log.e(LOG_TAG, ""RETAIN Exception: "" + e.getMessage());
                }
                hideNotification(notifyId);
                if (errorOccurred && host != null) {
                    showNotification(""Error Downloading"", host, android.R.drawable.stat_notify_error, 0);
                    postToast(""Error fetching "" + host);
                }
                dbHelper.close();
            }
",107,,LABEL_0,LABEL_0,LABEL_0,-1,"doBody,req,resp,bis,bos",,5,14,0,,0,GA,2315,0.9133580565452576,failed,[]
787,"    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (e.getEventType() == EventType.ACTIVATED) {
            try {
                URL url = e.getURL();
                InputStream stream = url.openStream();
                try {
                    StringWriter writer = new StringWriter();
                    IOUtils.copy(stream, writer, ""UTF-8"");
                    JEditorPane editor = new JEditorPane(""text/plain"", writer.toString());
                    editor.setEditable(false);
                    editor.setBackground(Color.WHITE);
                    editor.setCaretPosition(0);
                    editor.setPreferredSize(new Dimension(600, 400));
                    String name = url.toString();
                    name = name.substring(name.lastIndexOf('/') + 1);
                    JDialog dialog = new JDialog(this, ""内容解析: "" + name);
                    dialog.add(new JScrollPane(editor));
                    dialog.pack();
                    dialog.setVisible(true);
                } finally {
                    stream.close();
                }
            } catch (IOException exception) {
                exception.printStackTrace();
            }
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",208,"    public void  hyperlinkEvent(HyperlinkEvent p) {
        if (p.getEventType() == EventType.ACTIVATED) {
            try {
                URL path = p.getURL();
                InputStream stream = path.openStream();
                try {
                    StringWriter service = new StringWriter();
                    IOUtils.copy(stream, service, ""UTF-8"");
                    JEditorPane info = new JEditorPane(""text/plain"", service.toString());
                    info.setEditable(false);
                    info.setBackground(Color.WHITE);
                    info.setCaretPosition(0);
                    info.setPreferredSize(new Dimension(600, 400));
                    String connection = path.toString();
                    connection = connection.substring(connection.lastIndexOf('/') + 1);
                    JDialog dialog = new JDialog(this, ""内容解析: "" + name);
                    dialog.add(new JScrollPane(info));
                    dialog.pack();
                    dialog.setVisible(true);
                } finally {
                    stream.close();
                }
            } catch (IOException exception) {
                exception.printStackTrace();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"hyperlinkUpdate,e,url,stream,writer,editor,name,dialog","hyperlinkUpdate:0.10089617967605591,e:0.048871636390686035,url:0.18217206001281738,stream:-0.08451706171035767,writer:0.1557261347770691,editor:-0.08197242021560669,name:-0.0726730227470398,dialog:-0.09920507669448853,",6,21,0,"url:path,writer:service,hyperlinkUpdate: hyperlinkEvent,e:p,name:connection,editor:info,",0,Greedy,295,0.11345834732055664,replace,[]
788,"    private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
 <SPLIT>     private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
",503,"    private String createPDF(PAGE_TYPE requestPages) {
        String output = ""<html><head>"";
        URL string = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader lines;
        try {
            lines = new InputStreamReader(string.openStream());
            BufferedReader BufferedWriter = new BufferedReader(lines);
            String ssFile;
            while ((ssFile = BufferedWriter.readLine()) != null) output += ssFile + ""
"";
        } catch (IOException me8) {
            log.log(Level.SEVERE, me8.getLocalizedMessage(), me8);
        }
        switch(requestPages) {
            case PAGE_LOGO:
                output += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                output += ""</head><body><div class=\""content\"">
"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String  appendFromHome = null;
                String general = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pfct = null;
                ResultSet ras = null;
                try {
                    pfct = DB.prepareStatement(general, null);
                    pfct.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    ras = pfct.executeQuery();
                    while (ras.next()) {
                         appendFromHome = ras.getString(""HTML"");
                        if ( appendFromHome != null) {
                            if (ras.getString(""DESCRIPTION"") != null) output += ""<H2>"" + ras.getString(""DESCRIPTION"") + ""</H2>
"";
                            output += stripHtml( appendFromHome, false) + ""<br>
"";
                        }
                        if (ras.getInt(""AD_MENU_ID"") > 0) {
                            output += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(ras.getInt(""AD_WINDOW_ID"") + ""\"">"" + ras.getString(""DESCRIPTION"") + ""</a><br>
"");
                        }
                        output += ""<br>
"";
                        if (ras.getInt(""PA_GOAL_ID"") > 0) output += goalsDetail(ras.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, general, e);
                } finally {
                    DB.close(ras, pfct);
                    ras = null;
                    pfct = null;
                }
                output += ""<br><br><br>
"" + ""</div>
</body>
</html>
"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPages);
        }
        return output;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"createHTML,requestPage,result,url,ins,bufferedReader,cssLine,e1,queryZoom,appendToHome,sql,pstmt,rs","createHTML:0.00031298398971557617,requestPage:-0.0005433559417724609,result:0.0007345080375671387,url:-0.001430213451385498,ins:0.0008366107940673828,bufferedReader:-0.0003045797348022461,cssLine:0.0005186200141906738,e1:0.00027811527252197266,queryZoom:-0.0023581981658935547,appendToHome:-0.0003313422203063965,sql:3.5762786865234375e-05,pstmt:0.00010305643081665039,rs:-0.0002459287643432617,",12,54,0,"ins:lines,result:output,cssLine:ssFile,createHTML:createPDF,e1:me8,pstmt:pfct,sql:general,rs:ras,bufferedReader:BufferedWriter,appendToHome: appendFromHome,requestPage:requestPages,url:string,",0,Greedy,534,0.20635592937469482,replace,[]
789,"    public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
",1472,,LABEL_1,LABEL_0,,-4,"saveProject,file,types,images,trajectories,databasesIncluded,onlyLinks,index,name,format,count,version,writer,xmlDir,databases,t,type,currentName,baseCopy,source,destination,clefs,st,rs",,,,0,,0,Greedy,1,0.0012990514437357585,,[]
790,"        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",72,"        public void paste(File services, File x) throws IOException {
            FileChannel url = (new FileInputStream(services)).getChannel();
            FileChannel connection = (new FileOutputStream(x)).getChannel();
            url.transferTo(0, services.length(), connection);
            url.close();
            connection.close();
        }
;print(s);print(Copy);print(p);print(sin);print(i)",LABEL_1,LABEL_1,LABEL_1,1,"copy,s,t,in,out","copy:0.0005920529365539551,s:6.598234176635742e-05,t:-9.554624557495117e-05,in:0.0001157522201538086,out:0.0007964372634887695,",5,12,0,"out:connection,copy:paste,in:url,s:services,t:x,",0,Greedy,284,0.10590236981709798,inesrt,"[';print(s)', ';print(Copy)', ';print(p)', ';print(sin)', ';print(i)']"
791,"    static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {
        if (normaliseWhitespace) {
            profileDiff = removeWhitespaces(profileDiff);
        }
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(profileDiff.getBytes());
        return new BASE64Encoder().encode(md.digest());
    }
 <SPLIT>     public SRWGuiClient(String initialURL) {
        super(""Simple Swing Browser"");
        this.initialURL = initialURL;
        addWindowListener(new ExitListener());
        WindowUtilities.setNativeLookAndFeel();
        JPanel topPanel = new JPanel();
        topPanel.setBackground(Color.lightGray);
        homeButton = new JIconButton(""home.gif"");
        homeButton.addActionListener(this);
        JLabel urlLabel = new JLabel(""URL:"");
        urlField = new JTextField(30);
        urlField.setText(initialURL);
        urlField.addActionListener(this);
        topPanel.add(homeButton);
        topPanel.add(urlLabel);
        topPanel.add(urlField);
        getContentPane().add(topPanel, BorderLayout.NORTH);
        try {
            URL url = new URL(initialURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            boolean xml = true;
            String inputLine;
            StringBuffer content = new StringBuffer(), stylesheet = null;
            Transformer transformer = null;
            inputLine = in.readLine();
            if (inputLine == null) {
                System.out.println(""No input read from URL: "" + initialURL);
                return;
            }
            if (!inputLine.startsWith(""<?xml "")) {
                xml = false;
                content.append(inputLine);
            }
            if (xml) {
                inputLine = in.readLine();
                if (inputLine.startsWith(""<?xml-stylesheet "")) {
                    int offset = inputLine.indexOf(""href="");
                    String href = (inputLine.substring(inputLine.indexOf(""href="") + 6));
                    href = href.substring(0, href.indexOf('""'));
                    System.out.println(""href="" + href);
                    url = new URL(url, href);
                    String stylesheetURL = url.toString();
                    System.out.println(""stylesheet URL="" + url.toString());
                    transformer = (Transformer) transformers.get(stylesheetURL);
                    if (transformer == null) {
                        BufferedReader sheetIn = new BufferedReader(new InputStreamReader(url.openStream()));
                        sheetIn.readLine();
                        stylesheet = new StringBuffer();
                        while ((inputLine = sheetIn.readLine()) != null) stylesheet.append(inputLine).append('\n');
                        System.out.println(stylesheet.toString());
                        TransformerFactory tFactory = TransformerFactory.newInstance();
                        StreamSource xslSource = new StreamSource(new StringReader(stylesheet.toString()));
                        transformer = tFactory.newTransformer(xslSource);
                        transformers.put(stylesheetURL, transformer);
                    }
                }
            }
            while ((inputLine = in.readLine()) != null) content.append(inputLine).append('\n');
            htmlPane = new JEditorPane();
            if (transformer != null) {
                StringReader stringRecordReader = new StringReader(content.toString());
                StringWriter xmlRecordWriter = new StringWriter();
                StreamSource streamXMLRecord = new StreamSource(stringRecordReader);
                transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));
                String html = xmlRecordWriter.toString();
                int i = html.indexOf('>');
                html = ""<html>"" + html.substring(html.indexOf('>') + 1);
                System.out.println(html);
                htmlPane.setContentType(""text/html"");
                htmlPane.setText(""<html><head><META http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""><title>GSAFD Thesaurus</title></head><body><center><h2>GSAFD Thesaurus</h2></center><p>A thesaurus of genre terms to support the \""Guidelines on Subject Access to Individual Works of Fiction , Drama\"" (GSAFD)</p><table cellspacing=\""5\"" width=\""100%\""><tr><td><h3>Search</h3><p></p></td><td valign=\""top\""><h3>Browse</h3></td></tr></table></body></html>"");
            } else htmlPane.setText(content.toString());
            htmlPane.setEditable(false);
            htmlPane.addHyperlinkListener(this);
            JScrollPane scrollPane = new JScrollPane(htmlPane);
            getContentPane().add(scrollPane, BorderLayout.CENTER);
        } catch (IOException ioe) {
            warnUser(""Can't build HTML pane for "" + initialURL + "": "" + ioe);
        } catch (TransformerException e) {
        }
        Dimension screenSize = getToolkit().getScreenSize();
        int width = screenSize.width * 8 / 10;
        int height = screenSize.height * 8 / 10;
        setBounds(width / 8, height / 8, width, height);
        setVisible(true);
    }
",66,,LABEL_0,LABEL_0,LABEL_0,-1,"calculateProfileDiffDigest,profileDiff,normaliseWhitespace,md",,4,10,0,,0,GA,992,0.41036453247070315,failed,"[';print(calculateProfileDiffDigest)', ';print( profilediff)']"
792,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",364,"    public static void fileUpload(String from__alias, String to_name) throws IOException {
        File connectionFile = new File(from__alias);
        File TODir = new File(to_name);
        if (connectionFile.equals(TODir)) abort(""cannot copy on itself: "" + from__alias);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from__alias);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from__alias);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from__alias);
        if (TODir.isDirectory()) TODir = new File(TODir, connectionFile.getName());
        if (TODir.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String url = TODir.getParent();
            if (url == null) abort(""destination directory doesn't exist: "" + url);
            File url = new File(url);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + url);
            if (url.isFile()) abort(""destination is not a directory: "" + url);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + url);
        }
        FileInputStream query = null;
        FileOutputStream flo = null;
        try {
            query = new FileInputStream(connectionFile);
            flo = new FileOutputStream(TODir);
            byte[] padding = new byte[4096];
            int bytes___view;
            while ((bytes___view = query.read(padding)) != -1) flo.write(padding, 0, bytes___view);
        } finally {
            if (query != null) try {
                query.close();
            } catch (IOException e) {
                ;
            }
            if (flo != null) try {
                flo.close();
            } catch (IOException e) {
                ;
            }
        }
    }
;fileCopy = 0",LABEL_1,LABEL_1,LABEL_1,1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read","fileCopy:0.011004090309143066,from_name:0.002196013927459717,to_name:0.0008462071418762207,fromFile:0.00885915756225586,toFile:0.001420438289642334,parent:0.004144132137298584,dir:-0.007143855094909668,from:-0.028460264205932617,to:-0.025716722011566162,buffer:0.003353595733642578,bytes_read:0.0020428895950317383,",10,50,0,"fileCopy:fileUpload,fromFile:connectionFile,parent:url,buffer:padding,from_name:from__alias,bytes_read:bytes___view,toFile:TODir,to_name:to_name,dir:url,to:flo,from:query,",0,Greedy,632,0.2324419856071472,inesrt,[';fileCopy = 0']
793,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
",697,,LABEL_1,LABEL_1,LABEL_1,-1,"f,in,cbuf,read,totRead,out,i",,1,16,0,,0,GA,4341,1.793591594696045,failed,[]
794,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public static void copyFile(File source, File target) throws IOException {
        FileChannel in = (new FileInputStream(source)).getChannel();
        FileChannel out = (new FileOutputStream(target)).getChannel();
        in.transferTo(0, source.length(), out);
        in.close();
        out.close();
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0007425983746846517,,[]
795,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public void sendTextFile(String filename) throws IOException {
        Checker.checkEmpty(filename, ""filename"");
        URL url = _getFile(filename);
        PrintWriter out = getWriter();
        Streams.copy(new InputStreamReader(url.openStream()), out);
        out.close();
    }
",272,,LABEL_0,LABEL_1,,-4,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,0,,0,Greedy,1,0.0005508740743001302,,[]
796,"    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            ms.setString(1, descartadoEntrada);
            ms.setString(2, usuarioEntrada);
            ms.setString(3, motivosDescarteEntrada);
            ms.setInt(4, Integer.parseInt(anoOficio));
            ms.setInt(5, Integer.parseInt(oficinaOficio));
            ms.setInt(6, Integer.parseInt(numeroOficio));
            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",449,,LABEL_0,LABEL_0,LABEL_0,-1,"actualizar,ClassNotFoundException,Exception,conn,ms,fechaSystem,aaaammdd,fzafsis,hhmmss,sss,ss,fzahsis,afectados",,9,21,0,,0,GA,5825,2.297899067401886,failed,"[';actualizar = 0', ';ClassNotFoundException = 0', ';conn = 0', ';ms = 0', ';fechaSystem = 0', ';actualizeas = 0', ';actualisias = 0', ';actualizeado = 0', '; actualizeado = 0', ';actualizeada = 0', ';actualisiar = 0', ';ClassNameSupportedError = 0', ';ClassNotSupportedError = 0', ';ClassNotFindES = 0', ';ClassNameSupportedES = 0', ';Connection = 0', '; exception = 0', ';except = 0', ';col = 0', ';sql = 0', ';state = 0', ';fetchaSystem = 0']"
797,"    public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",228,"    public static void main(String[] args) {
        String sort, coordination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            sort = args[0];
            coordination = sort.substring(0, sort.url() - 3);
        } else {
            sort = args[0] + "".gz"";
            coordination = args[0];
        }
        InputStream lis = null;
        OutputStream ou = null;
        try {
            lis = new GZIPInputStream(new FileInputStream(sort));
            ou = new FileOutputStream(coordination);
            byte[] url = new byte[8192];
            for (int url; (url = lis.read(url)) != -1; ) ou.write(url, 0, url);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (ou != null) try {
                ou.close();
            } catch (IOException e) {
            }
            if (lis != null) try {
                lis.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"source,destination,is,os,buffer,length","source:0.0029252171516418457,destination:0.0043792724609375,is:-0.013551414012908936,os:-0.021378755569458008,buffer:0.005380213260650635,length:0.005801081657409668,",6,27,0,"length:url,buffer:url,destination:coordination,source:sort,is:lis,os:ou,",0,Greedy,374,0.13368939558664958,replace,[]
798,"    public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",120,,LABEL_1,LABEL_0,,-4,"clonarFichero,rutaFicheroOrigen,rutaFicheroDestino,salida,canalOrigen,canalDestino,estado",,,,0,,0,Greedy,1,0.0005692283312479655,,[]
799,"    @Test(expected = GadgetException.class)
    public void malformedGadgetSpecIsCachedAndThrows() throws Exception {
        HttpRequest request = createCacheableRequest();
        expect(pipeline.execute(request)).andReturn(new HttpResponse(""malformed junk"")).once();
        replay(pipeline);
        try {
            specFactory.getGadgetSpec(createContext(SPEC_URL, false));
            fail(""No exception thrown on bad parse"");
        } catch (GadgetException e) {
        }
        specFactory.getGadgetSpec(createContext(SPEC_URL, false));
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"malformedGadgetSpecIsCachedAndThrows,request",,2,3,0,,0,GA,875,0.32404132684071857,failed,"[';malformedGadgetSpecIsCachedAndThrows = 0', ';request = 0', ';malformedGadgetSpecIsCachedandthrown = 0', ';malformedGadgetSpecIsCachedAndethrows = 0', ';condition = 0']"
800,"    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
 <SPLIT>     public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",63,"    public static URL addToSlive(Pod proc, ZipOutputStream podArchiveIOFile, String username, InputStream service) throws IOException {
        ZipEntry obj = new ZipEntry(username);
        podArchiveIOFile.putNextEntry(obj);
        IOUtilsservicesource, podArchiveIOFile);
        podArchiveIOFile.closeEntry();
        return PodArchiveResolver.withinPodArchive(proc, username);
    }
",LABEL_1,LABEL_1,0.9217843413352966,1,"addToArchive,pod,podArchiveOutputStream,filename,source,entry",,6,14,0,"addToArchive:addToSlive,pod:proc,podArchiveOutputStream:podArchiveIOFile,filename:username,source:service,entry:obj,",0,GA,1651,0.6175442059834798,ga,[]
801,"    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""arguments: sourcefile destfile"");
            System.exit(1);
        }
        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);
        while (in.read(buffer) != -1) {
            buffer.flip();
            out.write(buffer);
            buffer.clear();
        }
    }
 <SPLIT>     public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
",117,,LABEL_1,LABEL_1,LABEL_1,-1,"in,out,buffer",,3,10,0,,0,GA,1525,0.5632160147031148,failed,"[';print(in)', ';print(out)', ';print(i)', ';print(n)', ';print(c)', ';socket = 0', ';login = 0', ';connection = 0', ';print(connection)', ';print(r)', ';inc = 0', ';print(inc)', ';config = 0', ';print(config)', ';print(nin)', ';a = 0', ';print(a)', ';print(stream)', ';print(b)', ';print(inn)', ';print(f)', ';print(win)', ';print(i)', ';console = 0', ';print(console)', ';ex = 0', ';print(ex)', ';output = 0', ';print(output)', ';server = 0', ';print(server)', ';temp = 0', ';print(temp)', ';user = 0', ';print(user)', ';lock = 0', ';print(lock)', ';outer = 0', ';print(outer)', ';OUT = 0', ';print(OUT)', ';socket = 0', ';debug = 0', ';msg = 0', ';name = 0', ';prefix = 0']"
802,"    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String ext = G_File.getExtensao(address);
        if (ext.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);
        }
        File temp = new File(localFileName + "".tmp"");
        if (temp.exists()) temp.delete();
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            try {
                URL url = new URL(address);
                conn = url.openConnection();
                in = conn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            out = new BufferedOutputStream(new FileOutputStream(temp));
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localFileName);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File nomeFinal = new File(localFileName);
        temp.renameTo(nomeFinal);
    }
 <SPLIT>     public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",307,,LABEL_0,LABEL_0,LABEL_0,-1,"download,address,localFileName,ext,temp,out,conn,in,url,buffer,numRead,numWritten,oldArq,nomeFinal",,14,46,0,,0,GA,6392,2.66460040807724,failed,"[';print(download)', ';print(address)']"
803,"    private InputStream getPageStream(String query) throws MalformedURLException, IOException {
        URL url = new URL(baseUrl + query + ""&rhtml=no"");
        URLConnection connection = url.openConnection();
        connection.connect();
        InputStream in = connection.getInputStream();
        BufferedInputStream bis = new BufferedInputStream(in);
        return bis;
    }
 <SPLIT>     public Set<String> getAvailableRoles() {
        if (availableRoles == null) {
            availableRoles = new HashSet<String>();
            try {
                Enumeration<URL> resources = org.springframework.util.ClassUtils.getDefaultClassLoader().getResources(ROLE_FILE_LOCATION);
                while (resources.hasMoreElements()) {
                    URL url = resources.nextElement();
                    InputStream is = null;
                    try {
                        URLConnection con = url.openConnection();
                        con.setUseCaches(false);
                        is = con.getInputStream();
                        List<String> lines = IOUtils.readLines(is, ""ISO-8859-1"");
                        if (lines != null) {
                            for (String line : lines) {
                                availableRoles.add(line.trim());
                            }
                        }
                    } finally {
                        if (is != null) {
                            is.close();
                        }
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return availableRoles;
    }
",66,,LABEL_0,LABEL_0,LABEL_0,-1,"getPageStream,query,IOException,url,connection,in,bis",,3,6,0,,0,GA,3087,1.1296645482381185,failed,"[';getPageStream = 0', ';query = 0', ';url = 0', ';getPageForm = 0', ';getpageChannel = 0', ';getRequestChannel = 0', ';Connectionceptions = 0', ';ConnectionError = 0', ';address = 0', ';position = 0']"
804,"    static HttpURLConnection connect(String url, String method, String contentType, String content, int timeoutMillis) throws ProtocolException, IOException, MalformedURLException, UnsupportedEncodingException {
        HttpURLConnection conn = (HttpURLConnection) (new URL(url).openConnection());
        conn.setRequestMethod(method);
        conn.setConnectTimeout(timeoutMillis);
        byte[] bContent = null;
        if (content != null && content.length() > 0) {
            conn.setDoOutput(true);
            conn.setRequestProperty(""Content-Type"", contentType);
            bContent = content.getBytes(""UTF-8"");
            conn.setFixedLengthStreamingMode(bContent.length);
        }
        conn.connect();
        if (bContent != null) {
            OutputStream os = conn.getOutputStream();
            os.write(bContent);
            os.flush();
            os.close();
        }
        return conn;
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",168,"    static HttpURLConnection connect(String file, String method, String contentType, String content, int timeoutMillis) throws ProtocolException, IOException, MalformedURLException, UnsupportedEncodingException {
        HttpURLConnection conn = (HttpURLConnection) (new URL(file).openConnection());
        conn.setRequestMethod(method);
        conn.setConnectTimeout(timeoutMillis);
        byte[] bContent = null;
        if (content != null && content.length() > 0) {
            conn.setDoOutput(true);
            conn.setRequestProperty(""Content-Type"", contentType);
            bContent = content.getBytes(""UTF-8"");
            conn.setFixedLengthStreamingMode(bContent.length);
        }
        conn.connect();
        if (bContent != null) {
            OutputStream os = conn.getOutputStream();
            os.write(bContent);
            os.flush();
            os.close();
        }
        return conn;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"connect,url,method,contentType,content,timeoutMillis,conn,bContent,os","connect:-0.00876539945602417,url:0.0021792054176330566,method:0.0005366206169128418,contentType:-0.0009006857872009277,content:0.0019438862800598145,timeoutMillis:-0.0026078224182128906,conn:-0.00977391004562378,bContent:-0.007555782794952393,os:-0.01380378007888794,",1,2,0,"url:file,",0,Greedy,71,0.025763916969299316,replace,[]
805,"    protected static InputStream loadResource(String resource) throws MissingResourceException {
        Thread thread = Thread.currentThread();
        ClassLoader cLoader = thread.getContextClassLoader();
        URL url = cLoader.getResource(resource);
        if (url == null) {
            throw new MissingResourceException(""Unable to find resource '"" + resource + ""'."", resource, resource);
        }
        try {
            InputStream is = url.openStream();
            return is;
        } catch (IOException e) {
            throw new MissingResourceException(""Unable to load resource '"" + resource + ""' (IOException)."", resource, resource);
        }
    }
 <SPLIT>     public static void gzip() throws Exception {
        System.out.println(""gzip()"");
        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));
        byte buffer[] = new byte[BLOCKSIZE];
        File dir = new File(""/zip/covers"");
        System.out.println(""Dir '"" + dir.getAbsolutePath() + ""' exists: "" + dir.exists());
        FileInputStream in = new FileInputStream(dir);
        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);
        in.close();
        zipout.close();
    }
",110,"    protected static InputStream loadResource(String resource) throws MissingResourceException {
        Thread thread = Thread.currentThread();
        ClassLoader cLoader = thread.getContextClassLoader();
        URL path = cLoader.getResource(resource);
        if (path == null) {
            throw new MissingResourceException(""Unable to find resource '"" + resource + ""'."", resource, resource);
        }
        try {
            InputStream is = path.openStream();
            return is;
        } catch (IOException e) {
            throw new MissingResourceException(""Unable to load resource '"" + resource + ""' (IOException)."", resource, resource);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"loadResource,resource,thread,cLoader,url,is","loadResource:2.288818359375e-05,resource:-8.33272933959961e-05,thread:-2.9265880584716797e-05,cLoader:-5.227327346801758e-05,url:0.00020295381546020508,is:4.89354133605957e-05,",1,3,0,"url:path,",0,Greedy,75,0.02678006887435913,replace,[]
806,"    private boolean setPayload() throws IOException {
        if (Index < Headers.length) {
            FileOutputStream fos = new FileOutputStream(Headers[Index], true);
            FileInputStream fis = new FileInputStream(HeadlessData);
            FileChannel fic = fis.getChannel();
            FileChannel foc = fos.getChannel();
            fic.transferTo(0, fic.size(), foc);
            fic.close();
            foc.close();
            setDestination(Destinations[Index]);
            setPayload(Headers[Index]);
            Index++;
            return true;
        }
        return false;
    }
 <SPLIT>     public static int save(byte[] bytes, File outputFile) throws IOException {
        InputStream in = new ByteArrayInputStream(bytes);
        outputFile.getParentFile().mkdirs();
        OutputStream out = new FileOutputStream(outputFile);
        try {
            return IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
            try {
                out.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
            try {
                in.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
        }
    }
",113,,LABEL_1,LABEL_1,LABEL_1,-1,"setPayload,fos,fis,fic,foc,Index",,5,16,0,,0,GA,1703,0.637961475054423,failed,[';print(Connection)']
807,"    public void makeRead(String user, long databaseID, long time) throws SQLException {
        String query = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            int count = statement.executeUpdate();
            if (0 == count) throw new SQLException(""Nothing updated."");
            m_connection.commit();
        } catch (SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",128,,LABEL_0,LABEL_0,LABEL_0,-1,"makeRead,user,databaseID,time,query,statement,count",,7,17,0,,0,GA,2920,1.0851303060849509,failed,"[';print(makeRead)', ';print(user)', ';print(time)', '; executeWrite = 0', ';print( executeWrite)', ';doWrite = 0', ';print(doWrite)', '; makeWrite = 0', ';uid = 0']"
808,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
 <SPLIT>     public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",267,,LABEL_1,LABEL_1,LABEL_1,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5",,9,25,0,,0,GA,5634,2.116004784901937,failed,"[';getRandomGUID = 0', ';print(getRandomGUID)', ';secure = 0', ';md5 = 0', ';sbValueBeforeMD5 = 0', ';valueBeforeMD5 = 0', ';getRandUuid = 0', ';sbValueBeforeMI1 = 0', ';max = 0']"
809,"    public synchronized String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     @Override
    protected <T> T execute(final HttpMethod method, final String url, Parameters parameters, final Handler<T> handler) throws FoursquareException {
        HttpURLConnection connection = null;
        try {
            switch(method) {
                case GET:
                    connection = openConnection(url.concat(""?"").concat(formEncode(parameters)));
                    connection.setRequestMethod(""GET"");
                    connection.connect();
                    break;
                case POST:
                    connection = openConnection(url);
                    connection.setRequestMethod(""POST"");
                    connection.setDoOutput(true);
                    connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                    connection.connect();
                    final OutputStream out = connection.getOutputStream();
                    out.write(formEncode(parameters).getBytes());
                    out.flush();
                    out.close();
                    break;
            }
            final int statusCode = connection.getResponseCode();
            if (statusCode / 100 != 2) {
                final Error error = parseBody(connection.getErrorStream(), new ErrorHandler());
                if (error == null) throw new FoursquareException(connection.getResponseMessage()); else if (""error"".equals(error.getType())) throw new FoursquareException(error.getMessage()); else if (""unauthorized"".equals(error.getType())) throw new AuthenticationException(error.getMessage()); else if (""ratelimited"".equals(error.getType())) throw new RateLimitingException(error.getMessage()); else throw new FoursquareException(connection.getResponseMessage());
            }
            return parseBody(connection.getInputStream(), handler);
        } catch (final IOException e) {
            throw new FoursquareException(e);
        } catch (final ParserConfigurationException e) {
            throw new FoursquareException(e);
        } catch (final SAXException e) {
            throw new FoursquareException(e);
        } finally {
            if (connection != null) connection.disconnect();
        }
    }
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash",,3,7,0,,0,GA,1563,0.5998114784558614,failed,"[';encrypt = 0', ';plaintext = 0', ';md = 0', ';hash = 0', ';encress = 0', '; encipher = 0', '; enccrypt = 0', ';unsigned = 0', ';array = 0', ';bytes = 0']"
810,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public static final String encryptPassword(String loginName, String password) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(loginName.toUpperCase().getBytes(""UTF-8""));
            md5.update(password.getBytes(""UTF-8""));
            byte[] ba = md5.digest();
            return byte2hex(ba);
        } catch (Exception e) {
            return password;
        }
    }
",264,,LABEL_1,LABEL_1,LABEL_1,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,5,18,0,,0,GA,3741,1.4057817896207174,failed,[]
811,"    public synchronized String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT> 	public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver, ftpport);
		ftpClient.login(username, password);
		return ftpClient;
	}
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash",,5,11,0,,0,GA,2190,0.7948921680450439,failed,"[';encrypt = 0', ';plaintext = 0', ';md = 0', ';decress = 0', ';mu = 0', ';arm = 0', ';mo = 0', ';mc = 0', ';feed = 0', ';hex = 0', ';alpha = 0', ';sha = 0', ';ruby = 0', ';ha = 0']"
812,"    public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",228,"    public static void main(String[] args) {
        String sin, dominated;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            sin = args[0];
            dominated = sin.substring(0, sin.url() - 3);
        } else {
            sin = args[0] + "".gz"";
            dominated = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(sin));
            os = new FileOutputStream(dominated);
            byte[] url = new byte[8192];
            for (int url; (url = is.read(url)) != -1; ) os.write(url, 0, url);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"source,destination,is,os,buffer,length","source:0.0029252171516418457,destination:0.0043792724609375,is:-0.013551414012908936,os:-0.021378755569458008,buffer:0.005380213260650635,length:0.005801081657409668,",4,17,0,"length:url,buffer:url,destination:dominated,source:sin,",0,Greedy,252,0.09620289007822673,replace,[]
813,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",120,"    public static void transferStream(String binPlace, String  outPlace) {
        File url = new File(binPlace);
        File p = new File( outPlace);
        try {
            FileChannel outConnection = new FileInputStream(url).getChannel();
            FileChannel inchannel = new FileOutputStream(p).getChannel();
            try {
                outConnection.transferTo(0, outConnection.size(), inchannel);
            } finally {
                if (outConnection != null) outConnection.close();
                if (inchannel != null) inchannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
;copyFile = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,inFile,outFile,in,out,inChannel,outChannel","copyFile:0.0013982653617858887,inFile:2.276897430419922e-05,outFile:-0.0002726912498474121,in:0.0002452731132507324,out:0.00022113323211669922,inChannel:9.566545486450195e-05,outChannel:6.079673767089844e-05,",7,18,0,"copyFile:transferStream,in:url,out:p,inChannel:outConnection,outChannel:inchannel,inFile:binPlace,outFile: outPlace,",0,Greedy,239,0.08736985921859741,inesrt,[';copyFile = 0']
814,"    public static byte[] getJarEntry(String jarName, String entry, int port) {
        byte[] b = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);
            JarURLConnection jurl = (JarURLConnection) url.openConnection();
            JarEntry je = jurl.getJarEntry();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) je.getSize();
            b = new byte[size];
            int rb = 0;
            int chunk = 0;
            while ((size - rb) > 0) {
                chunk = bis.read(b, rb, size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            url = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return b;
    }
 <SPLIT>     public void update(String channelPath, String dataField, String fatherDocId) {
        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = '"" + fatherDocId + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherDocId + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String url = """";
            boolean flag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(sqlInitial);
            rs = ps.executeQuery();
            if (rs.next()) url = rs.getString(1);
            if (!url.equals("""")) {
                st = new StringTokenizer(url, "","");
                String sortDocId = """";
                while (st.hasMoreTokens()) {
                    if (flag) {
                        sortDocId = ""'"" + st.nextToken() + ""'"";
                        flag = false;
                    } else {
                        sortDocId = sortDocId + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;
                ps = conn.prepareStatement(sqlsort);
                rs = ps.executeQuery();
                String sortURL = """";
                boolean sortflag = true;
                while (rs.next()) {
                    if (sortflag) {
                        sortURL = rs.getString(1);
                        sortflag = false;
                    } else {
                        sortURL = sortURL + "","" + rs.getString(1);
                    }
                }
                ps = conn.prepareStatement(sqlsortURL);
                ps.setString(1, sortURL);
                ps.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, ps, conn, dbo);
        }
    }
",327,,LABEL_0,LABEL_0,LABEL_0,-1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk",,19,59,0,,0,GA,8677,3.429210066795349,failed,"[';getJarEntry = 0', ';print(getJarEntry)', ';jarName = 0', ';entry = 0', ';port = 0', ';protocol = 0', ';x = 0', ';size = 0', ';javaID = 0', ';address = 0', ';offset = 0', ';mode = 0', ';init = 0', ';range = 0', ';scale = 0', ';range = 0', ';clunc = 0', ';print(clunc)']"
815,"    private void modifyProperty(String valueID, String value, Long userID) throws JspTagException {
        Property property = new Property(new Long(valueID), userID);
        String newValue = value;
        System.out.println(property.getName());
        if (property.getName().equals(""Password"")) {
            try {
                MessageDigest crypt = MessageDigest.getInstance(""MD5"");
                crypt.update(value.getBytes());
                byte digest[] = crypt.digest();
                StringBuffer hexString = new StringBuffer();
                for (int i = 0; i < digest.length; i++) {
                    hexString.append(hexDigit(digest[i]));
                }
                newValue = hexString.toString();
                crypt.reset();
            } catch (NoSuchAlgorithmException e) {
                System.err.println(""jspShop: Could not get instance of MD5 algorithm. Please fix this!"" + e.getMessage());
                e.printStackTrace();
                throw new JspTagException(""Error crypting password!: "" + e.getMessage());
            }
        }
        property.setValue(newValue);
    }
 <SPLIT>     public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter(""width""));
            int h = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL url = new URL(filename);
                in = url.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""\n"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
",210,,LABEL_0,LABEL_0,LABEL_0,-1,"modifyProperty,valueID,value,userID,property,newValue,crypt,digest,hexString,i",,6,18,0,,0,GA,4479,1.72739577293396,failed,"[';modifyProperty = 0', ';print(modifyProperty)', ';valueID = 0', ';value = 0', ';userID = 0', ';property = 0', ';newValue = 0', ';hexString = 0', ';modateString = 0', ';ValueIndex = 0', ';VALUEIndex = 0', ';valueIndex = 0']"
816,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",1214,,LABEL_1,LABEL_0,,-4,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,0,,0,Greedy,1,0.0012019157409667968,,[]
817,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
",690,,LABEL_1,LABEL_1,LABEL_1,-1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root",,11,78,0,,0,GA,5767,2.70940861304601,failed,[]
818,"    public void register(MinecraftSession session, String username, String verificationKey) {
        if (Configuration.getConfiguration().isVerifyingNames()) {
            long salt = HeartbeatManager.getHeartbeatManager().getSalt();
            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();
            MessageDigest digest;
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(""No MD5 algorithm!"");
            }
            digest.update(hash.getBytes());
            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {
                session.getActionSender().sendLoginFailure(""Illegal name."");
                return;
            }
        }
        char[] nameChars = username.toCharArray();
        for (char nameChar : nameChars) {
            if (nameChar < ' ' || nameChar > '\177') {
                session.getActionSender().sendLoginFailure(""Invalid name!"");
                return;
            }
        }
        for (Player p : playerList.getPlayers()) {
            if (p.getName().equalsIgnoreCase(username)) {
                p.getSession().getActionSender().sendLoginFailure(""Logged in from another computer."");
                break;
            }
        }
        final Player player = new Player(session, username);
        if (!playerList.add(player)) {
            player.getSession().getActionSender().sendLoginFailure(""Too many players online!"");
            return;
        }
        session.setPlayer(player);
        final Configuration c = Configuration.getConfiguration();
        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);
        LevelGzipper.getLevelGzipper().gzipLevel(session);
    }
 <SPLIT>     @Test
    public void test_blueprintTypeByTypeID() throws Exception {
        URL url = new URL(baseUrl + ""/blueprintTypeByTypeID/20188"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""{\""blueprintTypeID\"":20188,\""blueprintTypeName\"":\""Obelisk Blueprint\"",\""productTypeID\"":20187,\""productTypeName\"":\""Obelisk\"",\""productCategoryID\"":6,\""techLevel\"":1,\""productionTime\"":1280000,\""researchProductivityTime\"":7680000,\""researchMaterialTime\"":5120000,\""researchCopyTime\"":2560000,\""researchTechTime\"":500000,\""productivityModifier\"":256000,\""wasteFactor\"":10,\""maxProductionLimit\"":1,\""productVolume\"":\""17550000\"",\""productPortionSize\"":1,\""dumpVersion\"":\""cru16\""}""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/xml"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/xml; charset=utf-8""));
    }
",348,,LABEL_0,LABEL_0,LABEL_0,-1,"register,session,username,verificationKey,salt,hash,digest,nameChars,nameChar,p,player,c",,5,17,0,,0,GA,5538,2.457489717006683,failed,"[';register = 0', ';print(register)', ';session = 0', ';username = 0', ';verificationKey = 0', ';hash = 0', ';digest = 0', ';nameChars = 0', ';nameChar = 0', ';print(nameChar)']"
819,"    private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {
        Properties list = new Properties();
        list.load(new FileInputStream(fileWithListOfImages));
        long current = 0;
        long startTime = System.currentTimeMillis();
        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);
        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");
        System.out.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");
        }
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            URL url = new URL(uriPrefix + urlString);
            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));
            current++;
            if (!file.exists()) {
                try {
                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);
                    int c;
                    while ((c = in.read()) != -1) {
                        out.write(c);
                    }
                    out.close();
                    in.close();
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                    System.out.println(""saved"");
                } catch (Exception e) {
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());
                }
            } else {
                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                System.out.println(""already exists"");
            }
            if (current / 100 == current / 100.0) {
                long delta = (System.currentTimeMillis() - startTime);
                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");
            }
        }
        long delta = (System.currentTimeMillis() - startTime);
        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");
    }
 <SPLIT>     private BingResponse queryBing(BingRequest request) throws BingException {
        try {
            if (logger.isDebugEnabled()) {
                logger.debug(""Searching through bing..."");
            }
            String query = request.getQuery();
            query = URLEncoder.encode(query, ""UTF-8"");
            URL url = new URL(""http://api.bing.net/json.aspx?"" + ""AppId="" + request.getAppId() + ""&Query="" + query + ""&Sources="" + request.getType().toString());
            URLConnection connection = null;
            if (useProxy) {
                if (proxyType == null) {
                    throw new BingException(""Please set a proxy first before trying to connect through a proxy"", new Throwable());
                }
                connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);
            } else {
                connection = new URL(url.toString()).openConnection();
            }
            String line;
            StringBuilder builder = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            String response = builder.toString();
            ResponseParser parser = new ResponseParser();
            parser.getError(response);
            return parser.getResults(response);
        } catch (MalformedURLException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        } catch (IOException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        }
    }
",565,"    private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {
        Properties lc = new Properties();
        lc.load(new FileInputStream(fileWithListOfImages));
        long current = 0;
        long startTime = System.currentTimeMillis();
        System.line.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);
        System.line.println(""Total "" + lc.size() + "" files, think of 1 sec per file"");
        System.line.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");
        for (Iterator<Object> section = lc.keySet().iterator(); section.hasNext(); ) {
            String urlString = section.next().toString().replace('\\', '/');
            if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");
        }
        for (Iterator<Object> section = lc.keySet().iterator(); section.hasNext(); ) {
            String urlString = section.next().toString().replace('\\', '/');
            URL connection = new URL(uriPrefix + urlString);
            File connection = new File(outputDir + ""/"" + imageNameToFileName(urlString));
            current++;
            if (!connection.exists()) {
                try {
                    BufferedInputStream in = new BufferedInputStream(connection.openStream(), 64000);
                    BufferedOutputStream line = new BufferedOutputStream(new FileOutputStream(connection), 64000);
                    int c;
                    while ((c = in.read()) != -1) {
                        line.write(c);
                    }
                    line.close();
                    in.close();
                    System.line.print(current + "" /"" + lc.size() + "". "" + connection.getName() + "", "");
                    System.line.println(""saved"");
                } catch (Exception e) {
                    System.line.print(current + "" /"" + lc.size() + "". "" + connection.getName() + "", FAILED, error: "" + e.getMessage());
                }
            } else {
                System.line.print(current + "" /"" + lc.size() + "". "" + connection.getName() + "", "");
                System.line.println(""already exists"");
            }
            if (current / 100 == current / 100.0) {
                long delta = (System.currentTimeMillis() - startTime);
                System.line.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");
            }
        }
        long delta = (System.currentTimeMillis() - startTime);
        System.line.println(""Total time "" + delta + "" ms, "" + (delta / lc.size()) + "" ms/file"");
    }
",LABEL_0,LABEL_0,LABEL_1,1,"downloadImages,uriPrefix,fileWithListOfImages,outputDir,list,current,startTime,it,urlString,url,file,in,out,c","downloadImages:0.0025354623794555664,uriPrefix:-0.008338570594787598,fileWithListOfImages:0.005568087100982666,outputDir:-0.015257060527801514,list:0.016297638416290283,current:-0.015338659286499023,startTime:-0.005712628364562988,it:0.06144040822982788,urlString:-0.0011929869651794434,url:0.062309324741363525,file:0.010882079601287842,in:-0.002888917922973633,out:0.011183619499206543,c:0.004242837429046631,",5,39,0,"url:connection,it:section,list:lc,out:line,file:connection,",0,Greedy,409,0.18230261007944742,replace,[]
820,"    @Test
    public void testCopy_readerToOutputStream_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out, ""UTF16"");
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
 <SPLIT>     protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",123,,LABEL_1,LABEL_1,LABEL_1,-1,"testCopy_readerToOutputStream_Encoding,in,reader,baout,out,bytes",,6,16,0,,0,GA,2721,1.2271468877792358,failed,"[';testCopy_readerToOutputStream_Encoding = 0', ';bytes = 0', ';testCopy_readerToOutputStream_Code = 0', ';print(testCopy_readerToOutputStream_Code)', ';testCopy_readerToOutputStreamForEncoding = 0', ';print(testCopy_readerToOutputStreamForEncoding)', ';testCopy_readerToOutputStream_Integoding = 0', ';testCopy_readerToOutputStream_Encoder = 0', ';slice = 0']"
821,"    public void importCSV(InputStream csvfile) throws Exception {
        try {
            String[] qmarks = new String[columns.length];
            for (int i = 0; i < qmarks.length; i++) {
                qmarks[i] = ""?"";
            }
            if (cleartable) {
                String delsql = ""delete from "" + table;
                Statement delstm = conn.createStatement();
                delstm.executeUpdate(delsql);
            }
            String sql = ""insert into "" + table + "" ("" + StringUtils.join(columns, "", "") + "") values ("" + StringUtils.join(qmarks, "", "") + "")"";
            log.debug(""SQL: "" + sql);
            PreparedStatement stm = conn.prepareStatement(sql);
            int datatypes[] = new int[columns.length];
            for (int i = 0; i < columns.length; i++) {
                Table tbl = project.getTableByName(table);
                if (tbl == null) throw new OntopiaRuntimeException(""Unknown table: "" + table);
                Column col = tbl.getColumnByName(columns[i]);
                if (col == null) throw new OntopiaRuntimeException(""Unknown table column: "" + columns[i]);
                if (col.getType() == null) throw new OntopiaRuntimeException(""Column type is null: "" + col.getType());
                DataType datatype = project.getDataTypeByName(col.getType(), ""generic"");
                if (datatype == null) throw new OntopiaRuntimeException(""Unknown column type: "" + col.getType());
                String dtype = datatype.getType();
                if (""varchar"".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (""integer"".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(""Unknown datatype: "" + dtype);
            }
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));
            for (int i = 0; i < ignorelines; i++) {
                String line = reader.readLine();
                if (line == null) break;
            }
            log.debug(""["" + StringUtils.join(columns, "", "") + ""]"");
            int lineno = 0;
            while (true) {
                lineno++;
                String line = reader.readLine();
                if (line == null) break;
                try {
                    String[] cols = StringUtils.split(line, separator);
                    if (cols.length > columns.length && !ignorecolumns) log.debug(""Ignoring columns: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    log.debug(""CVALUES: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    String dmesg = ""("";
                    for (int i = 0; i < columns.length; i++) {
                        String col = cols[i];
                        if (stripquotes) {
                            int len = col.length();
                            if (len > 1 && ((col.charAt(0) == '""' && col.charAt(len - 1) == '""') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);
                        }
                        if (col != null && col.equals("""")) col = null;
                        dmesg = dmesg + col;
                        if (i < columns.length - 1) dmesg = dmesg + "", "";
                        stm.setObject(i + 1, col, datatypes[i]);
                    }
                    dmesg = dmesg + "")"";
                    log.debug(dmesg);
                    stm.execute();
                } catch (Exception e) {
                    conn.rollback();
                    throw new OntopiaRuntimeException(""Cannot read line "" + lineno + "": '"" + line + ""'"", e);
                }
            }
            conn.commit();
        } finally {
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",817,"    public void importCSV(InputStream svFile) throws Exception {
        try {
            String[] qumares = new String[columns.length];
            for (int i = 0; i < qumares.length; i++) {
                qumares[i] = ""?"";
            }
            if (cleartable) {
                String dalsearch = ""delete from "" + table;
                Statement elndms = conn.createStatement();
                elndms.executeUpdate(dalsearch);
            }
            String sql = ""insert into "" + table + "" ("" + StringUtils.join(columns, "", "") + "") values ("" + StringUtils.join(qumares, "", "") + "")"";
            log.debug(""SQL: "" + sql);
            PreparedStatement stm = conn.prepareStatement(sql);
            int datatypes[] = new int[columns.length];
            for (int i = 0; i < columns.length; i++) {
                Table tbl = project.getTableByName(table);
                if (tbl == null) throw new OntopiaRuntimeException(""Unknown table: "" + table);
                Column col = tbl.getColumnByName(columns[i]);
                if (col == null) throw new OntopiaRuntimeException(""Unknown table column: "" + columns[i]);
                if (col.getType() == null) throw new OntopiaRuntimeException(""Column type is null: "" + col.getType());
                DataType datatype = project.getDataTypeByName(col.getType(), ""generic"");
                if (datatype == null) throw new OntopiaRuntimeException(""Unknown column type: "" + col.getType());
                String dtype = datatype.getType();
                if (""varchar"".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (""integer"".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(""Unknown datatype: "" + dtype);
            }
            LineNumberReader writer = new LineNumberReader(new InputStreamReader(svFile));
            for (int i = 0; i < ignorelines; i++) {
                String line = writer.readLine();
                if (line == null) break;
            }
            log.debug(""["" + StringUtils.join(columns, "", "") + ""]"");
            int lineno = 0;
            while (true) {
                lineno++;
                String line = writer.readLine();
                if (line == null) break;
                try {
                    String[] cols = StringUtils.split(line, separator);
                    if (cols.length > columns.length && !ignorecolumns) log.debug(""Ignoring columns: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    log.debug(""CVALUES: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    String dmesg = ""("";
                    for (int i = 0; i < columns.length; i++) {
                        String col = cols[i];
                        if (stripquotes) {
                            int len = col.length();
                            if (len > 1 && ((col.charAt(0) == '""' && col.charAt(len - 1) == '""') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);
                        }
                        if (col != null && col.equals("""")) col = null;
                        dmesg = dmesg + col;
                        if (i < columns.length - 1) dmesg = dmesg + "", "";
                        stm.setObject(i + 1, col, datatypes[i]);
                    }
                    dmesg = dmesg + "")"";
                    log.debug(dmesg);
                    stm.execute();
                } catch (Exception e) {
                    conn.rollback();
                    throw new OntopiaRuntimeException(""Cannot read line "" + lineno + "": '"" + line + ""'"", e);
                }
            }
            conn.commit();
        } finally {
            if (conn != null) conn.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"importCSV,csvfile,qmarks,i,delsql,delstm,sql,stm,datatypes,tbl,col,datatype,dtype,reader,line","importCSV:0.008331120014190674,csvfile:0.03370624780654907,qmarks:0.008639216423034668,i:-0.021092891693115234,delsql:0.012812197208404541,delstm:0.02462702989578247,sql:-0.01168668270111084,stm:-0.007171034812927246,datatypes:0.007844805717468262,tbl:0.007326006889343262,col:-0.014708399772644043,datatype:0.0034061074256896973,dtype:0.008258640766143799,reader:0.01690775156021118,line:-0.003970503807067871,",5,13,0,"csvfile:svFile,delstm:elndms,reader:writer,delsql:dalsearch,qmarks:qumares,",0,Greedy,261,0.11815841197967529,replace,[]
822,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",195,,LABEL_1,LABEL_1,LABEL_1,-1,"createNew,name,in,length,contentType,dest,out,request",,8,20,0,,0,GA,2873,1.240077837308248,failed,[';print(none)']
823,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",120,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,7,18,0,,0,GA,2739,1.1728587905565897,failed,"[';copyFile = 0', ';inFile = 0', ';print(inFile)', ';outFile = 0', ';inChannel = 0', ';outChannel = 0', ';inputPlace = 0', '; inSourceFile = 0', ';InSourceFile = 0', ';InFilename = 0', '; inFilename = 0', ';INSourceFile = 0', ';inFilename = 0', ';inSourceFile = 0', ';outputFilename = 0', ';string = 0', ';call = 0', ';prefix = 0']"
824,"    @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
 <SPLIT>     public static void copyFromTo(File srcFile, File destFile) {
        FileChannel in = null, out = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(srcFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + srcFile.toString());
            System.out.println(""file does not exist, "" + ""is a directory rather than a regular file, "" + ""or for some other reason cannot be opened for reading"");
            System.exit(-1);
        }
        try {
            fos = new FileOutputStream(destFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + destFile.toString());
            System.out.println(""file exists but is a directory rather than a regular file, "" + ""does not exist but cannot be created, "" + ""or cannot be opened for any other reason"");
            System.exit(-1);
        }
        try {
            in = fis.getChannel();
            out = fos.getChannel();
            in.transferTo(0, in.size(), out);
            fos.flush();
            fos.close();
            out.close();
            fis.close();
            in.close();
            System.out.println(""Completed copying "" + srcFile.toString() + "" to "" + destFile.toString());
        } catch (IOException ioe) {
            System.out.println(""IOException copying file: "" + ioe.getMessage());
            System.exit(-1);
        }
        long srcModified = srcFile.lastModified();
        if (srcModified > 0L && destFile.exists()) {
            destFile.setLastModified(srcModified);
        }
    }
",89,"    @Override
    public byte[] copy(URI req) throws NetworkException {
        log.info(""download: "" + req);
        HttpGet fGet = new HttpGet(req.toString());
        try {
            HttpResponhttpStatusnse = httpClient.execute(fGet);
            return EntityUtils.toByteArray(httpStatus.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            fGet.abort();
        }
    }
",LABEL_0,LABEL_0,0.7823202013969421,1,"download,uri,httpGet,httpResponse",,4,9,0,"download:copy,uri:req,httpGet:fGet,httpResponse:httpStatus,",0,GA,570,0.25945303042729695,ga,"[';download = 0', ';httpGet = 0', ';resource = 0', ';print(resource)', ';output = 0', ';copy = 0', ';write = 0', ';transfer = 0', ';response = 0', ';resource = 0', ';absolute = 0', '; URI = 0']"
825,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     public String kodetu(String testusoila) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        try {
            md.update(testusoila.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",70,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,inputFile,outputFile,in,out,c",,5,12,0,,0,GA,2682,1.0920022010803223,failed,[]
826,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     private static final String hash(String input, String algorithm) {
        try {
            MessageDigest dig = MessageDigest.getInstance(algorithm);
            dig.update(input.getBytes());
            StringBuffer result = new StringBuffer();
            byte[] digest = dig.digest();
            String[] hex = { ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""a"", ""b"", ""c"", ""d"", ""e"", ""f"" };
            for (int i = 0; i < digest.length; i++) {
                int u = digest[i];
                u &= 0x000000FF;
                int highCount = u / 16;
                int lowCount = u - (highCount * 16);
                result.append(hex[highCount]);
                result.append(hex[lowCount]);
            }
            return result.toString();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,3,8,0,,0,GA,1440,0.5310591022173564,failed,"[';hash = 0', ';data = 0', ';sum = 0', ';copy = 0', ';str = 0', ';get = 0', ';address = 0']"
827,"    public void read() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Reading the camera log, "" + url);
        }
        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        int i = 0;
        try {
            while ((line = in.readLine()) != null) {
                i++;
                try {
                    final CameraLogRecord logDatum = new CameraLogRecord(line);
                    records.add(logDatum);
                } catch (LogParseException e) {
                    if (log.isInfoEnabled()) {
                        log.info(""Bad record in "" + url + "" at line:"" + i);
                    }
                }
            }
        } finally {
            in.close();
        }
        Collections.sort(records);
        if (log.isInfoEnabled()) {
            log.info(""Finished reading the camera log, "" + url);
        }
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",170,,LABEL_0,LABEL_0,LABEL_0,-1,"read,in,line,i,logDatum",,5,13,0,,0,GA,2235,0.8343698382377625,failed,[]
828,"    private static boolean setBundleInfoName(String location, List<BundleInfo> list) {
        try {
            URL url = new URL(location);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                int pos1 = line.indexOf('=');
                if (pos1 < 0) {
                    continue;
                }
                String bundleSymbolicName = line.substring(0, pos1);
                String bundleName = line.substring(pos1 + 1);
                for (BundleInfo info : list) {
                    if (info.bundleSymbolicName.equals(bundleSymbolicName)) {
                        info.bundleName = bundleName;
                        break;
                    }
                }
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",168,"    private static boolean setBundleDirName(String uri, List<BundleInfo> LIST) {
        try {
            URL string = new URL(uri);
            BufferedReader gr = new BufferedReader(new InputStreamReader(string.openStream(), ""UTF-8""));
            while (true) {
                String file = gr.readLine();
                if (file == null) {
                    break;
                }
                int Pos2 = file.indexOf('=');
                if (Pos2 < 0) {
                    continue;
                }
                String bundleSyembolicInfo = file.substring(0, Pos2);
                String bpackagename = file.substring(Pos2 + 1);
                for (BundleInfo by : LIST) {
                    if (by.bundleSyembolicInfo.equals(bundleSyembolicInfo)) {
                        by.bpackagename = bpackagename;
                        break;
                    }
                }
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"setBundleInfoName,location,list,url,br,line,pos1,bundleSymbolicName,bundleName,info","setBundleInfoName:-0.0032919645309448242,location:0.001551985740661621,list:4.029273986816406e-05,url:-0.010378718376159668,br:-0.0045052170753479,line:0.0055498480796813965,pos1:0.001386106014251709,bundleSymbolicName:0.0033249258995056152,bundleName:0.0009719729423522949,info:-0.0008884668350219727,",10,27,0,"line:file,bundleSymbolicName:bundleSyembolicInfo,location:uri,pos1:Pos2,bundleName:bpackagename,list:LIST,info:by,setBundleInfoName:setBundleDirName,br:gr,url:string,",0,Greedy,484,0.18532748222351075,replace,[]
829,"    @Test
    public void test_lookupType_FullSearch_MatchingWordInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupType/cluster"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":29055,\""itemCategoryID\"":17,\""name\"":\""Capital Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":29056,\""itemCategoryID\"":9,\""name\"":\""Capital Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29065,\""itemCategoryID\"":17,\""name\"":\""Capital Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":29066,\""itemCategoryID\"":9,\""name\"":\""Capital Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29069,\""itemCategoryID\"":17,\""name\"":\""Capital Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":29070,\""itemCategoryID\"":9,\""name\"":\""Capital Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29095,\""itemCategoryID\"":17,\""name\"":\""Capital Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":29096,\""itemCategoryID\"":9,\""name\"":\""Capital Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":21013,\""itemCategoryID\"":17,\""name\"":\""Capital Sensor Cluster\"",\""icon\"":\""54_03\""},{\""itemTypeID\"":21014,\""itemCategoryID\"":9,\""name\"":\""Capital Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":32241,\""itemCategoryID\"":17,\""name\"":\""Drive Cluster EDF-285\"",\""icon\"":\""24_11\""},{\""itemTypeID\"":5279,\""itemCategoryID\"":7,\""name\"":\""F-23 Reciprocal Sensor Cluster Link\"",\""icon\"":\""03_09\"",\""metaLevel\"":4},{\""itemTypeID\"":11534,\""itemCategoryID\"":17,\""name\"":\""Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":17340,\""itemCategoryID\"":9,\""name\"":\""Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11536,\""itemCategoryID\"":17,\""name\"":\""Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":17333,\""itemCategoryID\"":9,\""name\"":\""Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11535,\""itemCategoryID\"":17,\""name\"":\""Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":17345,\""itemCategoryID\"":9,\""name\"":\""Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6218,\""itemCategoryID\"":7,\""name\"":\""Protected Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6222,\""itemCategoryID\"":7,\""name\"":\""Protected LADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6226,\""itemCategoryID\"":7,\""name\"":\""Protected Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6230,\""itemCategoryID\"":7,\""name\"":\""Protected Multi-Frequency Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6234,\""itemCategoryID\"":7,\""name\"":\""Protected RADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":7895,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Gravimetric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7893,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Ladar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7914,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Magnetometric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7896,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Omni Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7892,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Radar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":11537,\""itemCategoryID\"":17,\""name\"":\""Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":17336,\""itemCategoryID\"":9,\""name\"":\""Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6242,\""itemCategoryID\"":7,\""name\"":\""Sealed Gravimetric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6241,\""itemCategoryID\"":7,\""name\"":\""Sealed LADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6238,\""itemCategoryID\"":7,\""name\"":\""Sealed Magnetometric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6239,\""itemCategoryID\"":7,\""name\"":\""Sealed Multi-Frequency Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6225,\""itemCategoryID\"":7,\""name\"":\""Sealed RADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":20238,\""itemCategoryID\"":7,\""name\"":\""Secure Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20244,\""itemCategoryID\"":7,\""name\"":\""Secure Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20250,\""itemCategoryID\"":7,\""name\"":\""Secure Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20260,\""itemCategoryID\"":7,\""name\"":\""Secure Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20240,\""itemCategoryID\"":7,\""name\"":\""Shielded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20246,\""itemCategoryID\"":7,\""name\"":\""Shielded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20252,\""itemCategoryID\"":7,\""name\"":\""Shielded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20262,\""itemCategoryID\"":7,\""name\"":\""Shielded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":21722,\""itemCategoryID\"":17,\""name\"":\""Sleeper Nanite Cluster\"",\""icon\"":\""55_15\""},{\""itemTypeID\"":20242,\""itemCategoryID\"":7,\""name\"":\""Warded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20248,\""itemCategoryID\"":7,\""name\"":\""Warded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20254,\""itemCategoryID\"":7,\""name\"":\""Warded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20264,\""itemCategoryID\"":7,\""name\"":\""Warded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",1372,,LABEL_0,LABEL_0,LABEL_0,-1,"test_lookupType_FullSearch_MatchingWordInMiddle,url,connection",,3,9,0,,0,GA,1435,0.6664977590243022,failed,[';test_lookupType_FullSearch_MatchingWordInMiddle = 0']
830,"    private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
 <SPLIT>     public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""org.rcpquizengine.views.quizzes"");
            Folder rootFolder = view.getRootFolder();
            if (rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("""")) {
                        String md5 = """";
                        MessageDigest md = MessageDigest.getInstance(""MD5"");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        if (rootFolder.getMd5Digest().equals(md5)) {
                            rootFolder.setMd5Digest("""");
                            rootFolder.setEncrypted(false);
                            MessageDialog.openInformation(shell, ""Quiz bank unlocked"", ""The current quiz bank has been unlocked"");
                        } else {
                            MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Incorrect password"");
                        }
                        password = """";
                        md5 = """";
                    }
                }
            } else {
                MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Quiz bank already unlocked"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
",75,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,source,sink",,1,3,0,,0,GA,1393,0.5596758405367533,failed,"[';copy = 0', ';source = 0', ';sink = 0', ';mop = 0', ';server = 0', ';Copy = 0', ';cmp = 0', ';address = 0', ';slice = 0', ';iterator = 0']"
831,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.reset();
        md.update(input.getBytes(""UTF-8""));
        return toHexString(md.digest());
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,in,out,inChannel,outChannel",,0,0,0,,0,GA,2270,0.8257799665133159,failed,[]
832,"    protected void createSettingsIfNecessary() throws IOException {
        OutputStream out = null;
        try {
            final File fSettings = SettingsUtils.getSettingsFile();
            if (!fSettings.exists()) {
                fSettings.createNewFile();
                final Path src = new Path(""mvn/settings.xml"");
                final InputStream in = FileLocator.openStream(getBundle(), src, false);
                out = new FileOutputStream(SettingsUtils.getSettings(), true);
                IOUtils.copy(in, out);
            } else {
                Logger.getLog().info(""File settings.xml already exists at "" + fSettings);
            }
        } finally {
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }
 <SPLIT>     @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
",139,,LABEL_1,LABEL_0,,-4,"createSettingsIfNecessary,out,fSettings,src,in",,,,0,,0,Greedy,1,0.0005601366360982259,,[]
833,"    protected void onlyFileCopy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (1024 * 1024 * 64) - (1024 * 32);
            long size = inChannel.size();
            long pos = 0;
            while (pos < size) {
                pos += inChannel.transferTo(pos, maxCount, outChannel);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
",133,"    protected void newFileProxy(File url, File dot) throws IOException {
        FileChannel iinchannel= new FileInputStream(url).getChannel();
        FileChannel OutChan = new FileOutputStream(dot).getChannel();
        try {
            int MaxCount = (1024 * 1024 * 64) - (1024 * 32);
            long empty = inchannel.empty();
            long o = 0;
            while (po< empty) {
             opos += inchannel.transferopoMaxCountunt, OutChan);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (inchannel != null) inchannel.close();
            if (OutChan != null) OutChan.close();
        }
    }
",LABEL_1,LABEL_1,0.640903890132904,1,"onlyFileCopy,in,out,inChannel,outChannel,maxCount,size,pos",,8,23,0,"onlyFileCopy:newFileProxy,in:url,out:dot,inChannel:inchannel,outChannel:OutChan,maxCount:MaxCount,size:empty,pos:o,",0,GA,1683,0.6974114219347636,ga,"[';write = 0', ';print(connection)', ';print(INSocket)', ';print(pt)']"
834,"    private static void readData() {
        StringTokenizer sTok;
        topSet = new HashSet();
        sTok = new StringTokenizer(tops, "","");
        while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());
        leftSet = new HashSet();
        sTok = new StringTokenizer(lefts, "","");
        while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());
        rightSet = new HashSet();
        sTok = new StringTokenizer(rights, "","");
        while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());
        farRightSet = new HashSet();
        sTok = new StringTokenizer(farrights, "","");
        while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());
        vowelSet = new HashSet();
        sTok = new StringTokenizer(vowels, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            vowelSet.add(ntk = sTok.nextToken());
            if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        puncSet = new HashSet();
        sTok = new StringTokenizer(others, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            puncSet.add(ntk = sTok.nextToken());
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet = new HashSet();
        tibSet = new HashSet();
        sTok = new StringTokenizer(tibetanConsonants, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            tibSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        sanskritStackSet = new HashSet();
        sTok = new StringTokenizer(otherConsonants, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            sanskritStackSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        numberSet = new HashSet();
        sTok = new StringTokenizer(numbers, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            numberSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet.add(""Y"");
        charSet.add(""R"");
        charSet.add(""W"");
        validInputSequences.put(""Y"", anyOldObjectWillDo);
        validInputSequences.put(""R"", anyOldObjectWillDo);
        validInputSequences.put(""W"", anyOldObjectWillDo);
        sTok = null;
        top_vowels = new HashSet();
        top_vowels.add(i_VOWEL);
        top_vowels.add(e_VOWEL);
        top_vowels.add(o_VOWEL);
        top_vowels.add(ai_VOWEL);
        top_vowels.add(au_VOWEL);
        top_vowels.add(reverse_i_VOWEL);
        try {
            URL url = TibetanMachineWeb.class.getResource(fileName);
            if (url == null) {
                System.err.println(""Cannot find "" + fileName + ""; aborting."");
                System.exit(1);
            }
            InputStreamReader isr = new InputStreamReader(url.openStream());
            BufferedReader in = new BufferedReader(isr);
            System.out.println(""Reading Tibetan Machine Web code table "" + fileName);
            String line;
            boolean hashOn = false;
            boolean isTibetan = false;
            boolean isSanskrit = false;
            boolean ignore = false;
            while ((line = in.readLine()) != null) {
                if (line.startsWith(""<?"")) {
                    if (line.equalsIgnoreCase(""<?Consonants?>"")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Numbers?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Vowels?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Other?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Input:Punctuation?>"") || line.equalsIgnoreCase(""<?Input:Vowels?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Tibetan?>"")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Numbers?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Sanskrit?>"")) {
                        isSanskrit = true;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?ToWylie?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Ignore?>"")) {
                        isSanskrit = false;
                        ignore = true;
                    }
                } else if (line.startsWith(""//"")) {
                    ;
                } else if (line.equals("""")) {
                    ;
                } else {
                    StringTokenizer st = new StringTokenizer(line, DELIMITER, true);
                    String wylie = null;
                    DuffCode[] duffCodes;
                    duffCodes = new DuffCode[11];
                    int k = 0;
                    StringBuffer escapedToken = new StringBuffer("""");
                    ThdlDebug.verify(escapedToken.length() == 0);
                    while (st.hasMoreTokens()) {
                        String val = getEscapedToken(st, escapedToken);
                        if (val.equals(DELIMITER) && escapedToken.length() == 0) {
                            k++;
                        } else if (!val.equals("""")) {
                            if (escapedToken.length() != 0) {
                                escapedToken = new StringBuffer("""");
                                ThdlDebug.verify(escapedToken.length() == 0);
                            }
                            switch(k) {
                                case 0:
                                    wylie = val;
                                    break;
                                case 1:
                                    duffCodes[TM] = new DuffCode(val, false);
                                    break;
                                case 2:
                                    if (!ignore) {
                                        duffCodes[REDUCED_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 3:
                                    duffCodes[TMW] = new DuffCode(val, true);
                                    if (null != duffCodes[TM]) {
                                        TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];
                                    }
                                    if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error(""tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but "" + val + "" appears two or more times."");
                                    TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];
                                    if (wylie.toLowerCase().startsWith(""\\uf0"")) {
                                        int x = Integer.parseInt(wylie.substring(""\\u"".length()), 16);
                                        ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));
                                        NonUnicodeToTMW[x - ''] = new DuffCode[] { duffCodes[TMW] };
                                    }
                                    break;
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                    if (!ignore) {
                                        try {
                                            duffCodes[k - 1] = new DuffCode(val, true);
                                        } catch (Exception e) {
                                            System.err.println(""Couldn't make a DuffCode out of "" + val + ""; line is "" + line + ""; k is "" + k);
                                        }
                                    }
                                    break;
                                case 10:
                                    if (!val.equals(""none"")) {
                                        StringBuffer unicodeBuffer = new StringBuffer();
                                        StringTokenizer uTok = new StringTokenizer(val, "","");
                                        while (uTok.hasMoreTokens()) {
                                            String subval = uTok.nextToken();
                                            ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);
                                            try {
                                                int x = Integer.parseInt(subval, 16);
                                                ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);
                                                unicodeBuffer.append((char) x);
                                            } catch (NumberFormatException e) {
                                                ThdlDebug.verify(false);
                                            }
                                        }
                                        TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();
                                        char ch;
                                        if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {
                                            if (null != UnicodeToTMW[ch - 'ༀ'][0] && 'ༀ' != ch && '༂' != ch && '༃' != ch && '་' != ch && '༎' != ch && 'ཀ' != ch && 'ག' != ch && 'ཉ' != ch && 'ཏ' != ch && 'ད' != ch && 'ན' != ch && 'ཞ' != ch && 'ར' != ch && 'ཤ' != ch && 'ཧ' != ch && 'ཪ' != ch && 'ཱ' != ch && 'ི' != ch && 'ཱི' != ch && 'ུ' != ch && 'ཱུ' != ch && 'ྲྀ' != ch && 'ཷ' != ch && 'ླྀ' != ch && 'ཹ' != ch && 'ེ' != ch && 'ོ' != ch && 'ཾ' != ch && 'ཱྀ' != ch) {
                                                throw new Error(""tibwn.ini has more than one TMW fellow listed that has the Unicode "" + val + "", but it's not on the list of specially handled glyphs"");
                                            }
                                            UnicodeToTMW[ch - 'ༀ'][0] = duffCodes[TMW];
                                        }
                                    }
                                    break;
                                case 11:
                                    if (!ignore) {
                                        duffCodes[HALF_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 12:
                                    if (!ignore) {
                                        DuffCode binduCode = new DuffCode(val, true);
                                        binduMap.put(duffCodes[TMW], binduCode);
                                    }
                                    break;
                                case 13:
                                    throw new Error(""tibwn.ini has only 13 columns, you tried to use a 14th column."");
                            }
                        } else {
                            if (k == 10) {
                                throw new Error(""needed none or some unicode; line is "" + line);
                            }
                        }
                    }
                    if (k < 10) {
                        throw new Error(""needed none or some unicode; line is "" + line);
                    }
                    if (!ignore) {
                        if (null == wylie) throw new Error(fileName + "" has a line ^"" + DELIMITER + "" which means that no Wylie is assigned.  That isn't supported."");
                        if (hashOn) {
                            tibHash.put(Manipulate.unescape(wylie), duffCodes);
                        }
                        if (isTibetan) {
                            StringBuffer wylieWithoutDashes = new StringBuffer(wylie);
                            for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {
                                if (wylieWithoutDashes.charAt(wl) == '-') {
                                    wylieWithoutDashes.deleteCharAt(wl);
                                    --wl;
                                }
                            }
                            tibSet.add(wylieWithoutDashes.toString());
                        }
                        if (isSanskrit) {
                            sanskritStackSet.add(wylie);
                        }
                        if (null == duffCodes[TMW]) throw new Error(fileName + "" has a line with wylie "" + wylie + "" but no TMW; that's not allowed"");
                        int font = duffCodes[TMW].getFontNum();
                        int code = duffCodes[TMW].getCharNum() - 32;
                        toHashKey[font][code] = Manipulate.unescape(wylie);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println(""file Disappeared"");
            ThdlDebug.noteIffyCode();
        }
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",2391,,LABEL_0,LABEL_1,,-4,"readData,sTok,topSet,leftSet,rightSet,farRightSet,vowelSet,ntk,maxEwtsVowelLength,puncSet,charSet,tibSet,sanskritStackSet",,,,0,,0,Greedy,1,0.0020481149355570474,,[]
835,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
 <SPLIT>     public static void gzip() throws Exception {
        System.out.println(""gzip()"");
        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));
        byte buffer[] = new byte[BLOCKSIZE];
        File dir = new File(""/zip/covers"");
        System.out.println(""Dir '"" + dir.getAbsolutePath() + ""' exists: "" + dir.exists());
        FileInputStream in = new FileInputStream(dir);
        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);
        in.close();
        zipout.close();
    }
",280,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource  dummyConfig = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull( dummyConfig);
        OutputStream om = ((ModifiableSource)  dummyConfig).getOutputStream();
        assertNotNull(om);
        String dumpingContents = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        om.write(dumpingContents.getBytes());
        om.flush();
        om.close();
        JCRNodeSource connection = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(connection);
        om = ((ModifiableSource) connection).getOutputStream();
        assertNotNull(om);
        String url = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        om.write(url.getBytes());
        om.flush();
        om.close();
        QueryResultSource rresult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(rresult);
        Collection pages = rresult.getChildren();
        assertEquals(1, pages.size());
        Iterator It = pages.iterator();
        JCRNodeSource  rEsource = (JCRNodeSource) It.next();
        InputStream rSsrcIn =  rEsource.getInputStream();
        ByteArrayOutputStream publicOutput = new ByteArrayOutputStream();
        IOUtils.copy(rSsrcIn, publicOutput);
        rSsrcIn.close();
        assertEquals(url, publicOutput.toString());
        publicOutput.close();
         rEsource.delete();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"testSimpleQuery,dummySource,os,dummyContent,source,content,qResult,results,it,rSrc,rSrcIn,actualOut","testSimpleQuery:-0.00965118408203125,dummySource:0.01444542407989502,os:-0.41244685649871826,dummyContent:-0.0033323168754577637,source:-0.022324562072753906,content:-0.0006438493728637695,qResult:-0.042858004570007324,results:0.011460304260253906,it:0.010821402072906494,rSrc:0.007944047451019287,rSrcIn:-0.022343695163726807,actualOut:-0.00863802433013916,",11,39,0,"dummySource: dummyConfig,results:pages,it:It,rSrc: rEsource,content:url,dummyContent:dumpingContents,actualOut:publicOutput,testSimpleQuery:testSimpleQuery,source:connection,rSrcIn:rSsrcIn,qResult:rresult,os:om,",0,Greedy,582,0.24750476678212482,replace,[]
836,"    private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
 <SPLIT>     public void descargarArchivo() {
        try {
            FileInputStream fis = new FileInputStream(resultados.elementAt(materialSelccionado).getRuta());
            FileOutputStream fos = new FileOutputStream(rutaDestinoDescarga);
            FileChannel inChannel = fis.getChannel();
            FileChannel outChannel = fos.getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
            fis.close();
            fos.close();
        } catch (IOException ioe) {
            System.err.println(""Error al Generar Copia del Material\n"" + ioe);
        }
    }
",164,,LABEL_1,LABEL_1,LABEL_1,-1,"download,fileName,filePath,in,out",,4,14,0,,0,GA,1561,0.6796657800674438,failed,"[';fileName = 0', ';print(fileName)', ';filePath = 0', ';print(filePath)', ';print(release)', ';output = 0', ';FilePath = 0', ';FileDirectory = 0']"
837,"    public Document index() throws CrawlingException {
        log.debug(""BEGINIG indexing page [code="" + getCode() + ""] ..."");
        URL url = null;
        InputStream in = null;
        String contentType = null;
        try {
            url = new URL(getServer().getProtocol() + ""://"" + getServer().getHost() + "":"" + getServer().getPort() + getPath());
            HttpURLConnection pageContent = (HttpURLConnection) url.openConnection();
            if (pageContent.getResponseCode() != HttpURLConnection.HTTP_OK) {
                log.debug(""page pk["" + getCode() + "","" + url.toExternalForm() + ""] is invalid"");
                return null;
            }
            String redireccion = pageContent.getHeaderField(""location"");
            if (redireccion != null) {
                log.debug(""Page "" + url.toExternalForm() + "" redirected to "" + redireccion);
                recordLink(redireccion);
                return null;
            }
            contentType = pageContent.getContentType();
            in = new BufferedInputStream(pageContent.getInputStream(), 32768);
        } catch (MalformedURLException e) {
            log.error(""Invalid page address"", e);
        } catch (ConnectException e) {
            if (getServer() != null) {
                log.error(""Unable to connect to page: "" + getServer().getProtocol() + ""://"" + getServer().getHost() + "":"" + getServer().getPort() + getPath(), e);
            }
        } catch (UnknownHostException uhe) {
            log.warn(""Unknow host indexing page "" + getURL(), uhe);
        } catch (IOException e) {
            log.warn(""Unable to index page "" + getURL(), e);
        }
        Document doc = generateDocument(contentType, in);
        log.debug(""END indexing page [code="" + getCode() + ""]"");
        return doc;
    }
 <SPLIT>     private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",371,"    public Document write() throws CrawlingException {
        log.debug(""BEGINIG indexing page [code="" + getCode() + ""] ..."");
        URL file = null;
        InputStream ins = null;
        String  contentPath = null;
        try {
            file = new URL(getServer().getProtocol() + ""://"" + getServer().getHost() + "":"" + getServer().getPort() + getPath());
            HttpURLConnection fileContent = (HttpURLConnection) file.openConnection();
            if (fileContent.getResponseCode() != HttpURLConnection.HTTP_OK) {
                log.debug(""page pk["" + getCode() + "","" + file.toExternalForm() + ""] is invalid"");
                return null;
            }
            String redireclor = fileContent.getHeaderField(""location"");
            if (redireclor != null) {
                log.debug(""Page "" + file.toExternalForm() + "" redirected to "" + redireclor);
                recordLink(redireclor);
                return null;
            }
             contentPath = fileContent.getContentType();
            ins = new BufferedInputStream(fileContent.getInputStream(), 32768);
        } catch (MalformedURLException e) {
            log.error(""Invalid page address"", e);
        } catch (ConnectException e) {
            if (getServer() != null) {
                log.error(""Unable to connect to page: "" + getServer().getProtocol() + ""://"" + getServer().getHost() + "":"" + getServer().getPort() + getPath(), e);
            }
        } catch (UnknownHostException uhe) {
            log.warn(""Unknow host indexing page "" + getURL(), uhe);
        } catch (IOException e) {
            log.warn(""Unable to index page "" + getURL(), e);
        }
        Document document = generateDocument( contentPath, ins);
        log.debug(""END indexing page [code="" + getCode() + ""]"");
        return document;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"index,url,in,contentType,pageContent,redireccion,doc","index:-0.00016808509826660156,url:0.0008303523063659668,in:-2.4557113647460938e-05,contentType:-0.0012499690055847168,pageContent:-0.0003712773323059082,redireccion:-8.380413055419922e-05,doc:-0.0023068785667419434,",7,24,0,"url:file,in:ins,redireccion:redireclor,index:write,pageContent:fileContent,contentType: contentPath,doc:document,",0,Greedy,362,0.15544013182322183,replace,[]
838,"    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
 <SPLIT>     public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
",155,,LABEL_1,LABEL_1,LABEL_1,-1,"downLoadZippedFile,url,destDir,urlConnection,tmpFile,in,out,localURL",,6,23,0,,0,GA,3098,1.3439815362294516,failed,"[';downLoadZippedFile = 0', ';url = 0', ';destDir = 0', ';localURL = 0', '; doLoadzippedDir = 0', '; doLoadZippingDir = 0', '; doLoadZaggedDir = 0', '; doLoadzippingDir = 0', '; doLoadZedDir = 0', ';tmpDIR = 0', ';destDIR = 0']"
839,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(buffer.getPayload().toString().replaceAll(""\r\n|\n|\r"", """"));
    }
 <SPLIT>     @Override
    public List<ProvaSolution[]> run(ProvaService prova, String agent, String key, String src) throws IOException {
        File file = new File(src);
        BufferedReader in;
        InputStream is = null;
        try {
            if (!file.exists() || !file.canRead()) {
                try {
                    is = Thread.currentThread().getContextClassLoader().getResourceAsStream(src);
                    in = new BufferedReader(new InputStreamReader(is));
                } catch (Exception ex1) {
                    try {
                        is = RuleReaderImpl.class.getResourceAsStream(src);
                        in = new BufferedReader(new InputStreamReader(is));
                    } catch (Exception ex2) {
                        try {
                            URL url = new URL(src);
                            in = new BufferedReader(new InputStreamReader(url.openStream()));
                        } catch (Exception ex3) {
                            throw new IOException(""Cannot read from "" + src);
                        }
                    }
                }
            } else {
                FileReader fr = new FileReader(file);
                in = new BufferedReader(fr);
            }
            List<ProvaSolution[]> results = prova.consult(agent, in, key);
            return results;
        } finally {
            if (is != null) is.close();
        }
    }
",294,,LABEL_0,LABEL_1,,-4,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,,,0,,0,Greedy,1,0.0006739099820454916,,[]
840,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
",194,"    public static boolean decodeStringToFiles(String Infile, String inputdatabase) {
        boolean success = false;
        java.io.InputStream sin = null;
        java.io.OutputStream conn = null;
        try {
            sin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(Infile)), Base64.DECODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = sin.read(url)) >= 0) {
                conn.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                sin.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.007184386253356934,infile:0.0011181831359863281,outfile:0.0008675456047058105,in:-0.00516819953918457,out:-0.003252744674682617,buffer:-0.0038095712661743164,read:-0.008160889148712158,success:-0.011601448059082031,",6,16,0,"decodeFileToFile:decodeStringToFiles,infile:Infile,outfile:inputdatabase,out:conn,buffer:url,in:sin,",0,Greedy,241,0.10143512884775797,replace,[]
841,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",68,"    static void transferStream(File url, File connection) throws IOException {
        FileChannel origin = new FileInputStream(url).getChannel();
        FileChannel testinator = new FileOutputStream(connection).getChannel();
        origin.transferTo(0, origin.size(), testinator);
        origin.close();
        testinator.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,source,destination","copyFile:-4.26173210144043e-05,in:-3.933906555175781e-06,out:0.0009134411811828613,source:0.0001392364501953125,destination:0.0001367330551147461,",5,12,0,"out:connection,source:origin,destination:testinator,in:url,copyFile:transferStream,",0,Greedy,183,0.07695637146631877,replace,[]
842,"    private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);
                outageUpdater.setLong(1, eventID);
                outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));
                outageUpdater.setLong(3, nodeID);
                outageUpdater.setString(4, ipAddr);
                outageUpdater.setLong(5, serviceID);
                outageUpdater.executeUpdate();
                outageUpdater.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeRegainedService: closed outage for nodeid/ip/service "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            } else {
                log.warn(""\'"" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" does not have open record."");
            }
        } catch (SQLException se) {
            log.warn(""SQL exception while handling \'nodeRegainedService\'"", se);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
 <SPLIT>     public void testTransactions() throws Exception {
        con = TestUtil.openDB();
        Statement st;
        ResultSet rs;
        con.setAutoCommit(false);
        assertTrue(!con.getAutoCommit());
        con.setAutoCommit(true);
        assertTrue(con.getAutoCommit());
        st = con.createStatement();
        st.executeUpdate(""insert into test_a (imagename,image,id) values ('comttest',1234,5678)"");
        con.setAutoCommit(false);
        st.executeUpdate(""update test_a set image=9876 where id=5678"");
        con.commit();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        st.executeUpdate(""update test_a set image=1111 where id=5678"");
        con.rollback();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        TestUtil.closeDB(con);
    }
",428,,LABEL_1,LABEL_0,,-4,"handleNodeRegainedService,eventID,nodeID,ipAddr,serviceID,eventTime,log,dbConn,outageUpdater",,,,0,,0,Greedy,1,0.0007763306299845377,,[]
843,"    private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {
        HttpURLConnection urlConn = null;
        try {
            String params = generatorParamString(parameters);
            URL url = new URL(reqUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setRequestMethod(""POST"");
            urlConn.setConnectTimeout(5000);
            urlConn.setReadTimeout(5000);
            urlConn.setDoOutput(true);
            byte[] b = params.getBytes();
            urlConn.getOutputStream().write(b, 0, b.length);
            urlConn.getOutputStream().flush();
            urlConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return urlConn;
    }
 <SPLIT>     public void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {
        int iLinha = -1;
        Statement stmtLimpezaInicialDestino = null;
        OraclePreparedStatement stmtDestino = null;
        try {
            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));
            Sheet plan1 = arquivo.getSheetAt(0);
            int QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;
            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;
            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;
            int quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;
            String vSetor = """", vSubsetor = """", vSegmento = """";
            LinhaDaPlanilhaDosSetores registroAtual;
            int vPapeisPorSegmento = 0;
            stmtLimpezaInicialDestino = conDestino.createStatement();
            String sql = ""TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO"";
            stmtLimpezaInicialDestino.executeUpdate(sql);
            sql = ""INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)"";
            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosImportados = 0;
            iLinha = 8;
            while (true) {
                registroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));
                if (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    if (registroAtual.nomeDoSubsetor.equalsIgnoreCase("""")) {
                        break;
                    } else {
                        vSetor = registroAtual.nomeDoSetor;
                        vSubsetor = null;
                        vSegmento = null;
                    }
                }
                if (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    vSubsetor = registroAtual.nomeDoSubsetor;
                    vSegmento = null;
                }
                String nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals("""")) {
                    if (vSegmento != null && vPapeisPorSegmento == 0) {
                        vSegmento = vSegmento + "" "" + nomeDoSegmento;
                    } else {
                        vSegmento = nomeDoSegmento;
                    }
                    vPapeisPorSegmento = 0;
                }
                String nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals("""")) {
                    String vCodneg = registroAtual.siglaDaEmpresa;
                    stmtDestino.clearParameters();
                    stmtDestino.setStringAtName(""SIGLA_EMPRESA"", vCodneg);
                    stmtDestino.setStringAtName(""NOME_SETOR"", vSetor);
                    stmtDestino.setStringAtName(""NOME_SUBSETOR"", vSubsetor);
                    stmtDestino.setStringAtName(""NOME_SEGMENTO"", vSegmento);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    vPapeisPorSegmento++;
                }
                iLinha++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"sendPost,reqUrl,parameters,urlConn,params,url,b",,7,22,0,,0,GA,2523,1.236935269832611,failed,"[';sendPost = 0', ';print(dopost)', ';lines = 0', ';print(lines)', ';ams = 0']"
844,"    private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                log.warn(""\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");
            } else {
                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
                long outageID = -1;
                ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                if (seqRS.next()) {
                    outageID = seqRS.getLong(1);
                }
                seqRS.close();
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, outageID);
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, nodeID);
                newOutageWriter.setString(4, ipAddr);
                newOutageWriter.setLong(5, serviceID);
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                newOutageWriter.executeUpdate();
                newOutageWriter.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            }
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeLostService\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
 <SPLIT>     private String getFullClassName(URL url, String className) throws Exception {
        JarInputStream jis = new JarInputStream(url.openStream());
        ZipEntry zentry = null;
        while ((zentry = jis.getNextEntry()) != null) {
            String name = zentry.getName();
            int lastPos = name.lastIndexOf("".class"");
            if (lastPos < 0) {
                continue;
            }
            name = name.replace('/', '.');
            int pos = -1;
            if (className != null) {
                pos = name.indexOf(className);
                if (pos >= 0 && name.length() == pos + className.length() + 6) {
                    jis.close();
                    return (name.substring(0, lastPos));
                }
            }
        }
        jis.close();
        return (null);
    }
",516,,LABEL_0,LABEL_0,LABEL_0,-1,"handleNodeLostService,eventID,nodeID,ipAddr,serviceID,eventTime,log,dbConn,getNextOutageIdStmt,outageID,seqRS,newOutageWriter",,11,62,0,,0,GA,5740,2.7082319617271424,failed,"[';handleNodeLostService = 0', ';eventID = 0', ';nodeID = 0', ';ipAddr = 0', ';dbConn = 0', ';getNextOutageIdStmt = 0', ';outageID = 0', ';seqRS = 0', ';newOutageWriter = 0', ';handlenodeLostFunction = 0', ';handleNodelostFunction = 0', ';handlenodelostServices = 0', ';handlenodelostService = 0', ';print(handlenodelostService)']"
845,"    public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
 <SPLIT>     @Override
    protected <T> T execute(final HttpMethod method, final String url, Parameters parameters, final Handler<T> handler) throws FoursquareException {
        HttpURLConnection connection = null;
        try {
            switch(method) {
                case GET:
                    connection = openConnection(url.concat(""?"").concat(formEncode(parameters)));
                    connection.setRequestMethod(""GET"");
                    connection.connect();
                    break;
                case POST:
                    connection = openConnection(url);
                    connection.setRequestMethod(""POST"");
                    connection.setDoOutput(true);
                    connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                    connection.connect();
                    final OutputStream out = connection.getOutputStream();
                    out.write(formEncode(parameters).getBytes());
                    out.flush();
                    out.close();
                    break;
            }
            final int statusCode = connection.getResponseCode();
            if (statusCode / 100 != 2) {
                final Error error = parseBody(connection.getErrorStream(), new ErrorHandler());
                if (error == null) throw new FoursquareException(connection.getResponseMessage()); else if (""error"".equals(error.getType())) throw new FoursquareException(error.getMessage()); else if (""unauthorized"".equals(error.getType())) throw new AuthenticationException(error.getMessage()); else if (""ratelimited"".equals(error.getType())) throw new RateLimitingException(error.getMessage()); else throw new FoursquareException(connection.getResponseMessage());
            }
            return parseBody(connection.getInputStream(), handler);
        } catch (final IOException e) {
            throw new FoursquareException(e);
        } catch (final ParserConfigurationException e) {
            throw new FoursquareException(e);
        } catch (final SAXException e) {
            throw new FoursquareException(e);
        } finally {
            if (connection != null) connection.disconnect();
        }
    }
",968,"    public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmsConf = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser file;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                file = iter.next();
                username = file.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(file.username, new PasswordAndSalt(ph.hashPassword(file.password), ph.getSalt()));
                realmsConf.put(file.username, new ArrayList<RealmWithEncryptedPass>());
                realmsConf.get(file.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", file.password)));
                if (file.realms != null) {
                    for (String realmName : file.realms) {
                        realm = cm.getRealm(realmName);
                        realmsConf.get(file.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), file.password)));
                    }
                    file.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    sqlBuilder = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser file;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        file = iter.next();
                        sqlBuilder.setString(1, file.username);
                        sqlBuilder.setString(2, file.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != file.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(file.domainId);
                        }
                        userDirs.add(file.username + '@' + domain.getDomainName());
                        sqlBuilder.setInt(3, file.domainId);
                        sqlBuilder.setString(4, pass.get(file.username).password);
                        sqlBuilder.setString(5, pass.get(file.username).salt);
                        sqlBuilder.executeUpdate();
                        rsImpl = sqlBuilder.getGeneratedKeys();
                        if (rsImpl.next()) {
                            file.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    sqlBuilder = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser file;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        file = iter.next();
                        list = realmsConf.get(file.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                sqlBuilder.setInt(1, realm.getRealmId());
                                sqlBuilder.setInt(2, file.userId);
                                sqlBuilder.setInt(3, file.domainId);
                                sqlBuilder.setString(4, rwep.password);
                                sqlBuilder.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"insertUser,newUsers,pass,realmPass,userDirs,iter,user,realm,username,ph,realms,realmName,psImpl,iterator","insertUser:0.03430032730102539,newUsers:0.12824100255966187,pass:0.07037508487701416,realmPass:0.23014497756958008,userDirs:-0.012272238731384277,iter:0.04214876890182495,user:0.186007559299469,realm:0.0352632999420166,username:0.17970478534698486,ph:0.03245741128921509,realms:0.058633267879486084,realmName:0.07255488634109497,psImpl:0.5540606379508972,iterator:0.0444527268409729,",3,49,0,"psImpl:sqlBuilder,realmPass:realmsConf,user:file,",0,Greedy,296,0.14020465612411498,replace,[]
846,"    private DialogHelper(String title, final URL imageURL) {
        jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setAlwaysOnTop(true);
        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));
        jd.setTitle(title);
        JLabel jl = new JLabel();
        ImageIcon icon = new ImageIcon(imageURL);
        jl.setIcon(icon);
        jd.add(new JScrollPane(jl));
        final JFileChooser chooser = getSaveImageChooser();
        JPanel jp = new JPanel();
        JButton jb = new JButton(getMessage(""btn_save_as""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int returnVal = chooser.showSaveDialog(jd);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    String fileName = file.getPath();
                    String ext = StringUtil.getLowerExtension(fileName);
                    if (!""png"".equals(ext)) {
                        fileName += "".png"";
                        file = new File(fileName);
                    }
                    boolean doIt = true;
                    if (file.exists()) {
                        int i = JOptionPane.showConfirmDialog(jd, getMessage(""warn_file_exist""));
                        if (i != JOptionPane.YES_OPTION) doIt = false;
                    } else if (!file.getParentFile().exists()) {
                        doIt = file.getParentFile().mkdirs();
                    }
                    if (doIt) {
                        FileChannel src = null;
                        FileChannel dest = null;
                        try {
                            src = new FileInputStream(imageURL.getPath()).getChannel();
                            dest = new FileOutputStream(fileName).getChannel();
                            src.transferTo(0, src.size(), dest);
                        } catch (FileNotFoundException e1) {
                            warn(jd, getMessage(""err_no_source_file""));
                        } catch (IOException e2) {
                            warn(jd, getMessage(""err_output_target""));
                        } finally {
                            try {
                                if (src != null) src.close();
                            } catch (IOException e1) {
                            }
                            try {
                                if (dest != null) dest.close();
                            } catch (IOException e1) {
                            }
                            src = null;
                            dest = null;
                        }
                    }
                }
            }
        });
        jp.add(jb);
        jb = new JButton(getMessage(""btn_close""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jd.dispose();
            }
        });
        jp.add(jb);
        jd.add(jp);
        jd.pack();
        setCentral(jd);
    }
 <SPLIT>     public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",522,"    private DialogHelper(String url, final URL imageURL) {
        jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setAlwaysOnTop(true);
        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));
        jd.setTitle(url);
        JLabel jl = new JLabel();
        ImageIcon icon = new ImageIcon(imageURL);
        jl.setIcon(icon);
        jd.add(new JScrollPane(jl));
        final JFileChooser chooser = getSaveImageChooser();
        JPanel jp = new JPanel();
        JButton jb = new JButton(getMessage(""btn_save_as""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int returnVal = chooser.showSaveDialog(jd);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    String fileName = file.getPath();
                    String ext = StringUtil.getLowerExtension(fileName);
                    if (!""png"".equals(ext)) {
                        fileName += "".png"";
                        file = new File(fileName);
                    }
                    boolean doIt = true;
                    if (file.exists()) {
                        int i = JOptionPane.showConfirmDialog(jd, getMessage(""warn_file_exist""));
                        if (i != JOptionPane.YES_OPTION) doIt = false;
                    } else if (!file.getParentFile().exists()) {
                        doIt = file.getParentFile().mkdirs();
                    }
                    if (doIt) {
                        FileChannel src = null;
                        FileChannel dest = null;
                        try {
                            src = new FileInputStream(imageURL.getPath()).getChannel();
                            dest = new FileOutputStream(fileName).getChannel();
                            src.transferTo(0, src.size(), dest);
                        } catch (FileNotFoundException e1) {
                            warn(jd, getMessage(""err_no_source_file""));
                        } catch (IOException e2) {
                            warn(jd, getMessage(""err_output_target""));
                        } finally {
                            try {
                                if (src != null) src.close();
                            } catch (IOException e1) {
                            }
                            try {
                                if (dest != null) dest.close();
                            } catch (IOException e1) {
                            }
                            src = null;
                            dest = null;
                        }
                    }
                }
            }
        });
        jp.add(jb);
        jb = new JButton(getMessage(""btn_close""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jd.dispose();
            }
        });
        jp.add(jb);
        jd.add(jp);
        jd.pack();
        setCentral(jd);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"title,imageURL,jd,jl,icon,chooser,jp,jb,e,returnVal,file,fileName,ext,i,doIt,src,dest","title:0.06473994255065918,imageURL:0.039895713329315186,jd:0.17301011085510254,jl:-0.04119640588760376,icon:-0.016975581645965576,chooser:-0.002990126609802246,jp:-0.04436403512954712,jb:-0.1274082064628601,e:-0.010869383811950684,returnVal:0.014423191547393799,file:0.012027978897094727,fileName:-0.042369186878204346,ext:-0.004121005535125732,i:0.002504885196685791,doIt:-0.004350125789642334,src:-0.034121692180633545,dest:-0.03198510408401489,",1,2,0,"jd:jd,title:url,",0,Greedy,201,0.08739020427068074,replace,[]
847,"    public static boolean copyFile(final File src, final File dst) {
        boolean result = false;
        FileChannel inChannel = null;
        FileChannel outChannel = null;
        synchronized (FileUtil.DATA_LOCK) {
            try {
                inChannel = new FileInputStream(src).getChannel();
                outChannel = new FileOutputStream(dst).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                result = true;
            } catch (IOException e) {
            } finally {
                if (inChannel != null && inChannel.isOpen()) {
                    try {
                        inChannel.close();
                    } catch (IOException e) {
                    }
                }
                if (outChannel != null && outChannel.isOpen()) {
                    try {
                        outChannel.close();
                    } catch (IOException e) {
                    }
                }
            }
        }
        return result;
    }
 <SPLIT>     public static ArrayList<String> loadURLToStrings(URL url, int maxLines, String userAgent, int timeout) throws IOException {
        URLConnection connection = url.openConnection();
        if (userAgent != null && userAgent.trim().length() > 0) {
            connection.setRequestProperty(""User-Agent"", userAgent);
        } else {
            connection.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (compatible; astrominer/1.0;)"");
        }
        if (timeout > 0) {
            connection.setConnectTimeout(timeout);
        }
        connection.connect();
        return loadURLToStrings(connection, maxLines);
    }
",158,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,src,dst,inChannel,outChannel,result",,0,0,0,,0,GA,2756,1.1822269399960836,failed,[]
848,"    @Override
    public void alterar(Disciplina t) throws Exception {
        PreparedStatement stmt = null;
        String sql = ""UPDATE disciplina SET nm_disciplina = ?, cod_disciplina = ? WHERE id_disciplina = ?"";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setString(1, t.getNomeDisciplina());
            stmt.setString(2, t.getCodDisciplina());
            stmt.setInt(3, t.getIdDisciplina());
            stmt.executeUpdate();
            conexao.commit();
            int id_disciplina = t.getIdDisciplina();
            excluirTopico(t.getIdDisciplina());
            for (Topico item : t.getTopicos()) {
                criarTopico(item, id_disciplina);
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",143,,LABEL_0,LABEL_0,LABEL_0,-1,"alterar,t,stmt,sql,id_disciplina,item",,4,11,0,,0,GA,2937,1.281846078236898,failed,"[';alterar = 0', ';xt = 0']"
849,"    protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
 <SPLIT>     private void createButtonCopyToClipboard() {
        buttonCopyToClipboard = new Button(shell, SWT.PUSH);
        buttonCopyToClipboard.setText(""Co&py to Clipboard"");
        buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));
        buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {

            @Override
            public void widgetSelected(final SelectionEvent event) {
                IOUtils.copyToClipboard(Version.getEnvironmentReport());
            }
        });
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getFileContentAsString,filePath,encoding,testURL,input,sw",,3,11,0,,0,GA,2581,1.1018136064211528,failed,"[';getFileContentAsString = 0', ';filePath = 0', ';getFileContentAsStr = 0', ';getFilecontentInString = 0', ';getFileContentFromString = 0']"
850,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",109,,LABEL_1,LABEL_1,LABEL_1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest",,5,13,0,,0,GA,2191,0.9884040395418803,failed,"[';getSecureHash = 0', ';print(getSecureHash)', ';getSecureAddress = 0', ';getSessionHash = 0', '; getSecureAddress = 0', ';getSessionAddress = 0']"
851,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, ""SJIS""));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, ""UTF8""));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println(""An I/O Exception Occurred: "" + e);
        }
    }
",97,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel",,5,14,0,,0,GA,2265,1.0185372829437256,failed,[]
852,"    public void removeRealm(final List<Integer> realmIds) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));
                    Iterator<Integer> iter = realmIds.iterator();
                    int realmId;
                    while (iter.hasNext()) {
                        realmId = iter.next();
                        psImpl.setInt(1, realmId);
                        psImpl.executeUpdate();
                        cmDB.removeRealm(realmId);
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
 <SPLIT>     private InputStream getPageStream(String query) throws MalformedURLException, IOException {
        URL url = new URL(baseUrl + query + ""&rhtml=no"");
        URLConnection connection = url.openConnection();
        connection.connect();
        InputStream in = connection.getInputStream();
        BufferedInputStream bis = new BufferedInputStream(in);
        return bis;
    }
",202,,LABEL_0,LABEL_0,LABEL_0,-1,"removeRealm,realmIds,psImpl,iter,realmId",,3,7,0,,0,GA,2442,1.188428270816803,failed,"[';removeRealm = 0', ';print(removeRealm)', ';realmIds = 0', ';psImpl = 0', ';iter = 0', ';realmId = 0', ';removeLocalM = 0', ';deleteRealam = 0', ';removeSchems = 0', ';line = 0', ';sort = 0', ';iterator = 0', ';realmOffset = 0']"
853,"    public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",318,"    public PTask release(PTask socket, SyrupConnection  conn) throws Exception {
        PreparedStatement os = null;
        ResultSet success = null;
        try {
            os =  conn.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            os.setString(1, socket.key());
            success = os.executeQuery();
             conn.commit();
            if (success.next()) {
                String file = success.getString(""worker"");
                InputStream iri = null;
                try {
                    Object string = new URL(file).getContent();
                    if (string instanceof InputStream) {
                        iri = (InputStream) string;
                        byte[] boot = new byte[256];
                        int bl = iri.read(boot);
                        String work = new String(boot, 0, bl);
                        if (work.equals(socket.key())) {
                            return socket;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (iri != null) {
                        iri.close();
                    }
                }
                PreparedStatement S8 = null;
                S8 =  conn.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                S8.setString(1, socket.key());
                S8.executeUpdate();
                socket = sqlImpl().queryFunctions().readPTask(socket.key(),  conn);
                sqlImpl().loggingFunctions().log(socket.key(), LogEntry.STOPPED,  conn);
                 conn.commit();
            }
        } finally {
             conn.rollback();
            close(success);
        }
        return socket;
    }
;stop = 0",LABEL_0,LABEL_0,LABEL_0,1,"stop,task,con,s,result,url,i,b,bb,ll,k,s2","stop:-0.0007179379463195801,task:-0.0002608299255371094,con:0.000406801700592041,s:-0.00045436620712280273,result:-0.0004951953887939453,url:0.014457464218139648,i:0.0012368559837341309,b:0.0003527402877807617,bb:0.0002688765525817871,ll:-0.0003218650817871094,k:4.76837158203125e-07,s2:0.013843238353729248,",12,48,0,"url:file,s2:S8,i:iri,con: conn,b:string,bb:boot,k:work,task:socket,ll:bl,s:os,result:success,stop:release,",0,Greedy,629,0.33584776719411213,inesrt,[';stop = 0']
854,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",227,"    public static void saveAppachmentPart(Context connection, Part upload, Attachment localattrollment, long AccountId) throws MessagingException, IOException {
        if (upload.getBody() != null) {
            long addachmentUrl = localattrollment.mId;
            InputStream url = upload.getBody().getInputStream();
            File  saveIns = AttachmentProvider.getAttachmentDirectory(connection, AccountId);
            if (!saveIn.exists()) {
                 saveIns.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(connection, AccountId, addachmentUrl);
            saveAs.createNewFile();
            FileOutputStream string = new FileOutputStream(saveAs);
            long opensize = IOUtils.copy(url, string);
            url.close();
            string.close();
            String contentIristring = AttachmentProvider.getAttachmentUri(AccountId, addachmentUrl).toString();
            localattrollment.pCount = opensize;
            localattrollment.mResourceUci = contentIristring;
            ContentValues auc = new ContentValues();
            auc.put(AttachmentColumns.SIZE, opensize);
            auc.put(AttachmentColumns.CONTENT_URI, contentIristring);
            Uri  url = ContentUris.withAppendedId(Attachment.CONTENT_URI, addachmentUrl);
            connection.getContentResolver().update( url, auc, null, null);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri","saveAttachmentBody:-0.009188950061798096,context:0.026529014110565186,part:0.0005080699920654297,localAttachment:-0.009604334831237793,accountId:-0.002080559730529785,attachmentId:0.0021439194679260254,in:0.0026214122772216797,saveIn:-0.006115555763244629,saveAs:-0.05166584253311157,out:-0.015802443027496338,copySize:-0.013251066207885742,contentUriString:0.016383826732635498,mSize:-0.0007593631744384766,mContentUri:0.0019120573997497559,cv:0.054199934005737305,uri:0.006252884864807129,",15,43,0,"cv:auc,context:connection,contentUriString:contentIristring,uri: url,in:url,attachmentId:addachmentUrl,mContentUri:mResourceUci,part:upload,mSize:pCount,accountId:AccountId,saveIn: saveIns,saveAttachmentBody:saveAppachmentPart,localAttachment:localattrollment,copySize:opensize,out:string,",0,Greedy,711,0.3928820530573527,replace,[]
855,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",70,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,inputFile,outputFile,in,out,c",,4,11,0,,0,GA,2553,1.2830309351285298,failed,"[';copy = 0', ';inputFile = 0', ';outputFile = 0', ';replace = 0', ';cmp = 0', '; inputDir = 0', ';outputDir = 0', '; outputDir = 0']"
856,"    private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static boolean isCodebaseDownloadable(Properties p) {
        class CodebaseData {

            String file;

            boolean success = true;
        }
        String codebase = p.getProperty(""java.rmi.server.codebase"", null);
        if (null == codebase) {
            if (logger.isDebugEnabled()) logger.debug(""java.rmi.server.codebase = null (return false)"");
            return false;
        }
        try {
            URL cbUrl = new URL(codebase);
            String protocol = cbUrl.getProtocol();
            String filename = cbUrl.getFile();
            if (logger.isDebugEnabled()) {
                logger.debug(""Verifying java.rmi.server.codebase setting(s)..."");
                logger.debug(""Codebase = "" + cbUrl.toString());
            }
            if (protocol.equals(""http"")) {
                if (filename.indexOf(""http"") == -1) {
                    try {
                        int size = cbUrl.openConnection().getContentLength();
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : OK"");
                        return true;
                    } catch (IOException e) {
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : FAIL"");
                        return false;
                    } finally {
                        if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    }
                } else {
                    ArrayList files = new ArrayList();
                    StringTokenizer st = new StringTokenizer(codebase);
                    URL url = null;
                    String part = null;
                    CodebaseData data = null;
                    while (st.hasMoreTokens()) {
                        part = st.nextToken();
                        url = new URL(part);
                        data = new CodebaseData();
                        try {
                            int len = url.openConnection().getContentLength();
                            if (len == -1) {
                                data.success = false;
                                data.file = part;
                            } else {
                                data.file = part;
                            }
                        } catch (IOException e) {
                            data.success = false;
                        }
                        files.add(data);
                    }
                    String wrong = null;
                    CodebaseData codebaseData = null;
                    boolean allOK = true;
                    int errorFiles = 0;
                    for (int i = 0; i < files.size(); i++) {
                        codebaseData = (CodebaseData) files.get(i);
                        if (!codebaseData.success) {
                            wrong += "" "" + codebaseData.file;
                            ++errorFiles;
                            allOK = false;
                        }
                        if (logger.isDebugEnabled()) logger.debug((i + 1) + "". Checking "" + codebaseData.file + "" : "" + (codebaseData.success ? ""OK"" : ""FAIL""));
                    }
                    if (errorFiles == 0) {
                        if (logger.isDebugEnabled()) logger.debug(""All entries can be downloaded successfully!"");
                    } else {
                        logger.error(errorFiles + "" of "" + files.size() + "" entries can *not* be downloaded successfully!"");
                    }
                    if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    if (allOK) {
                        return true;
                    } else {
                        return false;
                    }
                }
            } else if (protocol.equalsIgnoreCase(""file"")) {
                if (logger.isDebugEnabled()) logger.debug(""'file' protocol not supported for JSF"");
            }
        } catch (MalformedURLException e) {
            logger.debug(e.getMessage());
            return false;
        }
        return false;
    }
",522,,LABEL_0,LABEL_0,LABEL_0,-1,"addQDInformation,qdDate,qdFile,_qdFileDate,ii,info,_qdValue,reader,urlName,url,stream,file,line,_qdDate,pos,projectNum,value",,15,70,0,,0,GA,7776,3.5462541778882346,failed,[]
857,"    public static int save(byte[] bytes, File outputFile) throws IOException {
        InputStream in = new ByteArrayInputStream(bytes);
        outputFile.getParentFile().mkdirs();
        OutputStream out = new FileOutputStream(outputFile);
        try {
            return IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
            try {
                out.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
            try {
                in.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
        }
    }
 <SPLIT>     private void _checkLanguagesFiles(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {
        List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);
        for (int i = 0; i < list.size(); i++) {
            long langId = ((Language) list.get(i)).getId();
            try {
                String filePath = getGlobalVariablesPath() + ""cms_language_"" + langId + "".properties"";
                boolean copy = false;
                File from = new java.io.File(filePath);
                if (!from.exists()) {
                    from.createNewFile();
                    copy = true;
                }
                String tmpFilePath = getTemporyDirPath() + ""cms_language_"" + langId + ""_properties.tmp"";
                File to = new java.io.File(tmpFilePath);
                if (!to.exists()) {
                    to.createNewFile();
                    copy = true;
                }
                if (copy) {
                    FileChannel srcChannel = new FileInputStream(from).getChannel();
                    FileChannel dstChannel = new FileOutputStream(to).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                }
            } catch (IOException e) {
                Logger.error(this, ""_checkLanguagesFiles:Property File Copy Failed "" + e, e);
            }
        }
    }
",120,,LABEL_1,LABEL_1,LABEL_1,-1,"save,bytes,outputFile,in,out",,5,14,0,,0,GA,2213,0.8321486234664917,failed,"[';save = 0', ';bytes = 0', ';outputFile = 0', ';copy = 0', ';print(copy)', ';Copy = 0', ';file = 0', ';put = 0', ';address = 0', ';slice = 0', ';its = 0', ';bps = 0', ';data = 0', ';objects = 0', ';ips = 0', ';frames = 0', ';Bytes = 0', ';pins = 0', ';bits = 0', ';codes = 0', ';OutputDirectory = 0', '; outputDirectory = 0', ';targetDir = 0', ';copy = 0', ';is = 0', ';file = 0', ';isin = 0', ';copy = 0', ';outer = 0']"
858,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",839,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm url, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachresses = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] ants = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(ants[0], ants[1]);
                            attachresses.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachresses.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String connection = """";
                if (fields.get(""taBody"") != null) {
                    connection = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    connection = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), connection, attachresses, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doExecute,mapping,form,request,response,errors,isMultipart,mailInstance,fields,attachments,items,iter,item,aux,part,baos,body,preferencesInstance","doExecute:-0.014151930809020996,mapping:0.07546395063400269,form:0.15714174509048462,request:0.6052727103233337,response:0.03837305307388306,errors:0.10209894180297852,isMultipart:0.008002817630767822,mailInstance:0.06138920783996582,fields:0.5623016357421875,attachments:0.11868643760681152,items:0.07753556966781616,iter:0.11158555746078491,item:0.42472726106643677,aux:0.11617761850357056,part:0.27126455307006836,baos:0.09243571758270264,body:0.13956010341644287,preferencesInstance:0.03828155994415283,",4,15,0,"request:request,fields:fields,item:item,part:part,form:url,body:connection,attachments:attachresses,aux:ants,",0,Greedy,519,0.23316010236740112,replace,[]
859,"    public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
 <SPLIT>     public String digest(String message) throws NoSuchAlgorithmException, EncoderException {
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
        messageDigest.update(message.getBytes());
        byte[] raw = messageDigest.digest();
        byte[] chars = new Base64().encode(raw);
        return new String(chars);
    }
",77,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,pass,md",,3,6,0,,0,GA,1375,0.4967830499013265,failed,[]
860,"    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",69,"    public static void copyFileByMIF(File url, File connection) throws IOException {
        FileChannel  sourceStream = new FileInputStream(url).getChannel();
        FileChannel destionConnection = new FileOutputStream(connection).getChannel();
         sourceStream.transferTo(0,  sourceStream.size(), destionConnection);
         sourceStream.close();
        destionConnection.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFileByNIO,in,out,sourceChannel,destinationChannel","copyFileByNIO:-0.00028067827224731445,in:-0.0001984238624572754,out:0.0007656216621398926,sourceChannel:-0.0001137852668762207,destinationChannel:-3.4332275390625e-05,",5,12,0,"out:connection,destinationChannel:destionConnection,sourceChannel: sourceStream,in:url,copyFileByNIO:copyFileByMIF,",0,Greedy,200,0.07151312828063965,replace,[]
861,"        public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                InputStream is = con.getInputStream();
                BufferedReader rd = new BufferedReader(new InputStreamReader(is));
                String line;
                StringBuffer response = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    response.append(line);
                    response.append('\n');
                    lastIteraction = System.currentTimeMillis();
                }
                rd.close();
                is.close();
                con.disconnect();
                result = response.toString();
                finish = true;
            } catch (Throwable e) {
                this.e = e;
            }
        }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",199,,LABEL_0,LABEL_0,LABEL_0,-1,"run,con,encodedPassword,encoder,is,rd,line,response,lastIteraction,result,e",,10,25,0,,0,GA,4959,1.9214599092801412,failed,"[';run = 0', ';print(run)', ';con = 0', ';encodedPassword = 0', ';encoder = 0', ';print(line)', ';response = 0', ';print(get)', ';serv = 0', ';IS = 0', ';Is = 0', ';rss = 0', ';rx = 0', ';output = 0', ';lf = 0', ';Line = 0', ';print(Line)', ';err = 0', ';print(err)', ';error = 0', ';string = 0', ';print(string)', ';output = 0', ';print(output)', ';resource = 0', ';feed = 0', ';more = 0', ';serv = 0', ';uri = 0', ';report = 0', ';message = 0', ';json = 0', ';version = 0', ';memory = 0', ';value = 0', ';last_time = 0', '; lastiteraction = 0', '; last_time = 0', ';lastiterative = 0', ';lastInteraction = 0', ';last_it = 0', ';lastiteraction = 0', ';lastiterit = 0', '; last_it = 0', ';lastIntertime = 0', ';lastinterative = 0', ';lastInterit = 0', '; lastiterative = 0', ';print( lastiterative)', ';lastinterit = 0', ';print(lastinterit)', ';lastintertime = 0', ';print(lastintertime)', ';lastInterative = 0', ';last_ative = 0']"
862,"    public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException {
        final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath);
        final Multimap<String, String> proteins = HashMultimap.create();
        for (final String query : queries) {
            HttpURLConnection connection = null;
            try {
                final String encoded = URLEncoder.encode(query.trim(), ""UTF-8"");
                final URL url = new URL(String.format(__urlTempl2, encoded, taxon));
                connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(__connTimeout);
                connection.setReadTimeout(__readTimeout);
                connection.setRequestProperty(""Connection"", ""close"");
                connection.connect();
                final InputStream stream = connection.getInputStream();
                final Document doc = parser.parse(stream);
                final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET);
                if (nodes != null) {
                    final int n = nodes.getLength();
                    for (int i = 0; i < n; i++) {
                        final Node node = nodes.item(i);
                        proteins.put(node.getTextContent().trim(), query.trim());
                    }
                }
            } catch (final Exception ex) {
                continue;
            } finally {
                if (connection != null) connection.disconnect();
            }
        }
        return proteins;
    }
 <SPLIT>     private String retrieveTemplate() throws Exception {
        if (cachedTemplate == null) {
            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());
            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            final StringBuilder result = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
            in.close();
            cachedTemplate = result.toString();
        }
        return cachedTemplate;
    }
",309,,LABEL_0,LABEL_0,LABEL_0,-1,"getProteins,queries,taxon,parser,xpe,proteins,query,connection,encoded,url,stream,doc,nodes,n,i,node",,10,29,0,,0,GA,7089,2.6934073607126874,failed,"[';getProteins = 0', ';print(getProteins)', ';queries = 0', ';taxon = 0', ';parser = 0', ';xpe = 0', ';query = 0', '; taxonomy = 0', ';string = 0', ';document = 0', ';string = 0', ';key = 0', ';expression = 0', ';type = 0', ';call = 0']"
863,"    public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
 <SPLIT>     public String downloadAndOpen(JProgressBar bar) {
        long size = 0;
        try {
            size = photo.getSize();
        } catch (ServiceException ex) {
            ex.printStackTrace();
        }
        try {
            bar.setMaximum((int) size);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        bar.setValue(0);
        image = new File(""TMP/"" + photo.getTitle().getPlainText());
        try {
            if (!image.exists()) {
                image.createNewFile();
                image.deleteOnExit();
                URL url = null;
                BufferedOutputStream fOut = null;
                try {
                    url = new URL(photo.getMediaContents().get(0).getUrl());
                    InputStream html = null;
                    html = url.openStream();
                    fOut = new BufferedOutputStream(new FileOutputStream(image));
                    byte[] buffer = new byte[32 * 1024];
                    int bytesRead = 0;
                    int in = 0;
                    while ((bytesRead = html.read(buffer)) != -1) {
                        in += bytesRead;
                        bar.setValue(in);
                        fOut.write(buffer, 0, bytesRead);
                    }
                    html.close();
                    fOut.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return image.getAbsolutePath();
    }
",318,,LABEL_0,LABEL_0,LABEL_0,-1,"stop,task,con,s,result,url,i,b,bb,ll,k,s2",,9,37,0,,0,GA,5766,2.304085063934326,failed,"[';stop = 0', ';print(stop)', ';task = 0', ';con = 0', ';s = 0', ';result = 0', ';remove = 0', ';find = 0', ';delete = 0', ';status = 0', ';address = 0']"
864,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
",250,"    public static void doVersionScan(View view) {
        view.showWaitCursor();
        try {
            URL impl = new URL(jEdit.getProperty(""version-check.url""));
            InputStream file = impl.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(file));
            String write;
            String download = null;
            String image = null;
            while ((write = bin.readLine()) != null) {
                if (write.startsWith("".version"")) download = write.substring(8).trim(); else if (write.startsWith("".build"")) image = write.substring(6).trim();
            }
            bin.close();
            if (download != null && image != null) {
                if (jEdit.getBuild().compareTo(image) < 0) newVersionAvailable(view, download, impl); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.001273810863494873,view:-0.020235180854797363,url:-0.006307661533355713,in:-0.00029724836349487305,bin:-0.009231328964233398,line:-0.0046343207359313965,version:0.00895237922668457,build:0.00461047887802124,",6,20,0,"version:download,build:image,in:file,doVersionCheck:doVersionScan,line:write,url:impl,",0,Greedy,295,0.10719781716664632,replace,[]
865,"    public static String checksum(URL url, String algorithm) {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance(algorithm);
        } catch (Exception ex) {
            throw new RuntimeException(""Could not create an instance of MessageDigest"", ex);
        }
        byte[] bytes = new byte[4 * 1024];
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                int nBytesRead = 0;
                while ((nBytesRead = in.read(bytes)) > 0) {
                    messageDigest.update(bytes, 0, nBytesRead);
                }
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(""Could not read message digest for: "" + url.toExternalForm() + "" using algorithm: "" + algorithm);
        }
        byte[] checksumValue = messageDigest.digest();
        return digestAsString(checksumValue);
    }
 <SPLIT>     public int scrapeForIsbns(URL url) {
        int matches = 0;
        Pattern p = Pattern.compile(""ISBN-10:</strong>\\s*(\\w{10})"");
        Matcher m;
        for (int i = 0; i < RETRIES; i++) {
            try {
                InputStream in = url.openStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String str;
                while ((str = br.readLine()) != null) {
                    m = p.matcher(str);
                    while (m.find()) {
                        matches++;
                        outputIsbns.put(m.group(1));
                        logger.debug(""Got ISBN: "" + m.group(1));
                    }
                }
                break;
            } catch (ConnectException e) {
                logger.warn(""Connection attempt "" + i + "" failed, trying again. Max retries: "" + RETRIES);
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e1) {
                }
            } catch (IOException e) {
                logger.error(""Error reading URL stream"", e);
            } catch (InterruptedException e) {
                logger.error(""Interrupted while calling put(Object E)"", e);
            }
        }
        return matches;
    }
",174,,LABEL_0,LABEL_0,LABEL_0,-1,"checksum,url,algorithm,messageDigest,bytes,in,nBytesRead,checksumValue",,4,11,0,,0,GA,3586,1.7554582715034486,failed,[]
866,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,2364,1.045147212346395,failed,"[';copy = 0', ';sourceFile = 0', ';destinationFile = 0', ';siteDirectory = 0', ';destinatedDir = 0', ';destinationDir = 0']"
867,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     public void run() {
        long time = System.currentTimeMillis();
        logger.info(""Version: "" + version);
        String hostname = properties.getProperty(""mercuriushost"");
        String protocol = properties.getProperty(""mercuriusprotocol"");
        String port = properties.getProperty(""mercuriusport"");
        String path = properties.getProperty(""mercuriuspath"");
        String action = properties.getProperty(""mercuriusaction"");
        logger.info(""Getting Timex Data --- "" + getTimeDifferent(time));
        String xml = timexfrmk.getUnsynchedSessionsXMLFormat();
        logger.info(""Done getting Timex Data --- "" + getTimeDifferent(time));
        if (timexfrmk.getSessionCount() > 0) {
            try {
                logger.info(""Sending Timex Data to Mercurius --- "" + getTimeDifferent(time));
                String data = URLEncoder.encode(""action"", ""UTF-8"") + ""="" + URLEncoder.encode(action, ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""data"", ""UTF-8"") + ""="" + URLEncoder.encode(xml, ""UTF-8"");
                if (isAdminFeedKeySet()) {
                    data += ""&"" + URLEncoder.encode(""adminfeedkey"", ""UTF-8"") + ""="" + URLEncoder.encode(adminfeedkey, ""UTF-8"");
                    logger.debug(""Using adminfeedkey to authenticate"");
                } else {
                    Authenticator.setDefault(new CustomAuthenticator(user, password));
                    logger.debug(""Using user/pwd to authenticate"");
                }
                String u = protocol + ""://"" + hostname + "":"" + port + path;
                logger.debug(""Posting xml data to: "" + u);
                URL url = new URL(u);
                URLConnection conn = url.openConnection();
                conn.setRequestProperty(""User-Agent"", ""TimexMercurius/"" + version);
                conn.setDoOutput(true);
                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(data);
                wr.flush();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                StringBuffer s = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    s.append(line);
                }
                if (s.length() > 0) {
                    logger.debug(s.toString());
                    if (s.toString().indexOf(""Result:"") != -1) {
                        logger.info(s.toString().substring(s.toString().indexOf(""Result:"")));
                        if (s.toString().indexOf(""Result: Successful"") != -1) {
                            timexfrmk.updateSessionsStatus();
                        }
                    } else {
                        logger.error(s.toString());
                    }
                } else {
                    logger.info(""No data returned"");
                }
                wr.close();
                rd.close();
            } catch (MalformedURLException e) {
                logger.error(e);
                logger.trace(e, e);
            } catch (IOException e) {
                logger.error(e);
                logger.trace(e, e);
            } catch (Exception e) {
                logger.error(e);
                logger.trace(e, e);
            }
        } else {
            logger.info(""There is nothing to send.  Everything has already been synchronized"");
        }
        timexfrmk.close();
        logger.info(""Done!!! Total Time: "" + getTimeDifferent(time));
    }
",697,,LABEL_0,LABEL_1,,-4,"f,in,cbuf,read,totRead,out,i",,,,0,,0,Greedy,1,0.0010298728942871095,,[]
868,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",113,,LABEL_1,LABEL_1,LABEL_1,-1,"CopyTo,dest,in,out,c",,5,16,0,,0,GA,2180,0.8841934521993001,failed,[]
869,"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
 <SPLIT>     public void resolvePlugins() {
        try {
            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsFile = new File(cacheDir, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginURL = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream is = pluginURL.openStream();
                OutputStream os = FileUtils.openOutputStream(pluginsFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(os);
                IOUtils.closeQuietly(is);
            }
            resolvePlugins(pluginsFile.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",195,,LABEL_0,LABEL_0,LABEL_0,-1,"toMd5,str,messageDigest,byteArray,md5StrBuff,i",,6,23,0,,0,GA,3007,1.5488394061724344,failed,"[';toMd5 = 0', ';print(toMd5)', ';str = 0', ';print(str)', ';print(md5StrBuff)', ';txt = 0', ';print(txt)', ';arr = 0', ';print(arr)', ';kr = 0', ';print(kr)', ';f = 0', ';print(f)', ';print(stri)', ';messageDested = 0', ';I = 0', ';print(io)', ';xi = 0', ';print(xi)', ';print(ix)']"
870,"    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
 <SPLIT>     public PhoneSetImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phonesetMap = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        lineCount++;
        while (line != null) {
            if (!line.startsWith(""***"")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
",191,"    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection serverConn = serverURL.openConnection();
        serverConn.setDoInput(true);
        serverConn.setDoOutput(true);
        serverConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(serverConn.getOutputStream());
        String write = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        write += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(write);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(serverConn.getInputStream()));
        StringBuffer resource = new StringBuffer();
        String type;
        while (null != ((type = input.readLine()))) {
            resource.append(type);
        }
        wr.close();
        input.close();
        return resource.toString();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"issueCommandToServer,command,changeCapsule,urlConn,wr,content,input,response,str","issueCommandToServer:-0.0021200180053710938,command:-0.004548370838165283,changeCapsule:-0.0059926509857177734,urlConn:-0.0345035195350647,wr:-0.11408358812332153,content:-0.020333588123321533,input:-0.03722083568572998,response:-0.027770400047302246,str:-0.01525789499282837,",4,15,0,"issueCommandToServer:issueCommandToServer,command:command,changeCapsule:changeCapsule,str:type,content:write,response:resource,urlConn:serverConn,",0,Greedy,320,0.1598966638247172,replace,[]
871,"                    public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
 <SPLIT>     private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",802,"                    public void handle() {
                        FileChannel sourceConnection, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream connection = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte ctx[] = new byte[1024];
                                int url;
                                while ((url = in.read(ctx)) > 0) {
                                    connection.write(ctx, 0, url);
                                }
                                in.close();
                                connection.finish();
                                connection.close();
                                ctx = null;
                                in = null;
                                connection = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                sourceConnection = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(sourceConnection, 0, sourceConnection.size());
                                sourceConnection.close();
                                destChannel.close();
                                sourceConnection = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",LABEL_1,LABEL_1,LABEL_0,1,"handle,srcChannel,destChannel,destOutFile,destOutFileCompressed,out,in,buf,len","handle:0.07674217224121094,srcChannel:0.25155359506607056,destChannel:0.10617762804031372,destOutFile:-0.006837069988250732,destOutFileCompressed:0.554542064666748,out:0.2805825471878052,in:0.22471201419830322,buf:0.287483274936676,len:0.2519626021385193,",4,18,0,"destOutFileCompressed:destOutFileCompressed,buf:ctx,out:connection,len:url,srcChannel:sourceConnection,",0,Greedy,313,0.1381120522816976,replace,[]
872,"    private static String encodeMd5(String key) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            String result = toHexString(bytes);
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }
",81,,LABEL_0,LABEL_0,LABEL_0,-1,"encodeMd5,key,md,bytes,result",,5,11,0,,0,GA,2305,0.9256793697675069,failed,[';print(git)']
873,"    private void modifyProperty(String valueID, String value, Long userID) throws JspTagException {
        Property property = new Property(new Long(valueID), userID);
        String newValue = value;
        System.out.println(property.getName());
        if (property.getName().equals(""Password"")) {
            try {
                MessageDigest crypt = MessageDigest.getInstance(""MD5"");
                crypt.update(value.getBytes());
                byte digest[] = crypt.digest();
                StringBuffer hexString = new StringBuffer();
                for (int i = 0; i < digest.length; i++) {
                    hexString.append(hexDigit(digest[i]));
                }
                newValue = hexString.toString();
                crypt.reset();
            } catch (NoSuchAlgorithmException e) {
                System.err.println(""jspShop: Could not get instance of MD5 algorithm. Please fix this!"" + e.getMessage());
                e.printStackTrace();
                throw new JspTagException(""Error crypting password!: "" + e.getMessage());
            }
        }
        property.setValue(newValue);
    }
 <SPLIT>     public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
",210,,LABEL_1,LABEL_1,LABEL_1,-1,"modifyProperty,valueID,value,userID,property,newValue,crypt,digest,hexString,i",,9,26,0,,0,GA,4546,1.859982152779897,failed,"[';modifyProperty = 0', ';print(modifyProperty)', ';valueID = 0', ';value = 0', ';userID = 0', ';property = 0', ';newValue = 0', ';digest = 0', ';hexString = 0', ';modifyString = 0', ';ValueIndex = 0']"
874,"    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
 <SPLIT>     public List<String> extractUrlList(String url) throws IOException, XPathExpressionException {
        LinkedList<String> list = new LinkedList<String>();
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        Tidy tidy = new Tidy();
        tidy.setErrout(new NullPrintWriter());
        Document doc = tidy.parseDOM(conn.getInputStream(), null);
        int len = conn.getContentLength();
        if (len <= 0) len = 32000;
        ByteArrayOutputStream bout = new ByteArrayOutputStream(len);
        PrintStream ps = new PrintStream(bout);
        tidy.pprint(doc, ps);
        ps.flush();
        String content = bout.toString();
        Pattern p = Pattern.compile(""(http://[\\w\\\\\\./=&?;-]+)"");
        Matcher m = p.matcher(content);
        while (m.find()) {
            list.add(m.group());
        }
        return list;
    }
",112,,LABEL_0,LABEL_0,LABEL_0,-1,"writeFileToFile,fin,fout,append,inChannel,outChannel",,6,16,0,,0,GA,2562,1.2930279572804768,failed,"[';writeFileToFile = 0', ';fin = 0', ';fout = 0', ';append = 0', ';inChannel = 0', ';writeFileAndFile = 0', ';writeFileToChannel = 0', ';writeFilesToFile = 0', ';writeFileAndChannel = 0', ';string = 0', ';except = 0', ';printf = 0']"
875,"    public static String getContent(HttpUriRequest request) throws Exception {
        StringBuffer sb = new StringBuffer();
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setConnectionTimeout(httpParams, 30000);
        HttpConnectionParams.setSoTimeout(httpParams, 50000);
        HttpResponse response = client.execute(request);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""), 8192);
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            reader.close();
        }
        return sb.toString();
    }
 <SPLIT>     @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEnCours;
            int i = 0;
            informations = """";
            while ((ligneEnCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        version = ligneEnCours;
                        break;
                    case 1:
                        url = ligneEnCours;
                        break;
                    default:
                        informations += ligneEnCours + '\n';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
",151,"    public static String getContent(HttpUriRequest request) throws Exception {
        StringBuffer sb = new StringBuffer();
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setConnectionTimeout(httpParams, 30000);
        HttpConnectionParams.setSoTimeout(httpParams, 50000);
        HttpResponse server = client.execute(request);
        HttpEntity entity = server.getEntity();
        if (entity != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""), 8192);
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""
"");
            }
            reader.close();
        }
        return sb.toString();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"getContent,request,sb,client,httpParams,response,entity,reader,line","getContent:-5.9485435485839844e-05,request:0.0051413774490356445,sb:-0.021042466163635254,client:0.003952980041503906,httpParams:-0.0034374594688415527,response:0.03768002986907959,entity:0.0037140250205993652,reader:-0.03732246160507202,line:0.001513361930847168,",1,2,0,"response:server,",0,Greedy,58,0.029328266779581707,replace,[]
876,"    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",263,"    public static void BuildCredit(File debFile, File configInfo, File dataFile) throws IOException {
        long set = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>
"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, set, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, set, configInfo.length());
        FileInputStream control = new FileInputStream(configInfo);
        byte[] url = new byte[1024];
        while (true) {
            int read = control.read(url);
            if (read == -1) break;
            deb.write(url, 0, read);
        }
        control.close();
        endFileEntry(deb, configInfo.length());
        startFileEntry(deb, DATA_NAME, set, dataFile.length());
        FileInputStream li = new FileInputStream(dataFile);
        while (true) {
            int read = li.read(url);
            if (read == -1) break;
            deb.write(url, 0, read);
        }
        li.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"buildDeb,debFile,controlFile,dataFile,now,deb,control,buffer,read,data","buildDeb:-0.0002593398094177246,debFile:-0.0025159716606140137,controlFile:0.0006515979766845703,dataFile:0.003930389881134033,now:0.0006623268127441406,deb:0.011095046997070312,control:-0.017702698707580566,buffer:0.003808319568634033,read:0.006875932216644287,data:0.0012163519859313965,",5,17,0,"deb:deb,read:read,dataFile:dataFile,buffer:url,data:li,now:set,controlFile:configInfo,buildDeb:BuildCredit,",0,Greedy,468,0.20417414903640746,replace,[]
877,"    private void moveFile(File orig, File target) throws IOException {
        byte buffer[] = new byte[1000];
        int bread = 0;
        FileInputStream fis = new FileInputStream(orig);
        FileOutputStream fos = new FileOutputStream(target);
        while (bread != -1) {
            bread = fis.read(buffer);
            if (bread != -1) fos.write(buffer, 0, bread);
        }
        fis.close();
        fos.close();
        orig.delete();
    }
 <SPLIT>     public static final String calculate(File f) {
        MessageDigest md;
        BufferedReader rd;
        StringBuffer buffer = new StringBuffer("""");
        try {
            rd = new BufferedReader(new FileReader(f));
            md = MessageDigest.getInstance(""SHA"");
            String line = """";
            while ((line = rd.readLine()) != null) buffer.append(line);
            md.update(buffer.toString().getBytes());
            byte[] digest = md.digest();
            String result = """";
            for (byte b : digest) result += String.format(""%h"", b & 0xFF);
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            return """";
        }
    }
",103,,LABEL_0,LABEL_0,LABEL_0,-1,"moveFile,orig,target,buffer,bread,fis,fos",,7,20,0,,0,GA,2688,1.066429853439331,failed,[]
878,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     private void insertService(String table, int type) {
        Connection con = null;
        log.info("""");
        log.info(""正在生成"" + table + ""的服务。。。。。。。"");
        try {
            con = DODataSource.getDefaultCon();
            con.setAutoCommit(false);
            Statement stmt = con.createStatement();
            Statement stmt2 = con.createStatement();
            String serviceUid = UUIDHex.getInstance().generate();
            DOBO bo = DOBO.getDOBOByName(table);
            List props = new ArrayList();
            StringBuffer mainSql = null;
            String name = """";
            String l10n = """";
            String prefix = table;
            String serviceType = ""null"";
            Boolean isNew = null;
            switch(type) {
                case 1:
                    name = prefix + ""_insert"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = getInsertSql(props, table);
                    serviceType = ""8"";
                    isNew = Boolean.TRUE;
                    break;
                case 2:
                    name = prefix + ""_update"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = this.getModiSql(props, table);
                    serviceType = ""7"";
                    isNew = Boolean.FALSE;
                    break;
                case 3:
                    DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);
                    if (property == null || property.getColName() == null) {
                        return;
                    }
                    name = prefix + ""_delete"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""delete from "").append(table).append("" where "").append(this.keyCol).append("" = ?"");
                    serviceType = ""5"";
                    break;
                case 4:
                    property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);
                    if (property == null || property.getColName() == null) {
                        return;
                    }
                    name = prefix + ""_browse"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""select * from "").append(table).append("" where "").append(this.keyCol).append("" = ?"");
                    serviceType = ""10"";
                    break;
                case 5:
                    serviceType = ""2"";
                    name = prefix + ""_list"";
                    l10n = name;
                    mainSql = new StringBuffer(""select * from "").append(table);
            }
            this.setParaLinkBatch(props, stmt2, serviceUid, isNew);
            StringBuffer aSql = new StringBuffer(""insert into DO_Service(objuid,l10n,name,bouid,mainSql,type) values("").append(""'"").append(serviceUid).append(""','"").append(l10n).append(""','"").append(name).append(""','"").append(this.getDOBOUid(table)).append(""','"").append(mainSql).append(""',"").append(serviceType).append("")"");
            log.info(""Servcice's Sql:"" + aSql.toString());
            stmt.executeUpdate(aSql.toString());
            stmt2.executeBatch();
            con.commit();
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException ex2) {
                ex2.printStackTrace();
            }
            ex.printStackTrace();
        } finally {
            try {
                if (!con.isClosed()) {
                    con.close();
                }
            } catch (SQLException ex1) {
                ex1.printStackTrace();
            }
        }
    }
",250,,LABEL_0,LABEL_0,LABEL_0,-1,"doVersionCheck,view,url,in,bin,line,version,build",,8,29,0,,0,GA,3812,1.9605986952781678,failed,[]
879,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",188,"    public void UploadDir(File targetFilename, String outputDir) throws IOException {
        System.out.println(""Uploading "" + targetFilename.getName() + "" to "" + outputDir);
        File outputFile = new File(outputDir);
        if (outputDir.endsWith(""/"")) {
            outputFile = new File(outputFile, targetFilename.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (targetFilename.renameTo(outputFile) == false) {
            InputStream url = new FileInputStream(targetFilename);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] url = new byte[16384];
            int bytes = -1;
            while ((bytes = url.read(url)) != -1) out.write(url, 0, bytes);
            url.close();
            out.close();
        }
    }
;print(uploadFile);inputFile = 0;print(inputFile);targetFile = 0;print(targetFile);print(outputFile);in = 0;print(in);print(out);line = 0;print(line);bytes = 0;print(bytes);processFile = 0;print(processFile);UploadDir = 0;print(UploadDir); uploadDir = 0;uploadFiles = 0;uploadDir = 0;processDir = 0;print(processDir);sourceType = 0;InputDir = 0; inputType = 0;targetFiles = 0;initialFilename = 0;InputType = 0;targetfile = 0;targetDir = 0; targetFiles = 0;sourceDir = 0;externalPath = 0;TargetLine = 0;TargetPath = 0;targetPlace = 0;targetFiles = 0; targetDir = 0;TargetDir = 0;targetDir = 0;TargetName = 0;outputDir = 0; targetLine = 0;targetLine = 0; targetFiles = 0; targetQueue = 0;currentFolder = 0;targetFiles = 0; targetDirectory = 0;outputDir = 0;pin = 0;i = 0;input = 0;id = 0;ini = 0;con = 0;inner = 0;sub = 0;s = 0;pass = 0;is = 0;issue = 0;again = 0;err = 0;ac = 0;cin = 0;din = 0;ex = 0;copy = 0;user = 0;lock = 0;by = 0;report = 0;outer = 0;net = 0;table = 0;co = 0;error = 0;point = 0",LABEL_1,LABEL_1,LABEL_1,1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes","uploadFile:-0.008061587810516357,inputFile:-0.004506230354309082,targetFile:-0.0014129281044006348,outputFile:0.003369927406311035,in:-0.0004075169563293457,out:0.003262758255004883,line:0.0022965073585510254,bytes:0.003320932388305664,",5,16,0,"outputFile:outputFile,bytes:bytes,out:out,line:url,in:url,targetFile:outputDir,inputFile:targetFilename,uploadFile:UploadDir,",0,Greedy,895,0.42473171949386596,inesrt,"[';print(uploadFile)', ';inputFile = 0', ';print(inputFile)', ';targetFile = 0', ';print(targetFile)', ';print(outputFile)', ';in = 0', ';print(in)', ';print(out)', ';line = 0', ';print(line)', ';bytes = 0', ';print(bytes)', ';processFile = 0', ';print(processFile)', ';UploadDir = 0', ';print(UploadDir)', '; uploadDir = 0', ';uploadFiles = 0', ';uploadDir = 0', ';processDir = 0', ';print(processDir)', ';sourceType = 0', ';InputDir = 0', '; inputType = 0', ';targetFiles = 0', ';initialFilename = 0', ';InputType = 0', ';targetfile = 0', ';targetDir = 0', '; targetFiles = 0', ';sourceDir = 0', ';externalPath = 0', ';TargetLine = 0', ';TargetPath = 0', ';targetPlace = 0', ';targetFiles = 0', '; targetDir = 0', ';TargetDir = 0', ';targetDir = 0', ';TargetName = 0', ';outputDir = 0', '; targetLine = 0', ';targetLine = 0', '; targetFiles = 0', '; targetQueue = 0', ';currentFolder = 0', ';targetFiles = 0', '; targetDirectory = 0', ';outputDir = 0', ';pin = 0', ';i = 0', ';input = 0', ';id = 0', ';ini = 0', ';con = 0', ';inner = 0', ';sub = 0', ';s = 0', ';pass = 0', ';is = 0', ';issue = 0', ';again = 0', ';err = 0', ';ac = 0', ';cin = 0', ';din = 0', ';ex = 0', ';copy = 0', ';user = 0', ';lock = 0', ';by = 0', ';report = 0', ';outer = 0', ';net = 0', ';table = 0', ';co = 0', ';error = 0', ';point = 0']"
880,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",200,"    public static boolean decodeStringTofile(final String outfp, final String outfull) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfp)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfull));
            final byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                out.write(url, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.006838560104370117,infile:0.0005725622177124023,outfile:0.000265657901763916,in:-0.0036667585372924805,out:-0.0021612048149108887,buffer:-0.0003275871276855469,read:-0.0029064416885375977,success:-0.010204792022705078,",4,8,0,"decodeFileToFile:decodeStringTofile,infile:outfp,outfile:outfull,buffer:url,",0,Greedy,135,0.05500104029973348,replace,[]
