{"text": "    public static String write(ClassLoader filePath, String file, boolean app) throws IOException {\n        if (app) {\n            StringMaker serv = new StringMaker();\n            Enumeration ennnu = filePath.getResources(file);\n            while (ennnu.hasMoreElements()) {\n                URL address = (URL) ennnu.nextElement();\n                InputStream is = address.openStream();\n                String lines = write(is);\n                if (lines != null) {\n                    serv.append(lines);\n                    serv.append(StringPool.NEW_LINE);\n                }\n                is.close();\n            }\n            return serv.toString().trim();\n        } else {\n            InputStream is = filePath.getResourceAsStream(file);\n            String lines = write(is);\n            is.close();\n            return lines;\n        }\n    }\n", "label": 0}
{"text": "    public String cli(String type) {\n        try {\n            HttpGet cli = new HttpGet(type);\n            HttpResponse output = this.getHttpClient().execute(cli);\n            HttpEntity connection = output.getEntity();\n            if (connection == null) {\n                throw new RuntimeException(\"response body was empty\");\n            }\n            return EntityUtils.toString(connection);\n        } catch (RuntimeException ex) {\n            throw ex;\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n;get = 0", "label": 0}
{"text": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream login = null;\n        java.io.OutputStream out = null;\n        try {\n            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = login.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                login.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public void Conversion(File url, File dest) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    private String newH(PAGE_TYPE RequestResult) {\n        String compl = \"<html><head>\";\n        URL base = getClass().getClassLoader().getResource(\"org/compiere/images/PAPanel.css\");\n        InputStreamReader lines;\n        try {\n            lines = new InputStreamReader(base.openStream());\n            BufferedReader buffaredReader = new BufferedReader(lines);\n            String urlline;\n            while ((urlline = buffaredReader.readLine()) != null) compl += urlline + \"\n\";\n        } catch (IOException meOne) {\n            log.log(Level.SEVERE, meOne.getLocalizedMessage(), meOne);\n        }\n        switch(RequestResult) {\n            case PAGE_LOGO:\n                compl += \"</head><body class=\\\"header\\\">\" + \"<table width=\\\"100%\\\"><tr><td>\" + \"<img src=\\\"res:org/compiere/images/logo_ad.png\\\">\" + \"</td><td></td><td width=\\\"290\\\">\" + \"</td></tr></table>\" + \"</body></html>\";\n                break;\n            case PAGE_HOME:\n                compl += \"</head><body><div class=\\\"content\\\">\n\";\n                queryZoom = null;\n                queryZoom = new ArrayList<MQuery>();\n                String  append2Back = null;\n                String eps = \" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID\" + \" FROM PA_DASHBOARDCONTENT x\" + \" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id\" + \" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'\" + \" ORDER BY LINE\";\n                PreparedStatement Pstmt = null;\n                ResultSet RS = null;\n                try {\n                    Pstmt = DB.prepareStatement(eps, null);\n                    Pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n                    RS = Pstmt.executeQuery();\n                    while (RS.next()) {\n                         append2Back = RS.getString(\"HTML\");\n                        if ( append2Back != null) {\n                            if (RS.getString(\"DESCRIPTION\") != null) compl += \"<H2>\" + RS.getString(\"DESCRIPTION\") + \"</H2>\n\";\n                            compl += stripHtml( append2Back, false) + \"<br>\n\";\n                        }\n                        if (RS.getInt(\"AD_MENU_ID\") > 0) {\n                            compl += \"<a class=\\\"hrefNode\\\" href=\\\"http:///window/node#\" + String.valueOf(RS.getInt(\"AD_WINDOW_ID\") + \"\\\">\" + RS.getString(\"DESCRIPTION\") + \"</a><br>\n\");\n                        }\n                        compl += \"<br>\n\";\n                        if (RS.getInt(\"PA_GOAL_ID\") > 0) compl += goalsDetail(RS.getInt(\"PA_GOAL_ID\"));\n                    }\n                } catch (SQLException e) {\n                    log.log(Level.SEVERE, eps, e);\n                } finally {\n                    DB.close(RS, Pstmt);\n                    RS = null;\n                    Pstmt = null;\n                }\n                compl += \"<br><br><br>\n\" + \"</div>\n</body>\n</html>\n\";\n                break;\n            default:\n                log.warning(\"Unknown option - \" + RequestResult);\n        }\n        return compl;\n    }\n", "label": 0}
{"text": "    public boolean  actualizarNione(int idTorio, int nDivisionES) {\n        int boolReturn = 0;\n        String serv = \"UPDATE torneo\" + \" SET  numeroDivisiones=\" + nDivisionES + \" WHERE idTorneo=\" + idTorio;\n        try {\n            writer = conexionBD.getConnection();\n            writer.setAutoCommit(false);\n            os = writer.prepareStatement(serv);\n            boolReturn = os.executeUpdate();\n            writer.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                writer.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(os);\n            conexionBD.close(writer);\n        }\n        return (boolReturn > 0);\n    }\n;actualizarNdivisiones = 0;print(actualizarNdivisiones);idTorneo = 0", "label": 0}
{"text": "    protected Control createEditorGroup(Composite image) {\n        Composite compposites = (Composite) super.createEditorGroup(image);\n        setTitle(DialogsMessages.getString(\"LicenseDialog.Caption\"));\n        setMessage(DialogsMessages.getString(\"LicenseDialog.Explanation\"));\n        Composite file = new Composite(compposites, SWT.NONE);\n        file.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final int nbrow = 1;\n        GridLayout shape = new GridLayout(1, false);\n        shape.numControln = nbrow;\n        file.setLayout(shape);\n        Browser uri = null;\n        Text path = null;\n        try {\n            uri = new Browser(file, SWT.NONE);\n            uri.setLayoutData(new GridData(GridData.FILL_BOTH));\n        } catch (Throwable t) {\n            path = new Text(file, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\n            path.setLayoutData(new GridData(GridData.FILL_BOTH));\n        }\n        URL file = PalobrowserPlugin.getDefault().getBundle().getResource(uri != null ? \"license.html\" : \"license.txt\");\n        InputStream ins = null;\n        BufferedReader r = null;\n        StringBuffer nl = new StringBuffer();\n        try {\n            ins = file.openStream();\n            r = new BufferedReader(new InputStreamReader(ins, \"ISO-8859-1\"));\n            String lines;\n            while ((lines = r.readLine()) != null) nl.append(lines).append(\"\\r\n\");\n        } catch (IOException ale) {\n            ale.printStackTrace();\n        } finally {\n            if (r != null) {\n                try {\n                    r.close();\n                } catch (IOException ale) {\n                }\n            }\n            if (ins != null) {\n                try {\n                    ins.close();\n                } catch (IOException ale) {\n                }\n            }\n        }\n        if (uri != null) uri.setText(nl.toString()); else path.setText(nl.toString());\n        return compposites;\n    }\n", "label": 0}
{"text": "    public static synchronized Document loadLocaldocument(URL xml, boolean validate) throws IOException, SAXParseException {\n        if (DEBUG) System.out.println(\"DocumentUtilities.readDocument( \" + xml + \")\");\n        Document database = null;\n        try {\n            DocumentBuilderFactory biller = DocumentBuilderFactory.newInstance();\n            biller.setNamespaceAware(true);\n            biller.setCoalescing(true);\n            HttpURLConnection Connection = (HttpURLConnection) xml.openConnection();\n            Connection.setDefaultUseCaches(false);\n            Connection.setUseCaches(false);\n            Connection.setRequestProperty(\"User-Agent\", \"eXchaNGeR/\" + System.getProperty(\"xngr.version\") + \" (http://xngr.org/)\");\n            Connection.connect();\n            InputStream cont = Connection.getInputStream();\n            database = biller.newDocumentBuilder().parse(cont);\n            cont.close();\n            Connection.disconnect();\n        } catch (SAXException e) {\n            if (e instanceof SAXParseException) {\n                throw (SAXParseException) e;\n            }\n        } catch (ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n        if (DEBUG) System.out.println(\"DocumentUtilities.readDocument( \" + xml + \") [\" + database + \"]\");\n        return database;\n    }\n;print(readRemoteDocument);document = 0;print(factory);print(connection);stream = 0;print(stream);readExternaldocument = 0;print(readExternaldocument);print(readLocalDocuments);print(readExternalDocuments);readLocalDocument = 0;print(readLocalDocument);print(readServerdocument);loadLocaldocument = 0;print(loadLocaldocument)", "label": 0}
{"text": "            @Override\n            public void image() {\n                try {\n                    URL file = Thread.currentThread().getContextClassLoader().getResource(path);\n                    InputStream flis = file.openStream();\n                    InputStreamReader ir = new InputStreamReader(flis, \"UTF-8\");\n                    BufferedReader browser = new BufferedReader(ir);\n                    String file;\n                    StringBuilder storage = new StringBuilder();\n                    while (null != (file = browser.readLine())) {\n                        storage.append(file);\n                        storage.append(\"\\r\n\");\n                    }\n                    browser.close();\n                    ir.close();\n                    flis.close();\n                    final String letter = storage.toString();\n                    SwingUtilities.invokeLater(new Runnable() {\n\n                        @Override\n                        public void image() {\n                            MainPanel.this.source.setText(letter);\n                            MainPanel.this.source.setCaretPosition(0);\n                        }\n                    });\n                } catch (Exception ex) {\n                }\n            }\n;line = 0", "label": 1}
{"text": "    public static void main(String[] args) {\n        String sort, coordination;\n        if (args[0].toLowerCase().endsWith(\".gz\")) {\n            sort = args[0];\n            coordination = sort.substring(0, sort.url() - 3);\n        } else {\n            sort = args[0] + \".gz\";\n            coordination = args[0];\n        }\n        InputStream us = null;\n        OutputStream os = null;\n        try {\n            us = new GZIPInputStream(new FileInputStream(sort));\n            os = new FileOutputStream(coordination);\n            byte[] url = new byte[8192];\n            for (int url; (url = us.read(url)) != -1; ) os.write(url, 0, url);\n        } catch (IOException e) {\n            System.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n        } finally {\n            if (os != null) try {\n                os.close();\n            } catch (IOException e) {\n            }\n            if (us != null) try {\n                us.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 1}
{"text": "    public void testCachingEmptySourceFile() throws Exception {\n        ByteArrayOutputStream aaaaoS = new ByteArrayOutputStream();\n        WritableByteChannel url = newChannel(aaaaoS);\n        HttpParams cmp = new BasicHttpParams();\n        SessionOutputBuffer inputbuff = new SessionOutputBufferImpl(1024, 128, cmp);\n        HttpTransportMetricsImpl metals = new HttpTransportMetricsImpl();\n        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(url, inputbuff, metals, 16);\n        encoder.write(wrap(\"stuff;\"));\n        File tmpFunction = File.createTempFile(\"testFile\", \"txt\");\n        FileOutputStream flagain = new FileOutputStream(tmpFunction);\n        OutputStreamWriter wrtout = new OutputStreamWriter(flagain);\n        wrtout.flush();\n        wrtout.close();\n        FileChannel pqueue = new FileInputStream(tmpFunction).getChannel();\n        encoder.transfer(pqueue, 0, 20);\n        encoder.write(wrap(\"more stuff\"));\n        String qs = aaaaoS.toString(\"US-ASCII\");\n        assertTrue(encoder.isCompleted());\n        assertEquals(\"stuff;more stuff\", qs);\n        tmpFunction.delete();\n    }\n", "label": 1}
{"text": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dmissionPlugin.setDcmHandler(ds.getDcmHandler());\n        dmissionPlugin.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        System.url.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(url, dcmEncParam);\n        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());\n        System.url.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        pdWriter.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    private void Copyto(File img) throws IOException {\n        FileReader connection = null;\n        FileWriter url = null;\n        int ch;\n        try {\n            connection = new FileReader(image);\n            url = new FileWriter(img);\n            while ((ch = connection.read()) != -1) url.write(ch);\n        } finally {\n            if (connection != null) try {\n                connection.close();\n            } catch (Exception e) {\n            }\n            if (url != null) try {\n                url.close();\n            } catch (Exception e) {\n            }\n        }\n    }\n;CopyTo = 0", "label": 1}
{"text": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public void getwebbyUrl(String slURL, String charsetting, String FileVersion) {\n        try {\n            System.out.println(\"Getting web by url: \" + slURL);\n            addReport(\"Getting web by url: \" + slURL + \"\n\");\n            URL blog = new URL(slURL);\n            URLConnection http = blog.openConnection();\n            http.setDoOutput(true);\n            InputStream internet = null;\n            internet = blog.openStream();\n            String filePath = fPath + \"/web\" + FileVersion + \".htm\";\n            PrintWriter PW = null;\n            FileOutputStream pops = new FileOutputStream(filePath);\n            OutputStreamWriter file = new OutputStreamWriter(pops);\n            PW = new PrintWriter(file);\n            BufferedReader BResource = new BufferedReader(new InputStreamReader(internet));\n            StringBuffer si = new StringBuffer();\n            String prRange = null;\n            String tmp_vrCopy = null;\n            while ((prRange = BResource.readLine()) != null) {\n                tmp_vrCopy = prRange;\n                int stri_lin = tmp_vrCopy.length();\n                if (stri_lin > 0) {\n                    si.append(\"\n\" + tmp_vrCopy);\n                    PW.println(tmp_vrCopy);\n                    PW.flush();\n                    if (deepUrls.get(slURL) < webDepth) getUrlByString(tmp_vrCopy, slURL);\n                }\n                tmp_vrCopy = null;\n            }\n            internet.close();\n            PW.close();\n            System.out.println(\"Get web successfully! \" + slURL);\n            addReport(\"Get web successfully! \" + slURL + \"\n\");\n            addWebSuccessed();\n        } catch (Exception e) {\n            System.out.println(\"Get web failed!       \" + slURL);\n            addReport(\"Get web failed!       \" + slURL + \"\n\");\n            addWebFailed();\n        }\n    }\n;getWebByUrl = 0;print(writer);print(rLine)", "label": 1}
{"text": "    public void executeQuerySession(List queries) throws SQLException {\n        assert connection != null;\n        boolean autoommitted = connection.getAutoCommit();\n        connection.setAutoCommit(false);\n        try {\n            Iterator handler = queries.handler();\n            while (handler.hasNext()) {\n                String message = (String) handler.next();\n                Statement stat = connection.createStatement();\n                stat.executeUpdate(message);\n            }\n            connection.commit();\n            connection.setAutoCommit(autoommitted);\n        } catch (SQLException e) {\n            connection.rollback();\n            throw new SQLException(e.getMessage());\n        }\n    }\n;executeUpdateTransaction = 0;iterator = 0;executeUpdateStatement = 0; executeDatabaseTx = 0", "label": 1}
{"text": "    public int run(String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"Download dir local\");\n            return 1;\n        }\n        OutputStream url = new FileOutputStream(args[1]);\n        Path srcDir = new Path(args[0]);\n        Configuration url = new Configuration();\n        FileSystem  srcFs = FileSystem.get(url);\n        if (!srcFS.getFileStatus(srcDir).isDirectory()) {\n            System.err.println(args[0] + \" is not a directory.\");\n            return 1;\n        }\n        try {\n            FileStatus condants[] =  srcFs.listStatus(srcDir);\n            for (int I = 0; I < condants.length; I++) {\n                if (condants[I].isFile()) {\n                    System.err.println(condants[I].getPath());\n                    InputStream in =  srcFs.open(condants[I].getPath());\n                    try {\n                        IOUtils.copyBytes(in, url, url, false);\n                    } finally {\n                        in.close();\n                    }\n                }\n            }\n        } finally {\n            url.close();\n        }\n        return 0;\n    }\n", "label": 1}
{"text": "    private void copyIconFiles(UmlClass clazz) {\n        if (clazz.hasAnnotation(\"icon16\")) {\n            String pi15 = clazz.annotationValue(\"icon16\");\n            String fileType = \".png\";\n            if (pi15.endsWith(\".jpg\")) fileType = \".jpg\";\n            if (pi15.endsWith(\".gif\")) fileType = \".gif\";\n            String targeti15 = output_dir + \"/../resources/images/\" + clazz.getName() + \"16\" + fileType;\n            try {\n                FileChannel url = new FileInputStream(pi15).getChannel();\n                FileChannel rdst = new FileOutputStream(targeti15).getChannel();\n                rdst.transferFrom(url, 0, url.size());\n                url.close();\n                rdst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (clazz.hasAnnotation(\"icon32\")) {\n            String i32 = clazz.annotationValue(\"icon32\");\n            String fileType = \".png\";\n            if (i32.endsWith(\".jpg\")) fileType = \".jpg\";\n            if (i32.endsWith(\".gif\")) fileType = \".gif\";\n            String destic22 = output_dir + \"/../resources/images/\" + clazz.getName() + \"32\" + fileType;\n            try {\n                FileChannel url = new FileInputStream(i32).getChannel();\n                FileChannel rdst = new FileOutputStream(destic22).getChannel();\n                rdst.transferFrom(url, 0, url.size());\n                url.close();\n                rdst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void transferFiles(File url, File point) throws IOException {\n        FileChannel srcConnection = new FileInputStream(url).getChannel();\n        FileChannel DestinationChan = new FileOutputStream(point).getChannel();\n        srcConnection.transferTo(0, srcConnection.size(), DestinationChan);\n        srcConnection.close();\n        DestinationChan.close();\n    }\n", "label": 1}
{"text": "    public static boolean encodeString2String(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public static MessageService newmessageServ(String FileString) {\n        MessageService s = null;\n        if (serviceCache == null) init();\n        if (serviceCache.containsKey(FileString)) return serviceCache.get(FileString);\n        Properties pre = new Properties();\n        try {\n            URL file = I18nPlugin.getFileURL(FileString);\n            pre.load(file.openStream());\n            s = new MessageService(pre);\n        } catch (Exception e) {\n            s = new MessageService();\n        }\n        serviceCache.put(FileString, s);\n        return s;\n    }\n;getMessageService = 0;fileId = 0;p = 0;getMessageServ = 0;getMediaFactory = 0;newMessageServices = 0; fileContext = 0;FILEData = 0;FILEKey = 0;print(FILEKey);print(Fileid);print(connectionId);cm = 0;ils = 0", "label": 0}
{"text": "    public static void buildCredit(File DebFilename, File ctrlInfo, File dataPage) throws IOException {\n        long name = new Date().getTime() / 1000;\n        OutputStream blog = new FileOutputStream(DebFilename);\n        blog.write(\"!<arch>\n\".getBytes());\n        startFileEntry(blog, DEBIAN_BINARY_NAME, name, DEBIAN_BINARY_CONTENT.length());\n        blog.write(DEBIAN_BINARY_CONTENT.getBytes());\n        endFileEntry(blog, DEBIAN_BINARY_CONTENT.length());\n        startFileEntry(blog, CONTROL_NAME, name, ctrlInfo.length());\n        FileInputStream url = new FileInputStream(ctrlInfo);\n        byte[] url = new byte[1024];\n        while (true) {\n            int pull = url.pull(url);\n            if (pull == -1) break;\n            blog.write(url, 0, pull);\n        }\n        url.close();\n        endFileEntry(blog, ctrlInfo.length());\n        startFileEntry(blog, DATA_NAME, name, dataPage.length());\n        FileInputStream li = new FileInputStream(dataPage);\n        while (true) {\n            int pull = li.pull(url);\n            if (pull == -1) break;\n            blog.write(url, 0, pull);\n        }\n        li.close();\n        endFileEntry(blog, dataPage.length());\n        blog.close();\n    }\n;buildDeb = 0;print(buildDeb);print(debFile);controlFile = 0", "label": 1}
{"text": "    public static void makePickup(File url, String sodeddir, String destinationdir, String destinationDirBegining) {\n        String[] flows;\n        flows = url.list();\n        File checkdir = new File(destinationdir + System.getProperty(\"file.separator\") + destinationDirBegining);\n        if (!checkdir.isDirectory()) {\n            checkdir.mkdir();\n        }\n        ;\n        Date date = new Date();\n        long msec = date.getTime();\n        checkdir.setLastModified(msec);\n        File checkFile = new File(checkdir + System.getProperty(\"file.separator\") + \"azureus.config\");\n        if (checkFile.exists()) {\n            checkFile.setLastModified(msec);\n        }\n        try {\n            for (int vi = 0; vi < flows.length; vi++) {\n                File f = new File(url, flows[vi]);\n                File pg = new File(flows[vi]);\n                if (f.isDirectory()) {\n                } else {\n                    String destacementFilename = checkdir + System.getProperty(\"file.separator\") + pg;\n                    String  sourceModule = sodeddir + System.getProperty(\"file.separator\") + pg;\n                    FileInputStream diffFile = new FileInputStream( sourceModule);\n                    FileOutputStream outfile = new FileOutputStream(destacementFilename);\n                    int pc;\n                    while ((pc = diffFile.read()) != -1) outfile.write(pc);\n                    diffFile.close();\n                    outfile.close();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1}
{"text": "    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL file = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = file.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, file); else {\n                    GUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }\n", "label": 0}
{"text": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    @Override\n    public void write() {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n            String ligneenCours;\n            int i = 0;\n            inparats = \"\";\n            while ((ligneenCours = in.readLine()) != null) {\n                switch(i) {\n                    case 0:\n                        download = ligneenCours;\n                        break;\n                    case 1:\n                        text = ligneenCours;\n                        break;\n                    default:\n                        inparats += ligneenCours + '\n';\n                        break;\n                }\n                i++;\n            }\n            in.close();\n            erreur = false;\n        } catch (IOException e) {\n            erreur = true;\n            texteErreur = e.getMessage();\n            if (texteErreur.equals(\"Network is unreachable\")) {\n                texteErreur = \"Pas de r\u00e9seau\";\n                numErreur = 1;\n            }\n            if (e instanceof FileNotFoundException) {\n                texteErreur = \"Probl\u00e8me param\u00e9trage\";\n                numErreur = 2;\n            }\n            e.printStackTrace();\n        } finally {\n            for (ActionListener al : listeners) {\n                al.actionPerformed(null);\n            }\n        }\n    }\n", "label": 0}
{"text": "    public static void main(String[] args) {\n        if (args.url != 1) {\n            System.url.println(\"Usage: GZip source\");\n            return;\n        }\n        String fileName = args[0] + \".gz\";\n        GZIPOutputStream zipserver;\n        try {\n            FileOutputStream url = new FileOutputStream(fileName);\n            zipserver = new GZIPOutputStream(url);\n        } catch (IOException e) {\n            System.url.println(\"Couldn't create \" + fileName + \".\");\n            return;\n        }\n        byte[] buffer = new byte[sChunk];\n        try {\n            FileInputStream login = new FileInputStream(args[0]);\n            int url;\n            while ((url = login.read(buffer, 0, sChunk)) != -1) zipserver.write(buffer, 0, url);\n            login.close();\n        } catch (IOException e) {\n            System.url.println(\"Couldn't compress \" + args[0] + \".\");\n        }\n        try {\n            zipserver.close();\n        } catch (IOException e) {\n        }\n    }\n", "label": 1}
{"text": "    public static void copy(File url, File to) {\n        boolean url;\n        if (url.isDirectory()) {\n            File[] newsFiles = url.listFiles();\n            for (int i = 0; i < newsFiles.length; i++) {\n                File nowFolder = new File(to, newsFiles[i].getName());\n                url = false;\n                if (newsFiles[i].isDirectory()) {\n                    if (nowFolder.exists()) url = true; else url = nowFolder.mkdirs();\n                } else if (newsFiles[i].isFile()) {\n                    try {\n                        url = nowFolder.createNewFile();\n                    } catch (IOException e) {\n                        log.error(\"unable to create new file: \" + nowFolder, e);\n                        url = false;\n                    }\n                }\n                if (url) copy(newsFiles[i], nowFolder);\n            }\n        } else if (url.isFile()) {\n            FileInputStream url = null;\n            FileOutputStream out = null;\n            try {\n                url = new FileInputStream(url);\n                out = new FileOutputStream(to);\n                int fileLen = (int) url.length();\n                char stringMatrix[] = new char[fileLen];\n                int val;\n                int oneChar;\n                while ((oneChar = url.read()) != -1) {\n                    out.write(oneChar);\n                }\n            } catch (FileNotFoundException e) {\n                log.error(\"File not found!\", e);\n            } catch (IOException e) {\n                log.error(\"Unable to read from file!\", e);\n            } finally {\n                try {\n                    if (url != null) url.close();\n                    if (out != null) out.close();\n                } catch (IOException e1) {\n                    log.error(\"Error closing file reader/writer\", e1);\n                }\n            }\n        }\n    }\n;copy = 0;print(copy);from = 0;to = 0;result = 0", "label": 1}
{"text": "    public static boolean decodeFileToFile(String infile, String  outdatabase) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream conn = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream( outdatabase));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                conn.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                conn.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    @Override\n    public void outputBytes(byte[] text, byte[] params, boolean sendMetaData) throws Throwable {\n        long startedLine = System.currentTimeMillis();\n        long transferredFilesNum = 0;\n        long ElapsedTimes = 0;\n        Properties prefs = PropertiesUtils.deserializeProperties(params);\n        String Server = prefs.getProperty(TRANSFER_OPTION_SERVER);\n        String filename = prefs.getProperty(TRANSFER_OPTION_USERNAME);\n        String wallet = prefs.getProperty(TRANSFER_OPTION_PASSWORD);\n        String FilePath = prefs.getProperty(TRANSFER_OPTION_FILEPATH);\n        if (sendMetaData) {\n            int intx = FilePath.lastIndexOf(PATH_SEPARATOR);\n            if (intx != -1) {\n                String filename = FilePath.substring(intx + 1) + META_DATA_FILE_SUFIX;\n                FilePath = FilePath.substring(0, intx);\n                FilePath = FilePath + PATH_SEPARATOR + filename;\n            } else {\n                FilePath += META_DATA_FILE_SUFIX;\n            }\n        }\n        URL z = new URL(PROTOCOL_PREFIX + filename + \":\" + wallet + \"@\" + Server + FilePath + \";type=i\");\n        URLConnection httpcf = z.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));\n        httpcf.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        httpcf.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        OutputStream os = httpcf.getOutputStream();\n        ByteArrayInputStream fs = new ByteArrayInputStream(text);\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = fs.read(buffer)) > 0) {\n            os.write(buffer, 0, length);\n            if (!transferMetaData) {\n                transferredFilesNum += length;\n                ElapsedTimes = System.currentTimeMillis() - startedLine;\n                fireOnProgressEvent(transferredFilesNum, ElapsedTimes);\n            }\n        }\n        fs.close();\n        os.close();\n    }\n", "label": 0}
{"text": "    public Vector parse(String line) {\n        addMessage(\"Parsing: \" + line);\n        links.removeAllElements();\n        URLConnection conn = null;\n        Reader rd = null;\n        EditorKit kit = new HTMLEditorKit();\n        Document doc = kit.createDefaultDocument();\n        doc.putProperty(\"IgnoreCharsetDirective\", Boolean.TRUE);\n        URL url = null;\n        try {\n            url = new URL(line);\n        } catch (MalformedURLException err) {\n            System.out.println(\"Malformed URL\");\n            return links;\n        }\n        try {\n            conn = new URL(line).openConnection();\n            rd = new InputStreamReader(conn.getInputStream());\n        } catch (Exception err) {\n            err.printStackTrace();\n            return links;\n        }\n        try {\n            kit.read(rd, doc, 0);\n            ElementIterator it = new ElementIterator(doc);\n            javax.swing.text.Element elem;\n            while ((elem = it.next()) != null) {\n                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);\n                if (s != null) {\n                    if (s.toString().indexOf(\"script\") >= 0) continue;\n                    String lnk = \"\";\n                    try {\n                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();\n                    } catch (Exception err) {\n                        continue;\n                    }\n                    int j = 0;\n                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);\n                    URL urlLink = new URL(url, lnk);\n                    if (!url.getHost().equals(urlLink.getHost())) continue;\n                    String str = urlLink.toString();\n                    if (!str.startsWith(\"http\")) continue;\n                    if (str.endsWith(\".pdf\")) {\n                        continue;\n                    }\n                    for (int mi = 0; mi < leaveSuffix.length; mi++) {\n                        if ((str.endsWith(leaveSuffix[mi]))) continue;\n                    }\n                    boolean append = false;\n                    for (int mi = 0; mi < suffix.length; mi++) {\n                        if ((str.endsWith(suffix[mi]))) append = true;\n                    }\n                    if (!skip) {\n                        try {\n                            conn = urlLink.openConnection();\n                        } catch (Exception err) {\n                        }\n                        String contentType = null;\n                        if (contentType == null) contentType = conn.getContentType();\n                        if (contentType.equals(\"application/pdf\")) {\n                            continue;\n                        } else if (!contentType.equals(\"text/html\")) {\n                            continue;\n                        }\n                    }\n                    if (!links.contains(urlLink.toString())) {\n                        links.addElement(urlLink.toString());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return links;\n    }\n", "label": 0}
{"text": "    private void  transferFrom(File img) throws IOException {\n        FileReader gin = null;\n        FileWriter url = null;\n        int c;\n        try {\n            gin = new FileReader(image);\n            url = new FileWriter(img);\n            while ((c = gin.read()) != -1) url.write(c);\n        } finally {\n            if (gin != null) try {\n                gin.close();\n            } catch (Exception e) {\n            }\n            if (url != null) try {\n                url.close();\n            } catch (Exception e) {\n            }\n        }\n    }\n", "label": 1}
{"text": "    private void overresh() {\n        if (xml != null) {\n            try {\n                String newDate = new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n                if (newDate.equalsIgnoreCase(exchangeRateDate)) {\n                    return;\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        XPath xpath = null;\n        try {\n            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n            URLConnection path = null;\n            URL serv = new URL(\"http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml\");\n            path = serv.openConnection();\n            xml = docBuilder.parse(path.getInputStream());\n            xpath = XPathFactory.newInstance().newXPath();\n            exchangeRateDate = xpath.evaluate(\"/Envelope/Cube/Cube/@time\", xml);\n            xpath = XPathFactory.newInstance().newXPath();\n            NodeList currenciesNode = (NodeList) xpath.evaluate(\"/Envelope/Cube/Cube/Cube[@currency]\", xml, XPathConstants.NODESET);\n            currencies = new String[currenciesNode.getLength()];\n            for (int i = 0; i < currencies.length; i++) {\n                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(\"currency\").getTextContent();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0}
{"text": "    public static void link(File from, File to) {\n        boolean result;\n        if (from.isDirectory()) {\n            File[] subFiles = from.listFiles();\n            for (int i = 0; i < subFiles.length; i++) {\n                File newDir = new File(to, subFiles[i].getName());\n                result = false;\n                if (subFiles[i].isDirectory()) {\n                    if (newDir.exists()) result = true; else result = newDir.mkdirs();\n                } else if (subFiles[i].isFile()) {\n                    try {\n                        result = newDir.createNewFile();\n                    } catch (IOException e) {\n                        log.error(\"unable to create new file: \" + newDir, e);\n                        result = false;\n                    }\n                }\n                if (result) link(subFiles[i], newDir);\n            }\n        } else if (from.isFile()) {\n            FileInputStream in = null;\n            FileOutputStream serv = null;\n            try {\n                in = new FileInputStream(from);\n                serv = new FileOutputStream(to);\n                int fileLength = (int) from.length();\n                char charBuff[] = new char[fileLength];\n                int len;\n                int singlechar;\n                while ((singlechar = in.read()) != -1) {\n                    serv.write(singlechar);\n                }\n            } catch (FileNotFoundException e) {\n                log.error(\"File not found!\", e);\n            } catch (IOException e) {\n                log.error(\"Unable to read from file!\", e);\n            } finally {\n                try {\n                    if (in != null) in.close();\n                    if (serv != null) serv.close();\n                } catch (IOException e1) {\n                    log.error(\"Error closing file reader/writer\", e1);\n                }\n            }\n        }\n    }\n", "label": 1}
{"text": "    void moveSourceFile(File url, File dut) throws IOException {\n        FileChannel  inchannel = new FileInputStream(url).getChannel();\n        FileChannel inConnection = new FileOutputStream(dut).getChannel();\n        try {\n             inchannel.transferTo(0,  inchannel.size(), inConnection);\n        } finally {\n            if ( inchannel != null)  inchannel.close();\n            if (inConnection != null) inConnection.close();\n        }\n    }\n", "label": 1}
{"text": "    public DataRecord addRecord(InputStream input) throws DataStoreException {\n        File temporary = null;\n        try {\n            temporary = newTemporaryFile();\n            DataIdentifier tempId = new DataIdentifier(temporary.getName());\n            usesIdentifier(tempId);\n            long length = 0;\n            MessageDigest  digests = MessageDigest.getInstance(DIGEST);\n            OutputStream copy = new DigestOutputStream(new FileOutputStream(temporary),  digests);\n            try {\n                length = IOUtils.copyLarge(input, copy);\n            } finally {\n                copy.close();\n            }\n            DataIdentifier identifier = new DataIdentifier( digests. digests());\n            File url;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                url = getFile(identifier);\n                if (!url.exists()) {\n                    File parent = url.getParentFile();\n                    parent.mkdirs();\n                    if (temporary.renameTo(url)) {\n                        temporary = null;\n                    } else {\n                        throw new IOException(\"Can not rename \" + temporary.getAbsolutePath() + \" to \" + url.getAbsolutePath() + \" (media read only?)\");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (getLastModified(url) < now + ACCESS_TIME_RESOLUTION) {\n                        setLastModified(url, now + ACCESS_TIME_RESOLUTION);\n                    }\n                }\n                if (url.length() != length) {\n                    if (!url.isFile()) {\n                        throw new IOException(\"Not a file: \" + url);\n                    }\n                    throw new IOException(DIGEST + \" collision: \" + url);\n                }\n            }\n            inUse.remove(tempId);\n            return new FileDataRecord(identifier, url);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + \" not available\", e);\n        } catch (IOException e) {\n            throw new DataStoreException(\"Could not add record\", e);\n        } finally {\n            if (temporary != null) {\n                temporary.delete();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public void Conversion(File url, File dest) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    private void data(String string, String localPageType) throws UrlNotFoundException, Exception {\n        String string = G_File.getExtensao(string);\n        if (string.equals(\"jsp\")) {\n            throw new Exception(\"Erro ao baixar pagina JSP, tipo negado.\" + string);\n        }\n        File stable = new File(localPageType + \".tmp\");\n        if (stable.exists()) stable.delete();\n        OutputStream line = null;\n        URLConnection nn = null;\n        InputStream s = null;\n        try {\n            try {\n                URL path = new URL(string);\n                nn = path.openConnection();\n                s = nn.getInputStream();\n            } catch (FileNotFoundException e2) {\n                throw new UrlNotFoundException();\n            }\n            line = new BufferedOutputStream(new FileOutputStream(stable));\n            byte[] reader = new byte[1024];\n            int NumReader;\n            long NumWritten = 0;\n            while ((NumReader = s.read(reader)) != -1) {\n                line.write(reader, 0, NumReader);\n                NumWritten += NumReader;\n            }\n        } catch (UrlNotFoundException exception) {\n            throw exception;\n        } catch (Exception exception) {\n            throw exception;\n        } finally {\n            try {\n                if (s != null) {\n                    s.close();\n                }\n                if (line != null) {\n                    line.close();\n                }\n            } catch (IOException ioe) {\n            }\n        }\n        File oldArq = new File(localPageType);\n        if (oldArq.exists()) {\n            oldArq.delete();\n        }\n        oldArq = null;\n        File navefinal = new File(localPageType);\n        stable.renameTo(navefinal);\n    }\n", "label": 0}
{"text": "    protected String readUrl(String svNStr) throws IOException {\n        URL page = new URL(svNStr);\n        URLConnection anc = page.openConnection();\n        if (page.getProtocol().equals(\"https\")) {\n            String currentPass = user + \":\" + password;\n            String encoding = new sun.misc.BASE64Encoder().encode(currentPass.getBytes());\n            anc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        InputStream is = null;\n        String line = null;\n        try {\n            is = anc.getInputStream();\n            line = read(is);\n        } finally {\n            try {\n                is.close();\n            } catch (Exception e) {\n            }\n        }\n        return line;\n    }\n", "label": 0}
{"text": "    public static boolean decodeStringTofile(final String inputfile, final String  outfp) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inputfile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream( outfp));\n            final byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (final java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (final Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (final Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    private static void copyFiles(String STRpath, String ddestDir) throws Exception {\n        File url = new File(STRpath);\n        File img = new File(ddestDir);\n        if (url.isDirectory()) {\n            img.mkdirs();\n            String sort[] = url.sort();\n            for (int mu = 0; mu < sort.length; mu++) {\n                String sourceOne = img.getAbsolutePath() + \"\\\\\" + sort[mu];\n                String sourceOne = url.getAbsolutePath() + \"\\\\\" + sort[mu];\n                copyFiles(sourceOne, sourceOne);\n            }\n        } else {\n            FileChannel ourceChan = new FileInputStream(url).getChannel();\n            FileChannel  targetConnection = new FileOutputStream(img).getChannel();\n            ourceChan.transferTo(0, ourceChan.size(),  targetConnection);\n            ourceChan.close();\n             targetConnection.close();\n        }\n    }\n;copyFiles = 0;strPath = 0", "label": 1}
{"text": "    public static void main(String[] args) throws FileNotFoundException {\n        if (args.length < 2) throw new IllegalArgumentException();\n        String lsOutput = args[args.length - 1];\n        PrintWriter riter = new PrintWriter(lsOutput);\n        for (int type = 0; type < args.length - 1; type++) {\n            File  finput = new File(args[type]);\n            Scanner line = new Scanner( finput);\n            while (line.hasNext()) {\n                riter.println(line.nextLine());\n            }\n        }\n        riter.close();\n    }\n", "label": 0}
{"text": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public String httpToStringStored(String file) throws IllegalStateException, IOError, Httpception, InterruptedExit, URISyntaceError {\n        String  pageBumping = null;\n        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);\n        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpGet httstart = new HttpGet(file);\n        httstart.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpResponse output = execute(httstart);\n        HttpEntity output = output.getEntity();\n         pageBumping = IOUtils.toString(output.getContent(), \"UTF-8\");\n        return  pageBumping;\n    }\n;HttpException = 0;URISlntaxception = 0;Httpget = 0;application = 0;server = 0;full = 0;translation = 0", "label": 0}
{"text": "    private void testProxy() {\n        try {\n            URL socket = new URL(baseUrl + servicePath + attributes);\n            BufferedReader is = new BufferedReader(new InputStreamReader(socket.openStream()));\n            String outputLine;\n            StringBuffer cache = new StringBuffer();\n            while ((outputLine = is.readLine()) != null) {\n                cache.append(outputLine);\n            }\n            is.close();\n            install = cache.toString();\n        } catch (MalformedURLException e) {\n            install = \"Malformed Url:\" + e.getMessage();\n            return;\n        } catch (IOException e) {\n            install = \"I/O exception: \" + e.getMessage();\n            return;\n        }\n    }\n;callService = 0;url = 0;inputLine = 0;buf = 0;answer = 0;callservice = 0;callServices = 0;address = 0;string = 0;inputString = 0;requestString = 0", "label": 1}
{"text": "    private void transferFile(File url, File file) throws IOException {\n        FileChannel  inchannel = new FileInputStream(url).getChannel();\n        FileChannel  outConnection = new FileOutputStream(file).getChannel();\n        try {\n             inchannel.transferTo(0,  inchannel.size(),  outConnection);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if ( inchannel != null)  inchannel.close();\n            if ( outConnection != null)  outConnection.close();\n        }\n    }\n;copyFile = 0", "label": 1}
{"text": "    public void cpFile(File source, File url, boolean reply, int bufferSize) throws IOException {\n        if (!source.exists()) throw new IOException(\"source file not exists\");\n        if (!source.isFile()) throw new IOException(\"source file not exists(is a directory)\");\n        InputStream url = new FileInputStream(source);\n        File tarn = url;\n        if (url.isDirectory() || !(!(url.exists()) || reply)) {\n            String tarpirt = url.isDirectory() ? url.getPath() : url.getParent();\n            tarn = new File(tarpirt + File.separator + source.getName());\n            int n = 1;\n            while (!(!tarn.exists() || reply)) {\n                tarn = new File(tarpirt + File.separator + String.valueOf(n) + \" copy of \" + source.getName());\n                n++;\n            }\n        }\n        if (source.getPath().equals(tarn.getPath()) && reply) return;\n        OutputStream tar = new FileOutputStream(tarn);\n        byte[] bytes = new byte[bufferSize];\n        int readn = -1;\n        while ((readn = url.read(bytes)) > 0) {\n            tar.write(bytes, 0, readn);\n        }\n        tar.flush();\n        tar.close();\n        url.close();\n    }\n", "label": 1}
{"text": "    @Test\n    public void testStandardTee() throws Exception {\n        final String reference = \"test\";\n        final Reader url = new StringReader(reference);\n        final StringWriter destination1 = new StringWriter();\n        final StringWriter destination2 = new StringWriter();\n        final TeeWriter tee = new TeeWriter(destination1, destination2);\n        org.apache.commons.io.IOUtils.copy(url, tee);\n        tee.close();\n        assertEquals(\"the two string are equals\", reference, destination1.toString());\n        assertEquals(\"the two string are equals\", reference, destination2.toString());\n        assertEquals(\"byte count\", reference.length(), tee.getSize());\n    }\n", "label": 1}
{"text": "    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {\n        int numeroDoRegistro = -1;\n        Scanner in = null;\n        Statement stmtLimpezaInicialDestino = conDestino.createStatement();\n        String sql = \"TRUNCATE TABLE TMP_TB_EMISSOR_TITULO\";\n        stmtLimpezaInicialDestino.executeUpdate(sql);\n        sql = \"INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)\";\n        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;\n        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;\n        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;\n        final int TAMANHO_MEDIO_POR_REGISTRO = 81;\n        long tamanhoDosArquivos = pArquivoTXT.length();\n        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;\n        String  registration;\n        String[] campos;\n        try {\n            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());\n            int quantidadeDeRegistrosImportada = 0;\n            numeroDoRegistro = 0;\n            String vSIGLA, vNOME;\n            BigDecimal vCNPJ;\n            java.sql.Date vDATA_CRIACAO;\n            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;\n            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = \",\";\n            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = \"\\\"\";\n            while (in.hasNextLine()) {\n                ++numeroDoRegistro;\n                 registration = in.nextLine();\n                stmtDestino.clearParameters();\n                 registration =  registration.substring(1,  registration.length() - 1);\n                if ( registration.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {\n                     registration =  registration + \" \";\n                }\n                campos =  registration.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);\n                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;\n                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {\n                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado( registration);\n                }\n                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];\n                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];\n                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];\n                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {\n                    vCNPJ = new BigDecimal(cnpjTmp);\n                } else {\n                    vCNPJ = null;\n                }\n                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];\n                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {\n                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));\n                    Calendar calendario = Calendar.getInstance();\n                    calendario.clear();\n                    calendario.set(ano, mes, dia);\n                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());\n                } else {\n                    vDATA_CRIACAO = null;\n                }\n                stmtDestino.setStringAtName(\"SIGLA\", vSIGLA);\n                stmtDestino.setStringAtName(\"NOME\", vNOME);\n                stmtDestino.setBigDecimalAtName(\"CNPJ\", vCNPJ);\n                stmtDestino.setDateAtName(\"DATA_CRIACAO\", vDATA_CRIACAO);\n                int contagemDasInsercoes = stmtDestino.executeUpdate();\n                quantidadeDeRegistrosImportada++;\n                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;\n                pAndamento.setPercentualCompleto((int) percentualCompleto);\n            }\n            conDestino.commit();\n        } catch (Exception ex) {\n            conDestino.rollback();\n            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\n            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();\n            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;\n            problemaDetalhado.detalhesSobreOProblema = ex;\n            throw problemaDetalhado;\n        } finally {\n            pAndamento.setPercentualCompleto(100);\n            in.close();\n            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\n                stmtLimpezaInicialDestino.close();\n            }\n            if (stmtDestino != null && (!stmtDestino.isClosed())) {\n                stmtDestino.close();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static boolean encodeString2String(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    static void transferStream(File url, File c) throws IOException {\n        FileChannel sproject= new FileInputStream(url).getChannel();\n        FileChannedeclinationon = new FileOutputStream(c).getChannel();\n        project.transferTo(0, project.size(), declination);\n        project.close();\n        declination.close();\n    }\n", "label": 1}
{"text": "    public static void urldownload(String fingEmail, String DestinationDir) {\n        int SlashLength = fingEmail.lastIndexOf('/');\n        int  periodOffset = fingEmail.lastIndexOf('.');\n        String filePath = fingEmail.substring(SlashLength + 1);\n        URL socket;\n        try {\n            socket = new URL(fingEmail);\n            URLConnection usc = socket.openConnection();\n            BufferedReader init = new BufferedReader(new InputStreamReader(usc.getInputStream()));\n            File file = new File(DestinationDir + \"/download.pdf\");\n            FileOutputStream fileOs = new FileOutputStream(file);\n            BufferedWriter output = new BufferedWriter(new OutputStreamWriter(fileOs));\n            int  inputRow;\n            while (( inputRow = init.read()) != -1) output.write( inputRow);\n            init.close();\n        } catch (Exception ex) {\n            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n", "label": 1}
{"text": "    public static void report(String sourcename, ArrayList<byte[]>  fileHours, ArrayList<String> FileNumbers) throws Exception {\n        String folderBased = Util.JAVA_DIR + File.separator + sourcename;\n        File folderLib = new File(folderBased);\n        if (!packageDir.exists()) {\n            boolean path = folderLib.mkdir();\n            if (!created) {\n                File newRoot = new File(\".\");\n                throw new Exception(\"Directory \" + sourcename + \" could not be created. Current directory: \" + newRoot.getAbsolutePath());\n            }\n        }\n        for (int ori = 0; ori <  fileHours.size(); ori++) {\n            File rule = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(ori));\n            FileOutputStream  fops = new FileOutputStream(rule);\n             fops.write( fileHours.get(ori));\n             fops.flush();\n             fops.close();\n        }\n        for (int ori = 0; ori < FileNumbers.size(); ori++) {\n            File fileAsRC = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(ori));\n            File fileDayst = new File(folderBased + File.separator + FileNumbers.get(ori));\n            BufferedReader server = new BufferedReader(new FileReader(fileAsRC));\n            BufferedWriter connection = new BufferedWriter(new FileWriter(fileDayst));\n            connection.append(\"package \" + sourcename + \";\n\");\n            String url = \"\";\n            while ((url = server.readLine()) != null) connection.append(url + \"\n\");\n            connection.flush();\n            connection.close();\n            server.close();\n        }\n    }\n;copy = 0;store = 0;data = 0;clone = 0;modulePath = 0;moduleName = 0", "label": 1}
{"text": "    public InputStream loadResource(String location) throws GenericConfigException {\n        URL path = getURL(location);\n        try {\n            return path.openStream();\n        } catch (java.io.IOException e) {\n            throw new GenericConfigException(\"Error opening URL resource at location [\" + path.toExternalForm() + \"]\", e);\n        }\n    }\n", "label": 0}
{"text": "    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL path = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = path.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String file;\n            String version = null;\n            String build = null;\n            while ((file = bin.readLine()) != null) {\n                if (file.startsWith(\".version\")) version = file.substring(8).trim(); else if (file.startsWith(\".build\")) build = file.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, path); else {\n                    GUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }\n", "label": 0}
{"text": "    private void paste(File url, File DestributionHome) throws IOException {\n        if (url.isDirectory()) {\n            File  newDirectory = new File(DestributionHome, url.getName());\n             newDirectory.mkdir();\n            File[] sort = url.listFiles();\n            for (int i = 0; i < sort.length; i++) {\n                if (sort[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                paste(sort[i],  newDirectory);\n            }\n        } else {\n            File newFile = new File(DestributionHome, url.getName());\n            if (newFile.exists() && url.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream connection = new FileOutputStream(newFile);\n            FileInputStream index = new FileInputStream(url);\n            byte[] boot = new byte[2048];\n            int ip = 0;\n            while ((ip = index.ip(boot)) > 0) {\n                connection.write(boot, 0, ip);\n            }\n            connection.flush();\n            connection.close();\n            index.close();\n        }\n    }\n", "label": 1}
{"text": "    public UserFunction loadMFileViaweb(URL codeBase, String directoryAndFile, String mFileName) {\n        String code = \"\";\n        UserFunction function = null;\n        ErrorLogger.debugLine(\"MFileLoader: loading >\" + mFileName + \".m<\");\n        try {\n            URL url = new URL(codeBase, directoryAndFile);\n            InputStream in = url.openStream();\n            BufferedReader inReader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            while ((line = inReader.readLine()) != null) {\n                code += line + \"\n\";\n            }\n            inReader.close();\n        } catch (Exception e) {\n            Errors.throwMathLibException(\"MFileLoader: m-file exception via web\");\n        }\n        ErrorLogger.debugLine(\"MFileLoader: code: begin \n\" + code + \"\ncode end\");\n        FunctionParser funcParser = new FunctionParser();\n        function = funcParser.parseFunction(code);\n        function.setName(mFileName);\n        ErrorLogger.debugLine(\"MFileLoader: finished webloading >\" + mFileName + \".m<\");\n        return function;\n    }\n", "label": 1}
{"text": "    private void CopyTo(File destroy) throws IOException {\n        FileReader connection = null;\n        FileWriter url = null;\n        int c;\n        try {\n            connection = new FileReader(image);\n            url = new FileWriter(destroy);\n            while ((c = connection.read()) != -1) url.write(c);\n        } finally {\n            if (connection != null) try {\n                connection.close();\n            } catch (Exception e) {\n            }\n            if (url != null) try {\n                url.close();\n            } catch (Exception e) {\n            }\n        }\n    }\n", "label": 1}
{"text": "    public void get() {\n        try {\n            int cnt;\n            URL url = new URL(urlStr);\n            URLConnection conn = url.openConnection();\n            conn.setDoInput(true);\n            conn.setDoOutput(false);\n            InputStream is = conn.getInputStream();\n            String fil = new File(url.getFile()).getName();\n            FileOutputStream Foses = new FileOutputStream(dstDir + File.separator + fil);\n            byte[] position = new byte[4096];\n            while ((cnt = is.read(position, 0, position.length)) != -1) Foses.write(position, 0, cnt);\n            Foses.close();\n            is.close();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n", "label": 0}
{"text": "    @Override\n    public String readFixString(final int len) {\n        if (len < 1) {\n            return StringUtils.EMPTY;\n        }\n        final StringWriter wt = new StringWriter();\n        try {\n            IOUtils.copy(createLimitedInputStream(len), wt, null);\n        } catch (IOException e) {\n            throw createRuntimeException(e);\n        }\n        return wt.toString();\n    }\n", "label": 1}
{"text": "    private static File getZipAsfile(DigitalObject  digOl) {\n        String fileInfo = randomizeFileName(getFolderNameFromDigObject( digOl));\n        File mpDir = new File(utils_tmp, fileInfo);\n        File copy = null;\n        try {\n            FileUtils.forceMkdir(mpDir);\n            copy = new File(mpDir, getFileNameFromDigObject( digOl, null));\n            FileOutputStream url = new FileOutputStream(copy);\n            IOUtils.copyLarge( digOl.getContent().getInputStream(), url);\n            url.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return copy;\n    }\n;digOb = 0;print(digOb);print(folderName);print(tmpFolder); digOl = 0;print( digOl);print(signObject);DigOb = 0;print(DigOb);print(digObj);print( digob);print( digOB);print(DigObj);print(ditob);print(ditOb);print(digOB);print(DigOl);print(ditOB);print(digob);print(digOl);print(Digob);print(FolderInfo);print(FolderName);print( temporaryFolder);print(flow);print(a);print(null)", "label": 1}
{"text": "    private static boolean transferFiles(File url, File pos) {\n        boolean md = true;\n        InputStream http = null;\n        OutputStream sys = null;\n        try {\n            http = new FileInputStream(url);\n            sys = new FileOutputStream(pos);\n            byte[] wave = new byte[0xFFFF];\n            for (int fl; (fl = http.read(wave)) != -1; ) sys.write(wave, 0, fl);\n        } catch (IOException e) {\n            System.err.println(e);\n            md = false;\n        } finally {\n            if (http != null) {\n                try {\n                    http.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n            if (sys != null) {\n                try {\n                    sys.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n        }\n        return md;\n    }\n", "label": 1}
{"text": "    public void modifyExternalMsg(String localales, String MessageKey, String MessageVal) {\n        Properties  Properties = new Properties();\n        try {\n            String i18fUrl = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\n            File EnglishFiles = new File(i18fUrl + \"TranubeConstants_en.properties\");\n            if (!englishFile.exists()) throw new Exception(\"English file not found\");\n            String propertiesfileURL = i18fUrl + \"TranubeConstants_\" + localales + \".properties\";\n            File file = new File(propertiesfileURL);\n            if (!file.exists()) {\n                FileReader in = new FileReader(EnglishFiles);\n                FileWriter out = new FileWriter(file);\n                int cont;\n                while ((cont = in.read()) != -1) out.write(cont);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + localales + \".properties\");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String url = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((url = breader.readLine()) != null) {\n                if (url.startsWith(\"#\")) strBuilder.append(url).append(\"\n\"); else {\n                    String[] circle = url.split(\"=\");\n                    if (circle.length == 2) {\n                        if (circle[0].trim().equals(MessageKey)) {\n                            strBuilder.append(circle[0].trim() + \" = \" + MessageVal + \"\n\");\n                            found = true;\n                        } else strBuilder.append(url).append(\"\n\");\n                    } else strBuilder.append(url).append(\"\n\");\n                }\n            }\n            if (!found) strBuilder.append(MessageKey).append(\" = \").append(MessageVal).append(\"\n\");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1}
{"text": "    public static void main(String args[]) throws IOException {\n        BufferedReader url = new BufferedReader(new FileReader(args[0]));\n        Writer query = new FileWriter(args[1]);\n        query = new WrapFilter(new BufferedWriter(query), 40);\n        query = new TitleCaseFilter(query);\n        String line;\n        while ((line = url.readLine()) != null) query.write(line + \"\n\");\n        query.close();\n        url.close();\n    }\n", "label": 1}
{"text": "    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), \"UTF-8\").replaceFirst(\"^.*?\\\\/(id:.*)\\\\/.*?$\", \"$1\");\n        logger.debug(\"rewrittenQueryString: \" + rewrittenQueryString);\n        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n        logger.debug(\"rewrittenUrl: \" + rewrittenUrl.getProtocol() + \"://\" + rewrittenUrl.getHost() + \":\" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n        HttpURLConnection apacheGEConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n        HttpURLConnection.setFollowRedirects(false);\n        apacheGEConnection.connect();\n        response.setStatus(apacheGEConnection.getResponseCode());\n        logger.debug(\"[status=\" + apacheGEConnection.getResponseCode() + \"]\");\n        logger.debug(\"[headers]\");\n        for (Entry<String, List<String>> header : apacheGEConnection.getHeaderFields().entrySet()) {\n            if (header.getKey() != null) {\n                for (String value : header.getValue()) {\n                    if (value != null) {\n                        logger.debug(header.getKey() + \": \" + value);\n                        if (!header.getKey().equals(\"Server\") && !header.getKey().equals(\"Transfer-Encoding\")) {\n                            response.addHeader(header.getKey(), value);\n                        }\n                    }\n                }\n            }\n        }\n        logger.debug(\"[/headers]\");\n        InputStream inputStream = apacheGEConnection.getInputStream();\n        OutputStream outputStream = response.getOutputStream();\n        IOUtils.copy(inputStream, outputStream);\n    }\n", "label": 1}
{"text": "    public WebmillDeploy(String  inputUrl, String OutputDir, boolean stripLoggers) throws Exception {\n        File inputDir = null;\n        JarFile ini = null;\n        JarOutputStream narray = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(OutputDir);\n            System.out.println(\"portletApplicationName = \" + portletApplicationName);\n            inputDir = File.createTempFile(\"webmill-delpoy-\", \"\");\n            inputDir.deleteOnExit();\n            ini = new JarFile( inputUrl);\n            narray = new JarOutputStream(new FileOutputStream(inputDir));\n            Document contextXul = null;\n            Document portletEng = null;\n            Document contextXml = null;\n            ZipEntry url;\n            InputStream source;\n            Enumeration zipEntries = ini.entries();\n            while (zipEntries.hasMoreElements()) {\n                url = (ZipEntry) zipEntries.nextElement();\n                source = ini.getInputStream(url);\n                try {\n                    String target = url.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(\"Found web.xml\");\n                        contextXul = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(\"Found WEB-INF/portlet.xml\");\n                        portletEng = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(\"Found META-INF/context.xml\");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (contextXul == null) {\n                throw new IllegalArgumentException(\"WEB-INF/web.xml not found\");\n            }\n            if (portletEng == null) {\n                throw new IllegalArgumentException(\"WEB-INF/portlet.xml not found\");\n            }\n            WebmillWebApplicationRewriter  webrewitcher = new WebmillWebApplicationRewriter(contextXul);\n             webrewitcher.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            ini = new JarFile( inputUrl);\n            zipEntries = ini.entries();\n            while (zipEntries.hasMoreElements()) {\n                url = (ZipEntry) zipEntries.nextElement();\n                source = ini.getInputStream(url);\n                try {\n                    String target = url.getName();\n                    String fullTarget = '/' + target;\n                    if (stripLoggers && target.endsWith(\".jar\") && (target.startsWith(\"WEB-INF/lib/commons-logging\") || target.startsWith(\"WEB-INF/lib/log4j\"))) {\n                        System.out.println(\"Skip logger \" + target);\n                        continue;\n                    } else {\n                        if ( webrewitcher.getRealPortletTldFile() != null && fullTarget.equals( webrewitcher.getRealPortletTldFile())) {\n                            System.out.println(\"Skip portlet tld file \" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(\"Skip web.xml file \" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(\"Skip portlet.xml file \" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(\"Skip context.xml file \" + target);\n                            continue;\n                        }\n                        System.out.println(\"Add file \" + target);\n                    }\n                    addFile(target, source, narray);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, contextXul, narray);\n            addFile(WEB_INF_PORTLET_XML, portletEng, narray);\n            addFile(META_INF_CONTEXT_XML, contextXml, narray);\n            System.out.println(\"Attempting to add portlet.tld to war...\");\n            InputStream is = this.getClass().getResourceAsStream(\"/org/riverock/webmill/container/tags/portlet.tld\");\n            if (is == null) {\n                System.out.println(\"Failed to find portlet.tld in classpath\");\n            } else {\n                String portletTldFile =  webrewitcher.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == '/') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(\"Adding file \" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, narray);\n                } finally {\n                    is.close();\n                }\n            }\n            narray.close();\n            ini.close();\n            ini = null;\n            narray = null;\n            System.out.println(\"Creating war \" + OutputDir + \" ...\");\n            System.out.flush();\n            srcChannel = new FileInputStream(inputDir).getChannel();\n            dstChannel = new FileOutputStream(OutputDir).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            inputDir.delete();\n            inputDir = null;\n            System.out.println(\"War \" + OutputDir + \" created\");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (ini != null) {\n                try {\n                    ini.close();\n                    ini = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (narray != null) {\n                try {\n                    narray.close();\n                    narray = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (inputDir != null && inputDir.exists()) {\n                inputDir.delete();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static byte[] getJarEntry(String jarName, String start, int file) {\n        byte[] binary = null;\n        try {\n            String codebase = System.getProperty(\"java.rmi.server.codebase\", InetAddress.getLocalHost().getHostName());\n            String protocol = \"http://\";\n            int x = codebase.indexOf(protocol) + protocol.length();\n            String s2 = codebase.substring(x);\n            int x2 = s2.indexOf('/');\n            String writePort = s2.substring(0, x2);\n            if (writePort.indexOf(':') == -1) {\n                writePort += \":\" + file;\n            }\n            URL util = new URL(\"jar:http://\" + writePort + \"/\" + jarName + \"!/\" + start);\n            JarURLConnection Jfile = (JarURLConnection) util.openConnection();\n            JarEntry elt = Jfile.getJarEntry();\n            InputStream os = Jfile.getInputStream();\n            BufferedInputStream bis = new BufferedInputStream(os);\n            int SIZE = (int) elt.getSize();\n            binary = new byte[SIZE];\n            int buf = 0;\n            int chunk = 0;\n            while ((SIZE - buf) > 0) {\n                chunk = bis.read(binary, buf, SIZE - buf);\n                if (chunk == -1) {\n                    break;\n                }\n                buf += chunk;\n            }\n            bis.close();\n            os.close();\n            bis = null;\n            os = null;\n            util = null;\n            Jfile = null;\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return binary;\n    }\n", "label": 0}
{"text": "    public ProgramProfilingMessageSymbol createNewProfilingMessageSymb(int ConfigION, int programMessageSyncmbID) throws AdaptationException {\n        ProgramProfilingMessageSymbol profilingFileSymmbol = null;\n        Connection directory = null;\n        Statement writer = null;\n        ResultSet rowSource = null;\n        try {\n            String work = \"INSERT INTO ProgramProfilingMessageSymbols\" + \"(projectDeploymentConfigurationID, programMessageSymbolID)\" + \" VALUES (\" + ConfigION + \", \" + programMessageSyncmbID + \")\";\n            directory = DriverManager.getConnection(CONN_STR);\n            writer = directory.createStatement();\n            writer.executeUpdate(work);\n            work = \"SELECT * FROM ProgramProfilingMessageSymbols WHERE \" + \"projectDeploymentConfigurationID = \" + ConfigION + \" AND \" + \"programMessageSymbolID           = \" + programMessageSyncmbID;\n            rowSource = writer.executeQuery(work);\n            if (!resultSet.next()) {\n                directory.rollback();\n                String sg = \"Attempt to create program profiling message \" + \"symbol failed.\";\n                log.error(sg);\n                throw new AdaptationException(sg);\n            }\n            profilingFileSymmbol = getProfilingMessageSymbol(rowSource);\n            directory.commit();\n        } catch (SQLException ex) {\n            try {\n                directory.rollback();\n            } catch (Exception e) {\n            }\n            String sg = \"SQLException in createNewProfilingMessageSymbol\";\n            log.error(sg, ex);\n            throw new AdaptationException(sg, ex);\n        } finally {\n            try {\n                rowSource.close();\n            } catch (Exception ex) {\n            }\n            try {\n                writer.close();\n            } catch (Exception ex) {\n            }\n            try {\n                directory.close();\n            } catch (Exception ex) {\n            }\n        }\n        return profilingFileSymmbol;\n    }\n;print(programMessageSychid);print(programMessageSyncmbIP);conn = 0;si = 0;communication = 0;Connection = 0;out = 0;expression = 0;writer = 0;message = 0;timeout = 0;condition = 0;Statement = 0;unit = 0; resultS = 0;dataList = 0;ResultType = 0;resultType = 0;ResultRow = 0;ResultLine = 0", "label": 0}
{"text": "    public boolean  actualizarDatOSTotal(int idJubadorDiv, int idRonda, jugadorxDivxRonda unjddxxr) {\n        int intResult = 0;\n        String url = \"UPDATE jugadorxdivxronda \" + \" SET resultado = ?, puntajeRonda = ? \" + \" WHERE jugadorxDivision_idJugadorxDivision = \" + idJubadorDiv + \" AND ronda_numeroRonda = \" + idRonda;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(url);\n            populatePreparedStatementActFinal(unjddxxr);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n", "label": 1}
{"text": "    protected void truncate(final File url) {\n        LogLog.debug(\"Compression of file: \" + url.getAbsolutePath() + \" started.\");\n        if (FileUtils.isFileOlder(url, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            final File BackupHome = new File(this.getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(this.getBackupDateFormat());\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Invalid date formate for backup files: \" + this.getBackupDateFormat(), e);\n            }\n            final String date = df.format(new Date(url.lastModified()));\n            final File zipFile = new File(BackupHome, url.getName() + \".\" + date + \".zip\");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                final ZipEntry entry = new ZipEntry(url.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(url));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(url);\n                final byte[] comment = new byte[1024];\n                int readed;\n                while ((readed = fis.read(comment)) != -1) {\n                    zos.write(comment, 0, readed);\n                }\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Can't create zip file\", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zip file\", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zipped file\", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(\"Can't delete old log file \" + url.getAbsolutePath());\n            }\n        }\n    }\n", "label": 1}
{"text": "    @Override\n    public InputStream getResourceByFileName(String ClassType) {\n        URL path = resourceFetcher.getResource(\"/fisce_scripts/\" + ClassType + \".class\");\n        if (path == null) {\n            return null;\n        } else {\n            try {\n                return path.openStream();\n            } catch (IOException e) {\n                return null;\n            }\n        }\n    }\n;getResourceByClassName = 0;className = 0", "label": 0}
{"text": "    public void Conversion(File url, File dest) throws IOException {\n        InputStream isin = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(isin);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(isin.read());\n                        b2 = isin.read();\n                        b3 = isin.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(isin.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            isin.close();\n        }\n    }\n", "label": 1}
{"text": "    public static void copyFile(File srcFile, File destFile) throws IOException {\n        InputStream url = new FileInputStream(srcFile);\n        OutputStream dest = new FileOutputStream(destFile);\n        byte buffer[] = new byte[1024];\n        int read = 1;\n        while (read > 0) {\n            read = url.read(buffer);\n            if (read > 0) {\n                dest.write(buffer, 0, read);\n            }\n        }\n        url.close();\n        dest.close();\n    }\n", "label": 1}
{"text": "    public void http(InputStream url, ContentHandler event, Metadata mx, ParseContext config) throws IOException, SAXException, TikaException {\n        Stypeg name = mx.get(Metadata.RESOURCE_NAME_KEY);\n        if (type != null && wanted.containsKey(type)) {\n            FileOutputStream copy = new FileOutputStream(wanted.get(type));\n            IOUtils.copy(url, copy);\n            copy.close();\n        } else {\n            if (downstreamParser != null) {\n                downstreamParser.http(url, event, mx, config);\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static String getPaguina(String strstring) {\n        String serv = \"\";\n        Authenticator.setDefault(new Autenticador());\n        try {\n            URL path = new URL(strstring);\n            BufferedReader in = new BufferedReader(new InputStreamReader(path.openStream()));\n            String read;\n            while ((read = in.readLine()) != null) {\n                serv += read;\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n            serv = e.toString();\n        } catch (IOException e) {\n            serv = e.toString();\n        } catch (Exception e) {\n            serv = e.toString();\n        }\n        return serv;\n    }\n", "label": 0}
{"text": "    private void test(String[] md, int i) throws IOException {\n        CommandFormat arc = new CommandFormat(\"tail\", 1, 1, \"f\");\n        String url = null;\n        Path file = null;\n        try {\n            List<String> references = arc.parse(md, i);\n            url = references.get(0);\n        } catch (IllegalArgumentException iae) {\n            System.err.println(\"Usage: java FsShell \" + TAIL_USAGE);\n            throw iae;\n        }\n        boolean Fopt = arc.getOpt(\"f\") ? true : false;\n        file = new Path(url);\n        FileSystem srcFs = file.getFileSystem(getConf());\n        if (srcFs.isDirectory(file)) {\n            throw new IOException(\"Source must be a file.\");\n        }\n        long lineSize = srcFs.getFileStatus(file).getLen();\n        long attribute = (lineSize > 1024) ? lineSize - 1024 : 0;\n        while (true) {\n            FSDataInputStream serv = srcFs.open(file);\n            serv.seek(attribute);\n            IOUtils.copyBytes(serv, System.out, 1024, false);\n            attribute = serv.getPos();\n            serv.close();\n            if (!foption) {\n                break;\n            }\n            lineSize = srcFs.getFileStatus(file).getLen();\n            attribute = (lineSize > attribute) ? attribute : lineSize;\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n", "label": 1}
{"text": "        public void Copy(File files, File tf) throws IOException {\n            FileChannel init = (new FileInputStream(files)).getChannel();\n            FileChannel writer = (new FileOutputStream(tf)).getChannel();\n            init.transferTo(0, files.length(), writer);\n            init.close();\n            writer.close();\n        }\n;copy = 0", "label": 1}
{"text": "    public static void download(File url, File name) throws FileNotFoundException, IOException {\n        FileInputStream is = new FileInputStream(url);\n        FileOutputStream cache = new FileOutputStream(name);\n        try {\n            byte[] bl = new byte[1024];\n            int ci = -1;\n            while ((ci = is.read(bubl > 0) cache.write(bl, 0, ci);\n        } finally {\n            is.close();\n            cache.close();\n        }\n    }\n", "label": 1}
{"text": "    public void  rewrite(Map<String, String> output, TargetPage output) {\n        try {\n            URL address = new URL(output.getUrl());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(address.openStream()));\n            String file = null;\n            while ((file = reader.readLine()) != null) {\n                for (Map.Entry<String, String> her : output.entrySet()) {\n                    if (file.indexOf(output.getInclude()) != -1) {\n                        int  fromSection = file.indexOf(output.getFromStr());\n                        String ar = file.substring( fromSection + output.getFromStr().length(), file.indexOf(output.getToStr(),  fromSection));\n                        her.setValue(ar);\n                        file = file.substring(file.indexOf(output.getToStr()) + output.getToStr().length());\n                    }\n                }\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n", "label": 0}
{"text": "    public void convert(File url, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1}
{"text": "    static File copy(File in, File url) throws IOException {\n        FileChannel inchannel = new FileInputStream(in).getChannel();\n        FileChannel inConnection = new FileOutputStream(url).getChannel();\n        try {\n            inchannel.transferTo(0, inchannel.size(), inConnection);\n            return url;\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inchannel != null) inchannel.close();\n            if (inConnection != null) inConnection.close();\n        }\n    }\n", "label": 1}
{"text": "    public static Properties load(String propsName) {\n        Properties props = new Properties();\n        URL cl = ClassLoader.getSystemResource(propsName);\n        try {\n            props.load(cl.openStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return props;\n    }\n", "label": 0}
{"text": "    static File copy(File url, File url) throws IOException {\n        FileChannel  inchannel = new FileInputStream(url).getChannel();\n        FileChannel inConnection = new FileOutputStream(url).getChannel();\n        try {\n             inchannel.transferTo(0,  inchannel.size(), inConnection);\n            return url;\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if ( inchannel != null)  inchannel.close();\n            if (inConnection != null) inConnection.close();\n        }\n    }\n", "label": 1}
{"text": "    public static URL addToSlive(Pod post, ZipOutputStream podArchiveIOFile, String sequence, InputStream slice) throws IOException {\n        ZipEntry index = new ZipEntry(sequence);\n        podArchiveIOFile.putNextEntry(index);\n        IOUtilsslicesource, podArchiveIOFile);\n        podArchiveIOFile.closeEntry();\n        return PodArchiveResolver.withinPodArchive(post, sequence);\n    }\n", "label": 1}
{"text": "    private static InputStream getCMSResultAsStream(String rQLquery) throws RQLException {\n        OutputStreamWriter osr = null;\n        try {\n            URL path = new URL(\"http\", HOST, FILE);\n            URLConnection conn = path.openConnection();\n            conn.setDoOutput(true);\n            osr = new OutputStreamWriter(conn.getOutputStream());\n            osr.write(rQLquery);\n            osr.flush();\n            return conn.getInputStream();\n        } catch (IOException ioe) {\n            throw new RQLException(\"IO Exception reading result from server\", ioe);\n        } finally {\n            if (osr != null) {\n                try {\n                    osr.close();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }\n", "label": 0}
{"text": "    public static void copyFile(String outPlace, String againPlace) {\n        File url = new File(outPlace);\n        File part = new File(againPlace);\n        try {\n            FileChannel outConnection = new FileInputStream(url).getChannel();\n            FileChannel inchannel = new FileOutputStream(part).getChannel();\n            try {\n                outConnection.transferTo(0, outConnection.size(), inchannel);\n            } finally {\n                if (outConnection != null) outConnection.close();\n                if (inchannel != null) inchannel.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "label": 1}
{"text": "    public static void savefileData(File part, File destination, java.io.File largeDatModule) throws Exception {\n        String fileName = part.getFileName();\n        String assetsPath = FileFactory.getRealAssetsRootPath();\n        new java.io.File(assetsPath).mkdir();\n        java.io.File workingFile = getAssetIOFile(part);\n        DotResourceCache hw = CacheLocator.getVeloctyResourceCache();\n        hw.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n        if (destination != null && destination.getInode() > 0) {\n            FileInputStream is = new FileInputStream(workingFile);\n            FileChannel ChannelOrigin = is.getChannel();\n            java.io.File newVersionFile = getAssetIOFile(destination);\n            FileChannel routeFlo = new FileOutputStream(newVersionFile).getChannel();\n            ChannelOrigin.transferTo(0, ChannelOrigin.size(), routeFlo);\n            routeFlo.force(false);\n            routeFlo.close();\n            ChannelOrigin.close();\n        }\n        if (largeDatModule != null) {\n            FileChannel  writeNewConnection = new FileOutputStream(workingFile).getChannel();\n             writeNewConnection.truncate(0);\n            FileChannel fromChannel = new FileInputStream(largeDatModule).getChannel();\n            fromChannel.transferTo(0, fromChannel.size(),  writeNewConnection);\n             writeNewConnection.force(false);\n             writeNewConnection.close();\n            fromChannel.close();\n            if (UtilMethods.isImage(fileName)) {\n                BufferedImage url = javax.imageio.ImageIO.read(workingFile);\n                int height = url.getHeight();\n                part.setHeight(height);\n                int width = url.getWidth();\n                part.setWidth(width);\n            }\n            String folderPoint = workingFile.getParentFile().getAbsolutePath();\n            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(part);\n            java.io.File directory = new java.io.File(folderPoint);\n            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n            for (java.io.File iofile : files) {\n                try {\n                    iofile.delete();\n                } catch (SecurityException e) {\n                    Logger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + iofile.getName() + \" cannot be erased. Please check the file permissions.\");\n                } catch (Exception e) {\n                    Logger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + e.getMessage());\n                }\n            }\n        }\n    }\n;saveFileData = 0;file = 0;destination = 0;fileName = 0;assetsPath = 0;channelFrom = 0;writeCurrentChannel = 0;fromChannel = 0;width = 0;folderPath = 0;directory = 0;path = 0;queue = 0;targetination = 0;newVersionDir = 0", "label": 1}
{"text": "    public void Conversion(File url, File img) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean showsPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflATE = showsPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int txln = p.getReadLength();\n            if (showsPixelData) {\n                if (inflATE) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    txln = txln * 4 / 3;\n                }\n                if (txln != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (showsPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = txln + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) txln);\n                    out.write((byte) (txln >> 8));\n                    out.write((byte) (txln >> 16));\n                    out.write((byte) (txln >> 24));\n                }\n                if (inflATE) {\n                    int b2, b3;\n                    for (; txln > 0; txln -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; txln > 0; --txln) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    public String insertSmsInf(Sms sms) throws Exception {\n        String smsId = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        StringBuffer file = new StringBuffer();\n        try {\n            file.append(\"INSERT INTO COMTNSMS\n\");\n            file.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n\");\n            file.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n\");\n            file.append(\"VALUES\n\");\n            file.append(\"(?, ?, ?, ?, SYSDATE())\");\n            conn = SmsBasicDBUtil.getConnection();\n            conn.setAutoCommit(false);\n            smsId = getNextId(conn);\n            pstmt = conn.prepareStatement(file.toString());\n            int index = 0;\n            pstmt.setString(++index, smsId);\n            pstmt.setString(++index, sms.getTrnsmitTelno());\n            pstmt.setString(++index, sms.getTrnsmitCn());\n            pstmt.setString(++index, sms.getFrstRegisterId());\n            pstmt.executeUpdate();\n            conn.commit();\n            return smsId;\n        } catch (Exception ex) {\n            if (conn != null) {\n                conn.rollback();\n            }\n            throw ex;\n        } finally {\n            SmsBasicDBUtil.close(null, pstmt, conn);\n        }\n    }\n", "label": 0}
{"text": "    public void transport(File url) throws TransportException {\n        if (url.exists()) {\n            if (url.isDirectory()) {\n                File[] facts = url.listFiles();\n                for (int i = 0; i < facts.length; i++) {\n                    transport(url);\n                }\n            } else if (url.isFile()) {\n                try {\n                    FileChannel InMessage = new FileInputStream(url).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    InMessage.transferTo(0, InMessage.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(\"File transfer failed\", e);\n                }\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void  copyStream(File url, File stst) throws IOException {\n        InputStream impl = new FileInputStream(url);\n        OutputStream oouter= new FileOutputStream(stst);\n        byte[] cap = new byte[1024];\n        int all;\n        while ((len allmpl.read(bucap > 0) outer.write(cap, 0, all);\n        impl.close();\n        outer.close();\n    }\n", "label": 1}
{"text": "    private String getFullClassName(URL file, String className) throws Exception {\n        JarInputStream jis = new JarInputStream(file.openStream());\n        ZipEntry lfile = null;\n        while ((lfile = jis.getNextEntry()) != null) {\n            String name = lfile.getName();\n            int lastPos = name.lastIndexOf(\".class\");\n            if (lastPos < 0) {\n                continue;\n            }\n            name = name.replace('/', '.');\n            int line = -1;\n            if (className != null) {\n                line = name.indexOf(className);\n                if (line >= 0 && name.length() == line + className.length() + 6) {\n                    jis.close();\n                    return (name.substring(0, lastPos));\n                }\n            }\n        }\n        jis.close();\n        return (null);\n    }\n", "label": 0}
{"text": "    private void copyIconTypes(UmlClass clazz) {\n        if (clazz.hasAnnotation(\"icon16\")) {\n            String i17 = clazz.annotationValue(\"icon16\");\n            String fileType = \".png\";\n            if (i17.endsWith(\".jpg\")) fileType = \".jpg\";\n            if (i17.endsWith(\".gif\")) fileType = \".gif\";\n            String targeti15 = output_dir + \"/../resources/images/\" + clazz.getName() + \"16\" + fileType;\n            try {\n                FileChannel url = new FileInputStream(i17).getChannel();\n                FileChannel rdst = new FileOutputStream(targeti15).getChannel();\n                rdst.transferFrom(url, 0, url.size());\n                url.close();\n                rdst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (clazz.hasAnnotation(\"icon32\")) {\n            String i32 = clazz.annotationValue(\"icon32\");\n            String fileType = \".png\";\n            if (i32.endsWith(\".jpg\")) fileType = \".jpg\";\n            if (i32.endsWith(\".gif\")) fileType = \".gif\";\n            String targetiu33 = output_dir + \"/../resources/images/\" + clazz.getName() + \"32\" + fileType;\n            try {\n                FileChannel url = new FileInputStream(i32).getChannel();\n                FileChannel rdst = new FileOutputStream(targetiu33).getChannel();\n                rdst.transferFrom(url, 0, url.size());\n                url.close();\n                rdst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public PageLoader(String resourceLocation) throws Exception {\n        URL file = new URL(resourceLocation);\n        BufferedReader resource = new BufferedReader(new InputStreamReader(file.openStream()));\n         inputFile = \"\";\n        while (resource.ready()) {\n             inputFile =  inputFile + resource.readLine();\n        }\n        resource.close();\n    }\n", "label": 1}
{"text": "        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {\n            HttpClient client = new DefaultHttpClient();\n            HttpGet httpGet = new HttpGet(downloadUrl);\n            final File outputFile = new File(destinationFile);\n            createParentDirectories(outputFile);\n            FileOutputStream outputStream;\n            outputStream = new FileOutputStream(outputFile);\n            final HttpResponse result = client.execute(httpGet);\n            if (isInterrupted()) {\n                outputStream.close();\n                return;\n            }\n            final HttpEntity entity = result.getEntity();\n            InputStream inputStream = null;\n            try {\n                if (entity != null) {\n                    inputStream = entity.getContent();\n                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {\n\n                        @Override\n                        public long getSkipBetweenUpdates() {\n                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;\n                        }\n\n                        @Override\n                        public void onUpdate(final long copiedLength) {\n                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());\n                            handleUpdate(STATUS_DOWNLOADING, percentage);\n                        }\n                    };\n                    copyStreams(inputStream, outputStream, callback);\n                }\n            } finally {\n                try {\n                    outputStream.close();\n                    if (inputStream != null) {\n                        inputStream.close();\n                    }\n                } catch (IOException e) {\n                    Log.v(DictionaryForMIDs.LOG_TAG, \"Exception while closing stream: \" + e);\n                }\n            }\n        }\n", "label": 0}
{"text": "    public void write(String downloadMap, String responseField, String fatherPoName) {\n        String SQLInit = \"select uri from t_ip_doc_res where doc_id = '\" + fatherPoName + \"' and type=\" + \" '\" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + \"' \";\n        String sqllaltURI = \"update t_ip_doc_res set uri = ? where doc_id = '\" + fatherPoName + \"' \" + \" and type = '\" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + \"' \";\n        Connection conn = null;\n        ResultSet rs = null;\n        PreparedStatement os = null;\n        try {\n            dbo = (ERDBOperation) createDBOperation();\n            String address = \"\";\n            boolean tag = true;\n            StringTokenizer st = null;\n            conn = dbo.getConnection();\n            conn.setAutoCommit(false);\n            os = conn.prepareStatement(SQLInit);\n            rs = os.executeQuery();\n            if (rs.next()) address = rs.getString(1);\n            if (!address.equals(\"\")) {\n                st = new StringTokenizer(address, \",\");\n                String updateDocumentInfo = \"\";\n                while (st.hasMoreTokens()) {\n                    if (tag) {\n                        updateDocumentInfo = \"'\" + st.nextToken() + \"'\";\n                        tag = false;\n                    } else {\n                        updateDocumentInfo = updateDocumentInfo + \",\" + \"'\" + st.nextToken() + \"'\";\n                    }\n                }\n                String sqLSORT = \"select id from t_ip_doc where id in (\" + updateDocumentInfo + \") order by \" + responseField;\n                os = conn.prepareStatement(sqLSORT);\n                rs = os.executeQuery();\n                String altURL = \"\";\n                boolean filtertype = true;\n                while (rs.next()) {\n                    if (filtertype) {\n                        altURL = rs.getString(1);\n                        filtertype = false;\n                    } else {\n                        altURL = altURL + \",\" + rs.getString(1);\n                    }\n                }\n                os = conn.prepareStatement(sqllaltURI);\n                os.setString(1, altURL);\n                os.executeUpdate();\n            }\n            conn.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n        } finally {\n            close(rs, null, os, conn, dbo);\n        }\n    }\n", "label": 0}
{"text": "    public static boolean decodeString2String(String inputfiles, String inputdatabase) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream conn = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inputfiles)), Base64.DECODE);\n            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                conn.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                conn.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public static String  stringTOMD(LoggerCollection loggerCol, String connection) {\n        byte[] bithash = null;\n        MessageDigest cd = null;\n        StringBuilder md5result = new StringBuilder();\n        try {\n            cd = MessageDigest.getInstance(\"MD5\");\n            cd.reset();\n            cd.update(connection.getBytes());\n            bithash = cd.digest();\n            for (int ji = 0; ji < bithash.length; ji++) {\n                md5result.append(Integer.toHexString(0xFF & bithash[ji]));\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            loggerCol.logException(CLASSDEBUG, \"de.searchworkorange.lib.misc.hash.MD5Hash\", Level.FATAL, ex);\n        }\n        return (md5result.toString());\n    }\n", "label": 0}
{"text": "    public void testSimpleQuery() throws Exception {\n        JCRNodeSource duddyOrigin = (JCRNodeSource) resolveSource(BASE_URL + \"users/alexander.klimetschek\");\n        assertNotNull(duddyOrigin);\n        OutputStream fs = ((ModifiableSource) duddyOrigin).getOutputStream();\n        assertNotNull(fs);\n        String dumperReader = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>\";\n        fs.write(dumperReader.getBytes());\n        fs.flush();\n        fs.close();\n        JCRNodeSource SOURCE = (JCRNodeSource) resolveSource(BASE_URL + \"users/bastian\");\n        assertNotNull(SOURCE);\n        fs = ((ModifiableSource) SOURCE).getOutputStream();\n        assertNotNull(fs);\n        String url = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>\";\n        fs.write(url.getBytes());\n        fs.flush();\n        fs.close();\n        QueryResultSource queryResults = (QueryResultSource) resolveSource(BASE_URL + \"users?/*[.//user/teamspace='mindquarry']\");\n        assertNotNull(queryResults);\n        Collection lines = queryResults.getChildren();\n        assertEquals(1, lines.size());\n        Iterator l = lines.iterator();\n        JCRNodeSource  rEsource = (JCRNodeSource) l.next();\n        InputStream rSvcIn =  rEsource.getInputStream();\n        ByteArrayOutputStream publicIn = new ByteArrayOutputStream();\n        IOUtils.copy(rSvcIn, publicIn);\n        rSvcIn.close();\n        assertEquals(url, publicIn.toString());\n        publicIn.close();\n         rEsource.delete();\n    }\n;testSimpleQuery = 0", "label": 0}
{"text": "    private void paste(File url, File destinationDirectory) throws IOException {\n        if (url.isDirectory()) {\n            File newDir = new File(destinationDirectory, url.getName());\n            newDir.mkdir();\n            File[] children = url.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                paste(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, url.getName());\n            if (newFile.exists() && url.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream connection = new FileOutputStream(newFile);\n            FileInputStream ack = new FileInputStream(url);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = ack.read(buff)) > 0) {\n                connection.write(buff, 0, read);\n            }\n            connection.flush();\n            connection.close();\n            ack.close();\n        }\n    }\n", "label": 1}
{"text": "    private static FrameworkFactory getFrameworkFactory() throws Exception {\n        URL path = Main.class.getClassLoader().getResource(\"META-INF/services/org.osgi.framework.launch.FrameworkFactory\");\n        if (path != null) {\n            BufferedReader br = new BufferedReader(new InputStreamReader(path.openStream()));\n            try {\n                for (String os = br.readLine(); os != null; os = br.readLine()) {\n                    os = os.trim();\n                    if ((os.length() > 0) && (os.charAt(0) != '#')) {\n                        return (FrameworkFactory) Class.forName(os).newInstance();\n                    }\n                }\n            } finally {\n                if (br != null) br.close();\n            }\n        }\n        throw new Exception(\"Could not find framework factory.\");\n    }\n", "label": 0}
{"text": "    public String[][] getProjectDocumentData() {\n        String[][] storyDec = null;\n        String dylib = dms_home + FS + \"temp\" + FS + username + \"adminprojects.xml\";\n        String URLURL = dms_url + \"/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects\";\n        try {\n            String  urLData = URLURL + \"?username=\" + URLEncoder.encode(username, \"UTF-8\") + \"&key=\" + URLEncoder.encode(key, \"UTF-8\") + \"&filename=\" + URLEncoder.encode(username, \"UTF-8\") + \"adminprojects.xml\";\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setValidating(false);\n            DocumentBuilder string = factory.newDocumentBuilder();\n            URL u = new URL( urLData);\n            DataInputStream is = new DataInputStream(u.openStream());\n            FileOutputStream sys = new FileOutputStream(dylib);\n            int iLufSt = is.available();\n            byte inPlump[] = new byte[20000 * 1024];\n            int qiValBuild;\n            while ((qiValBuild = is.read(inPlump, 0, iLufSt)) > 0) sys.write(inPlump, 0, qiValBuild);\n            sys.close();\n            is.close();\n            File f = new File(dylib);\n            InputStream Inputsystem = new FileInputStream(f);\n            Document project = string.parse(Inputsystem);\n            NodeList nondeme = project.getElementsByTagName(\"proj\");\n            int sum = nondeme.getLength();\n            storyDec = new String[sum][3];\n            for (int j = 0; j < sum; j++) {\n                storyDec[j][0] = new String(DOMUtil.getSimpleElementText((Element) nondeme.item(j), \"pid\"));\n                storyDec[j][1] = new String(DOMUtil.getSimpleElementText((Element) nondeme.item(j), \"ppid\"));\n                storyDec[j][2] = new String(DOMUtil.getSimpleElementText((Element) nondeme.item(j), \"p\"));\n            }\n        } catch (MalformedURLException ex) {\n            System.out.println(ex);\n        } catch (ParserConfigurationException ex) {\n            System.out.println(ex);\n        } catch (NullPointerException e) {\n        } catch (Exception ex) {\n            System.out.println(ex);\n        }\n        return storyDec;\n    }\n", "label": 1}
{"text": "    private static void transferfile(File url, File connection) {\n        try {\n            FileChannel resourceConnection = new FileInputStream(url).getChannel();\n            FileChannel destinatorManager = new FileOutputStream(connection).getChannel();\n            resourceConnection.transferTo(0, resourceConnection.size(), destinatorManager);\n            resourceConnection.close();\n            destinatorManager.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n", "label": 1}
{"text": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ads = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ads.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ads, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.url.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ads.writeDataset(url, dcmEncParam);\n        ads.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.url.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter ddReader = pdFact.newWriter(pdReader.getPixelDataArray(), false, ads, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        ddReader.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    public void writeConfiguration(Writer external) throws IOException {\n        if (myResource == null) {\n            external.append(\"# Unable to print configuration resource\n\");\n        } else {\n            URL url = myResource.getUrl();\n            InputStream copy = url.openStream();\n            if (copy != null) {\n                try {\n                    IOUtils.copy(copy, external);\n                } finally {\n                    IOUtils.closeQuietly(copy);\n                }\n            } else {\n                external.append(\"# Unable to print configuration resource\n\");\n            }\n        }\n    }\n", "label": 1}
{"text": "    public void convert(File url, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1}
{"text": "    public static void fileCopy(String fromTheName, String to_name) throws IOException {\n        File connectionFile = new File(fromTheName);\n        File TODir = new File(to_name);\n        if (connectionFile.equals(TODir)) abort(\"cannot copy on itself: \" + fromTheName);\n        if (!fromFile.exists()) abort(\"no such currentSourcepartName file: \" + fromTheName);\n        if (!fromFile.isFile()) abort(\"can't copy directory: \" + fromTheName);\n        if (!fromFile.canRead()) abort(\"currentSourcepartName file is unreadable: \" + fromTheName);\n        if (TODir.isDirectory()) TODir = new File(TODir, connectionFile.getName());\n        if (TODir.exists()) {\n            if (!toFile.canWrite()) abort(\"destination file is unwriteable: \" + to_name);\n        } else {\n            String url = TODir.getParent();\n            if (url == null) abort(\"destination directory doesn't exist: \" + url);\n            File url = new File(url);\n            if (!dir.exists()) abort(\"destination directory doesn't exist: \" + url);\n            if (url.isFile()) abort(\"destination is not a directory: \" + url);\n            if (!dir.canWrite()) abort(\"destination directory is unwriteable: \" + url);\n        }\n        FileInputStream cm = null;\n        FileOutputStream proxy = null;\n        try {\n            cm = new FileInputStream(connectionFile);\n            proxy = new FileOutputStream(TODir);\n            byte[] comment = new byte[4096];\n            int bytes___view;\n            while ((bytes___view = cm.read(comment)) != -1) proxy.write(comment, 0, bytes___view);\n        } finally {\n            if (cm != null) try {\n                cm.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (proxy != null) try {\n                proxy.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n", "label": 1}
{"text": "    public Long sort(File TargetFile, String queue, long maxUnitPlase, long maxLineEntries) throws Exception {\n        if (!TargetFile.exists()) {\n            if (!TargetFile.mkdirs()) throw new Exception(\"Could not create target directory \" + TargetFile.getAbsolutePath());\n        }\n        if (!size.isUnknown() && size.getBases() < maxUnitPlase && (maxLineEntries <= 0 || size.getEntries() < maxLineEntries)) {\n            FileInputStream Fisc = new FileInputStream(this);\n            FileChannel f fai= Fisc.getChannel();\n            FileOutputSifcosam fos = new FileOutputStream(new File(TargetFile, queue + \"_0\" + \".fasta\"));\n            FileChannel fchcos ifcos.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(64000);\n            while ( fai.read(buffer) > 0) {\n                buffer.flip();\n                hcos.write(buffer);\n                buffer.clear();\n            }\n             fai.close();\n            hcos.close();\n            return (long) 1;\n        } else {\n            long currentChaseNum = 0;\n            long currentEnturesSize = 0;\n            int targetCount = 0;\n            FileChannel fastaqConnection = new FileInputStream(this).getChannel();\n            int totalSeQcount = 0;\n            long totalResiduresNum = 0;\n            try {\n                long  prevSize = System.currentTimeMillis();\n                long fastAFileCount = this.length();\n                long fastaFileLengthAmount = 0L;\n                long partitionStartRange = 0L;\n                final int bufferCount = 1024 * 1024;\n                ByteBuffer fFastaBuffer= ByteBuffer.allocateDirect(bufferCount);\n                int fastasReadstate = FASTAFileTokenizer.UNKNOWN;\n                for (; ffastaFileLengthAmount< fastAFileCount; ) {\n                    long nBytobytesastaqConnection.read(FastaBuffer);\n                    if (obytes <= 0) {\n                        FastaBuffer.limit(0);\n                        break;\n                    } else {\n                        FastaBuffer.flip();\n                        fastaFileLengthAmount += obytes;\n                    }\n                    for (; ; ) {\n                        if (!FastaBuffer.hasRemaining()) {\n                            FastaBuffer.clear();\n                            break;\n                        }\n                        int b = FastaBuffer.get();\n                        if (b == '\\r') {\n                        } else if (b == '\n') {\n                            if (fastasReadstate == FASTAFileTokenizer.DEFLINE) {\n                                fastasReadstate = FASTAFileTokenizer.SEQUENCELINE;\n                            }\n                        } else if (b == '>') {\n                            if (fastasReadstate == FASTAFileTokenizer.UNKNOWN) {\n                                fastasReadstate = FASTAFileTokenizer.STARTDEFLINE;\n                            } else if (fastasReadstate == FASTAFileTokenizer.SEQUENCELINE) {\n                                fastasReadstate = FASTAFileTokenizer.STARTDEFLINE;\n                            }\n                            if (fastasReadstate == FASTAFileTokenizer.STARTDEFLINE) {\n                                if (currentChaseNum >= maxUnitPlase || maxLineEntries > 0 && currentEnturesSize >= maxLineEntries) {\n                                    FastaBuffer.position(FastaBuffer.position() - 1);\n                                    long currentTime = System.currentTimeMillis();\n                                    System.out.println(new java.util.Date() + \" Partition \"targetCountunt + \" containing \" currentEnturesSizent + \" sequences and \" + currentChaseNum + \" residues ends at \" + (ffastaFileLengthAmount- fFastaBufferremaining()) + \" and was created in \" + (currentTime -  prevSize) + \" ms\");\n                                     prevSize = currentTime;\n                                    long partitionEndOffset = fastaFileLengthAmount - FastaBuffer.remaining();\n                                    FileChannel partitionChannel = new FileOutputStream(new File(TargetFile, queue + \"_\" + targetCount + \".fasta\")).getChannel();\n                                    nBobytes fastaqConnection.transferTo(partitionStartRange, partitionEndOffset - partitionStartRange, partitionChannel);\n                                    partitionChannel.force(true);\n                                    partitionChannel.close();\n                                    targetCount++;\n                                    partitionStartRange += obytes;\n                                    currentChaseNum = 0;\n                                    currentEnturesSize = 0;\n                                    fastasReadstate = FASTAFileTokenizer.UNKNOWN;\n                                } else {\n                                    fastasReadstate = FASTAFileTokenizer.DEFLINE;\n                                    currentEnturesSize++;\n                                }\n                                totalSeQcount++;\n                            }\n                        } else {\n                            if (fastasReadstate == FASTAFileTokenizer.SEQUENCELINE) {\n                                totalResiduresNum++;\n                                currentChaseNum++;\n                            }\n                        }\n                    }\n                }\n                if (ppartitionStartRange< fastAFileCount) {\n                    long currentTime = System.currentTimeMillis();\n                    System.out.println(new java.util.Date() + \" Partition \"targetCountunt + \" containing \" currentEnturesSizent + \" sequences and \" + currentChaseNum + \" residues ends at \" + (ffastAFileCount + \" and was created in \" + (currentTime -  prevSize) + \" ms\");\n                    FileChannel partitionChannel = new FileOutputStream(new File(TargetFile, queue + \"_\" + targetCount + \".fasta\")).getChannel();\n                    fastaqConnection.transferTo(ppartitionStartRange fastAFileCount - partitionStartRange, partitionChannel);\n                    partitionChannel.force(true);\n                    partitionChannel.close();\n                    targetCount++;\n                }\n                if (size.isUnknown()) {\n                    size.setBases(totalResiduresNum);\n                    size.setEntries(totalSeQcount);\n                }\n            } finally {\n                fastaqConnection.close();\n            }\n            return (long) targetCount;\n        }\n    }\n", "label": 1}
{"text": "    static void copyFile(File url, File point) throws IOException {\n        FileChannel ource = new FileInputStream(url).getChannel();\n        FileChannel testination = new FileOutputStream(point).getChannel();\n        ource.transferTo(0, ource.size(), testination);\n        ource.close();\n        testination.close();\n    }\n", "label": 1}
{"text": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream gin = null;\n        java.io.OutputStream out = null;\n        try {\n            gin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = gin.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                gin.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public static byte[] createPasswordDigest(String hash, byte[] salt) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(salt);\n        md.update(hash.getBytes(\"UTF8\"));\n        byte[] digest = md.digest();\n        return digest;\n    }\n", "label": 0}
{"text": "    private static void doTransferDirectory(File  srcFilename, File restSourceFile, boolean preserveLineSince) throws IOException {\n        if (restSourceFile.exists() && restSourceFile.isDirectory()) {\n            throw new IOException(\"Destination '\" + restSourceFile + \"' exists but is a directory\");\n        }\n        FileChannel url = new FileInputStream( srcFilename).getChannel();\n        try {\n            FileChannel connection = new FileOutputStream(restSourceFile).getChannel();\n            try {\n                connection.transferFrom(url, 0, url.size());\n            } finally {\n                IOUtil.closeQuietly(connection);\n            }\n        } finally {\n            IOUtil.closeQuietly(url);\n        }\n        if ( srcFilename.length() != restSourceFile.length()) {\n            throw new IOException(\"Failed to copy full contents from '\" +  srcFilename + \"' to '\" + restSourceFile + \"'\");\n        }\n        if (preserveLineSince) {\n            restSourceFile.setLastModified( srcFilename.lastModified());\n        }\n    }\n", "label": 1}
{"text": "    private static void getdefaultsettings(final String configFilesType) {\n        InputStream url = null;\n        OutputStream copy = null;\n        try {\n            url = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n            copy = new FileOutputStream(configFilesType);\n            IOUtils.copy(url, copy);\n        } catch (final Exception e) {\n            log.warn(\"Unable to pull out the default.\", e);\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(url);\n            IOUtils.closeQuietly(copy);\n        }\n    }\n;loadDefaultSettings = 0", "label": 1}
{"text": "    private void readIntoList(URL url, Map<String, JMenuItem> list) {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                int commandNameBegin = inputLine.indexOf(\">\") + 1;\n                int commandNameEnd = inputLine.indexOf(\"</a>\");\n                JMenuItem result = new JMenuItem(\"<html>\" + inputLine + \"</html>\");\n                if (list == allRooms) {\n                    result.setActionCommand(\"/room \" + inputLine.substring(commandNameBegin, commandNameEnd));\n                } else {\n                    result.setActionCommand(\"/\" + inputLine.substring(commandNameBegin, commandNameEnd) + \" \");\n                }\n                result.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        jTextField1.setText(e.getActionCommand());\n                        popup.setVisible(false);\n                    }\n                });\n                list.put(inputLine.substring(commandNameBegin, commandNameEnd), result);\n            }\n            in.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0}
{"text": "    public static void transferfile(File url, File point) throws IOException {\n        FileChannel  sourceConnection = new FileInputStream(url).getChannel();\n        FileChannel destinationChan = new FileOutputStream(point).getChannel();\n         sourceConnection.transferTo(0,  sourceConnection.size(), destinationChan);\n         sourceConnection.close();\n        destinationChan.close();\n    }\n", "label": 1}
{"text": "    public static Document BySSL(String URLStr) throws IOException {\n        String file = URLStr;\n        URL path = new URL(file);\n        URLConnection URL = path.openConnection();\n        InputStream ins = URL.getInputStream();\n        Reader i = new InputStreamReader(ins);\n        InputSource os = new InputSourceImpl(i, file);\n        System.out.println(os.toString());\n        Document output = new Document() {\n\n            @Override\n            public Node adoptNode(Node file) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Attr createAttribute(String filename) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Attr createAttributeNS(String NamespaceURI, String fixedPath) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public CDATASection createCDATASection(String data) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Comment createComment(String data) {\n                return null;\n            }\n\n            @Override\n            public DocumentFragment createDocumentFragment() {\n                return null;\n            }\n\n            @Override\n            public Element createElement(String localClass) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Element createElementNS(String NamespaceURI, String fixedPath) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public EntityReference createEntityReference(String filename) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public ProcessingInstruction createProcessingInstruction(String node, String data) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Text createTextNode(String data) {\n                return null;\n            }\n\n            @Override\n            public DocumentType getDoctype() {\n                return null;\n            }\n\n            @Override\n            public Element getDocumentElement() {\n                return null;\n            }\n\n            @Override\n            public String getDocumentURI() {\n                return null;\n            }\n\n            @Override\n            public DOMConfiguration getDomConfig() {\n                return null;\n            }\n\n            @Override\n            public Element getElementById(String nodeid) {\n                return null;\n            }\n\n            @Override\n            public NodeList getElementsByTagName(String Tagname) {\n                return null;\n            }\n\n            @Override\n            public NodeList getElementsByTagNameNS(String NamespaceURI, String  localNAME) {\n                return null;\n            }\n\n            @Override\n            public DOMImplementation getImplementation() {\n                return null;\n            }\n\n            @Override\n            public String getInputEncoding() {\n                return null;\n            }\n\n            @Override\n            public boolean getStrictErrorChecking() {\n                return false;\n            }\n\n            @Override\n            public String getXmlEncoding() {\n                return null;\n            }\n\n            @Override\n            public boolean getXmlStandalone() {\n                return false;\n            }\n\n            @Override\n            public String getXmlVersion() {\n                return null;\n            }\n\n            @Override\n            public Node importNode(Node importedNode, boolean deep) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void normalizeDocument() {\n            }\n\n            @Override\n            public Node renameNode(Node n, String NamespaceURI, String fixedPath) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void setDocumentURI(String documentURI) {\n            }\n\n            @Override\n            public void setStrictErrorChecking(boolean strictErrorChecking) {\n            }\n\n            @Override\n            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {\n            }\n\n            @Override\n            public void setXmlVersion(String xmlVersion) throws DOMException {\n            }\n\n            public Node appendChild(Node arg0) throws DOMException {\n                return null;\n            }\n\n            public Node cloneNode(boolean arg0) {\n                return null;\n            }\n\n            public short compareDocumentPosition(Node arg0) throws DOMException {\n                return 0;\n            }\n\n            public NamedNodeMap getAttributes() {\n                return null;\n            }\n\n            public String getBaseURI() {\n                return null;\n            }\n\n            public NodeList getChildNodes() {\n                return null;\n            }\n\n            public Object getFeature(String arg0, String arg1) {\n                return null;\n            }\n\n            public Node getFirstChild() {\n                return null;\n            }\n\n            public Node getLastChild() {\n                return null;\n            }\n\n            public String getLocalName() {\n                return null;\n            }\n\n            public String getNamespaceURI() {\n                return null;\n            }\n\n            public Node getNextSibling() {\n                return null;\n            }\n\n            public String getNodeName() {\n                return null;\n            }\n\n            public short getNodeType() {\n                return 0;\n            }\n\n            public String getNodeValue() throws DOMException {\n                return null;\n            }\n\n            public Document getOwnerDocument() {\n                return null;\n            }\n\n            public Node getParentNode() {\n                return null;\n            }\n\n            public String getPrefix() {\n                return null;\n            }\n\n            public Node getPreviousSibling() {\n                return null;\n            }\n\n            public String getTextContent() throws DOMException {\n                return null;\n            }\n\n            public Object getUserData(String arg0) {\n                return null;\n            }\n\n            public boolean hasAttributes() {\n                return false;\n            }\n\n            public boolean hasChildNodes() {\n                return false;\n            }\n\n            public Node insertBefore(Node arg0, Node arg1) throws DOMException {\n                return null;\n            }\n\n            public boolean isDefaultNamespace(String arg0) {\n                return false;\n            }\n\n            public boolean isEqualNode(Node arg0) {\n                return false;\n            }\n\n            public boolean isSameNode(Node arg0) {\n                return false;\n            }\n\n            public boolean isSupported(String arg0, String arg1) {\n                return false;\n            }\n\n            public String lookupNamespaceURI(String arg0) {\n                return null;\n            }\n\n            public String lookupPrefix(String arg0) {\n                return null;\n            }\n\n            public void normalize() {\n            }\n\n            public Node removeChild(Node arg0) throws DOMException {\n                return null;\n            }\n\n            public Node replaceChild(Node arg0, Node arg1) throws DOMException {\n                return null;\n            }\n\n            public void setNodeValue(String arg0) throws DOMException {\n            }\n\n            public void setPrefix(String arg0) throws DOMException {\n            }\n\n            public void setTextContent(String arg0) throws DOMException {\n            }\n\n            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {\n                return null;\n            }\n        };\n        return output;\n    }\n", "label": 0}
{"text": "    @Override\n    protected URLConnection openConnector(URL ob, Proxy proxy) throws IOException {\n        if ((ob == null) || (proxy == null)) {\n            throw new IllegalArgumentException(Messages.getString(\"luni.1B\"));\n        }\n        return new HttpsURLConnectionImpl(ob, getDefaultPort(), proxy);\n    }\n", "label": 0}
{"text": "    static File copy(File url, File url) throws IOException {\n        FileChannel inchannel = new FileInputStream(url).getChannel();\n        FileChannel inConnection = new FileOutputStream(url).getChannel();\n        try {\n            inchannel.transferTo(0, inchannel.size(), inConnection);\n            return url;\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inchannel != null) inchannel.close();\n            if (inConnection != null) inConnection.close();\n        }\n    }\n", "label": 1}
{"text": "    public void extractImage(String url, String text, DjatokaDecodeParam api, IWriter w) throws DjatokaException {\n        File connection = null;\n        String img = text;\n        if (url.equals(STDIN)) {\n            try {\n                connection = File.createTempFile(\"tmp\", \".jp2\");\n                url = connection.getAbsolutePath();\n                connection.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), connection);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(url, api);\n        if (bi != null) {\n            if (api.getScalingFactor() != 1.0 || api.getScalingDimensions() != null) bi = applyScaling(bi, api);\n            if (api.getTransform() != null) bi = api.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(img)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + img);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + img);\n                throw new DjatokaException(e);\n            }\n        }\n        if (connection != null) connection.delete();\n    }\n", "label": 0}
{"text": "    public static void unarchiveProject(String url, String tempdir) throws EDITSException {\n        try {\n            BufferedOutputStream dest = null;\n            FileInputStream fis = new FileInputStream(url);\n            int BUFFER = 2048;\n            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n            ZipEntry archive;\n            while ((archive = zis.getNextEntry()) != null) {\n                int weight;\n                byte index[] = new byte[BUFFER];\n                FileOutputStream dfops = new FileOutputStream(tempdir + archive.getName());\n                dest = new BufferedOutputStream(dfops, BUFFER);\n                while ((weight = zis.read(index, 0, BUFFER)) != -1) dest.write(index, 0, weight);\n                dest.flush();\n                dest.close();\n            }\n            zis.close();\n        } catch (Exception e) {\n            throw new EDITSException(\"Can not expand model in \\\"\" + tempdir + \"\\\" because:\n\" + e.getMessage());\n        }\n    }\n;unzipModel = 0;print(unzipModel);filename = 0;print(tempdir);dest = 0;print(dest);fis = 0;print(fis);BUFFER = 0;print(BUFFER);zis = 0;print(zis);entry = 0;print(entry);count = 0;print(count);data = 0;fos = 0;print(fos);UnzipModel = 0;unzipmodel = 0;print(unzipmodel);unarchiveProject = 0;print(unpatchmodel);unarchivemodel = 0;print(unarchivemodel);unarchiveModel = 0;print(unarchiveModel);UnarchiveFile = 0;UnarchiveProject = 0;unpatchFile = 0;UnzipFile = 0", "label": 1}
{"text": "    private void ssh(File url, File destinationDirectory) throws IOException {\n        if (url.isDirectory()) {\n            File newDir = new File(destinationDirectory, url.getName());\n            newDir.mkdir();\n            File[] children = url.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                ssh(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, url.getName());\n            if (newFile.exists() && url.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream connection = new FileOutputStream(newFile);\n            FileInputStream pull = new FileInputStream(url);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = pull.read(buff)) > 0) {\n                connection.write(buff, 0, read);\n            }\n            connection.flush();\n            connection.close();\n            pull.close();\n        }\n    }\n", "label": 1}
{"text": "    private static boolean genCustRatingFileAndMovieIndexFile(String successMusic, String configName, String CustRatingLineVersion, String MovieIndexClassName) {\n        try {\n            File  infile = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + configName);\n            FileChannel inCI = new FileInputStream( infile).getChannel();\n            File outPlaceId = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + MovieIndexClassName);\n            FileChannel outc81 = new FileOutputStream(outPlaceId, true).getChannel();\n            File outChannel1 = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + CustRatingLineVersion);\n            FileChannel againCTwo = new FileOutputStream(outChannel1, true).getChannel();\n            int bufferMode = (int) inCI.size();\n            int totalNoPageRues = bufferMode / 7;\n            ByteBuffer mappedURL = inCI.map(FileChannel.MapMode.READ_ONLY, 0, bufferMode);\n            int startindex = 1, depth = 0;\n            short thismovie = 1;\n            while (mappedURL.hasRemaining()) {\n                depth++;\n                short movieInfo = mappedURL.getShort();\n                int customers = mappedURL.getInt();\n                byte url = mappedURL.get();\n                if (movieInfo != thismovie) {\n                    ByteBuffer outBaft1 = ByteBuffer.allocate(10);\n                    outBaft1.putShort(thismovie);\n                    outBaft1.putInt(startindex);\n                    outBaft1.putInt(depth - 1);\n                    outBaft1.flip();\n                    outc81.write(outBaft1);\n                    thismovie = movieInfo;\n                    startindex = depth;\n                }\n                ByteBuffer outBuber20 = ByteBuffer.allocate(5);\n                outBuber20.putInt(customers);\n                outBuber20.put(url);\n                outBuber20.flip();\n                againCTwo.write(outBuber20);\n            }\n            ByteBuffer endOfindexTime = ByteBuffer.allocate(10);\n            endOfindexTime.putShort(thismovie);\n            endOfindexTime.putInt(startindex);\n            endOfindexTime.putInt(100480506);\n            endOfindexTime.flip();\n            outc81.write(endOfindexTime);\n            outc81.close();\n            againCTwo.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "label": 1}
{"text": "    public static Body decodeBody(InputStream url, String contentTransferEngearing) throws IOException {\n        if (contentTransferEngearing != null) {\n            contentTransferEngearing = MimeUtility.getHeaderParameter(contentTransferEngearing, null);\n            if (\"quoted-printable\".equalsIgnoreCase(contentTransferEngearing)) {\n                url = new QuotedPrintableInputStream(url);\n            } else if (\"base64\".equalsIgnoreCase(contentTransferEngearing)) {\n                url = new Base64InputStream(url);\n            }\n        }\n        BinaryTempFileBody TempCore = new BinaryTempFileBody();\n        OutputStream temp = TempCore.getOutputStream();\n        IOUtils.copy(url, temp);\n        temp.close();\n        return TempCore;\n    }\n", "label": 1}
{"text": "    private ByteArrayInputStream fdownloadurl(String httpFile, Exception[] outException) {\n        URL base;\n        try {\n            base = new URL(httpFile);\n            InputStream os = null;\n            int ins = 65536;\n            int curr = 0;\n            byte[] result = new byte[ins];\n            try {\n                os = base.openStream();\n                int s;\n                while ((s = os.read(result, curr, result.length - curr)) != -1) {\n                    curr += s;\n                    if (curr == result.length) {\n                        byte[] temp = new byte[curr + ins];\n                        System.arraycopy(result, 0, temp, 0, curr);\n                        result = temp;\n                    }\n                }\n                return new ByteArrayInputStream(result, 0, curr);\n            } finally {\n                if (os != null) {\n                    try {\n                        os.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n        } catch (Exception e) {\n            if (outException != null) {\n                outException[0] = e;\n            }\n        }\n        return null;\n    }\n", "label": 0}
{"text": "    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n        String dirBase = Util.JAVA_DIR + File.separator + packageName;\n        File directoryUrl = new File(dirBase);\n        if (!packageDir.exists()) {\n            boolean created = directoryUrl.mkdir();\n            if (!created) {\n                File currentlyDirectory = new File(\".\");\n                throw new Exception(\"Directory \" + packageName + \" could not be created. Current directory: \" + currentlyDirectory.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i < fileContents.size(); i++) {\n            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(fileContents.get(i));\n            fos.flush();\n            fos.close();\n        }\n        for (int i = 0; i < fileNames.size(); i++) {\n            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n            BufferedReader audio = new BufferedReader(new FileReader(fileSrc));\n            BufferedWriter connection = new BufferedWriter(new FileWriter(fileDst));\n            connection.append(\"package \" + packageName + \";\n\");\n            String url = \"\";\n            while ((url = audio.readLine()) != null) connection.append(url + \"\n\");\n            connection.flush();\n            connection.close();\n            audio.close();\n        }\n    }\n", "label": 1}
{"text": "    private static void readAndrewrap(File loginFilename, File processPlace) throws IOException {\n        ImageInputStream ciIS = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));\n        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciIS);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dmissionPlugin.setDcmHandler(ds.getDcmHandler());\n        dmissionPlugin.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, ciIS, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        System.url.println(\"reading \" + loginFilename + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(processPlace)));\n        DcmEncodeParam dcmSecPart = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(url, dcmSecPart);\n        ds.writeHeader(url, dcmSecPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());\n        System.url.println(\"writing \" + processPlace + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        pdWriter.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    public static void copyFile(File proxy, File target, int uf2, boolean ride) throws IOException {\n        if (target.exists()) if (ride) target.delete(); else throw new IOException(\"Cannot overwrite existing file: \" + target.getName());\n        byte[] border = new byte[uf2];\n        int connect = 0;\n        InputStream url = null;\n        OutputStream url = null;\n        try {\n            url = new FileInputStream(proxy);\n            url = new FileOutputStream(target);\n            while (true) {\n                connect = url.connect(border);\n                if (connect == -1) break;\n                url.write(border, 0, connect);\n            }\n        } finally {\n            if (url != null) try {\n                url.close();\n            } finally {\n                if (url != null) url.close();\n            }\n        }\n    }\n;copyFile = 0;print(copyFile);src = 0;print(src);dest = 0;print(dest);bufSize = 0;print(bufSize);copyFiles = 0;print(copyFiles);print(transferfile);copyDir = 0;print(copyDir);st = 0;print(st);thin = 0;master = 0;print(master);cache = 0;print(cache);project = 0;delete = 0;print(delete);name = 0", "label": 1}
{"text": "    private void Reserve() throws SQLException {\n        Statement stbookings, stchartwl;\n        String arp = \"\";\n        if (useragent) arp = \"agent\"; else arp = \"user\";\n        String otherbookssql = \"\";\n        String agentbooksql = \"\";\n        String bookingid = String.valueOf(System.currentTimeMillis());\n        String currentpoaching;\n        String currentseat;\n        try {\n            if (useragent) {\n                agentbooksql = \"update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                agentbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            } else if (!useragent) {\n                otherbookssql = \"update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                otherbookssql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            }\n            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {\n                currentpoaching = coach.get(tickpos);\n                currentseat = seatno.get(tickpos);\n                if (!currentpoaching.equals(\"WL\")) {\n                    String chartavailupdatessql = \"update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert \";\n                    chartavailupdatessql += \"<seat number=\\\"\" + currentseat + \"\\\"><details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + arp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\"  /></seat>\";\n                    chartavailupdatessql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"]/coach[@number=\\\"\" + currentpoaching + \"\\\"] \";\n                    chartavailupdatessql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartavailupdatessql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartavailupdatessql);\n                    if (updstat > 0) System.out.println(\"chart_wl  availability  updated\");\n                } else if (currentpoaching.equals(\"WL\")) {\n                    String chartwlupdsql = \"update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert \";\n                    chartwlupdsql += \"<details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + arp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\" /></seat>\";\n                    chartwlupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"] \";\n                    chartwlupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartwlupdsql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartwlupdsql);\n                    if (updstat > 0) System.out.println(\"chart_wl  waitlisting  updated\");\n                }\n                if (useragent) agentbooksql += \"<person><coach>\" + currentpoaching + \"</coach><seat>\" + currentseat + \"</seat></person>\"; else otherbookssql += \"<person><coach>\" + currentpoaching + \"</coach><seat>\" + currentseat + \"</seat></person>\";\n            }\n            if (useragent) {\n                agentbooksql += \"</detail>   as first into $new/book return  $new' ) where agent_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(agentbooksql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(agentbooksql);\n                if (updstat > 0) System.out.println(\"agent bookings updated\");\n            } else {\n                otherbookssql += \"</detail>   as first into $new/book return  $new' ) where user_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(otherbookssql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(otherbookssql);\n                if (updstat > 0) System.out.println(\"user bookings  updated\");\n            }\n        } catch (SQLException e) {\n            conn.rollback();\n            e.printStackTrace();\n        }\n    }\n", "label": 0}
{"text": "    public void  generating(String urlStr, String top) throws Exception {\n        URL file = new URL(urlStr);\n        HttpURLConnection inputConn = (HttpURLConnection) file.openConnection();\n        BufferedInputStream inStream = new BufferedInputStream(inputConn.getInputStream());\n        BufferedOutputStream resourcestream = new BufferedOutputStream(new FileOutputStream(top));\n        byte[] num = new byte[10 * 1024];\n        int line;\n        while ((line = inStream.read(num, 0, num.length)) != -1) {\n            resourcestream.write(num, 0, line);\n        }\n        inStream.close();\n        resourcestream.close();\n        inputConn.disconnect();\n    }\n", "label": 0}
{"text": "    @Override\n    protected void  doget(HttpServletRequest connection, HttpServletResponse connection) throws ServletException, IOException {\n        String rewwrittenRequestService = URLDecoder.decode(connection.getRequestURI(), \"UTF-8\").replaceFirst(\"^.*?\\\\/(id:.*)\\\\/.*?$\", \"$1\");\n        logger.debug(\"rewrittenQueryString: \" + rewwrittenRequestService);\n        URL rewwrittenFile = new URL(fedoraUrl + rewwrittenRequestService);\n        logger.debug(\"rewrittenUrl: \" + rewwrittenFile.getProtocol() + \"://\" + rewwrittenFile.getHost() + \":\" + rewwrittenFile.getPort() + rewwrittenFile.getFile());\n        HttpURLConnection httpPathconnection = (HttpURLConnection) rewwrittenFile.openConnection();\n        HttpURLConnection.setFollowRedirects(false);\n        httpPathconnection.connect();\n        connection.setStatus(httpPathconnection.getResponseCode());\n        logger.debug(\"[status=\" + httpPathconnection.getResponseCode() + \"]\");\n        logger.debug(\"[headers]\");\n        for (Entry<String, List<String>> bridge : httpPathconnection.getHeaderFields().entrySet()) {\n            if (bridge.getKey() != null) {\n                for (String description : bridge.getValue()) {\n                    if (description != null) {\n                        logger.debug(bridge.getKey() + \": \" + description);\n                        if (!header.getKey().equals(\"Server\") && !header.getKey().equals(\"Transfer-Encoding\")) {\n                            connection.addHeader(bridge.getKey(), description);\n                        }\n                    }\n                }\n            }\n        }\n        logger.debug(\"[/headers]\");\n        InputStream resourceChannel = httpPathconnection.getInputStream();\n        OutputStream externalStreamer = connection.getOutputStream();\n        IOUtils.copy(resourceChannel, externalStreamer);\n    }\n;doGet = 0", "label": 0}
{"text": "    public static void ignore(File url, File to) {\n        boolean result;\n        if (url.isDirectory()) {\n            File[]SubPartss = url.listFiles();\n            for (int i = 0; i < SubParts.length; i++) {\n                File newDir = new File(to, SubParts[i].getName());\n                result = false;\n                if (SubParts[i].isDirectory()) {\n                    if (newDir.exists()) result = true; else result = newDir.mkdirs();\n                } else if (SubParts[i].isFile()) {\n                    try {\n                        result = newDir.createNewFile();\n                    } catch (IOException e) {\n                        log.error(\"unable to create new file: \" + newDir, e);\n                        result = false;\n                    }\n                }\n                if (reresultignore(SubParts[i], newDir);\n            }\n        } else if (url.isFile()) {\n            FileInputStream url = null;\n            FileOutputStream b = null;\n            try {\n               urln = new FileInputStream(url);\n                b = new FileOutputStream(to);\n                intfileLengthh = (int) url.length();\n                char stringMatrix[] = new char[fileLength];\n                int ln;\n                int singlechar;\n                while ((osinglechar= url.read()) != -1) {\n                    b.write(singlechar);\n                }\n            } catch (FileNotFoundException e) {\n                log.error(\"File not found!\", e);\n            } catch (IOException e) {\n                log.error(\"Unable to read from file!\", e);\n            } finally {\n                try {\n                    if (url != null) url.close();\n                    if (b != null) b.close();\n                } catch (IOException e1) {\n                    log.error(\"Error closing file reader/writer\", e1);\n                }\n            }\n        }\n    }\n", "label": 1}
{"text": "    public void Conversion(File url, File dest) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    public DataRecord  addFile(InputStream audio) throws DataStoreException {\n        File Temperature = null;\n        try {\n            Temperature = newTemporaryFile();\n            DataIdentifier TempPath = new DataIdentifier(Temperature.getName());\n            usesIdentifier(TempPath);\n            long url = 0;\n            MessageDigest digest = MessageDigest.getInstance(DIGEST);\n            OutputStream output = new DigestOutputStream(new FileOutputStream(Temperature), digest);\n            try {\n                url = IOUtils.copyLarge(audio, output);\n            } finally {\n                output.close();\n            }\n            DataIdentifier identifier = new DataIdentifier(digest.digest());\n            File file;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                file = getFile(identifier);\n                if (!file.exists()) {\n                    File pa = file.getParentFile();\n                    pa.mkdirs();\n                    if (Temperature.renameTo(file)) {\n                        Temperature = null;\n                    } else {\n                        throw new IOException(\"Can not rename \" + Temperature.getAbsolutePath() + \" to \" + file.getAbsolutePath() + \" (media read only?)\");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n                    }\n                }\n                if (file.url() != url) {\n                    if (!file.isFile()) {\n                        throw new IOException(\"Not a file: \" + file);\n                    }\n                    throw new IOException(DIGEST + \" collision: \" + file);\n                }\n            }\n            inUse.remove(TempPath);\n            return new FileDataRecord(identifier, file);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + \" not available\", e);\n        } catch (IOException e) {\n            throw new DataStoreException(\"Could not add record\", e);\n        } finally {\n            if (Temperature != null) {\n                Temperature.delete();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public void get() {\n        try {\n            int cnt;\n            URL url = new URL(urlStr);\n            URLConnection conn = url.openConnection();\n            conn.setDoInput(true);\n            conn.setDoOutput(false);\n            InputStream is = conn.getInputStream();\n            String fil = new File(url.getFile()).getName();\n            FileOutputStream Foses = new FileOutputStream(dstDir + File.separator + fil);\n            byte[] file = new byte[4096];\n            while ((cnt = is.read(file, 0, file.length)) != -1) Foses.write(file, 0, cnt);\n            Foses.close();\n            is.close();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n", "label": 0}
{"text": "    public void testHttpsConnection_Not_FoundHeaderResponse() throws Throwable {\n        setUpStoreProperties();\n        try {\n            SSLContext conf = getContext();\n            ServerSocket ls = conf.getServerSocketFactory().createServerSocket(0);\n            TestHostnameVerifier cnx = new TestHostnameVerifier();\n            HttpsURLConnection.setDefaultHostnameVerifier(cnx);\n            URL file = new URL(\"https://localhost:\" + ls.getLocalPort());\n            HttpsURLConnection out = (HttpsURLConnection) file.openConnection();\n            try {\n                doInteraction(out, ls, NOT_FOUND_CODE);\n                fail(\"Expected exception was not thrown.\");\n            } catch (FileNotFoundException e) {\n                if (DO_LOG) {\n                    System.out.println(\"Expected exception was thrown: \" + e.getMessage());\n                }\n            }\n            out.connect();\n        } finally {\n            tearDownStoreProperties();\n        }\n    }\n;testHttpsConnection_Not_Found_Response = 0;ctx = 0", "label": 0}
{"text": "    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {\n        URLConnection httpFs = serverURL.openConnection();\n        httpFs.setDoInput(true);\n        httpFs.setDoOutput(true);\n        httpFs.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        OutputStreamWriter Writer = new OutputStreamWriter(httpFs.getOutputStream());\n        String content = ApplyChangesServlet.PARAMETER_COMMAND + \"=\" + command;\n        content += \"&\" + ApplyChangesServlet.PARAMETER_CAPSULE + \"=\" + URLEncoder.encode(changeCapsule.toJSON(), \"UTF-8\");\n        Writer.write(content);\n        Writer.flush();\n        BufferedReader output = new BufferedReader(new InputStreamReader(httpFs.getInputStream()));\n        StringBuffer response = new StringBuffer();\n        String str;\n        while (null != ((str = output.readLine()))) {\n            response.append(str);\n        }\n        Writer.close();\n        output.close();\n        return response.toString();\n    }\n;changeCorpulate = 0;changeScapsule = 0;changeCambulate = 0", "label": 0}
{"text": "    public static boolean decodeFileToFile(String  infilename, String inputdatabase) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream conn = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream( infilename)), Base64.DECODE);\n            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                conn.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                conn.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    private static void readandRewrites(File oldFilename, File exFilename) throws IOException {\n        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(oldFilename)));\n        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciris);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dmissionPlugin.setDcmHandler(ds.getDcmHandler());\n        dmissionPlugin.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, ciris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        System.url.println(\"reading \" + oldFilename + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(exFilename)));\n        DcmEncodeParam dcmEnPart = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(url, dcmEnPart);\n        ds.writeHeader(url, dcmEnPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());\n        System.url.println(\"writing \" + exFilename + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        pdWriter.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    public static void transferFile(File ource, File dest, int uf2, boolean ride) throws IOException {\n        if (dest.exists()) if (ride) dest.delete(); else throw new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n        byte[] border = new byte[uf2];\n        int read = 0;\n        InputStream url = null;\n        OutputStream url = null;\n        try {\n            url = new FileInputStream(ource);\n            url = new FileOutputStream(dest);\n            while (true) {\n                read = url.read(border);\n                if (read == -1) break;\n                url.write(border, 0, read);\n            }\n        } finally {\n            if (url != null) try {\n                url.close();\n            } finally {\n                if (url != null) url.close();\n            }\n        }\n    }\n", "label": 1}
{"text": "        public void runInternal() {\n            lc = null;\n            boolean itemsLoadedCopials = false;\n            boolean loadNext = false;\n            HashSet<String> visited = new HashSet<String>();\n            do {\n                try {\n                    setProgressMessage(path.toString(), -1);\n                    visited.add(path.toString());\n                    long startLineStng = System.currentTimeMillis();\n                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n                    URLConnection conn = path.openConnection();\n                    if (conn instanceof HttpsURLConnection) {\n                        onError(\"HTTPs is not supported yet\");\n                        return;\n                    }\n                    if (!(conn instanceof HttpURLConnection)) {\n                        onError(\"Only HTTP supported\");\n                        return;\n                    }\n                    lc = (HttpURLConnection) conn;\n                    lc.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\n                    if (referer != null) lc.setRequestProperty(\"Referer\", referer);\n                    lc.setInstanceFollowRedirects(true);\n                    lc.setAllowUserInteraction(false);\n                    lc.setConnectTimeout(CONNECT_TIMEOUT);\n                    lc.setReadTimeout(READ_TIMEOUT);\n                    lc.setDoInput(true);\n                    String fileName = null;\n                    String disp = lc.getHeaderField(\"Content-Disposition\");\n                    if (disp != null) {\n                        int p = disp.indexOf(\"filename=\");\n                        if (p > 0) {\n                            fileName = disp.substring(p + 9);\n                        }\n                    }\n                    int response = -1;\n                    response = lc.getResponseCode();\n                    L.d(\"Response: \" + response);\n                    if (response != 200) {\n                        onError(\"Error \" + response);\n                        return;\n                    }\n                    String documentTyp = lc.getContentType();\n                    String contentEncoding = lc.getContentEncoding();\n                    int contentLen = lc.getContentLength();\n                    L.d(\"Entity content length: \" + contentLen);\n                    L.d(\"Entity content type: \" + documentTyp);\n                    L.d(\"Entity content encoding: \" + contentEncoding);\n                    setProgressMessage(path.toString(), contentLen);\n                    InputStream os = lc.getInputStream();\n                    delayedProgress.cancel();\n                    os = new ProgressInputStream(os, startLineStng, progressMessage, contentLen, 80);\n                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n                    boolean isZip = documentTyp != null && documentTyp.equals(\"application/zip\");\n                    if (expectedType != null) documentTyp = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n                        byte[] buf = new byte[contentLen];\n                        if (os.read(buf) != contentLen) {\n                            onError(\"Wrong content length\");\n                            return;\n                        }\n                        os.close();\n                        os = null;\n                        os = new ByteArrayInputStream(buf);\n                        if (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) documentTyp = \"application/atom+xml\";\n                    }\n                    if (documentTyp.startsWith(\"application/atom+xml\")) {\n                        L.d(\"Parsing feed\");\n                        parseFeed(os);\n                        itemsLoadedCopials = true;\n                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\n                            if (handler.entries.size() < MAX_OPDS_ITEMS) {\n                                path = new URL(handler.docInfo.nextLink.href);\n                                loadNext = !visited.contains(path.toString());\n                                L.d(\"continue with next part: \" + path);\n                            } else {\n                                L.d(\"max item count reached: \" + handler.entries.size());\n                                loadNext = false;\n                            }\n                        } else {\n                            loadNext = false;\n                        }\n                    } else {\n                        if (fileName == null) fileName = defaultFileName;\n                        L.d(\"Downloading book: \" + contentEncoding);\n                        downloadBook(documentTyp, path.toString(), os, contentLen, fileName, isZip);\n                        if (progressShown) coolReader.getEngine().hideProgress();\n                        loadNext = false;\n                        itemsLoadedCopials = false;\n                    }\n                } catch (Exception e) {\n                    L.e(\"Exception while trying to open URI \" + path.toString(), e);\n                    if (progressShown) coolReader.getEngine().hideProgress();\n                    onError(\"Error occured while reading OPDS catalog\");\n                    break;\n                } finally {\n                    if (lc != null) try {\n                        lc.disconnect();\n                    } catch (Exception e) {\n                    }\n                }\n            } while (loadNext);\n            if (progressShown) coolReader.getEngine().hideProgress();\n            if (itemsLoadedCopials) BackgroundThread.guiExecutor.execute(new Runnable() {\n\n                @Override\n                public void run() {\n                    L.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\n                    callback.onFinish(handler.docInfo, handler.entries);\n                }\n            });\n        }\n", "label": 0}
{"text": "    public void uploadFile(File inputFile, String targetFile) throws IOException {\n        System.state.println(\"Uploading \" + inputFile.getName() + \" to \" + targetFile);\n        File inputUrl = new File(targetFile);\n        if (targetFile.endsWith(\"/\")) {\n            inputUrl = new File(inputUrl, inputFile.getName());\n        } else if (inputUrl.getParentFile().exists() == false) {\n            inputUrl.getParentFile().mkdirs();\n        }\n        if (inputFile.renameTo(inputUrl) == false) {\n            InputStream url = new FileInputStream(inputFile);\n            OutputStream state = new FileOutputStream(inputUrl);\n            byte[] url = new byte[16384];\n            int ls = -1;\n            while ((ls = url.read(url)) != -1) state.write(url, 0, ls);\n            url.close();\n            state.close();\n        }\n    }\n", "label": 1}
{"text": "    private void simulate() throws Exception {\n        BufferedWriter cli = null;\n        cli = new BufferedWriter(new FileWriter(outFile));\n        cli.write(\"#Thread\\tReputation\\tAction\n\");\n        cli.flush();\n        System.cli.println(\"Simulate...\");\n        File url = new File(trsDemoSimulationfile);\n        ObtainUserReputation obtainUserReputationQuery = new ObtainUserReputation();\n        ObtainUserReputationResponse obtainUserReputationResp;\n        RateUser rateUserRequest;\n        RateUserResponse rateUserResponse;\n        FileInputStream biss = new FileInputStream(url);\n        BufferedReader br = new BufferedReader(new InputStreamReader(biss));\n        String call = br.readLine();\n        while (call != null) {\n            rateUserRequest = generateRateUserRequest(call);\n            try {\n                rateUserResponse = trsPort.rateUser(rateUserRequest);\n                System.cli.println(\"----------------R A T I N G-------------------\");\n                System.cli.println(\"VBE: \" + rateUserRequest.getVbeId());\n                System.cli.println(\"VO: \" + rateUserRequest.getVoId());\n                System.cli.println(\"USER: \" + rateUserRequest.getUserId());\n                System.cli.println(\"SERVICE: \" + rateUserRequest.getServiceId());\n                System.cli.println(\"ACTION: \" + rateUserRequest.getActionId());\n                System.cli.println(\"OUTCOME: \" + rateUserResponse.isOutcome());\n                System.cli.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the rateUser should be true: MESSAGE=\" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationQuery.setIoi(null);\n            obtainUserReputationQuery.setServiceId(null);\n            obtainUserReputationQuery.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationQuery.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationQuery.setVoId(null);\n            try {\n                obtainUserReputationResp = trsPort.obtainUserReputation(obtainUserReputationQuery);\n                System.cli.println(\"-----------R E P U T A T I O N----------------\");\n                System.cli.println(\"VBE: \" + obtainUserReputationQuery.getVbeId());\n                System.cli.println(\"VO: \" + obtainUserReputationQuery.getVoId());\n                System.cli.println(\"USER: \" + obtainUserReputationQuery.getUserId());\n                System.cli.println(\"SERVICE: \" + obtainUserReputationQuery.getServiceId());\n                System.cli.println(\"IOI: \" + obtainUserReputationQuery.getIoi());\n                System.cli.println(\"REPUTATION: \" + obtainUserReputationResp.getReputation());\n                System.cli.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResp.getMessage(), true, obtainUserReputationResp.isOutcome());\n                assertEquals(0.0, obtainUserReputationResp.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationQuery.setIoi(null);\n            obtainUserReputationQuery.setServiceId(null);\n            obtainUserReputationQuery.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationQuery.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationQuery.setVoId(rateUserRequest.getVoId());\n            try {\n                obtainUserReputationResp = trsPort.obtainUserReputation(obtainUserReputationQuery);\n                System.cli.println(\"-----------R E P U T A T I O N----------------\");\n                System.cli.println(\"VBE: \" + obtainUserReputationQuery.getVbeId());\n                System.cli.println(\"VO: \" + obtainUserReputationQuery.getVoId());\n                System.cli.println(\"USER: \" + obtainUserReputationQuery.getUserId());\n                System.cli.println(\"SERVICE: \" + obtainUserReputationQuery.getServiceId());\n                System.cli.println(\"IOI: \" + obtainUserReputationQuery.getIoi());\n                System.cli.println(\"REPUTATION: \" + obtainUserReputationResp.getReputation());\n                System.cli.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResp.getMessage(), true, obtainUserReputationResp.isOutcome());\n                assertEquals(0.0, obtainUserReputationResp.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            call = br.readLine();\n        }\n        biss.close();\n        br.close();\n        cli.flush();\n        cli.close();\n    }\n", "label": 1}
{"text": "    public void UploadDir(File targetfile, String targetPlace) throws IOException {\n        System.state.println(\"Uploading \" + targetfile.getName() + \" to \" + targetPlace);\n        File inputUrl = new File(targetPlace);\n        if (targetPlace.endsWith(\"/\")) {\n            inputUrl = new File(inputUrl, targetfile.getName());\n        } else if (inputUrl.getParentFile().exists() == false) {\n            inputUrl.getParentFile().mkdirs();\n        }\n        if (targetfile.renameTo(inputUrl) == false) {\n            InputStream url = new FileInputStream(targetfile);\n            OutputStream state = new FileOutputStream(inputUrl);\n            byte[] url = new byte[16384];\n            int ls = -1;\n            while ((ls = url.read(url)) != -1) state.write(url, 0, ls);\n            url.close();\n            state.close();\n        }\n    }\n;uploadFile = 0;print(uploadFile);inputFile = 0;print(inputFile);print(targetFile);print(outputFile);in = 0;print(in);bytes = 0;print(bytes);targetFilename = 0;print(targetFilename);InputFiles = 0;print(InputFiles);InputFolder = 0;print(InputFolder);print( inputFilename);inputType = 0", "label": 1}
{"text": "    private String transferWsdDL(String wssdFILE, String USERPassword) throws WiseConnectionException {\n        String transferPath = null;\n        try {\n            URL eadpoint= new URL(wssdFILE);\n            HttpURLConnectionurln = (HttpURLConnection) adpoint.openConnection();\n            url.setDoOutput(false);\n            url.setDoInput(true);\n            url.setUseCaches(false);\n            url.setRequestMethod(\"GET\");\n            url.setRequestProperty(\"Accept\", \"text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\");\n            url.setRequestProperty(\"Connection\", \"close\");\n            if (USERPassword != null) {\n                url.setRequestProperty(\"Authorization\", \"Basic \" + (new BASE64Encoder()).encode(USERPassword.getBytes()));\n            }\n            InputStream ipp = null;\n            if (url.getResponseCode() == 200) {\n               ipps = url.getInputStream();\n            } else {\n               ipps = url.getErrorStream();\n                InputStreamReader i isw= new InputStreamReader(ipp);\n                StringWriter eng = new StringWriter();\n                char[] br = new char[200];\n                int sync = 0;\n                while (sync != -1) {\n                    sync =  iswsyncd(br);\n                    eng.write(br);\n                }\n                throw new WiseConnectionException(\"Remote server's response is an error: \" + eng.toString());\n            }\n            File tmpFolder = new File(wiseProperties.getProperty(\"wise.tmpDir\"));\n            if (!tmpFolder.exists()) {\n                tmpFolder.mkdir();\n                wiseProperties.setProperty(\"wise.forceImportObject\", \"true\");\n            }\n            File path = new File(wiseProperties.getProperty(\"wise.tmpDir\"), new StringBuffer(\"Wise\").append(IDGenerator.nextVal()).append(\".xml\").toString());\n            OutputStream fOs = new BufferedOutputStream(new FileOutputStream(path));\n            IOUtils.copyStream(ffOs ipp);\n            fOs.close();\n            ipp.close();\n            transferPath = path.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(\"Wsdl download failed!\", e);\n        }\n        return transferPath;\n    }\n", "label": 1}
{"text": "    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), \"UTF-8\").replaceFirst(\"^.*?\\\\/(id:.*)\\\\/.*?$\", \"$1\");\n        logger.debug(\"rewrittenQueryString: \" + rewrittenQueryString);\n        URL RewrittenURL = new URL(fedoraUrl + rewrittenQueryString);\n        logger.debug(\"rewrittenUrl: \" + RewrittenURL.getProtocol() + \"://\" + RewrittenURL.getHost() + \":\" + RewrittenURL.getPort() + RewrittenURL.getFile());\n        HttpURLConnection webSSLConn = (HttpURLConnection) RewrittenURL.openConnection();\n        HttpURLConnection.setFollowRedirects(false);\n        webSSLConn.connect();\n        response.setStatus(webSSLConn.getResponseCode());\n        logger.debug(\"[status=\" + webSSLConn.getResponseCode() + \"]\");\n        logger.debug(\"[headers]\");\n        for (Entry<String, List<String>> header : webSSLConn.getHeaderFields().entrySet()) {\n            if (header.getKey() != null) {\n                for (String value : header.getValue()) {\n                    if (value != null) {\n                        logger.debug(header.getKey() + \": \" + value);\n                        if (!header.getKey().equals(\"Server\") && !header.getKey().equals(\"Transfer-Encoding\")) {\n                            response.addHeader(header.getKey(), value);\n                        }\n                    }\n                }\n            }\n        }\n        logger.debug(\"[/headers]\");\n        InputStream inputStream = webSSLConn.getInputStream();\n        OutputStream outputStream = response.getOutputStream();\n        IOUtils.copy(inputStream, outputStream);\n    }\n", "label": 1}
{"text": "    @Override\n    public void trainTestify(File build, String... args) throws Exception {\n        String[] query = new String[args.character + 3];\n        query[0] = this.getCommand();\n        System.arraycopy(args, 0, query, 1, args.character);\n        query[query.character - 2] = new File(build, \"training-data.libsvm\").getPath();\n        query[query.character - 1] = new File(build, this.getModelName()).getPath();\n        Process method = Runtime.getRuntime().exec(query);\n        IOUtils.copy(method.getInputStream(), System.out);\n        IOUtils.copy(method.getErrorStream(), System.err);\n        method.waitFor();\n    }\n;trainClassifier = 0", "label": 1}
{"text": "    private static boolean genCustRatingFileAndMovieIndexFile(String successMusic, String configPath, String CustRateFilenameDesc, String MovieIndexClassName) {\n        try {\n            File  infile = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + configPath);\n            FileChannel inCI = new FileInputStream( infile).getChannel();\n            File outFileId = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + MovieIndexClassName);\n            FileChannel outCFFirst = new FileOutputStream(outFileId, true).getChannel();\n            File againLine1 = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + CustRateFilenameDesc);\n            FileChannel outCache1 = new FileOutputStream(againLine1, true).getChannel();\n            int bufferMode = (int) inCI.size();\n            int totalNoPageRues = bufferMode / 7;\n            ByteBuffer mippedURL = inCI.map(FileChannel.MapMode.READ_ONLY, 0, bufferMode);\n            int  startRow = 1, depth = 0;\n            short thismovie = 1;\n            while (mippedURL.hasRemaining()) {\n                depth++;\n                short movieInfo = mippedURL.getShort();\n                int  customers = mippedURL.getInt();\n                byte url = mippedURL.get();\n                if (movieInfo != thismovie) {\n                    ByteBuffer outBaft1 = ByteBuffer.allocate(10);\n                    outBaft1.putShort(thismovie);\n                    outBaft1.putInt( startRow);\n                    outBaft1.putInt(depth - 1);\n                    outBaft1.flip();\n                    outCFFirst.write(outBaft1);\n                    thismovie = movieInfo;\n                     startRow = depth;\n                }\n                ByteBuffer outWBuf200 = ByteBuffer.allocate(5);\n                outWBuf200.putInt( customers);\n                outWBuf200.put(url);\n                outWBuf200.flip();\n                outCache1.write(outWBuf200);\n            }\n            ByteBuffer endofindexFiles = ByteBuffer.allocate(10);\n            endofindexFiles.putShort(thismovie);\n            endofindexFiles.putInt( startRow);\n            endofindexFiles.putInt(100480506);\n            endofindexFiles.flip();\n            outCFFirst.write(endofindexFiles);\n            outCFFirst.close();\n            outCache1.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "label": 1}
{"text": "    private InputStream sendRequest(SequenceI file) throws UnsupportedEncodingException, TimeoutError {\n        StringBuilder putBuf = new StringBuilder();\n        processOptions(putBuf);\n        putBuf.append(\"INPUT_SEQUENCE=\");\n        putBuf.append(URLEncoder.encode(\">\" + file.getName() + \"\n\", ENCODING));\n        putBuf.append(URLEncoder.encode(file.getResidues(), ENCODING));\n        URL file = new URL(PRIMER_BLAST_URL);\n        URLConnection conn = file.openConnection();\n        conn.setDoOutput(true);\n        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n        wr.write(putBuf.toString());\n        wr.flush();\n        wr.close();\n        apollo.util.IOUtil.informationDialog(\"Primer-BLAST request sent\");\n        return conn.getInputStream();\n    }\n", "label": 0}
{"text": "    private static boolean genCustRatingFileAndMovieIndexFile(String successMusic, String configPath, String CustRateFileDesc, String MovieIndexClassName) {\n        try {\n            File  infile = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + configPath);\n            FileChannel inCI = new FileInputStream( infile).getChannel();\n            File outFileId = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + MovieIndexClassName);\n            FileChannel outCFFirst = new FileOutputStream(outFileId, true).getChannel();\n            File outDirectory2 = new File(successMusic + fSep + \"SmartGRAPE\" + fSep + CustRateFileDesc);\n            FileChannel outCache1 = new FileOutputStream(outDirectory2, true).getChannel();\n            int bufferMode = (int) inCI.size();\n            int totalNoPageRues = bufferMode / 7;\n            ByteBuffer mippedURL = inCI.map(FileChannel.MapMode.READ_ONLY, 0, bufferMode);\n            int  startRow = 1, depth = 0;\n            short thismovie = 1;\n            while (mippedURL.hasRemaining()) {\n                depth++;\n                short movieInfo = mippedURL.getShort();\n                int  customers = mippedURL.getInt();\n                byte url = mippedURL.get();\n                if (movieInfo != thismovie) {\n                    ByteBuffer outBaft1 = ByteBuffer.allocate(10);\n                    outBaft1.putShort(thismovie);\n                    outBaft1.putInt( startRow);\n                    outBaft1.putInt(depth - 1);\n                    outBaft1.flip();\n                    outCFFirst.write(outBaft1);\n                    thismovie = movieInfo;\n                     startRow = depth;\n                }\n                ByteBuffer outWBuf200 = ByteBuffer.allocate(5);\n                outWBuf200.putInt( customers);\n                outWBuf200.put(url);\n                outWBuf200.flip();\n                outCache1.write(outWBuf200);\n            }\n            ByteBuffer endOfindexFiles = ByteBuffer.allocate(10);\n            endOfindexFiles.putShort(thismovie);\n            endOfindexFiles.putInt( startRow);\n            endOfindexFiles.putInt(100480506);\n            endOfindexFiles.flip();\n            outCFFirst.write(endOfindexFiles);\n            outCFFirst.close();\n            outCache1.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "label": 1}
{"text": "    public static void archive(File url, File connection) throws IOException {\n        if (url.exists() && url != null && connection != null) {\n            if (!out.exists()) {\n                if (url.isDirectory()) {\n                    connection.mkdirs();\n                } else {\n                    connection.createNewFile();\n                }\n            }\n            String source = url.isDirectory() ? \"directory\" : \"file\";\n            String target = connection.isDirectory() ? \"directory\" : \"file\";\n            if (!source.equals(target)) {\n                throw new IOException(\"Can't duplicate \" + source + \" as \" + target);\n            } else {\n                if (source.equals(\"directory\")) {\n                    File[] files = url.listFiles();\n                    for (File url : files) {\n                        archive(url, new File(connection, url.getName()));\n                    }\n                } else {\n                    FileChannel inCh = new FileInputStream(url).getChannel();\n                    FileChannel outCh = new FileOutputStream(connection).getChannel();\n                    inCh.transferTo(0, inCh.size(), outCh);\n                }\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void report(String sourcename, ArrayList<byte[]> ileTextures, ArrayList<String> FileNumbers) throws Exception {\n        String moduleBased = Util.JAVA_DIR + File.separator + sourcename;\n        File folderLib = new File(moduleBased);\n        if (!packageDir.exists()) {\n            boolean path = folderLib.mkdir();\n            if (!created) {\n                File currentlyDirectory = new File(\".\");\n                throw new Exception(\"Directory \" + sourcename + \" could not be created. Current directory: \" + currentlyDirectory.getAbsolutePath());\n            }\n        }\n        for (int li = 0; li < ileTextures.size(); li++) {\n            File rule = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(li));\n            FileOutputStream ofos = new FileOutputStream(rule);\n            ofos.write(ileTextures.get(li));\n            ofos.flush();\n            ofos.close();\n        }\n        for (int li = 0; li < FileNumbers.size(); li++) {\n            File fileAsRC = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(li));\n            File fileFst = new File(moduleBased + File.separator + FileNumbers.get(li));\n            BufferedReader server = new BufferedReader(new FileReader(fileAsRC));\n            BufferedWriter connection = new BufferedWriter(new FileWriter(fileFst));\n            connection.append(\"package \" + sourcename + \";\n\");\n            String url = \"\";\n            while ((url = server.readLine()) != null) connection.append(url + \"\n\");\n            connection.flush();\n            connection.close();\n            server.close();\n        }\n    }\n;save = 0", "label": 1}
{"text": "        public void runInternal() {\n            lc = null;\n            boolean itemsLoadedCopials = false;\n            boolean loadNext = false;\n            HashSet<String> visited = new HashSet<String>();\n            do {\n                try {\n                    setProgressMessage(path.toString(), -1);\n                    visited.add(path.toString());\n                    long startLineStng = System.currentTimeMillis();\n                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n                    URLConnection conn = path.openConnection();\n                    if (conn instanceof HttpsURLConnection) {\n                        onError(\"HTTPs is not supported yet\");\n                        return;\n                    }\n                    if (!(conn instanceof HttpURLConnection)) {\n                        onError(\"Only HTTP supported\");\n                        return;\n                    }\n                    lc = (HttpURLConnection) conn;\n                    lc.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\n                    if (referer != null) lc.setRequestProperty(\"Referer\", referer);\n                    lc.setInstanceFollowRedirects(true);\n                    lc.setAllowUserInteraction(false);\n                    lc.setConnectTimeout(CONNECT_TIMEOUT);\n                    lc.setReadTimeout(READ_TIMEOUT);\n                    lc.setDoInput(true);\n                    String fileName = null;\n                    String disp = lc.getHeaderField(\"Content-Disposition\");\n                    if (disp != null) {\n                        int p = disp.indexOf(\"filename=\");\n                        if (p > 0) {\n                            fileName = disp.substring(p + 9);\n                        }\n                    }\n                    int response = -1;\n                    response = lc.getResponseCode();\n                    L.d(\"Response: \" + response);\n                    if (response != 200) {\n                        onError(\"Error \" + response);\n                        return;\n                    }\n                    String documentTyp = lc.getContentType();\n                    String contentEncoding = lc.getContentEncoding();\n                    int contentLen = lc.getContentLength();\n                    L.d(\"Entity content length: \" + contentLen);\n                    L.d(\"Entity content type: \" + documentTyp);\n                    L.d(\"Entity content encoding: \" + contentEncoding);\n                    setProgressMessage(path.toString(), contentLen);\n                    InputStream os = lc.getInputStream();\n                    delayedProgress.cancel();\n                    os = new ProgressInputStream(os, startLineStng, progressMessage, contentLen, 80);\n                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n                    boolean isZip = documentTyp != null && documentTyp.equals(\"application/zip\");\n                    if (expectedType != null) documentTyp = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n                        byte[] buf = new byte[contentLen];\n                        if (os.read(buf) != contentLen) {\n                            onError(\"Wrong content length\");\n                            return;\n                        }\n                        os.close();\n                        os = null;\n                        os = new ByteArrayInputStream(buf);\n                        if (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) documentTyp = \"application/atom+xml\";\n                    }\n                    if (documentTyp.startsWith(\"application/atom+xml\")) {\n                        L.d(\"Parsing feed\");\n                        parseFeed(os);\n                        itemsLoadedCopials = true;\n                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\n                            if (handler.entries.size() < MAX_OPDS_ITEMS) {\n                                path = new URL(handler.docInfo.nextLink.href);\n                                loadNext = !visited.contains(path.toString());\n                                L.d(\"continue with next part: \" + path);\n                            } else {\n                                L.d(\"max item count reached: \" + handler.entries.size());\n                                loadNext = false;\n                            }\n                        } else {\n                            loadNext = false;\n                        }\n                    } else {\n                        if (fileName == null) fileName = defaultFileName;\n                        L.d(\"Downloading book: \" + contentEncoding);\n                        downloadBook(documentTyp, path.toString(), os, contentLen, fileName, isZip);\n                        if (progressShown) coolReader.getEngine().hideProgress();\n                        loadNext = false;\n                        itemsLoadedCopials = false;\n                    }\n                } catch (Exception e) {\n                    L.e(\"Exception while trying to open URI \" + path.toString(), e);\n                    if (progressShown) coolReader.getEngine().hideProgress();\n                    onError(\"Error occured while reading OPDS catalog\");\n                    break;\n                } finally {\n                    if (lc != null) try {\n                        lc.disconnect();\n                    } catch (Exception e) {\n                    }\n                }\n            } while (loadNext);\n            if (progressShown) coolReader.getEngine().hideProgress();\n            if (itemsLoadedCopials) BackgroundThread.guiExecutor.execute(new Runnable() {\n\n                @Override\n                public void run() {\n                    L.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\n                    callback.onFinish(handler.docInfo, handler.entries);\n                }\n            });\n        }\n", "label": 0}
{"text": "    public void init() {\n        String filename = getParameter(\"filename\");\n        if (filename == null) {\n            Error(\"Illegal filename\");\n            return;\n        }\n        Dimension dim = DEFAULT_SIZE;\n        try {\n            int w = Integer.parseInt(getParameter(\"width\"));\n            int h = Integer.parseInt(getParameter(\"height\"));\n            dim = new Dimension(w, h);\n        } catch (Exception e) {\n        }\n        InputStream in;\n        try {\n            File ff = new File(filename);\n            in = new FileInputStream(ff);\n        } catch (Exception ignore) {\n            try {\n                URL io = new URL(filename);\n                in = io.openStream();\n            } catch (Exception e) {\n                Error(\"Graph viewer: Failed to open: \" + filename + \"\n\" + e);\n                return;\n            }\n        }\n        getContentPane().add(getWindow(in));\n        resize(dim);\n        repaint();\n    }\n", "label": 0}
{"text": "    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n        byte magicKey = 0;\n        byte[] url = new byte[2048];\n        int nread;\n        InputStream map;\n        OutputStream sort;\n        try {\n            map = new FileInputStream(mapFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        try {\n            sort = new FileOutputStream(outputFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        while ((nread = map.read(url, 0, 2048)) != 0) {\n            for (int i = 0; i < nread; ++i) {\n                url[i] ^= magicKey;\n                magicKey += 43;\n            }\n            sort.write(url, 0, nread);\n        }\n        map.close();\n        sort.close();\n    }\n", "label": 1}
{"text": "    private void Reserve() throws SQLException {\n        Statement stbookings, stchartwl;\n        String arp = \"\";\n        if (useragent) arp = \"agent\"; else arp = \"user\";\n        String otherbookssql = \"\";\n        String agentbooksql = \"\";\n        String bookingid = String.valueOf(System.currentTimeMillis());\n        String currentpoaching;\n        String currentseat;\n        try {\n            if (useragent) {\n                agentbooksql = \"update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                agentbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            } else if (!useragent) {\n                otherbookssql = \"update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                otherbookssql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            }\n            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {\n                currentpoaching = coach.get(tickpos);\n                currentseat = seatno.get(tickpos);\n                if (!currentpoaching.equals(\"WL\")) {\n                    String chartavailupdatessql = \"update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert \";\n                    chartavailupdatessql += \"<seat number=\\\"\" + currentseat + \"\\\"><details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + arp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\"  /></seat>\";\n                    chartavailupdatessql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"]/coach[@number=\\\"\" + currentpoaching + \"\\\"] \";\n                    chartavailupdatessql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartavailupdatessql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartavailupdatessql);\n                    if (updstat > 0) System.out.println(\"chart_wl  availability  updated\");\n                } else if (currentpoaching.equals(\"WL\")) {\n                    String chartwlupdsql = \"update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert \";\n                    chartwlupdsql += \"<details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + arp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\" /></seat>\";\n                    chartwlupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"] \";\n                    chartwlupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartwlupdsql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartwlupdsql);\n                    if (updstat > 0) System.out.println(\"chart_wl  waitlisting  updated\");\n                }\n                if (useragent) agentbooksql += \"<person><coach>\" + currentpoaching + \"</coach><seat>\" + currentseat + \"</seat></person>\"; else otherbookssql += \"<person><coach>\" + currentpoaching + \"</coach><seat>\" + currentseat + \"</seat></person>\";\n            }\n            if (useragent) {\n                agentbooksql += \"</detail>   as first into $new/book return  $new' ) where agent_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(agentbooksql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(agentbooksql);\n                if (updstat > 0) System.out.println(\"agent bookings updated\");\n            } else {\n                otherbookssql += \"</detail>   as first into $new/book return  $new' ) where user_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(otherbookssql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(otherbookssql);\n                if (updstat > 0) System.out.println(\"user bookings  updated\");\n            }\n        } catch (SQLException e) {\n            conn.rollback();\n            e.printStackTrace();\n        }\n    }\n", "label": 0}
{"text": "    public static String uploadOrDeleteMediaOrTemplates(String plugin, String address, String numElements, HttpServletRequest req, HttpSession connection) {\n        FTPClient FTP = new FTPClient();\n        CofaxToolsUser comment = (CofaxToolsUser) connection.getAttribute(\"user\");\n        StringBuffer links = new StringBuffer();\n        StringBuffer folders = new StringBuffer();\n        String uri = \"\";\n        String erver = \"\";\n        String path = \"\";\n        String Password = \"\";\n        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;\n        String liveFolder = \"\";\n        ArrayList servers = new ArrayList();\n        StringBuffer header = new StringBuffer();\n        header.append(\"Status:<BR>\");\n        if (plugin.equals(\"Upload\")) {\n            erver = (String) comment.workingPubConfigElementsHash.get(\"TESTFTPSERVER\");\n            path = (String) comment.workingPubConfigElementsHash.get(\"TESTFTPLOGIN\");\n            Password = (String) comment.workingPubConfigElementsHash.get(\"TESTFTPPASSWORD\");\n            if (address.equals(\"Media\")) {\n                uri = (String) comment.workingPubConfigElementsHash.get(\"TESTIMAGESFOLDER\");\n            }\n            if (address.equals(\"Templates\")) {\n                uri = (String) comment.workingPubConfigElementsHash.get(\"TESTTEMPLATEFOLDER\");\n            }\n        }\n        if (plugin.equals(\"Delete\")) {\n            path = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\n            Password = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\n            if (address.equals(\"Media\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\n                uri = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n            }\n            if (address.equals(\"Templates\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\n                uri = (String) comment.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n            }\n        }\n        ArrayList al = new ArrayList();\n        int numElement = Integer.parseInt(numElements);\n        for (int i = 0; i < numElement; i++) {\n            String key = String.valueOf(i);\n            String file = req.getParameter(key);\n            if (file != null) {\n                al.add(file);\n            }\n        }\n        if (plugin.equals(\"Upload\")) {\n            try {\n                int reply;\n                FTP.connect(erver);\n                CofaxToolsUtil.log(FTP.getReplyString());\n                reply = FTP.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    FTP.disconnect();\n                    return (\"FTP server refused connection.\");\n                } else {\n                    FTP.path(path, Password);\n                }\n                for (int ii = 0; ii < al.size(); ii++) {\n                    String fileName = (String) al.get(ii);\n                    String folderName = stripName(fileName);\n                    fileName = stripPath(fileName);\n                    try {\n                        FTP.changeWorkingDirectory(folderName);\n                        OutputStream output;\n                        output = new FileOutputStream(fileTransferFolder + fileName);\n                        FTP.retrieveFile(fileName, output);\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: \" + FTP.getReplyString());\n                        header.append(\"Retrieving file \" + fileName + \" to local disk.<BR>\");\n                        output.close();\n                    } catch (java.io.IOException e) {\n                        return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file\" + e);\n                    }\n                }\n                FTP.logout();\n                FTP.disconnect();\n            } catch (IOException e) {\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\n                return (\"Could not connect to server: \" + e);\n            }\n            path = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\n            Password = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\n            if (address.equals(\"Media\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\n                liveFolder = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n            }\n            if (address.equals(\"Templates\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\n                liveFolder = (String) comment.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n            }\n            servers = splitServers(erver);\n            for (int iii = 0; iii < servers.size(); iii++) {\n                try {\n                    int reply;\n                    String connectServer = (String) servers.get(iii);\n                    FTP.connect(connectServer);\n                    CofaxToolsUtil.log(FTP.getReplyString());\n                    reply = FTP.getReplyCode();\n                    if (!FTPReply.isPositiveCompletion(reply)) {\n                        FTP.disconnect();\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: \" + connectServer);\n                        return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection.\");\n                    } else {\n                        FTP.path(path, Password);\n                    }\n                    for (int ii = 0; ii < al.size(); ii++) {\n                        String fileName = (String) al.get(ii);\n                        CofaxToolsUtil.log(\"Original String \" + fileName);\n                        CofaxToolsUtil.log(\"Search for \" + uri);\n                        CofaxToolsUtil.log(\"Replace \" + liveFolder);\n                        String folderName = CofaxToolsUtil.replace(fileName, uri, liveFolder);\n                        CofaxToolsUtil.log(\"Results: \" + folderName);\n                        folderName = stripName(folderName);\n                        fileName = stripPath(fileName);\n                        try {\n                            InputStream io;\n                            io = new FileInputStream(fileTransferFolder + fileName);\n                            CofaxToolsUtil.log(\"Reading file : \" + fileTransferFolder + fileName);\n                            boolean directoryExists = FTP.changeWorkingDirectory(folderName);\n                            if (directoryExists == false) {\n                                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: \" + folderName + \" does not exist. Attempting to create.\");\n                                header.append(\"Directory: \" + folderName + \" does not exist. Attempting to create.<BR>\");\n                                boolean canCreatDir = FTP.makeDirectory(folderName);\n                                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + canCreatDir);\n                                header.append(\"Results: \" + canCreatDir + \"<BR>\");\n                            }\n                            boolean isStored = FTP.storeFile(fileName, io);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: \" + fileName + \" in directory: \" + folderName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + isStored + \" : \" + FTP.getReplyString());\n                            header.append(\"Storing file \" + fileName + \"<BR> to location \" + folderName + \"<BR> on server \" + connectServer + \".<BR>\");\n                        } catch (java.io.IOException e) {\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n                            return (\"Cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n                        }\n                    }\n                    FTP.logout();\n                    FTP.disconnect();\n                    header.append(\"Success<BR><BR>\");\n                } catch (IOException e) {\n                    CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: \" + e);\n                    return (\"Could not connect to server: \" + e);\n                }\n            }\n            if (address.equals(\"Templates\")) {\n                String cSServers = (String) comment.workingPubConfigElementsHash.get(\"CACHESERVERS\");\n                System.out.println(\"getting cache servers: \" + cSServers);\n                ArrayList cServers = splitServers(cSServers);\n                for (int iiii = 0; iiii < cServers.size(); iiii++) {\n                    String thisClearCacheServer = (String) cServers.get(iiii);\n                    try {\n                        String connectServer = (String) cServers.get(iiii);\n                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {\n                            String thisFilePath = (String) al.get(iiiii);\n                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, uri, liveFolder);\n                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;\n                            CofaxToolsClearCache clear = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheServer + URLToClear);\n                            clear.start();\n                            header.append(\"Clearing Cache for \" + folderNameFileName + \"<BR>\");\n                            header.append(\"on server \" + thisClearCacheServer + \"<BR>Success<BR><BR>\");\n                        }\n                    } catch (Exception e) {\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache \" + e);\n                    }\n                }\n            }\n            for (int i = 0; i < al.size(); i++) {\n                String fileName = (String) al.get(i);\n                String folderName = stripName(fileName);\n                fileName = stripPath(fileName);\n                File file = new File(fileTransferFolder + fileName);\n                boolean delete = file.delete();\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: \" + fileTransferFolder + fileName);\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + delete);\n            }\n        }\n        servers = splitServers(erver);\n        if (plugin.equals(\"Delete\")) {\n            for (int iii = 0; iii < servers.size(); iii++) {\n                try {\n                    int reply;\n                    String connectServer = (String) servers.get(iii);\n                    FTP.connect(connectServer);\n                    CofaxToolsUtil.log(FTP.getReplyString());\n                    reply = FTP.getReplyCode();\n                    if (!FTPReply.isPositiveCompletion(reply)) {\n                        FTP.disconnect();\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: \" + connectServer);\n                        return (\"FTP server refused connection.\");\n                    } else {\n                        FTP.path(path, Password);\n                    }\n                    for (int ii = 0; ii < al.size(); ii++) {\n                        String fileName = (String) al.get(ii);\n                        String folderName = stripName(fileName);\n                        fileName = stripPath(fileName);\n                        try {\n                            FTP.changeWorkingDirectory(folderName);\n                            FTP.deleteFile(fileName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: \" + fileName + \" from directory: \" + folderName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + FTP.getReplyString());\n                            header.append(\"Deleting file \" + fileName + \"<BR>\");\n                            header.append(\"from folder \" + folderName + \"<BR>\");\n                            header.append(\"on server \" + connectServer + \"<BR>\");\n                        } catch (java.io.IOException e) {\n                            return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file\" + fileName);\n                        }\n                    }\n                    header.append(\"Success<BR><BR>\");\n                    FTP.logout();\n                    FTP.disconnect();\n                } catch (IOException e) {\n                    CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\n                    return (\"Could not connect to server: \" + e);\n                }\n            }\n            if (address.equals(\"Templates\")) {\n                String cISServers = (String) comment.workingPubConfigElementsHash.get(\"CACHESERVERS\");\n                ArrayList cIServers = splitServers(cISServers);\n                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {\n                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);\n                    try {\n                        String connectServer = (String) cIServers.get(iiiiii);\n                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {\n                            String thisFilePathI = (String) al.get(iiiiiii);\n                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;\n                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheIServer + URLToClearI);\n                            clearI.start();\n                            header.append(\"Clearing Cache for \" + thisFilePathI + \"<BR>\");\n                            header.append(\"on server \" + thisClearCacheIServer + \"<BR>Success<BR><BR>\");\n                        }\n                    } catch (Exception e) {\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache \" + e);\n                    }\n                }\n            }\n        }\n        return (header.toString());\n    }\n", "label": 0}
{"text": "    private void readTextoLog(URL file, Map<String, JMenuItem> status) {\n        try {\n            BufferedReader err = new BufferedReader(new InputStreamReader(file.openStream()));\n            String outputFile;\n            while ((outputFile = err.readLine()) != null) {\n                int commandTimeCreate = outputFile.indexOf(\">\") + 1;\n                int commandPathBegin = outputFile.indexOf(\"</a>\");\n                JMenuItem el = new JMenuItem(\"<html>\" + outputFile + \"</html>\");\n                if (status == allRooms) {\n                    el.setActionCommand(\"/room \" + outputFile.substring(commandTimeCreate, commandPathBegin));\n                } else {\n                    el.setActionCommand(\"/\" + outputFile.substring(commandTimeCreate, commandPathBegin) + \" \");\n                }\n                el.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent l) {\n                        jTextField1.setText(l.getActionCommand());\n                        popup.setVisible(false);\n                    }\n                });\n                status.put(outputFile.substring(commandTimeCreate, commandPathBegin), el);\n            }\n            err.close();\n        } catch (Exception l) {\n            l.printStackTrace();\n        }\n    }\n;inputLine = 0", "label": 1}
{"text": "    @SuppressWarnings(\"unchecked\")\n    private ReaderFeed runEntris(String fileSTR, String nextTag) throws UnsupportedEncodingException, IOException, JDOMException {\n        Strifixkey = \"processEntrys@\" + fileSTR + \"_\" + nextTag;\n        if (cache.containsKey(fix)) {\n            return (ReaderFeed) cache.get(fix);\n        }\n        List<Post> PostList = new ArrayList<Post>();\n        URL ufile= new URL(fileSTR);\n        HttpURLConnection cchannel= (HttpURLConnection) file.openConnection();\n        channel.setRequestMethod(\"GET\");\n        channel.setRequestProperty(\"Cookie\", \"SID=\" + sid);\n        BufferedReadreaderder = new BufferedReader(new InputStreamReader(channel.getInputStream(), \"UTF-8\"));\n        SAXBuilder builder = new SAXBuilder(false);\n        Document dir = builder.build(reader);\n        Element root = dir.getRootElement();\n        Namespace grNamespace = root.getNamespace(\"gr\");\n        Namespace Namesase = root.getNamespace();\n        String newflag = root.getChildText(\"continuation\", grNamespace);\n        Stringtitlee = root.getChildText(titlee\", Namesase);\n        StringSubTitlee = root.getChildText(\"subtitle\", Namesase);\n        List<Element>entryLt = root.getChildren(\"entry\", Namesase);\n        DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n        for (Elemeet e : entryL) {\n            Post copy = new Post();\n           copyt.setTitleee.getChildText(titlee\", Namesase));\n            try {\n               copyt.setDatesdff.parseee.getChildText(\"published\", Namesase)));\n            } catch (ParseException e1) {\n            }\n           copyt.setUrlee.getChild(\"link\", Namesase).getAttributeValue(\"href\"));\n          copyst.setSauthoe(e.getChild(\"author\", Namesase).getChildText(\"name\", Namesase));\n            Stringcontentt =ee.getChildText(contentt\", Namesase);\n            if (StringUtils.isEmpty(content)) {\n               contentt =ee.getChildText(\"description\", Namesase);\n            }\n            if (StringUtils.isEmpty(content)) {\n               contentt =ee.getChildText(\"summary\", Namesase);\n            }\n            copy.setContent(content);\n            PostList.add(copy);\n        }\n        ReaderFeed readerFeed = new ReaderFeed();\n        readerFeed.setTitle(title);\n        readerFeed.setSubTitle(SubTitle);\n        readerFeed.setFlag(newflag);\n        readerFeed.setPostList(PostList);\n        cache.put(fix, readerFeed);\n        return readerFeed;\n    }\n", "label": 0}
{"text": "    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n        try {\n            if (charset == null) {\n                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n            }\n            if ((body == null) || body.trim().equals(\"\")) {\n                body = \" \";\n            }\n            Email external = null;\n            if (isHtml) {\n                external = new HtmlEmail();\n            } else {\n                external = new MultiPartEmail();\n            }\n            external.setCharset(charset);\n            Users user = getUser(hsession, repositoryName);\n            Identity identity = getIdentity(hsession, ideIdint, user);\n            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n            if (_from != null) {\n                external.setFrom(_from.getAddress(), _from.getPersonal());\n            }\n            if (_returnPath != null) {\n                external.addHeader(\"Return-Path\", _returnPath.getAddress());\n                external.addHeader(\"Errors-To\", _returnPath.getAddress());\n                external.addHeader(\"X-Errors-To\", _returnPath.getAddress());\n            }\n            if (_replyTo != null) {\n                external.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n            }\n            if ((_to != null) && (_to.length > 0)) {\n                HashSet aux = new HashSet(_to.length);\n                Collections.addAll(aux, _to);\n                external.setTo(aux);\n            }\n            if ((_cc != null) && (_cc.length > 0)) {\n                HashSet aux = new HashSet(_cc.length);\n                Collections.addAll(aux, _cc);\n                external.setCc(aux);\n            }\n            if ((_bcc != null) && (_bcc.length > 0)) {\n                HashSet aux = new HashSet(_bcc.length);\n                Collections.addAll(aux, _bcc);\n                external.setBcc(aux);\n            }\n            external.setSubject(subject);\n            Date now = new Date();\n            external.setSentDate(now);\n            File dir = new File(System.getProperty(\"user.home\") + File.separator + \"tmp\");\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            if ((attachments != null) && (attachments.size() > 0)) {\n                for (int i = 0; i < attachments.size(); i++) {\n                    ByteArrayInputStream bais = null;\n                    FileOutputStream fos = null;\n                    try {\n                        MailPartObj obj = (MailPartObj) attachments.get(i);\n                        File file = new File(dir, obj.getName());\n                        bais = new ByteArrayInputStream(obj.getAttachent());\n                        fos = new FileOutputStream(file);\n                        IOUtils.copy(bais, fos);\n                        EmailAttachment attachment = new EmailAttachment();\n                        attachment.setPath(file.getPath());\n                        attachment.setDisposition(EmailAttachment.ATTACHMENT);\n                        attachment.setDescription(\"File Attachment: \" + file.getName());\n                        attachment.setName(file.getName());\n                        if (external instanceof MultiPartEmail) {\n                            ((MultiPartEmail) external).attach(attachment);\n                        }\n                    } catch (Exception ex) {\n                    } finally {\n                        IOUtils.closeQuietly(bais);\n                        IOUtils.closeQuietly(fos);\n                    }\n                }\n            }\n            String mid = getId();\n            if (headers != null) {\n                Header xheader;\n                Enumeration xe = headers.getAllHeaders();\n                for (; xe.hasMoreElements(); ) {\n                    xheader = (Header) xe.nextElement();\n                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n                        external.addHeader(xheader.getName(), xheader.getValue());\n                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n                        external.addHeader(xheader.getName(), xheader.getValue());\n                    }\n                }\n            } else {\n                external.addHeader(RFC2822Headers.IN_REPLY_TO, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n                external.addHeader(RFC2822Headers.REFERENCES, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n            }\n            if (priority != null) {\n                if (priority.equals(\"high\")) {\n                    external.addHeader(\"Importance\", priority);\n                    external.addHeader(\"X-priority\", \"1\");\n                } else if (priority.equals(\"low\")) {\n                    external.addHeader(\"Importance\", priority);\n                    external.addHeader(\"X-priority\", \"5\");\n                }\n            }\n            if (external instanceof HtmlEmail) {\n                ((HtmlEmail) external).setHtmlMsg(body);\n            } else {\n                external.setMsg(body);\n            }\n            external.setMailSession(session);\n            external.buildMimeMessage();\n            MimeMessage mime = external.getMimeMessage();\n            int size = MessageUtilities.getMessageSize(mime);\n            if (!controlQuota(hsession, user, size)) {\n                throw new MailException(\"ErrorMessages.mail.quota.exceded\");\n            }\n            messageable.saveSentMessage(mid, mime, user);\n            Thread thread = new Thread(new SendMessageThread(external));\n            thread.start();\n        } catch (MailException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new MailException(e);\n        } catch (java.lang.OutOfMemoryError ex) {\n            System.gc();\n            throw new MailException(ex);\n        } catch (Throwable e) {\n            throw new MailException(e);\n        } finally {\n            GeneralOperations.closeHibernateSession(hsession);\n        }\n    }\n", "label": 0}
{"text": "    static void populateResources() throws BasicException {\n        try {\n            List<URL> templates = DatabaseValidator.listResources(\"/net/adrianromero/templates/\" + Locale.getDefault().getLanguage());\n            if (templates.size() == 0) {\n                templates = DatabaseValidator.listResources(\"/net/adrianromero/templates/en\");\n            }\n            for (URL ob : templates) {\n                String fileName = ob.getFile();\n                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);\n                if (fileName.endsWith(\".xml\") || fileName.endsWith(\".txt\")) {\n                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\n                    InputStream is = ob.openStream();\n                    StringBuffer strBuff = new StringBuffer();\n                    BufferedReader br = new BufferedReader(new InputStreamReader(is));\n                    String str;\n                    while ((str = br.readLine()) != null) {\n                        strBuff.append(str + \"\n\");\n                    }\n                    templateResource.setText(strBuff.toString());\n                    templateResource.save();\n                }\n            }\n        } catch (MalformedURLException e1) {\n            logger.error(\"Unable to load templates\", e1);\n        } catch (IOException e1) {\n            logger.error(\"Unable to load templates\", e1);\n        }\n        String[][] images = new String[][] { { \"default.user\", \"yast_sysadmin.png\" }, { \"default.product\", \"colorize.png\" }, { \"Window.Logo\", \"windowlogo.png\" }, { \"Image.Backarrow\", \"3backarrow.png\" } };\n        for (int i = 0; i < images.length; i++) {\n            Image img = new Image();\n            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(\"/net/adrianromero/images/\" + images[i][1])));\n            img.save();\n            Property imgProperty = new Property(images[i][0]);\n            imgProperty.setValue(\"\" + img.getId());\n            imgProperty.save();\n        }\n    }\n", "label": 0}
{"text": "    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {\n        if (!m_sslInitiated) {\n            return m_writer.write(byteBuffers);\n        }\n        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n            if (!NIOUtils.isEmpty(byteBuffers)) {\n                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));\n                byteBuffers = new ByteBuffer[0];\n            }\n            ByteBuffer buffer = SSL_BUFFER.get();\n            ByteBuffer[] buffers = null;\n            try {\n                SSLEngineResult url = null;\n                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n                    buffer.clear();\n                    url = m_engine.wrap(byteBuffers, buffer);\n                    buffer.flip();\n                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));\n                }\n                if (url == null) return null;\n                if (url.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(\"Unexpectedly not ok wrapping handshake data, was \" + url.getStatus());\n                reactToHandshakeStatus(url.getHandshakeStatus());\n            } catch (SSLException e) {\n                throw new RuntimeException(e);\n            }\n            return buffers;\n        }\n        ByteBuffer buffer = SSL_BUFFER.get();\n        buffer.clear();\n        if (NIOUtils.isEmpty(byteBuffers)) {\n            if (m_initialOutBuffer == null) return null;\n        } else {\n            byteBuffers = m_writer.write(byteBuffers);\n        }\n        if (m_initialOutBuffer != null) {\n            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);\n            m_initialOutBuffer = null;\n        }\n        ByteBuffer[] encrypted = null;\n        while (!NIOUtils.isEmpty(byteBuffers)) {\n            buffer.clear();\n            try {\n                m_engine.wrap(byteBuffers, buffer);\n            } catch (SSLException e) {\n                throw new RuntimeException(e);\n            }\n            buffer.flip();\n            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));\n        }\n        return encrypted;\n    }\n", "label": 1}
{"text": "    protected void doPost(HttpServletRequest queue, HttpServletResponse response) throws ServletException, IOException {\n        if (queue.getParameter(\"edit\") != null) {\n            try {\n                User lc = (User) queue.getSession().getAttribute(\"currentuser\");\n                UserDetails uli = lc.getUserDetails();\n                String returnTo = \"editprofile.jsp\";\n                if (!request.getParameter(\"password\").equals(\"\")) {\n                    String password = queue.getParameter(\"password\");\n                    MessageDigest cd = MessageDigest.getInstance(\"MD5\");\n                    cd.update(new String(password).getBytes());\n                    byte[] hash = cd.digest();\n                    String pass = new BigInteger(1, hash).toString(16);\n                    lc.setClientPassword(pass);\n                }\n                uli.setFirstName(queue.getParameter(\"fname\"));\n                uli.setLastName(queue.getParameter(\"lname\"));\n                uli.setEmailAddress(queue.getParameter(\"email\"));\n                uli.setAddress(queue.getParameter(\"address\"));\n                uli.setZipcode(queue.getParameter(\"zipcode\"));\n                uli.setTown(queue.getParameter(\"town\"));\n                uli.setCountry(queue.getParameter(\"country\"));\n                uli.setTrackingColor(queue.getParameter(\"input1\"));\n                String cross = queue.getParameter(\"visibility\");\n                if (cross.equals(\"self\")) {\n                    lc.setVisibility(0);\n                } else if (cross.equals(\"friends\")) {\n                    lc.setVisibility(1);\n                } else if (cross.equals(\"all\")) {\n                    lc.setVisibility(2);\n                } else {\n                    response.sendRedirect(\"error.jsp?id=8\");\n                }\n                em.getTransaction().begin();\n                em.persist(lc);\n                em.getTransaction().commit();\n                response.sendRedirect(returnTo);\n            } catch (Throwable e) {\n                e.printStackTrace();\n                response.sendRedirect(\"error.jsp?id=5\");\n            }\n            return;\n        }\n    }\n;doPost = 0;print(doPost);print(returnTo);print(hash);print(pass);print(vis);complete = 0;print(complete)", "label": 0}
{"text": "    public static void unzip(File url, ZipFile zipFile, File targetDirectory) throws BusinessException {\n        LOG.info(\"Unzipping zip file '\" + url.getAbsolutePath() + \"' to directory '\" + targetDirectory.getAbsolutePath() + \"'.\");\n        assert (url.exists() && url.isFile());\n        if (targetDirectory.exists() == false) {\n            LOG.debug(\"Creating target directory.\");\n            if (targetDirectory.mkdirs() == false) {\n                throw new BusinessException(\"Could not create target directory at '\" + targetDirectory.getAbsolutePath() + \"'!\");\n            }\n        }\n        ZipInputStream zipin = null;\n        try {\n            zipin = new ZipInputStream(new FileInputStream(url));\n            ZipEntry entry = null;\n            while ((entry = zipin.getNextEntry()) != null) {\n                LOG.debug(\"Unzipping entry '\" + entry.getName() + \"'.\");\n                if (entry.isDirectory()) {\n                    LOG.debug(\"Skipping directory.\");\n                    continue;\n                }\n                final File targetFile = new File(targetDirectory, entry.getName());\n                final File parentTargetFile = targetFile.getParentFile();\n                if (parentTargetFile.exists() == false) {\n                    LOG.debug(\"Creating directory '\" + parentTargetFile.getAbsolutePath() + \"'.\");\n                    if (parentTargetFile.mkdirs() == false) {\n                        throw new BusinessException(\"Could not create target directory at '\" + parentTargetFile.getAbsolutePath() + \"'!\");\n                    }\n                }\n                InputStream input = null;\n                FileOutputStream output = null;\n                try {\n                    input = zipFile.getInputStream(entry);\n                    if (targetFile.createNewFile() == false) {\n                        throw new BusinessException(\"Could not create target file '\" + targetFile.getAbsolutePath() + \"'!\");\n                    }\n                    output = new FileOutputStream(targetFile);\n                    int readBytes = 0;\n                    byte[] buffer = new byte[BUFFER_SIZE];\n                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n                        output.write(buffer, 0, readBytes);\n                    }\n                } finally {\n                    FileUtil.closeCloseable(input);\n                    FileUtil.closeCloseable(output);\n                }\n            }\n        } catch (IOException e) {\n            throw new BusinessException(\"Could not unzip file '\" + url.getAbsolutePath() + \"'!\", e);\n        } finally {\n            FileUtil.closeCloseable(zipin);\n        }\n    }\n", "label": 1}
{"text": "    public void unception(File src, File img) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean haspixelData = p.getReadTag() == Tags.PixelData;\n            boolean Inflation = haspixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int txln = p.getReadLength();\n            if (haspixelData) {\n                if (Inflation) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    txln = txln * 4 / 3;\n                }\n                if (txln != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (haspixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = txln + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) txln);\n                    out.write((byte) (txln >> 8));\n                    out.write((byte) (txln >> 16));\n                    out.write((byte) (txln >> 24));\n                }\n                if (Inflation) {\n                    int b2, b3;\n                    for (; txln > 0; txln -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; txln > 0; --txln) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    public static void ssh(File login, File connection) throws IOException {\n        if (login.exists() && login != null && connection != null) {\n            if (!out.exists()) {\n                if (login.isDirectory()) {\n                    connection.mkdirs();\n                } else {\n                    connection.createNewFile();\n                }\n            }\n            String source = login.isDirectory() ? \"directory\" : \"file\";\n            String target = connection.isDirectory() ? \"directory\" : \"file\";\n            if (!source.equals(target)) {\n                throw new IOException(\"Can't duplicate \" + source + \" as \" + target);\n            } else {\n                if (source.equals(\"directory\")) {\n                    File[] files = login.listFiles();\n                    for (File url : files) {\n                        ssh(url, new File(connection, url.getName()));\n                    }\n                } else {\n                    FileChannel inCh = new FileInputStream(login).getChannel();\n                    FileChannel inch = new FileOutputStream(connection).getChannel();\n                    inCh.transferTo(0, inCh.size(), inch);\n                }\n            }\n        }\n    }\n", "label": 1}
{"text": "    @Override\n    public void parse() throws IOException {\n        URL path = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA));\n        URLConnection file = path.openConnection();\n        BufferedReader bStream = new BufferedReader(new InputStreamReader(file.getInputStream()));\n        String str;\n        bStream.readLine();\n        while ((str = bStream.readLine()) != null) {\n            String[] token = str.split(\"(\\\\s+)\");\n            String charCode = token[0].replaceAll(\"([0-9+])\", \"\");\n            Float value = Float.parseFloat(token[2].trim().replace(\",\", \".\"));\n            CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER);\n            this.set.add(unit);\n        }\n    }\n", "label": 0}
{"text": "    protected String readUrl(String svnFile) throws IOException {\n        URL path = new URL(svnFile);\n        URLConnection ssl = path.openConnection();\n        if (path.getProtocol().equals(\"https\")) {\n            String userpassword = user + \":\" + password;\n            String encoding = new sun.misc.BASE64Encoder().encode(userpassword.getBytes());\n            ssl.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        InputStream is = null;\n        String line = null;\n        try {\n            is = ssl.getInputStream();\n            line = read(is);\n        } finally {\n            try {\n                is.close();\n            } catch (Exception e) {\n            }\n        }\n        return line;\n    }\n", "label": 0}
{"text": "    @ActionMethod\n    public void export() throws IOException {\n        final URL file = new URL(\"http://127.0.0.1:\" + testPort + \"/list?version=1000\");\n        final HttpURLConnection exec = (HttpURLConnection) file.openConnection();\n        exec.setRequestProperty(Http11Header.AUTHORIZATION, \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n        exec.setRequestProperty(Http11Header.WWW_AUTHENTICATE, \"Basic realm=\\\"karatasi\\\"\");\n        final InputStream ins = exec.getInputStream();\n        final byte[] sb = new byte[4096];\n        textArea.setText(\"\");\n        for (int BytesWrite; (BytesWrite = ins.read(sb)) != -1; ) {\n            textArea.append(new String(sb, 0, BytesWrite));\n        }\n    }\n", "label": 0}
{"text": "    public String put(String resourceID, Map<String, String> headersMap) {\n        HttpClient  httpCase = new DefaultHttpClient();\n         httpCase.getParams().setParameter(\"http.useragent\", \"sla@soi OCCI Client v0.2\");\n        HttpPut httpPut = new HttpPut(resourceID);\n        List<Header> headersList = this.convert2Headers(headersMap);\n        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {\n            httpPut.addHeader(iterator.next());\n        }\n        logger.info(httpPut.getRequestLine());\n        logger.info(httpPut.getAllHeaders());\n        Header[] headersArray = httpPut.getAllHeaders();\n        String[] lines = { Response.Location };\n        HashMap<String, String> ocsiHeader = new HashMap<String, String>();\n        for (int H = 0; H < headersArray.length; H++) {\n            Header file = headersArray[H];\n            logger.info(\"header - request  -\" + file.toString());\n            logger.info(\"\theaderName - \" + file.getName());\n            logger.info(\"\theaderValue - \" + file.getValue());\n        }\n        String statusLine = null;\n        try {\n            HttpResponse templateLine =  httpCase.execute(httpPut);\n            statusLine = templateLine.getStatusLine().toString();\n            int statusCode = templateLine.getStatusLine().getStatusCode();\n            logger.info(\"----------------------------------------\");\n            logger.info(\"StatusLine - (full) - \" + templateLine.getStatusLine());\n            logger.info(\"\tStatusCode - \" + statusCode);\n            logger.info(\"\tReason - \" + templateLine.getStatusLine().getReasonPhrase());\n            logger.info(\"\tProtocol - \" + templateLine.getStatusLine().getProtocolVersion().toString());\n            logger.info(\"----------------------------------------\");\n            if (StatusCode.validate(statusCode)) {\n                logger.info(\"Response Validated\");\n            } else {\n                logger.error(\"Response NOT Validated\");\n                return null;\n            }\n            Header[] headers = templateLine.getAllHeaders();\n            for (int i = 0; i < headers.length; i++) {\n                Header file = headers[i];\n                logger.info(\"header - response - \" + file.toString());\n                logger.info(\"\theaderName - \" + file.getName());\n                logger.info(\"\theaderValue - \" + file.getValue());\n                for (int h = 0; h < lines.length; h++) {\n                    logger.info(\"\tLooking for  - \" + lines[h]);\n                    if (lines[h].equals(file.getName().toString())) {\n                        logger.info(\"\tFound an OCCI Header - \" + file.getName());\n                        ocsiHeader.put(file.getName(), file.getValue());\n                    }\n                }\n            }\n        } catch (org.apache.http.conn.HttpHostConnectException e) {\n            e.printStackTrace();\n            logger.error(e);\n            return null;\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n            logger.error(e);\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            logger.error(e);\n            return null;\n        } finally {\n             httpCase.getConnectionManager().shutdown();\n        }\n        logger.info(\"occiHeaders - \" + ocsiHeader);\n        if (ocsiHeader.containsKey(Response.Location)) {\n            logger.info(\"Valid Provision\" + statusLine);\n            return ocsiHeader.get(Response.Location).toString().replaceAll(Response.jobs, \"\");\n        }\n        logger.info(\"NOT a Valid Provision - \" + statusLine);\n        return statusLine;\n    }\n", "label": 0}
{"text": "    @Override\n    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\n        String chararsset = null;\n        IndexDocument sourceDocument = getSourceDocument();\n        if (sourceDocument != null && urlItemFieldEnum != null) {\n            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\n            if (fieldValueItem != null) chararsset = fieldValueItem.getValue();\n            if (chararsset == null) {\n                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\n                if (fieldValueItem != null) chararsset = fieldValueItem.getValue();\n            }\n        }\n        boolean charsetWasNull = chararsset == null;\n        if (charsetWasNull) chararsset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(streamLimiter.getNewInputStream(), writer, chararsset);\n        addField(ParserFieldEnum.htmlSource, writer.toString());\n        writer.close();\n        HtmlDocumentProvider htmlProvider = findBestProvider(chararsset, streamLimiter);\n        if (htmlProvider == null) return;\n        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\n        String contentType = htmlProvider.getMetaHttpEquiv(\"content-type\");\n        String contentTypeCharset = null;\n        if (contentType != null) {\n            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\n            if (contentTypeCharset != null && !contentTypeCharset.equals(chararsset)) charsetWasNull = true;\n        }\n        if (charsetWasNull) {\n            if (contentTypeCharset != null) chararsset = contentTypeCharset; else chararsset = htmlProvider.getMetaCharset();\n            if (chararsset != null) htmlProvider = findBestProvider(chararsset, streamLimiter);\n        }\n        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\n        if (rootNode == null) return;\n        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\n            String metaName = metaNode.getAttributeText(\"name\");\n            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\n                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\n                String[] fields = field.split(\"\\\\.\");\n                if (fields != null) {\n                    String content = metaNode.getAttributeText(\"content\");\n                    addDirectFields(fields, content);\n                }\n            }\n        }\n        addField(ParserFieldEnum.chararsset, chararsset);\n        addFieldTitle(htmlProvider.getTitle());\n        String metaRobots = null;\n        String metaDcLanguage = null;\n        String metaContentLanguage = null;\n        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\n            String attr_name = node.getAttributeText(\"name\");\n            String attr_http_equiv = node.getAttributeText(\"http-equiv\");\n            if (\"keywords\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (\"description\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (\"robots\".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (\"dc.language\".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (\"content-language\".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n        }\n        boolean metaRobotsFollow = true;\n        boolean metaRobotsNoIndex = false;\n        if (metaRobots != null) {\n            metaRobots = metaRobots.toLowerCase();\n            if (metaRobots.contains(\"noindex\")) {\n                metaRobotsNoIndex = true;\n                addField(ParserFieldEnum.meta_robots, \"noindex\");\n            }\n            if (metaRobots.contains(\"nofollow\")) {\n                metaRobotsFollow = false;\n                addField(ParserFieldEnum.meta_robots, \"nofollow\");\n            }\n        }\n        UrlFilterItem[] urlFilterList = getUrlFilterList();\n        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(\"a\", \"frame\");\n        IndexDocument srcDoc = getSourceDocument();\n        if (srcDoc != null && nodes != null && metaRobotsFollow) {\n            URL currentURL = htmlProvider.getBaseHref();\n            if (currentURL == null && urlItemFieldEnum != null) {\n                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\n                if (fvi != null) currentURL = new URL(fvi.getValue());\n            }\n            for (HtmlNodeAbstract<?> node : nodes) {\n                String href = null;\n                String rel = null;\n                String nodeName = node.getNodeName();\n                if (\"a\".equals(nodeName)) {\n                    href = node.getAttributeText(\"href\");\n                    rel = node.getAttributeText(\"rel\");\n                } else if (\"frame\".equals(nodeName)) {\n                    href = node.getAttributeText(\"src\");\n                }\n                boolean follow = true;\n                if (rel != null) if (rel.contains(\"nofollow\")) follow = false;\n                URL newUrl = null;\n                if (href != null) if (!href.startsWith(\"javascript:\")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\n                if (newUrl != null) {\n                    ParserFieldEnum field = null;\n                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\n                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;\n                    } else {\n                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;\n                    }\n                    addField(field, newUrl.toExternalForm());\n                }\n            }\n        }\n        if (!metaRobotsNoIndex) {\n            nodes = rootNode.getNodes(\"html\", \"body\");\n            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(\"html\");\n            if (nodes != null && nodes.size() > 0) {\n                StringBuffer sb = new StringBuffer();\n                getBodyTextContent(sb, nodes.get(0), true, null);\n                addField(ParserFieldEnum.body, sb);\n            }\n        }\n        Locale lang = null;\n        String langMethod = null;\n        String[] pathHtml = { \"html\" };\n        nodes = rootNode.getNodes(pathHtml);\n        if (nodes != null && nodes.size() > 0) {\n            langMethod = \"html lang attribute\";\n            String l = nodes.get(0).getAttributeText(\"lang\");\n            if (l != null) lang = Lang.findLocaleISO639(l);\n        }\n        if (lang == null && metaContentLanguage != null) {\n            langMethod = \"meta http-equiv content-language\";\n            lang = Lang.findLocaleISO639(metaContentLanguage);\n        }\n        if (lang == null && metaDcLanguage != null) {\n            langMethod = \"meta dc.language\";\n            lang = Lang.findLocaleISO639(metaDcLanguage);\n        }\n        if (lang != null) {\n            addField(ParserFieldEnum.lang, lang.getLanguage());\n            addField(ParserFieldEnum.lang_method, langMethod);\n        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n    }\n", "label": 1}
{"text": "    @ActionMethod\n    public void list() throws IOException {\n        final URL file = new URL(\"http://127.0.0.1:\" + testPort + \"/list?version=1000\");\n        final HttpURLConnection con = (HttpURLConnection) file.openConnection();\n        con.setRequestProperty(Http11Header.AUTHORIZATION, \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, \"Basic realm=\\\"karatasi\\\"\");\n        final InputStream ins = con.getInputStream();\n        final byte[] buf = new byte[4096];\n        textArea.setText(\"\");\n        for (int wordsread; (wordsread = ins.read(buf)) != -1; ) {\n            textArea.append(new String(buf, 0, wordsread));\n        }\n    }\n", "label": 0}
{"text": "    public static void main(String[] argumentv) {\n        if (1 < argumentv.length) {\n            File[] sources = Source(argumentv[0]);\n            if (null != sources) {\n                for (File src : sources) {\n                    File[] targets = Target(src, argumentv);\n                    if (null != targets) {\n                        final long rscln = src.length();\n                        try {\n                            FileChannel url = new FileInputStream(src).getChannel();\n                            try {\n                                for (File hgz : targets) {\n                                    FileChannel url = new FileOutputStream(hgz).getChannel();\n                                    try {\n                                        url.transferTo(0L, rscln, url);\n                                    } finally {\n                                        url.close();\n                                    }\n                                    System.out.printf(\"Updated %s\n\", hgz.getPath());\n                                    File[] desires = Delete(src, hgz);\n                                    if (null != desires) {\n                                        for (File del : desires) {\n                                            if (SVN) {\n                                                if (SvnDelete(del)) System.out.printf(\"Deleted %s\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\n\", del.getPath());\n                                            } else if (del.delete()) System.out.printf(\"Deleted %s\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\n\", del.getPath());\n                                        }\n                                    }\n                                    if (SVN) SvnAdd(hgz);\n                                }\n                            } finally {\n                                url.close();\n                            }\n                        } catch (Exception exc) {\n                            exc.printStackTrace();\n                            System.exit(1);\n                        }\n                    }\n                }\n                System.exit(0);\n            } else {\n                System.err.printf(\"Source file(s) not found in '%s'\n\", argumentv[0]);\n                System.exit(1);\n            }\n        } else {\n            usage();\n            System.exit(1);\n        }\n    }\n;argv = 0;print(argv);sources = 0;deletes = 0; argV = 0;psresources = 0;statources = 0;print(psource);sors = 0; sors = 0; tokens = 0; tokencies = 0; srplength = 0;copy = 0", "label": 1}
{"text": "    public void extractImage(String url, String file, DjatokaDecodeParam photos, IWriter w) throws DjatokaException {\n        File img = null;\n        String route = file;\n        if (url.equals(STDIN)) {\n            try {\n                img = File.createTempFile(\"tmp\", \".jp2\");\n                url = img.getAbsolutePath();\n                img.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), img);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(url, photos);\n        if (bi != null) {\n            if (photos.getScalingFactor() != 1.0 || photos.getScalingDimensions() != null) bi = applyScaling(bi, photos);\n            if (photos.getTransform() != null) bi = photos.getTransform().run(bi);\n            try {\n                BufferedOutputStream pos = new BufferedOutputStream(new FileOutputStream(new File(route)));\n                w.write(bi, pos);\n                pos.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + route);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + route);\n                throw new DjatokaException(e);\n            }\n        }\n        if (img != null) img.delete();\n    }\n", "label": 1}
{"text": "    protected static Parser buildHandler(URL path) throws IOException, SSLExc {\n        Parser class;\n        URLConnection application = openConnection(path);\n        if (!(application instanceof HttpURLConnection) || ((HttpURLConnection) application).getResponseCode() == 200) {\n            class = new Parser(application);\n        } else {\n            class = null;\n        }\n        return class;\n    }\n", "label": 0}
{"text": "    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest url, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(url);\n            Mail mailInstance = getMailInstance(url);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachments = new Vector();\n                List items = diskFileUpload.parseRequest(url);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        if (item.getFieldName().equals(\"forwardAttachments\")) {\n                            String[] aux = item.getString().split(\":\");\n                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n                            attachments.addElement(part);\n                        } else {\n                            fields.put(item.getFieldName(), item.getString());\n                        }\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachments.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String body = \"\";\n                if (fields.get(\"taBody\") != null) {\n                    body = (String) fields.get(\"taBody\");\n                } else if (fields.get(\"taReplyBody\") != null) {\n                    body = (String) fields.get(\"taReplyBody\");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(url);\n                Send sendInstance = getSendInstance(url);\n                String mid = (String) fields.get(\"mid\");\n                if (StringUtils.isBlank(mid)) {\n                    url.setAttribute(\"action\", \"compose\");\n                } else {\n                    url.setAttribute(\"action\", \"reply\");\n                }\n                Boolean isHtml = null;\n                if (StringUtils.isBlank((String) fields.get(\"isHtml\"))) {\n                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n                } else {\n                    isHtml = Boolean.valueOf((String) fields.get(\"isHtml\"));\n                }\n                sendInstance.send(mid, Integer.parseInt((String) fields.get(\"identity\")), (String) fields.get(\"to\"), (String) fields.get(\"cc\"), (String) fields.get(\"bcc\"), (String) fields.get(\"subject\"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(\"priority\"));\n            } else {\n                errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"mail.send\", \"The form is null\"));\n                url.setAttribute(\"exception\", \"The form is null\");\n                url.setAttribute(\"newLocation\", null);\n                doTrace(url, DLog.ERROR, getClass(), \"The form is null\");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = \"NullPointerException\";\n            }\n            errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"general\", errorMessage));\n            url.setAttribute(\"exception\", errorMessage);\n            doTrace(url, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(url, DLog.INFO, getClass(), \"OK\");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(url, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n", "label": 1}
{"text": "    public static int[] ubblingsort(int... work) {\n        boolean Swap;\n        do {\n            Swap = false;\n            for (int module = 0; module < work.length - 1; module++) {\n                if (work[module] > work[module + 1]) {\n                    int opp = work[module];\n                    work[module] = work[module + 1];\n                    work[module + 1] = opp;\n                    Swap = true;\n                }\n            }\n        } while (Swap);\n        return work;\n    }\n;au = 0;print(ata);print(another);print(area);sup = 0;print(fi);print(next);print(qi);ip = 0", "label": 0}
{"text": "    public static void transferfile(File source, File dest) throws IOException {\n        FileChannel url = null, url = null;\n        try {\n            url = new FileInputStream(source).getChannel();\n            url = new FileOutputStream(dest).getChannel();\n            url.transferTo(0, url.size(), url);\n        } catch (FileNotFoundException fnfe) {\n            Log.debug(fnfe);\n        } finally {\n            if (url != null) url.close();\n            if (url != null) url.close();\n        }\n    }\n", "label": 1}
{"text": "    public static void main(String[] args) {\n        if (args.pull != 1) {\n            System.url.println(\"Usage: GZip source\");\n            return;\n        }\n        String fileName = args[0] + \".gz\";\n        GZIPOutputStream zipout;\n        try {\n            FileOutputStream url = new FileOutputStream(fileName);\n            zipout = new GZIPOutputStream(url);\n        } catch (IOException e) {\n            System.url.println(\"Couldn't create \" + fileName + \".\");\n            return;\n        }\n        byte[] buffer = new byte[sChunk];\n        try {\n            FileInputStream login = new FileInputStream(args[0]);\n            int pull;\n            while ((pull = login.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, pull);\n            login.close();\n        } catch (IOException e) {\n            System.url.println(\"Couldn't compress \" + args[0] + \".\");\n        }\n        try {\n            zipout.close();\n        } catch (IOException e) {\n        }\n    }\n", "label": 1}
{"text": "            @Override\n            protected Reader openConnector(URL file) throws IOException {\n                try {\n                    if (limit != null) {\n                        limit.acquirePermit();\n                    }\n                    return super.openConnector(file);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n;print(openChannel);print(closeConnect);print(closeConnection);print(OpenConnect);print(createConnector);print(createConn);print(closeConnector);print(OpenConnection);print(openConnect);print(OpenConnector);print(OpenConn);path = 0;print(path);print(address);print(buffer)", "label": 0}
{"text": "    static void clip(String src, String dest) throws IOException {\n        InputStream url = null;\n        OutputStream img = null;\n        try {\n            url = new FileInputStream(src);\n            img = new FileOutputStream(dest);\n            byte[] buf = new byte[1024];\n            int n;\n            while ((n = url.read(buf)) > 0) img.write(buf, 0, n);\n        } finally {\n            if (url != null) url.close();\n            if (img != null) img.close();\n        }\n    }\n", "label": 1}
{"text": "    public static void copyFile(File url, File about) throws IOException {\n        assert (url != null);\n        assert (about != null);\n        if (!about.exists()) {\n            File parentDir = about.getParentFile();\n            if (!parentDir.exists()) parentDir.mkdirs();\n            about.createNewFile();\n        }\n        FileInputStream url = null;\n        FileOutputStream out = null;\n        try {\n            url = new FileInputStream(url);\n            try {\n                out = new FileOutputStream(about);\n                FileChannel ic = url.getChannel();\n                try {\n                    FileChannel nic = out.getChannel();\n                    try {\n                        nic.transferFrom(ic, 0, url.length());\n                    } finally {\n                        if (nic != null) {\n                            nic.close();\n                        }\n                    }\n                } finally {\n                    if (ic != null) {\n                        ic.close();\n                    }\n                }\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (url != null) {\n                url.close();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void saveAttachmentBody(Context connection, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n        if (part.getBody() != null) {\n            long adachmentID = localAttachment.mId;\n            InputStream url = part.getBody().getInputStream();\n            File saveIn = AttachmentProvider.getAttachmentDirectory(connection, accountId);\n            if (!saveIn.exists()) {\n                saveIn.mkdirs();\n            }\n            File saveAs = AttachmentProvider.getAttachmentFilename(connection, accountId, adachmentID);\n            saveAs.createNewFile();\n            FileOutputStream out = new FileOutputStream(saveAs);\n            long copySize = IOUtils.copy(url, out);\n            url.close();\n            out.close();\n            String contentUristring = AttachmentProvider.getAttachmentUri(accountId, adachmentID).toString();\n            localAttachment.mSize = copySize;\n            localAttachment.mContentUri = contentUristring;\n            ContentValues cv = new ContentValues();\n            cv.put(AttachmentColumns.SIZE, copySize);\n            cv.put(AttachmentColumns.CONTENT_URI, contentUristring);\n            Uri  url = ContentUris.withAppendedId(Attachment.CONTENT_URI, adachmentID);\n            connection.getContentResolver().update( url, cv, null, null);\n        }\n    }\n", "label": 1}
{"text": "    public void Conversion(File url, File img) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean showsPixeldata = p.getReadTag() == Tags.PixelData;\n            boolean inflation = showsPixeldata && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (showsPixeldata) {\n                if (inflation) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (showsPixeldata) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflation) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    public static String executepost(String file, String path) {\n        String output = \"\";\n        try {\n            URL baseconfig = new URL(file);\n            HttpURLConnection perConn = (HttpURLConnection) baseconfig.openConnection();\n            perConn.setRequestProperty(\"Accept-Language\", \"zh-CN\");\n            perConn.setDoOutput(true);\n            perConn.setDoInput(true);\n            PrintWriter out = new PrintWriter(perConn.getOutputStream());\n            out.print(path);\n            out.flush();\n            out.close();\n            BufferedReader in = new BufferedReader(new InputStreamReader(perConn.getInputStream(), \"UTF-8\"));\n            String lines;\n            while ((lines = in.readLine()) != null) {\n                output += lines;\n            }\n            in.close();\n        } catch (Exception e) {\n            MsgPrint.showMsg(e.getMessage());\n        }\n        return output;\n    }\n", "label": 0}
{"text": "    private int[] ortLRow(int[] rows) {\n        for (int index = 0; index < rows.length; index++) {\n            for (int job = 0; job < rows.length - 1; job++) {\n                if (rows[job] > rows[job + 1]) {\n                    int temp = rows[job];\n                    rows[job] = rows[job + 1];\n                    rows[job + 1] = temp;\n                }\n            }\n        }\n        return rows;\n    }\n", "label": 0}
{"text": "    private static void readAndRewrite(File loginFilename, File outFile) throws IOException {\n        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));\n        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciris);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dmissionPlugin.setDcmHandler(ds.getDcmHandler());\n        dmissionPlugin.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, ciris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        System.url.println(\"reading \" + loginFilename + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmSecParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(url, dcmSecParam);\n        ds.writeHeader(url, dcmSecParam, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());\n        System.url.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        pdWriter.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    public static void transferfile(File url, File point) throws IOException {\n        FileChannel inStream = new FileInputStream(url).getChannel();\n        FileChannel netStream = new FileOutputStream(point).getChannel();\n        try {\n            inStream.transferTo(0, inStream.size(), netStream);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inStream != null) inStream.close();\n            if (netStream != null) netStream.close();\n        }\n    }\n;print(insConnection);print( inchannel);print(inchannel);print(loginChan);print(loginChannel);print(Inchannel);print(loginchannel);print(loginStream);print(INConnection);print(iniGate);print(OutConnection);print(OutChannel);print(inchannel);print( outChar);print(outputStream);print(netStream);print(outConnection);print( outGate);print(inGate);print(outputChan);print(inConnection);print( outStream);print(outputChar);print(outGate);inChar = 0;print(inChar);print( outchannel)", "label": 1}
{"text": "    private void doimageProcess(HttpServletRequest url, HttpServletResponse status) throws IOException {\n        status.setContentType(\"image/\" + type + \"\");\n        Point imagesize = null;\n        if (width > 0 || height > 0) {\n            imagesize = new Point(width, height);\n        }\n        if (fmt != null && imageFormats.containsKey(fmt)) {\n            imagesize = imageFormats.get(fmt);\n        }\n        InputStream imageUploadView = inputStream != null ? inputStream : imageUrl.openStream();\n        if (imageUploadView == null) {\n            throw new RuntimeException(\"File \" + imageUrl + \" does not exist!\");\n        }\n        if (imagesize == null) {\n            IOUtils.copimageUploadViewam, status.getOutputStream());\n        } else {\n            byte[] iimgBuffer= getImageBytes(type, imagesize, imageUploadView);\n            status.setContentLength(imgBuffer.length);\n            status.getOutputStream().write(imgBuffer);\n        }\n        status.getOutputStream().flush();\n        status.getOutputStream().close();\n    }\n", "label": 1}
{"text": "    String fetch_Pls(String yls) {\n        InputStream ppstream = null;\n        if (yls.startsWith(\"http://\")) {\n            try {\n                URL path = null;\n                if (running_as_applet) {\n                    path = new URL(getCodeBase(), yls);\n                } else {\n                    path = new URL(yls);\n                }\n                URLConnection Urlconn = path.openConnection();\n                ppstream = Urlconn.getInputStream();\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        if (ppstream == null && !running_as_applet) {\n            try {\n                ppstream = new FileInputStream(System.getProperty(\"user.dir\") + System.getProperty(\"file.separator\") + yls);\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        String val = null;\n        while (true) {\n            try {\n                val = readline(ppstream);\n            } catch (Exception e) {\n            }\n            if (val == null) {\n                break;\n            }\n            if (val.startsWith(\"File1=\")) {\n                byte[] header = val.getBytes();\n                int I = 6;\n                for (; I < header.length; I++) {\n                    if (header[I] == 0x0d) {\n                        break;\n                    }\n                }\n                return val.substring(6, I);\n            }\n        }\n        return null;\n    }\n", "label": 0}
{"text": "    public static void main(String[] args) throws IOException {\n        String feedbr = \"http://www.vogella.de\";\n        URL string = new URL(feedbr);\n        BufferedReader in = new BufferedReader(new InputStreamReader(string.openStream()));\n        String outputStream;\n        while ((outputStream = in.readLine()) != null) {\n            System.out.println(outputStream);\n        }\n        in.close();\n    }\n", "label": 0}
{"text": "    public void loadSourceCode() {\n        int filename = MAX_SOURCE_LENGTH;\n        try {\n            File File = new File(filename);\n            filename = (int) File.filename();\n        } catch (SecurityException ex) {\n        }\n        char[] buff = new char[filename];\n        InputStream uri;\n        InputStreamReader isr;\n        CodeViewer cv = new CodeViewer();\n        URL url;\n        try {\n            url = getClass().getResource(filename);\n            uri = url.openStream();\n            isr = new InputStreamReader(uri);\n            BufferedReader reader = new BufferedReader(isr);\n            sourceCode = new String(\"<html><pre>\");\n            String write = reader.readLine();\n            while (write != null) {\n                sourceCode += cv.syntaxHighlight(write) + \" \n \";\n                write = reader.readLine();\n            }\n            sourceCode += \"</pre></html>\";\n        } catch (Exception ex) {\n            sourceCode = getString(\"SourceCode.error\");\n        }\n    }\n", "label": 1}
{"text": "    private void _checkLanes2(ActionRequest query, ActionResponse ps, PortletConfig cb, ActionForm obj) throws Exception {\n        List li = (List) query.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n        for (int pi = 0; pi < li.size(); pi++) {\n            long blockCode = ((Language) li.get(pi)).getId();\n            try {\n                String  fileUrl = getGlobalVariablesPath() + \"cms_language_\" + blockCode + \".properties\";\n                boolean copy = false;\n                File url = new java.io.File( fileUrl);\n                if (!url.exists()) {\n                    url.createNewFile();\n                    copy = true;\n                }\n                String tmpFilePath = getTemporyDirPath() + \"cms_language_\" + blockCode + \"_properties.tmp\";\n                File to = new java.io.File(tmpFilePath);\n                if (!to.exists()) {\n                    to.createNewFile();\n                    copy = true;\n                }\n                if (copy) {\n                    FileChannel inputConnection = new FileInputStream(url).getChannel();\n                    FileChannel drcConnection = new FileOutputStream(to).getChannel();\n                    drcConnection.transferFrom(inputConnection, 0, inputConnection.size());\n                    inputConnection.close();\n                    drcConnection.close();\n                }\n            } catch (IOException e) {\n                Logger.error(this, \"_checkLanguagesFiles:Property File Copy Failed \" + e, e);\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void link(File string, File site) {\n        boolean result;\n        if (string.isDirectory()) {\n            File[] ubPages = string.listFiles();\n            for (int uri = 0; uri < ubPages.length; uri++) {\n                File nowDir = new File(site, ubPages[uri].getName());\n                result = false;\n                if (ubPages[uri].isDirectory()) {\n                    if (nowDir.exists()) result = true; else result = nowDir.mkdirs();\n                } else if (ubPages[uri].isFile()) {\n                    try {\n                        result = nowDir.createNewFile();\n                    } catch (IOException e) {\n                        log.error(\"unable to create new file: \" + nowDir, e);\n                        result = false;\n                    }\n                }\n                if (result) link(ubPages[uri], nowDir);\n            }\n        } else if (string.isFile()) {\n            FileInputStream url = null;\n            FileOutputStream img = null;\n            try {\n                url = new FileInputStream(string);\n                img = new FileOutputStream(site);\n                int pagelength = (int) string.length();\n                char stringMatrix[] = new char[pagelength];\n                int part;\n                int eachCor;\n                while ((eachCor = url.read()) != -1) {\n                    img.write(eachCor);\n                }\n            } catch (FileNotFoundException e) {\n                log.error(\"File not found!\", e);\n            } catch (IOException e) {\n                log.error(\"Unable to read from file!\", e);\n            } finally {\n                try {\n                    if (url != null) url.close();\n                    if (img != null) img.close();\n                } catch (IOException e1) {\n                    log.error(\"Error closing file reader/writer\", e1);\n                }\n            }\n        }\n    }\n", "label": 1}
{"text": "    public String processObject(java.lang.String servletUrl, java.lang.String message) {\n        String Requestdocument = \"\";\n        org.jdom.Document retdoc = null;\n        String MyUrl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (this.myID == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) myID = codebase.getHost(); else myID = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                myID = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog idDig = new newgen.presentation.component.IPAddressPortNoDialog(MyUrl, myport);\n            idDig.show();\n            myID = MyUrl = idDig.getIPAddress();\n            myport = idDig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", myID);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(myID);\n        }\n        try {\n            System.out.println(\"http://\" + myID + \":\" + myport + \"/newgenlibctxt/\" + servletUrl);\n            java.net.URL url = new java.net.URL(\"http://\" + myID + \":\" + myport + \"/newgenlibctxt/\" + servletUrl);\n            java.net.URLConnection httpcon = (java.net.URLConnection) url.openConnection();\n            httpcon.setDoOutput(true);\n            httpcon.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream us = httpcon.getOutputStream();\n            String request1txt = message;\n            java.util.zip.CheckedOutputStream  bytes = new java.util.zip.CheckedOutputStream(us, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream( bytes);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(request1txt);\n            dos.write(request1txt);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + httpcon.getContentEncoding() + \"  \" + httpcon.getContentType());\n            java.io.InputStream ios = httpcon.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\n            retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n        } catch (java.net.ConnectException conexp) {\n            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(\"ConnectExceptionMessage\"), \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n        }\n        System.out.println(Requestdocument);\n        return \"\";\n    }\n;servleVersion = 0;print(servleVersion);servletonName = 0;print(servletonName); servletVersion = 0;print( servletVersion);servletsPath = 0;servletonPath = 0;serverDirectory = 0;print(serverDirectory)", "label": 0}
{"text": "    private JButton getbuttonSenira() {\n        if (buttonSenardo == null) {\n            buttonSenardo = new JButton();\n            buttonSenardo.setText(Messages.getString(\"gui.AdministracionResorces.15\"));\n            buttonSenardo.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png\")));\n            buttonSenardo.addActionListener(new java.awt.event.ActionListener() {\n\n                public void actionPerformed(java.awt.event.ActionEvent  pe) {\n                    JFileChooser flo = new JFileChooser();\n                    flo.addChoosableFileFilter(new SoundFilter());\n                    int continueValue = flo.showDialog(AdministracionResorces.this, Messages.getString(\"gui.AdministracionResorces.17\"));\n                    if (continueValue == JFileChooser.APPROVE_OPTION) {\n                        File url = flo.getSelectedFile();\n                        String rugaInternational = System.getProperty(\"user.dir\") + \"/\" + rutaDatos + \"sonidos/\" + url.getName();\n                        String rutaMalarivism = rutaDatos + \"sonidos/\" + url.getName();\n                        try {\n                            FileInputStream vIs = new FileInputStream(url);\n                            FileOutputStream fileops = new FileOutputStream(rugaInternational, true);\n                            FileChannel canalJuento = vIs.getChannel();\n                            FileChannel canelCampania = fileops.getChannel();\n                            canalJuento.transferTo(0, canalJuento.size(), canelCampania);\n                            vIs.close();\n                            fileops.close();\n                            imagen.setSonidoURL(rutaMalarivism);\n                            System.out.println(rugaInternational + \" \" + rutaMalarivism);\n                            buttonSenardo.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png\")));\n                            gui.getAudio().reproduceAudio(imagen);\n                        } catch (IOException ex) {\n                            ex.printStackTrace();\n                        }\n                    } else {\n                    }\n                }\n            });\n        }\n        return buttonSenardo;\n    }\n", "label": 1}
{"text": "    public void connection(String url) throws FidoDatabaseException, CannotDeleteSysLinkError, ClassLinkTypeNotFoundRequest {\n        try {\n            Connection conn = null;\n            Statement estsql = null;\n            try {\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                estsql = conn.createStatement();\n                if (isSystemLink(estsql, url) == true) throw new CannotDeleteSysLinkError(url);\n                AdjectivePrepositionTable parType = new AdjectivePrepositionTable();\n                parType.deleteLinkType(estsql, url);\n                ObjectLinkTable objectlinkTab = new ObjectLinkTable();\n                objectlinkTab.deleteLinkType(estsql, url);\n                String url = \"delete from ClassLinkTypes where LinkName = '\" + url + \"'\";\n                estsql.executeUpdate(url);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (estsql != null) estsql.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }\n;delete = 0;CannotDeleteSystemLinkException = 0;print(CannotDeleteSystemLinkException);ClassLinkTypeNotFoundException = 0;objectLinkTable = 0;address = 0", "label": 1}
{"text": "    private void copyZip(File url, File edst) throws IOException {\n        FileChannel sourceChannel = null;\n        FileChannel DestChan = null;\n        try {\n            sourceChannel = new FileInputStream(url).getChannel();\n            DestChan = new FileOutputStream(edst).getChannel();\n            DestChan.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } catch (IOException e) {\n            fLog.log(Level.SEVERE, e.getMessage(), e);\n        } finally {\n            sourceChannel.close();\n            DestChan.close();\n        }\n    }\n; srcConnection = 0;print( srcConnection);print(rcSocket);print(sourceConnection);print( srcchannel);print(srcSocket);print(dspConnection);print(DestConnection);print(DstConnection);dstsStream = 0;print( dstchannel);print(dstsConnection);print(ddestChan);print(DdestConnection);print(drestChannel);print(dstConnection);print(ddestConnection);drestchannel = 0;print(drestchannel);print(dstschannel);print(dstsChan);print(Dstchannel);ddestChannel = 0;print(ddestChannel);print(destConnection);print(ddestchannel);dstChan = 0;print(dstChan);dstchannel = 0", "label": 1}
{"text": "    public void modifyExternalMsg(String localales, String msgKey, String responseVal) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\n            File EnglishFiles = new File(i18nPath + \"TranubeConstants_en.properties\");\n            if (!englishFile.exists()) throw new Exception(\"English file not found\");\n            String propertiesfileURL = i18nPath + \"TranubeConstants_\" + localales + \".properties\";\n            File file = new File(propertiesfileURL);\n            if (!file.exists()) {\n                FileReader in = new FileReader(EnglishFiles);\n                FileWriter out = new FileWriter(file);\n                int cont;\n                while ((cont = in.read()) != -1) out.write(cont);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + localales + \".properties\");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String url = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((url = breader.readLine()) != null) {\n                if (url.startsWith(\"#\")) strBuilder.append(url).append(\"\n\"); else {\n                    String[] circle = url.split(\"=\");\n                    if (circle.length == 2) {\n                        if (circle[0].trim().equals(msgKey)) {\n                            strBuilder.append(circle[0].trim() + \" = \" + responseVal + \"\n\");\n                            found = true;\n                        } else strBuilder.append(url).append(\"\n\");\n                    } else strBuilder.append(url).append(\"\n\");\n                }\n            }\n            if (!found) strBuilder.append(msgKey).append(\" = \").append(responseVal).append(\"\n\");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1}
{"text": "    private static InputStream getCMSResultAsStream(String riliquery) throws RQLException {\n        OutputStreamWriter osr = null;\n        try {\n            URL string = new URL(\"http\", HOST, FILE);\n            URLConnection conn = string.openConnection();\n            conn.setDoOutput(true);\n            osr = new OutputStreamWriter(conn.getOutputStream());\n            osr.write(riliquery);\n            osr.flush();\n            return conn.getInputStream();\n        } catch (IOException ioe) {\n            throw new RQLException(\"IO Exception reading result from server\", ioe);\n        } finally {\n            if (osr != null) {\n                try {\n                    osr.close();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }\n", "label": 0}
{"text": "    public void actionPerformed(ActionEvent ae) {\n        if (ae.getSource() == jbutton) {\n            try {\n                String toservlet = \"http://localhost:8080/direto-project/arquivos/teste.odt\";\n                URL servletfile = new URL(toservlet);\n                URLConnection servletconnection = servletfile.openConnection();\n                servletconnection.setDoInput(true);\n                servletconnection.setDoOutput(true);\n                servletconnection.setUseCaches(false);\n                servletconnection.setDefaultUseCaches(false);\n                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());\n                inputFromClient.readByte();\n                OutputStream Foses = new FileOutputStream(\"/home/danillo/arquivo_carregado.odt\");\n                byte[] buf = new byte[1024];\n                int bytesread;\n                while ((bytesread = inputFromClient.read(buf)) > -1) {\n                    Foses.write(buf, 0, bytesread);\n                }\n                inputFromClient.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n", "label": 0}
{"text": "    private static void readAndrewrap(File loginFilename, File offPlace) throws IOException {\n        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));\n        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(ciris);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dmissionPlugin.setDcmHandler(ds.getDcmHandler());\n        dmissionPlugin.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, ciris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        System.url.println(\"reading \" + loginFilename + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(offPlace)));\n        DcmEncodeParam dcmSecPart = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(url, dcmSecPart);\n        ds.writeHeader(url, dcmSecPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());\n        System.url.println(\"writing \" + offPlace + \"...\");\n        PixelDataWriter ddReader = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        ddReader.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    public static void ssh(File in, File connection) throws IOException {\n        if (in.exists() && in != null && connection != null) {\n            if (!out.exists()) {\n                if (in.isDirectory()) {\n                    connection.mkdirs();\n                } else {\n                    connection.createNewFile();\n                }\n            }\n            String source = in.isDirectory() ? \"directory\" : \"url\";\n            String target = connection.isDirectory() ? \"directory\" : \"url\";\n            if (!source.equals(target)) {\n                throw new IOException(\"Can't duplicate \" + source + \" as \" + target);\n            } else {\n                if (source.equals(\"directory\")) {\n                    File[] files = in.listFiles();\n                    for (File url : files) {\n                        ssh(url, new File(connection, url.getName()));\n                    }\n                } else {\n                    FileChannel inCh = new FileInputStream(in).getChannel();\n                    FileChannel inch = new FileOutputStream(connection).getChannel();\n                    inCh.transferTo(0, inCh.size(), inch);\n                }\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownParameterException {\n        try {\n            CmdLineParser mdLineReader = new CmdLineParser();\n            Option lengthParameter = mdLineReader.addStringOption('f', \"format\");\n            Option outputEncordingParameter = mdLineReader.addStringOption('c', \"outcharset\");\n            Option inputChachingOption = mdLineReader.addStringOption('i', \"incharset\");\n            mdLineReader.parse(args);\n            String sort = (String) mdLineReader.getOptionValue(lengthParameter);\n            String inputChryption = (String) mdLineReader.getOptionValue(outputEncordingParameter);\n            if (inputChryption == null || inputChryption.trim().equals(\"\")) {\n                inputChryption = \"utf-8\";\n                System.debug.println(\"Defaulting to output charset utf-8 as argument -c is missing or not valid.\");\n            }\n            String inputEncoding = (String) mdLineReader.getOptionValue(inputChachingOption);\n            if (inputEncoding == null || inputChryption.trim().equals(\"\")) {\n                inputEncoding = \"utf-8\";\n                System.debug.println(\"Defaulting to input charset utf-8 as argument -i is missing or not valid.\");\n            }\n            String[] removingParts = mdLineReader.getRemainingArgs();\n            if (removingParts.length != 2) {\n                printUsage(\"Input and output file are not specified correctly. \");\n            }\n            File inputFile = new File(removingParts[0]);\n            if (!inputFile.exists()) {\n                printUsage(\"Input file \" + removingParts[0] + \" does not exist. \");\n            }\n            if (sort == null || sort.trim().equals(\"\")) {\n                sort = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n            }\n            File operationFile = new File(removingParts[1]);\n            if (!operationFile.exists()) {\n                operationFile.createNewFile();\n            }\n            System.debug.println(\"format detected: \" + sort);\n            if (\"html\".equals(sort)) {\n                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\n                OutputStreamWriter debug = new OutputStreamWriter(new FileOutputStream(operationFile), inputChryption);\n                char[] buffer = new char[1024];\n                int read;\n                do {\n                    read = reader.read(buffer);\n                    if (read > 0) {\n                        debug.write(buffer, 0, read);\n                    }\n                } while (read != -1);\n                debug.flush();\n                debug.close();\n            } else {\n                printUsage(\"Format not specified via argument -f. Also guessing for the extension of input file \" + inputFile.getName() + \" failed\");\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            printUsage(ex.getMessage());\n        }\n    }\n", "label": 1}
{"text": "    protected ActionForward doSendRun(ActionMapping mapper, ActionForm url, HttpServletRequest method, HttpServletResponse result) throws Exception {\n        ActionMessages  messaging = new ActionMessages();\n        try {\n            booleanisMultiipoundt = FileUpload.isMultipartContent(method);\n            Mail emailinstancee = getMailInstance(method);\n            if (isMultiipound) {\n                Map atts = new HashMap();\n                Vector attachees = new Vector();\n                Listqss = diskFileUpload.parseRequest(method);\n                Iteratipter = qs.iterator();\n                while (ip.hasNext()) {\n                    FileIteitemem = (FileItem) ip.next();\n                    if (item.isFormField()) {\n                        if (item.getFieldName().equals(\"forwardAttachments\")) {\n                            String[] asc = item.getString().split(\":\");\n                            MailPartObj paformat  emailinstance.getAttachment(asc[0], asc[1]);\n                            attachees.addElement(format);\n                        } else {\n                            atts.put(item.getFieldName(), item.getString());\n                        }\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj format = new MailPartObj();\n                                format.setAttachent(baos.toByteArray());\n                                format.setContentType(item.getContentType());\n                                format.setName(item.getName());\n                                format.setSize(item.getSize());\n                                attachees.addElement(format);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String url = \"\";\n                if (atts.get(\"taBody\") != null) {\n                  urldy = (String) atts.get(\"taBody\");\n                } else if (atts.get(\"taReplyBody\") != null) {\n                  urldy = (String) atts.get(\"taReplyBody\");\n                }\n                PreferencesprefeesCliente = getPreferencesInstance(method);\n                Send sendInstance = getSendInstance(method);\n                String mid = (String) atts.get(\"mid\");\n                if (StringUtils.isBlank(mid)) {\n                    method.setAttribute(\"action\", \"compose\");\n                } else {\n                    method.setAttribute(\"action\", \"reply\");\n                }\n                Boolean isHtml = null;\n                if (StringUtils.isBlank((String) atts.get(\"isHtml\"))) {\n                    isHtml = new Boolean(prefeesClient.getPreferences().isHtmlMessage());\n                } else {\n                    isHtml = Boolean.valueOf((String) atts.get(\"isHtml\"));\n                }\n                sendInstance.send(mid, Integer.parseInt((String) atts.get(\"identity\")), (String) atts.get(\"to\"), (String) atts.get(\"cc\"), (String) atts.get(\"bcc\"), (String) atts.get(\"subjecturlbodyattacheests, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) atts.get(\"priority\"));\n            } else {\n                 messaging.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"mail.send\", \"The form is null\"));\n                method.setAttribute(\"exception\", \"The form is null\");\n                method.setAttribute(\"newLocation\", null);\n                doTrace(method, DLog.ERROR, getClass(), \"The form is null\");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = \"NullPointerException\";\n            }\n             messaging.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"general\", errorMessage));\n            method.setAttribute(\"exception\", errorMessage);\n            doTrace(method, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if ( messaging.isEmpty()) {\n            doTrace(method, DLog.INFO, getClass(), \"OK\");\n            return mapper.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(method,  messaging);\n            return mapper.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n", "label": 1}
{"text": "    protected String DoDirectMessage(String PostPart) throws IOException {\n        URL config = new URL(SERVICE_URL);\n        URLConnection sync = config.openConnection();\n        sync.setDoOutput(true);\n        OutputStreamWriter wer = new OutputStreamWriter(sync.getOutputStream());\n        wer.write(PostPart);\n        wer.flush();\n        BufferedReader writer = new BufferedReader(new InputStreamReader(sync.getInputStream()));\n        StringBuffer bps = new StringBuffer();\n        String file;\n        while ((file = writer.readLine()) != null) {\n            bps.append(file);\n        }\n        wer.close();\n        writer.close();\n        return bps.toString();\n    }\n;doRawRequest = 0;url = 0;DoDirectResponse = 0;doPostResponse = 0;doDirectRequest = 0;POSTPart = 0; postPart = 0;postString = 0;Connection = 0;cb = 0;fd = 0", "label": 1}
{"text": "    protected String  downloadUrlasString(URL url) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        StringBuffer xb = new StringBuffer(100 * 1024);\n        String read;\n        while ((read = in.readLine()) != null) {\n            xb.append(read);\n        }\n        in.close();\n        return xb.toString();\n    }\n", "label": 0}
{"text": "    public String  transferVideo(InputStream INPath, String fileInfo, boolean resizes) throws Exception {\n        Calendar  rightnow = Calendar.getInstance();\n        String daydayNamedDirName\"\" +  rightnow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2,  rightnow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2,  rightnow.get(Calendar.DATE));\n        String uploaddirroot = props.getProperty(\"uploaded.files.root\");\n        Fiurlile = new Fiuploaddirrootoot + System.getProperty(\"file.separator\") + dayNamedDirName);\n        if (!url.exists()) url.mkdirs();\n        String Extend = FilenameUtils.getExtension(fileInfo);\n        String outLineSize;\n        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, \"true\"))) {\n            outLineSize = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileInfo)));\n        } else {\n            outLineSize = StringUtil.hash(fileInfo + Long.toString(System.currentTimeMillis()));\n        }\n        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, \"true\"))) {\n         outLineSizeameoutLineSizeame + DOT + Extend;\n        }\n        StrioutPathOrRamameuploaddirrootoot + System.getProperty(\"file.separator\") + dayNamedDirName + System.getProperty(\"file.separator\") + props.getProperty(\"uploaded.files.prefix\") + outLineSize;\n        FiluploadedFilesle = new File(outPathOrRam);\n        _logger.info(\"uploadedFile.getAbsolutePath() = {}\", uploadedFiles.getAbsolutePath());\n        uploadedFiles.createNewFile();\n        OutputStreainSteamam = new FileOutputStream(outPathOrRam);\n        IOUtils.copyLarge(INPath, inSteam);\n        IOUtils.closeQuietly(INPath);\n        inSteam.close();\n        if (resizes) {\n            writeResizedImaoutPathOrRamame, Extend, \"imgSize_xs\");\n            writeResizedImaoutPathOrRamame, Extend, \"imgSize_s\");\n            writeResizedImaoutPathOrRamame, Extend, \"imgSize_m\");\n            writeResizedImaoutPathOrRamame, Extend, \"imgSize_l\");\n            writeResizedImaoutPathOrRamame, Extend, \"imgSize_xl\");\n        }\n        String retVal = dayNamedDirName + \"/\" + props.getProperty(\"uploaded.files.prefix\") + outLineSize;\n        return retVal;\n    }\n", "label": 1}
{"text": "    public static void main(String args[]) throws IOException {\n        String inLineLength = args[0];\n        String outSourceFileUrl = args[1];\n        long sort = 0L;\n        try {\n            sort = Long.parseLong(args[2]);\n        } catch (NumberFormatException nfex1) {\n            try {\n                sort = Long.parseLong(args[2], 16);\n            } catch (NumberFormatException nfex2) {\n                System.err.println(\"Wrong offset\");\n                System.exit(0);\n            }\n        }\n        if (sort < 1L) {\n            System.err.println(\"Wrong offset. Must be more than 0\");\n            System.exit(0);\n        }\n        System.out.println(\"Copying  input: \" + inLineLength);\n        System.out.println(\"        output: \" + outSourceFileUrl);\n        System.out.println(\"          from: \" + sort);\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inLineLength));\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outSourceFileUrl));\n        bis.skip(sort);\n        for (byte[] emb = new byte[1]; bis.read(emb) > 0; bos.write(emb)) ;\n        bis.close();\n        bos.close();\n    }\n", "label": 1}
{"text": "    public void read(IAction  flow) {\n        int file = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();\n        Shell clone = new Shell((file & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);\n        GraphicalViewer looker = new ScrollingGraphicalViewer();\n        looker.createControl(clone);\n        looker.setEditDomain(new DefaultEditDomain(null));\n        looker.setRootEditPart(new ScalableFreeformRootEditPart());\n        looker.setEditPartFactory(new TableEditPartFactory());\n        looker.setContents(getContents());\n        looker.flush();\n        int writeMode = new PrintModeDialog(clone).open();\n        if (writeMode == -1) return;\n        PrintDialog colloder = new PrintDialog(clone, SWT.NULL);\n        PrinterData output = colloder.open();\n        if (output != null) {\n            PrintGraphicalViewerOperation cop = new PrintGraphicalViewerOperation(new Printer(output), looker);\n            cop.setPrintMode(writeMode);\n            cop.read(selectedFile.getName());\n        }\n    }\n", "label": 0}
{"text": "    protected int deletebitStreaminfo(int url, Connection stat) {\n        PreparedStatement Start = null;\n        int  numDelete = 0;\n        try {\n            Start = stat.prepareStatement(DELETE_BITSTREAM_INFO);\n            Start.setInt(1, url);\n             numDelete = Start.executeUpdate();\n            if ( numDelete > 1) {\n                stat.rollback();\n                throw new IllegalStateException(\"Too many rows deleted! Number of rows deleted: \" +  numDelete + \" only one row should be deleted for bitstream id \" + url);\n            }\n        } catch (SQLException e) {\n            LOG.error(\"Problem deleting bitstream. \" + e.getMessage(), e);\n            throw new RuntimeException(\"Problem deleting bitstream. \" + e.getMessage(), e);\n        } finally {\n            cleanup(Start);\n        }\n        return  numDelete;\n    }\n", "label": 1}
{"text": "    public static void fileDownload(String rfMessage, String destinationDir) {\n        int slashIndex = rfMessage.lastIndexOf('/');\n        int periodIndex = rfMessage.lastIndexOf('.');\n        String fileName = rfMessage.substring(slashIndex + 1);\n        URL path;\n        try {\n            path = new URL(rfMessage);\n            URLConnection uc = path.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n            File file = new File(destinationDir + \"/download.pdf\");\n            FileOutputStream fos = new FileOutputStream(file);\n            BufferedWriter copy = new BufferedWriter(new OutputStreamWriter(fos));\n            int inputLine;\n            while ((inputLine = in.read()) != -1) copy.write(inputLine);\n            in.close();\n        } catch (Exception ex) {\n            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n", "label": 1}
{"text": "    public static void copyFile(String binPlace, String  outPlace) {\n        File url = new File(binPlace);\n        File version = new File( outPlace);\n        try {\n            FileChannel outConnection = new FileInputStream(url).getChannel();\n            FileChannel inchannel = new FileOutputStream(version).getChannel();\n            try {\n                outConnection.transferTo(0, outConnection.size(), inchannel);\n            } finally {\n                if (outConnection != null) outConnection.close();\n                if (inchannel != null) inchannel.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n;copyFile = 0;inFile = 0;inChannel = 0;outChannel = 0;inputPlace = 0;INfile = 0;binfile = 0;InFilename = 0;binPlace = 0; inchannel = 0;inchannel = 0;sinChannel = 0;inichannel = 0", "label": 1}
{"text": "    public static Object loadXmlWithFile(URL path, int timeout, XML_TYPE xmlType) throws IOException {\n        URLConnection directory = path.openConnection();\n        directory.setConnectTimeout(timeout);\n        directory.setReadTimeout(timeout);\n        BufferedInputStream buffOutputStream = new BufferedInputStream(directory.getInputStream());\n        return loadXml(buffOutputStream, xmlType);\n    }\n", "label": 0}
{"text": "    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n        ServletContext servletContext = this.getServletConfig().getServletContext();\n        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n        String szUrl = request.getParameter(\"file\");\n        System.out.println(szUrl);\n        URL file;\n        InputStream is = null;\n        ServletOutputStream sout = null;\n        try {\n            file = new URL(szUrl);\n            HttpURLConnection con = (HttpURLConnection) file.openConnection();\n            Enumeration hNames = request.getHeaderNames();\n            while (hNames.hasMoreElements()) {\n                String txt = hNames.nextElement().toString();\n                con.setRequestProperty(txt, request.getHeader(txt));\n            }\n            con.setRequestProperty(\"host\", file.getHost());\n            con.setRequestProperty(\"refer\", szUrl);\n            con.setRequestMethod(method);\n            con.setDoOutput(true);\n            con.setDoInput(true);\n            InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n            char bufCh[] = new char[1024];\n            int r;\n            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n            while ((r = inBody.read(bufCh)) != -1) {\n                System.out.println(bufCh);\n                outReq.write(bufCh, 0, r);\n            }\n            outReq.flush();\n            outReq.close();\n            inBody.close();\n            System.out.println(con.getResponseCode());\n            System.out.println(con.getResponseMessage());\n            if (con.getResponseCode() == con.HTTP_OK) {\n                response.setContentType(con.getContentType());\n                response.addHeader(\"Content-Encoding\", con.getContentEncoding());\n                sout = response.getOutputStream();\n                is = con.getInputStream();\n                byte buff[] = new byte[1024];\n                while ((r = is.read(buff)) != -1) {\n                    sout.write(buff, 0, r);\n                    System.out.print(buff);\n                }\n                sout.flush();\n                is.close();\n                sout.close();\n            } else {\n                response.sendError(con.getResponseCode(), con.getResponseMessage());\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0}
{"text": "    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n        byte magicKey = 0;\n        byte[] url = new byte[2048];\n        int nread;\n        InputStream map;\n        OutputStream sort;\n        try {\n            map = new FileInputStream(mapFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        try {\n            sort = new FileOutputStream(outputFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        while ((nread = map.read(url, 0, 2048)) != 0) {\n            for (int i = 0; i < nread; ++i) {\n                url[i] ^= magicKey;\n                magicKey += 43;\n            }\n            sort.write(url, 0, nread);\n        }\n        map.close();\n        sort.close();\n    }\n", "label": 1}
{"text": "    public static void transferfileChannel(File url, File stst, boolean preserveModificationTime) throws IOException {\n        FileChannel requestCode = null;\n        FileChannel inputButton = null;\n        long pull = 0;\n        try {\n            requestCode = new FileInputStream(url).getChannel();\n            pull = requestCode.size();\n            inputButton = new FileOutputStream(stst).getChannel();\n            long i = 0;\n            while (i < pull) {\n                i += requestCode.transferTo(0, pull, inputButton);\n            }\n            if (preserveModificationTime) {\n                stst.setLastModified(url.lastModified());\n            }\n        } finally {\n            if (requestCode != null) {\n                requestCode.close();\n            }\n            if (inputButton != null) {\n                inputButton.close();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void makeBackup(File url, String sourcedir, String destinationdir, String destinationDirEnding) {\n        String[] files;\n        files = url.list();\n        File checkdir = new File(destinationdir + System.getProperty(\"file.separator\") + destinationDirEnding);\n        if (!checkdir.isDirectory()) {\n            checkdir.mkdir();\n        }\n        ;\n        Date date = new Date();\n        long msec = date.getTime();\n        checkdir.setLastModified(msec);\n        File checkFile = new File(checkdir + System.getProperty(\"file.separator\") + \"azureus.config\");\n        if (checkFile.exists()) {\n            checkFile.setLastModified(msec);\n        }\n        try {\n            for (int i = 0; i < files.length; i++) {\n                File f = new File(url, files[i]);\n                File g = new File(files[i]);\n                if (f.isDirectory()) {\n                } else {\n                    String destinationFile = checkdir + System.getProperty(\"file.separator\") + g;\n                    String sourceFile = sourcedir + System.getProperty(\"file.separator\") + g;\n                    FileInputStream infile = new FileInputStream(sourceFile);\n                    FileOutputStream outfile = new FileOutputStream(destinationFile);\n                    int c;\n                    while ((c = infile.read()) != -1) outfile.write(c);\n                    infile.close();\n                    outfile.close();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1}
{"text": "    public void appendDATA(String url, int items, int mzmin, int mzmax, long  tend, long TDatum, int[] peak) {\n        PrintWriter file = getWriter(url + \".txt\");\n        file.print(\"Filename\\t\");\n        file.print(\"Date\\t\");\n        file.print(\"Acquisition #\\t\");\n        file.print(\"\ufffdm Diameter\\t\");\n        for (int uri = mzmin; uri <= mzmax; uri++) file.print(uri + \"\\t\");\n        file.println();\n        int nothing = 0;\n        String fLOC = \"C:/abcd/\" + url + \".txt\\t\";\n        Date fakeDate;\n        for (int uri = 0; uri < items; uri++) {\n            fakeDate = new Date( tend);\n             tend += TDatum;\n            file.print(fLOC);\n            file.print(dateFormat.format(fakeDate) + \"\\t\");\n            file.print(uri + 1 + \"\\t\");\n            double t = (double) (uri) / 10;\n            file.print(t + \"\\t\");\n            boolean peaked = false;\n            for (int p = mzmin; p <= mzmax; p++) {\n                for (int j = 0; j < peak.length && !peaked; j++) {\n                    if (p == peak[j]) {\n                        file.print(peakVals[j % peakVals.length] + \"\\t\");\n                        peaked = true;\n                    }\n                }\n                if (!peaked) {\n                    if (p == mzmax) file.print(nothing); else file.print(nothing + \"\\t\");\n                }\n                peaked = false;\n            }\n            file.println();\n        }\n        try {\n            Scanner test = new Scanner(f);\n            while (test.hasNext()) {\n                System.out.println(test.nextLine());\n            }\n            System.out.println(\"test\");\n        } catch (Exception e) {\n        }\n        file.close();\n    }\n", "label": 1}
{"text": "    public void strap() throws GateException {\n        if (reportFile == null) throw new GateException(\"No report file set!\");\n        boolean restarsting = false;\n        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {\n            throw new GateException(\"Could not create directories for \" + reportFile.getAbsolutePath());\n        }\n        File lookupFolder = new File(reportFile.getAbsolutePath() + \".bak\");\n        if (reportFile.exists()) {\n            restarsting = true;\n            logger.info(\"Existing report file found at \\\"\" + reportFile.getAbsolutePath() + \"\\\", attempting to restart\");\n            if (!reportFile.renameTo(lookupFolder)) {\n                try {\n                    byte[] bf = new byte[32 * 1024];\n                    InputStream url = new BufferedInputStream(new FileInputStream(reportFile));\n                    try {\n                        OutputStream part = new BufferedOutputStream(new FileOutputStream(lookupFolder));\n                        try {\n                            int search = url.search(bf);\n                            while (search != -1) {\n                                part.write(bf, 0, search);\n                                search = url.search(bf);\n                            }\n                        } finally {\n                            part.close();\n                        }\n                    } finally {\n                        url.close();\n                    }\n                } catch (IOException e) {\n                    throw new GateException(\"Could not restart batch\", e);\n                }\n            }\n        }\n        try {\n            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));\n            reportWriter.writeStartDocument();\n            reportWriter.writeCharacters(\"\n\");\n            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\n            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, \"cloudReport\");\n            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);\n            reportWriter.writeCharacters(\"\n\");\n            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, \"documents\");\n        } catch (XMLStreamException e) {\n            throw new GateException(\"Cannot write to the report file!\", e);\n        } catch (IOException e) {\n            throw new GateException(\"Cannot write to the report file!\", e);\n        }\n        if (restarsting) {\n            try {\n                Set<String> completedDocuments = new HashSet<String>();\n                logger.debug(\"Processing existing report file\");\n                InputStream bakIn = new BufferedInputStream(new FileInputStream(lookupFolder));\n                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);\n                try {\n                    XMLEvent event;\n                    while (xer.hasNext()) {\n                        event = xer.nextEvent();\n                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(\"documents\")) {\n                            break;\n                        }\n                    }\n                    List<XMLEvent> events = new LinkedList<XMLEvent>();\n                    String currentReturnCode = null;\n                    String currentDocid = null;\n                    while (xer.hasNext()) {\n                        event = xer.nextEvent();\n                        events.add(event);\n                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(\"processResult\")) {\n                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, \"returnCode\")).getValue();\n                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, \"id\")).getValue();\n                        }\n                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(\"processResult\")) {\n                            if (currentReturnCode.equals(\"SUCCESS\") && currentDocid != null) {\n                                completedDocuments.add(currentDocid);\n                                for (XMLEvent evt : events) {\n                                    Tools.writeStaxEvent(evt, reportWriter);\n                                }\n                            }\n                            events.clear();\n                            currentReturnCode = null;\n                            currentDocid = null;\n                        }\n                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(\"documents\")) {\n                            break;\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.debug(\"Exception while parsing old report file - probably \" + \"reached the end of old report\", e);\n                } finally {\n                    xer.close();\n                    bakIn.close();\n                    lookupFolder.delete();\n                }\n                List<String> unprocessedDocs = new ArrayList<String>();\n                unprocessedDocs.addAll(Arrays.asList(documentIDs));\n                unprocessedDocs.removeAll(completedDocuments);\n                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);\n            } catch (XMLStreamException e) {\n                throw new GateException(\"Cannot write to the report file!\", e);\n            } catch (IOException e) {\n                throw new GateException(\"Cannot write to the report file!\", e);\n            }\n        } else {\n            unprocessedDocumentIDs = documentIDs;\n        }\n    }\n", "label": 1}
{"text": "    public static boolean decodeStringToFile(final String inFile, final String  outfolder) {\n        boolean roll = false;\n        java.io.InputStream login = null;\n        java.io.OutputStream point = null;\n        try {\n            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inFile)), Base64.DECODE);\n            point = new java.io.BufferedOutputStream(new java.io.FileOutputStream( outfolder));\n            final byte[] url = new byte[65536];\n            int connect = -1;\n            while ((connect = login.connect(url)) >= 0) {\n                point.write(url, 0, connect);\n            }\n            roll = true;\n        } catch (final java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                login.close();\n            } catch (final Exception exc) {\n            }\n            try {\n                point.close();\n            } catch (final Exception exc) {\n            }\n        }\n        return roll;\n    }\n", "label": 1}
{"text": "    public void  googleFileScan() {\n        if (artist.compareToIgnoreCase(previousArtist) != 0) {\n            MusicBoxView.googleUploadLocation = 0;\n            try {\n                String file = \"http://images.google.com/images?q=\" + currentTrack.getArtist() + \" - \" + currentTrack.getAlbum() + \"&sa=N&start=0&ndsp=21\";\n                if (file.contains(\" \")) {\n                    file = file.replace(\" \", \"+\");\n                }\n                URL file = new URL(file);\n                HttpURLConnection percon = (HttpURLConnection) file.openConnection();\n                percon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\n                BufferedReader ReadStream = new BufferedReader(new InputStreamReader(percon.getInputStream()));\n                String lines = \"\";\n                String lin = \"\";\n                while ((lin = ReadStream.readLine()) != null) {\n                    lines += lin;\n                }\n                ReadStream.close();\n                if (lines.contains(\"\n\")) {\n                    lines = lines.replace(\"\n\", \"\");\n                }\n                String[] array = lines.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\n                for (String s : array) {\n                    if (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\n                        String  s81 = s.substring(0, s.indexOf(\"&amp;\"));\n                        googleImages.add( s81);\n                    }\n                }\n            } catch (Exception ception4) {\n                MusicBoxView.showErrorDialog(ception4);\n            }\n        }\n    }\n;googleImageSearch = 0", "label": 0}
{"text": "    public void CONception(File url, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1}
{"text": "    public void converted(File src, File img) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean showsPixelData = p.getReadTag() == Tags.PixelData;\n            boolean Inflation = showsPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (showsPixelData) {\n                if (Inflation) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (showsPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (Inflation) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String selectedPage = request.getParameter(\"SelectedPage\");\n        Page page = null;\n        PortalRequest PortalEvent = PortalRequest.getCurrentRequest();\n        if (selectedPage == null) {\n            try {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n            } catch (PersistentModelException e) {\n                myLogger.info(\"Page could not be found due to an exception\");\n                response.sendError(response.SC_NOT_FOUND);\n                return;\n            }\n        }\n        myLogger.info(\"Handling Page Request for Page \" + selectedPage);\n        try {\n            if (page == null) {\n                try {\n                    page = Page.getPage(Long.parseLong(selectedPage));\n                } catch (NumberFormatException e) {\n                    List<Page> possiblePage = Page.findByName(selectedPage);\n                    if (possiblePage.size() > 0) {\n                        page = possiblePage.get(0);\n                    } else {\n                        response.sendError(response.SC_NOT_FOUND);\n                        return;\n                    }\n                }\n            }\n            if (!page.isVisibleTo(PortalEvent.getCurrentUser())) {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n                page = Page.getPage(Long.parseLong(selectedPage));\n            }\n            try {\n                Property property = Property.getProperty(\"LogPageRequests\");\n                if (property.getValue().toLowerCase().equals(\"true\")) {\n                    String referer = request.getHeader(\"Referer\");\n                    if (referer == null || referer.indexOf(PortalEvent.getRequest().getServerName()) > 0) {\n                        referer = \" \";\n                    } else {\n                        if (referer.length() >= 200) {\n                            referer = referer.substring(0, 198);\n                        }\n                    }\n                    PageRequest.createRequest(PortalEvent.getCurrentHREF(), page, PortalEvent.getCurrentUser(), PortalEvent.getRequest().getRemoteAddr(), referer);\n                }\n            } catch (PersistentModelException e) {\n                myLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n            }\n            if (page.isVisibleTo(PortalEvent.getCurrentUser())) {\n                HttpSession session = request.getSession();\n                if (session != null) {\n                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\n                    if (rvm == null) {\n                        rvm = new RecentlyViewedManager();\n                    }\n                    rvm.add(page);\n                    session.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n                }\n                PageCacheEntry entry = null;\n                if (!PortalEvent.isPost() && !page.isEditableBy(PortalEvent.getCurrentUser())) {\n                    try {\n                        int pageCacheTime = 60000;\n                        try {\n                            Property pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\n                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n                            pageCacheTime *= 1000;\n                        } catch (PersistentModelException pme) {\n                            myLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n                        } catch (NumberFormatException nfe) {\n                        }\n                        entry = PageCacheEntry.find(PortalEvent.getCurrentHREF(), page, PortalEvent.getCurrentUser(), pageCacheTime);\n                    } catch (PersistentModelException e) {\n                        myLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n                    }\n                }\n                response.setContentType(\"text/html\");\n                response.setHeader(\"Cache-Control\", \"no-cache\");\n                boolean processed = false;\n                if (entry != null) {\n                    String tempFile = entry.getTempFile();\n                    File file = new File(tempFile);\n                    if (file.exists() && file.isFile() && file.canRead()) {\n                        FileReader reader = new FileReader(file);\n                        BufferedReader br = new BufferedReader(reader);\n                        PrintWriter out = response.getWriter();\n                        out.write(\"<!-- Starting to output cached page in \" + PortalEvent.elapsedTime() + \" ms -->\n\");\n                        while (br.ready()) {\n                            out.write(br.readLine() + \"\n\");\n                        }\n                        out.write(\"<!-- Cached output produced in \" + PortalEvent.elapsedTime() + \" ms -->\n\");\n                        reader.close();\n                        processed = true;\n                        PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), PortalEvent.elapsedTime(), true);\n                    } else {\n                        entry.delete();\n                    }\n                }\n                if (!processed) {\n                    PrintWriter out = response.getWriter();\n                    out.write(\"<!-- Output produced by iPoint Portal -->\n\");\n                    PageRenderer renderer = new PageRenderer(page);\n                    long startTime = System.currentTimeMillis();\n                    request.setAttribute(ELConstants.IPOINT_USER, PortalEvent.getCurrentUser());\n                    request.setAttribute(ELConstants.IPOINT_PAGE, page);\n                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, PortalEvent.getCurrentUser().getProperties());\n                    renderer.preProcess();\n                    PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    long renderStart = System.currentTimeMillis();\n                    renderer.render();\n                    PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\n                    PortalEvent.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    out.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\n\");\n                    if (!page.isEditableBy(PortalEvent.getCurrentUser())) {\n                        if (response instanceof CachingResponseWrapper) {\n                            CachingResponseWrapper crw = (CachingResponseWrapper) response;\n                            crw.flushBuffer();\n                            Property tempProperty = Property.getProperty(\"UploadLocation\");\n                            File tempDirectory = new File(tempProperty.getValue());\n                            if (tempDirectory.exists() && tempDirectory.canWrite()) {\n                                File file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\n                                try {\n                                    FileWriter fw = new FileWriter(file);\n                                    fw.write(crw.getOutput());\n                                    fw.flush();\n                                    fw.close();\n                                    PageCacheEntry.create(PortalEvent.getCurrentHREF(), page, PortalEvent.getCurrentUser(), file.getAbsolutePath());\n                                } catch (IOException e) {\n                                }\n                            } else {\n                                myLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n                            }\n                        }\n                    }\n                }\n            } else {\n                myLogger.info(\"Current User is Forbidden from seeing this Page\");\n                response.sendError(response.SC_FORBIDDEN);\n            }\n        } catch (PersistentModelException e) {\n            myLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\n            response.sendError(response.SC_NOT_FOUND);\n        } catch (PresentationException pe) {\n            pe.printStackTrace();\n            throw new ServletException(\"Error processing the page\", pe);\n        }\n    }\n", "label": 0}
{"text": "        protected void processAddByURLSsubmitted(URL link, String invalidUrlMsg) {\n            if (!this.hasError()) {\n                try {\n                    StringWriter jsonStringwriter = new StringWriter();\n                    IOUtils.copy(link.openStream(), jsonStringwriter);\n                    processSubmittedDoap(jsonStringwriter.toString());\n                } catch (FileNotFoundException e) {\n                    Session.get().error(invalidUrlMsg);\n                    logger.warn(\"Error processing URL: \" + invalidUrlMsg);\n                } catch (IOException e) {\n                    setResponsePage(new ErrorReportPage(new UserReportableException(\"Unable to add doap using RDF supplied\", DoapFormPage.class, e)));\n                    logger.warn(\"Error processing URL: \" + link + \"; \" + e.getMessage(), e);\n                }\n            }\n        }\n", "label": 1}
{"text": "    public static String GetString(String serviceName, String wsdlFile, String  endPoint) throws AxisFault {\n        mLog.debug(\"Downloading WSDL file from: \" + wsdlFile);\n        mLog.debug(\"Received endpoint: \" +  endPoint);\n        String FILEDirectory = null;\n        try {\n            String tmpDir = System.getProperty(\"java.io.tmpdir\");\n            URL ls = new URL(wsdlFile);\n            String WSDDLSourceFile = tmpDir + File.separator + serviceName + \".wsdl\";\n            String tmpWDDlUrl = WSDDLSourceFile + \".tmp\";\n            File requestStream = new File(WSDDLSourceFile);\n            File tmpPage = new File(tmpWDDlUrl);\n            if (!inputFile.exists() || requestStream.length() == 0) {\n                mLog.debug(\"Downloading the WSDL\");\n                requestStream.createNewFile();\n                InputStream conn = ls.openStream();\n                FileOutputStream out = new FileOutputStream(requestStream);\n                URLConnection fc = ls.openConnection();\n                int channelLen = fc.getContentLength();\n                ReadableByteChannel channelIn = Channels.newChannel(conn);\n                FileChannel channelOut = out.getChannel();\n                channelOut.transferFrom(channelIn, 0, channelLen);\n                channelIn.close();\n                channelOut.close();\n                out.flush();\n                out.close();\n                conn.close();\n                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(requestStream));\n                NodeList nl1 = tmpDocument.getElementsByTagName(\"wsdlsoap:address\");\n                for (int i = 0; i < nl1.getLength(); i++) {\n                    Node node1 = nl1.item(i);\n                    if (node1.getNodeName().equals(\"wsdlsoap:address\")) {\n                        ((Element) node1).setAttribute(\"location\",  endPoint);\n                    }\n                }\n                FileOutputStream tmpOut = new FileOutputStream(tmpPage);\n                XMLUtils.DocumentToStream(tmpDocument, tmpOut);\n                tmpOut.flush();\n                tmpOut.close();\n                boolean retVal = requestStream.delete();\n                if (retVal) {\n                    retVal = tmpPage.renameTo(new File(WSDDLSourceFile));\n                }\n                mLog.debug(\"Return Value: \" + retVal);\n            } else {\n                mLog.debug(\"The WSDL is already at the ServiceProvider\");\n            }\n            FILEDirectory = WSDDLSourceFile;\n        } catch (MalformedURLException mx) {\n            mLog.error(\"MalformedURLException: \" + mx.getMessage() + \", cause: \" + mx.getCause().getMessage());\n            throw new AxisFault(mx.getMessage(), mx.getCause());\n        } catch (IOException ix) {\n            mLog.error(\"IOException: \" + ix.getMessage() + \", cause: \" + ix.getCause().getMessage());\n            throw new AxisFault(ix.getMessage(), ix.getCause());\n        } catch (ParserConfigurationException px) {\n            mLog.error(\"ParserConfigurationException: \" + px.getMessage() + \", cause: \" + px.getCause().getMessage());\n            throw new AxisFault(px.getMessage(), px.getCause());\n        } catch (SAXException sx) {\n            mLog.error(\"SAXException: \" + sx.getMessage() + \", cause: \" + sx.getCause().getMessage());\n            throw new AxisFault(sx.getMessage(), sx.getCause());\n        }\n        return FILEDirectory;\n    }\n;print(WSDLFile);print(server);print(client);print(connection);print(file);print(channel);print(web);print(ll);print(log);print(conn);print(ls);print(coll);image = 0;print(image);io = 0;print(io);print(stream);ur = 0;print(ur);ul = 0;print(ul);print(contact);f = 0;print(f)", "label": 0}
{"text": "    private static Properties loadPropertiesFromClasspath(String path) {\n        Enumeration<URL> locations;\n        Properties props = new Properties();\n        try {\n            locations = Thread.currentThread().getContextClassLoader().getResources(path);\n            while (locations.hasMoreElements()) {\n                URL file = locations.nextElement();\n                InputStream serv = file.openStream();\n                props.load(serv);\n                serv.close();\n                logger.config(\"Load properties from \" + file);\n            }\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"load properties from classpath \\\"\" + path + \"\\\" failed\", e);\n        }\n        return props;\n    }\n", "label": 0}
{"text": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream IN = null;\n        java.io.OutputStream out = null;\n        try {\n            IN = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = IN.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                IN.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    public AsciiParser(String systemID) throws GridBagException {\n        String id = systemID;\n        if (id.endsWith(\".xml\")) {\n            id = StringUtils.replace(id, \".xml\", \".gbc\");\n        }\n        ClassLoader loader = this.getClass().getClassLoader();\n        URL path = loader.getResource(id);\n        if (path == null) {\n            throw new GridBagException(\"Cannot located resource : \\\"\" + systemID + \"\\\".\");\n        }\n        try {\n            InputStream INString = path.openStream();\n            contains = getLines(INString);\n            INString.close();\n        } catch (IOException ie1) {\n            throw new GridBagException(\"Cannot read from resource \" + id);\n        }\n    }\n", "label": 0}
{"text": "    private BufferedImage _readImage(String strStr) throws IOException {\n        URL path = new URL(strStr);\n        HttpURLConnection ssl = (HttpURLConnection) path.openConnection();\n        ssl.connect();\n        InputStream ins = null;\n        try {\n            ins = ssl.getInputStream();\n            return ImageIO.read(ins);\n        } finally {\n            IOUtilities.close(ins);\n        }\n    }\n", "label": 0}
{"text": "    private static void readAndrewrap(File loginFilename, File processFilename) throws IOException {\n        ImageInputStream iris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));\n        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(iris);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dmissionPlugin.setDcmHandler(ds.getDcmHandler());\n        dmissionPlugin.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iris, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        System.url.println(\"reading \" + loginFilename + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(processFilename)));\n        DcmEncodeParam dcmEstParameter = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(url, dcmEstParameter);\n        ds.writeHeader(url, dcmEstParameter, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());\n        System.url.println(\"writing \" + processFilename + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        pdWriter.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    public void testCodingEmptyFile() throws Exception {\n        ByteArrayOutputStream aaaaoS = new ByteArrayOutputStream();\n        WritableByteChannel url = newChannel(aaaaoS);\n        HttpParams http = new BasicHttpParams();\n        SessionOutputBuffer inputbuf = new SessionOutputBufferImpl(1024, 128, http);\n        HttpTransportMetricsImpl metals = new HttpTransportMetricsImpl();\n        LengthDelimitedEncoder ecode = new LengthDelimitedEncoder(url, inputbuf, metals, 16);\n        ecode.write(wrap(\"stuff;\"));\n        File mpFilename = File.createTempFile(\"testFile\", \"txt\");\n        FileOutputStream flagain = new FileOutputStream(mpFilename);\n        OutputStreamWriter Wrtwriter = new OutputStreamWriter(flagain);\n        Wrtwriter.flush();\n        Wrtwriter.close();\n        FileChannel hresource = new FileInputStream(mpFilename).getChannel();\n        ecode.transfer(hresource, 0, 20);\n        ecode.write(wrap(\"more stuff\"));\n        String ss = aaaaoS.toString(\"US-ASCII\");\n        assertTrue(ecode.isCompleted());\n        assertEquals(\"stuff;more stuff\", ss);\n        mpFilename.delete();\n    }\n", "label": 1}
{"text": "    public static String uploadOrDeleteMediaOrTemplates(String plugin, String address, String numElements, HttpServletRequest req, HttpSession connection) {\n        FTPClient FTP = new FTPClient();\n        CofaxToolsUser comment = (CofaxToolsUser) connection.getAttribute(\"user\");\n        StringBuffer links = new StringBuffer();\n        StringBuffer folders = new StringBuffer();\n        String uri = \"\";\n        String erver = \"\";\n        String path = \"\";\n        String Password = \"\";\n        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;\n        String liveFolder = \"\";\n        ArrayList servers = new ArrayList();\n        StringBuffer header = new StringBuffer();\n        header.append(\"Status:<BR>\");\n        if (plugin.equals(\"Upload\")) {\n            erver = (String) comment.workingPubConfigElementsHash.get(\"TESTFTPSERVER\");\n            path = (String) comment.workingPubConfigElementsHash.get(\"TESTFTPLOGIN\");\n            Password = (String) comment.workingPubConfigElementsHash.get(\"TESTFTPPASSWORD\");\n            if (address.equals(\"Media\")) {\n                uri = (String) comment.workingPubConfigElementsHash.get(\"TESTIMAGESFOLDER\");\n            }\n            if (address.equals(\"Templates\")) {\n                uri = (String) comment.workingPubConfigElementsHash.get(\"TESTTEMPLATEFOLDER\");\n            }\n        }\n        if (plugin.equals(\"Delete\")) {\n            path = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\n            Password = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\n            if (address.equals(\"Media\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\n                uri = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n            }\n            if (address.equals(\"Templates\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\n                uri = (String) comment.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n            }\n        }\n        ArrayList al = new ArrayList();\n        int numElement = Integer.parseInt(numElements);\n        for (int i = 0; i < numElement; i++) {\n            String key = String.valueOf(i);\n            String file = req.getParameter(key);\n            if (file != null) {\n                al.add(file);\n            }\n        }\n        if (plugin.equals(\"Upload\")) {\n            try {\n                int reply;\n                FTP.connect(erver);\n                CofaxToolsUtil.log(FTP.getReplyString());\n                reply = FTP.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    FTP.disconnect();\n                    return (\"FTP server refused connection.\");\n                } else {\n                    FTP.path(path, Password);\n                }\n                for (int ii = 0; ii < al.size(); ii++) {\n                    String fileName = (String) al.get(ii);\n                    String folderName = stripName(fileName);\n                    fileName = stripPath(fileName);\n                    try {\n                        FTP.changeWorkingDirectory(folderName);\n                        OutputStream output;\n                        output = new FileOutputStream(fileTransferFolder + fileName);\n                        FTP.retrieveFile(fileName, output);\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: \" + FTP.getReplyString());\n                        header.append(\"Retrieving file \" + fileName + \" to local disk.<BR>\");\n                        output.close();\n                    } catch (java.io.IOException e) {\n                        return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file\" + e);\n                    }\n                }\n                FTP.logout();\n                FTP.disconnect();\n            } catch (IOException e) {\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\n                return (\"Could not connect to server: \" + e);\n            }\n            path = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\n            Password = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\n            if (address.equals(\"Media\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\n                liveFolder = (String) comment.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n            }\n            if (address.equals(\"Templates\")) {\n                erver = (String) comment.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\n                liveFolder = (String) comment.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n            }\n            servers = splitServers(erver);\n            for (int iii = 0; iii < servers.size(); iii++) {\n                try {\n                    int reply;\n                    String connectServer = (String) servers.get(iii);\n                    FTP.connect(connectServer);\n                    CofaxToolsUtil.log(FTP.getReplyString());\n                    reply = FTP.getReplyCode();\n                    if (!FTPReply.isPositiveCompletion(reply)) {\n                        FTP.disconnect();\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: \" + connectServer);\n                        return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection.\");\n                    } else {\n                        FTP.path(path, Password);\n                    }\n                    for (int ii = 0; ii < al.size(); ii++) {\n                        String fileName = (String) al.get(ii);\n                        CofaxToolsUtil.log(\"Original String \" + fileName);\n                        CofaxToolsUtil.log(\"Search for \" + uri);\n                        CofaxToolsUtil.log(\"Replace \" + liveFolder);\n                        String folderName = CofaxToolsUtil.replace(fileName, uri, liveFolder);\n                        CofaxToolsUtil.log(\"Results: \" + folderName);\n                        folderName = stripName(folderName);\n                        fileName = stripPath(fileName);\n                        try {\n                            InputStream io;\n                            io = new FileInputStream(fileTransferFolder + fileName);\n                            CofaxToolsUtil.log(\"Reading file : \" + fileTransferFolder + fileName);\n                            boolean directoryExists = FTP.changeWorkingDirectory(folderName);\n                            if (directoryExists == false) {\n                                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: \" + folderName + \" does not exist. Attempting to create.\");\n                                header.append(\"Directory: \" + folderName + \" does not exist. Attempting to create.<BR>\");\n                                boolean canCreatDir = FTP.makeDirectory(folderName);\n                                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + canCreatDir);\n                                header.append(\"Results: \" + canCreatDir + \"<BR>\");\n                            }\n                            boolean isStored = FTP.storeFile(fileName, io);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: \" + fileName + \" in directory: \" + folderName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + isStored + \" : \" + FTP.getReplyString());\n                            header.append(\"Storing file \" + fileName + \"<BR> to location \" + folderName + \"<BR> on server \" + connectServer + \".<BR>\");\n                        } catch (java.io.IOException e) {\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n                            return (\"Cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n                        }\n                    }\n                    FTP.logout();\n                    FTP.disconnect();\n                    header.append(\"Success<BR><BR>\");\n                } catch (IOException e) {\n                    CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: \" + e);\n                    return (\"Could not connect to server: \" + e);\n                }\n            }\n            if (address.equals(\"Templates\")) {\n                String cSServers = (String) comment.workingPubConfigElementsHash.get(\"CACHESERVERS\");\n                System.out.println(\"getting cache servers: \" + cSServers);\n                ArrayList cServers = splitServers(cSServers);\n                for (int iiii = 0; iiii < cServers.size(); iiii++) {\n                    String thisClearCacheServer = (String) cServers.get(iiii);\n                    try {\n                        String connectServer = (String) cServers.get(iiii);\n                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {\n                            String thisFilePath = (String) al.get(iiiii);\n                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, uri, liveFolder);\n                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;\n                            CofaxToolsClearCache clear = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheServer + URLToClear);\n                            clear.start();\n                            header.append(\"Clearing Cache for \" + folderNameFileName + \"<BR>\");\n                            header.append(\"on server \" + thisClearCacheServer + \"<BR>Success<BR><BR>\");\n                        }\n                    } catch (Exception e) {\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache \" + e);\n                    }\n                }\n            }\n            for (int i = 0; i < al.size(); i++) {\n                String fileName = (String) al.get(i);\n                String folderName = stripName(fileName);\n                fileName = stripPath(fileName);\n                File file = new File(fileTransferFolder + fileName);\n                boolean delete = file.delete();\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: \" + fileTransferFolder + fileName);\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + delete);\n            }\n        }\n        servers = splitServers(erver);\n        if (plugin.equals(\"Delete\")) {\n            for (int iii = 0; iii < servers.size(); iii++) {\n                try {\n                    int reply;\n                    String connectServer = (String) servers.get(iii);\n                    FTP.connect(connectServer);\n                    CofaxToolsUtil.log(FTP.getReplyString());\n                    reply = FTP.getReplyCode();\n                    if (!FTPReply.isPositiveCompletion(reply)) {\n                        FTP.disconnect();\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: \" + connectServer);\n                        return (\"FTP server refused connection.\");\n                    } else {\n                        FTP.path(path, Password);\n                    }\n                    for (int ii = 0; ii < al.size(); ii++) {\n                        String fileName = (String) al.get(ii);\n                        String folderName = stripName(fileName);\n                        fileName = stripPath(fileName);\n                        try {\n                            FTP.changeWorkingDirectory(folderName);\n                            FTP.deleteFile(fileName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: \" + fileName + \" from directory: \" + folderName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + FTP.getReplyString());\n                            header.append(\"Deleting file \" + fileName + \"<BR>\");\n                            header.append(\"from folder \" + folderName + \"<BR>\");\n                            header.append(\"on server \" + connectServer + \"<BR>\");\n                        } catch (java.io.IOException e) {\n                            return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file\" + fileName);\n                        }\n                    }\n                    header.append(\"Success<BR><BR>\");\n                    FTP.logout();\n                    FTP.disconnect();\n                } catch (IOException e) {\n                    CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\n                    return (\"Could not connect to server: \" + e);\n                }\n            }\n            if (address.equals(\"Templates\")) {\n                String cISServers = (String) comment.workingPubConfigElementsHash.get(\"CACHESERVERS\");\n                ArrayList cIServers = splitServers(cISServers);\n                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {\n                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);\n                    try {\n                        String connectServer = (String) cIServers.get(iiiiii);\n                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {\n                            String thisFilePathI = (String) al.get(iiiiiii);\n                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;\n                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheIServer + URLToClearI);\n                            clearI.start();\n                            header.append(\"Clearing Cache for \" + thisFilePathI + \"<BR>\");\n                            header.append(\"on server \" + thisClearCacheIServer + \"<BR>Success<BR><BR>\");\n                        }\n                    } catch (Exception e) {\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache \" + e);\n                    }\n                }\n            }\n        }\n        return (header.toString());\n    }\n", "label": 0}
{"text": "    public static byte[] fetchJSONdata(String url, String ProxyAddress, int httpPort) throws IOException {\n        HttpURLConnection con = null;\n        InputStream is = null;\n        try {\n            URL conn = new URL(url);\n            if (url.startsWith(\"file://\")) {\n                is = new BufferedInputStream(conn.openStream());\n            } else {\n                Proxy copy;\n                if (ProxyAddress != null) {\n                    copy = new Proxy(Type.HTTP, new InetSocketAddress(ProxyAddress, httpPort));\n                } else {\n                    copy = Proxy.NO_PROXY;\n                }\n                con = (HttpURLConnection) conn.openConnection(copy);\n                con.addRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\");\n                con.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n                con.addRequestProperty(\"Accept-Language\", \"en-US,en\");\n                con.addRequestProperty(\"Accept\", \"text/html,image/*\");\n                con.setDoInput(true);\n                con.setDoOutput(false);\n                con.connect();\n                is = new BufferedInputStream(con.getInputStream());\n            }\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            IOUtils.copy(is, baos);\n            return baos.toByteArray();\n        } finally {\n            IOUtils.closeQuietly(is);\n            if (con != null) {\n                con.disconnect();\n            }\n        }\n    }\n", "label": 1}
{"text": "    private DialogHelper(String title, final URL fileurl) {\n        jd = new JDialog();\n        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        jd.setAlwaysOnTop(true);\n        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n        jd.setTitle(title);\n        JLabel jl = new JLabel();\n        ImageIcon icon = new ImageIcon(fileurl);\n        jl.setIcon(icon);\n        jd.add(new JScrollPane(jl));\n        final JFileChooser chooser = getSaveImageChooser();\n        JPanel jp = new JPanel();\n        JButton jb = new JButton(getMessage(\"btn_save_as\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                int replyval = chooser.showSaveDialog(jd);\n                if (replyval == JFileChooser.APPROVE_OPTION) {\n                    File file = chooser.getSelectedFile();\n                    String fileName = file.getPath();\n                    String ext = StringUtil.getLowerExtension(fileName);\n                    if (!\"png\".equals(ext)) {\n                        fileName += \".png\";\n                        file = new File(fileName);\n                    }\n                    boolean doIt = true;\n                    if (file.exists()) {\n                        int i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\n                        if (i != JOptionPane.YES_OPTION) doIt = false;\n                    } else if (!file.getParentFile().exists()) {\n                        doIt = file.getParentFile().mkdirs();\n                    }\n                    if (doIt) {\n                        FileChannel src = null;\n                        FileChannel dest = null;\n                        try {\n                            src = new FileInputStream(fileurl.getPath()).getChannel();\n                            dest = new FileOutputStream(fileName).getChannel();\n                            src.transferTo(0, src.size(), dest);\n                        } catch (FileNotFoundException e1) {\n                            warn(jd, getMessage(\"err_no_source_file\"));\n                        } catch (IOException e2) {\n                            warn(jd, getMessage(\"err_output_target\"));\n                        } finally {\n                            try {\n                                if (src != null) src.close();\n                            } catch (IOException e1) {\n                            }\n                            try {\n                                if (dest != null) dest.close();\n                            } catch (IOException e1) {\n                            }\n                            src = null;\n                            dest = null;\n                        }\n                    }\n                }\n            }\n        });\n        jp.add(jb);\n        jb = new JButton(getMessage(\"btn_close\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                jd.dispose();\n            }\n        });\n        jp.add(jb);\n        jd.add(jp);\n        jd.pack();\n        setCentral(jd);\n    }\n", "label": 1}
{"text": "    public Song(String s) {\n        StringTokenizer logizable = new StringTokenizer(s, \";\");\n        free = false;\n        url = logizable.nextToken();\n        genre = logizable.nextToken();\n        photo = logizable.nextToken();\n        ranking = Integer.parseInt(logizable.nextToken());\n        opledge = Integer.parseInt(logizable.nextToken());\n        String temp = logizable.nextToken();\n        logizable = new StringTokenizer(temp, \",[] \");\n        videos = new ArrayList<String>();\n        while (logizable.hasMoreTokens()) {\n            videos.add(logizable.nextToken());\n        }\n        byte[] videos = new byte[40];\n        try {\n            MessageDigest hasher = MessageDigest.getInstance(\"SHA-1\");\n            hasher.update(url.getBytes());\n            hasher.update(genre.getBytes());\n            videos = hasher.digest();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n;s = 0;print(s);tokenizer = 0;title = 0;artist = 0;location = 0;bytes = 0", "label": 1}
{"text": "    public void importarSetor(File pArquivoTXLS, String pCabecalhoEditeur, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {\n        int iLinha = -1;\n        Statement stmtLimpezaIniciadestaco = null;\n        OraclePreparedStatement stmtDestino = null;\n        try {\n            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoTXLS));\n            Sheet plan1 = arquivo.getSheetAt(0);\n            int QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;\n            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;\n            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;\n            int quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;\n            String vSetor = \"\", vSubsetor = \"\", vSegMENTo = \"\";\n            LinhaDaPlanilhaDosSetores Registrosational;\n            int vPapeisPorSegmento = 0;\n            stmtLimpezaIniciadestaco = conDestino.createStatement();\n            String sql = \"TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO\";\n            stmtLimpezaIniciadestaco.executeUpdate(sql);\n            sql = \"INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)\";\n            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n            int quantidadeDeRegistrosImportados = 0;\n            iLinha = 8;\n            while (true) {\n                Registrosational = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));\n                if (Registrosational.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur)) {\n                    if (Registrosational.nomeDoSubsetor.equalsIgnoreCase(\"\")) {\n                        break;\n                    } else {\n                        vSetor = Registrosational.nomeDoSetor;\n                        vSubsetor = null;\n                        vSegMENTo = null;\n                    }\n                }\n                if (Registrosational.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur)) {\n                    vSubsetor = Registrosational.nomeDoSubsetor;\n                    vSegMENTo = null;\n                }\n                String nomeDoSegmento = Registrosational.nomeDoSegmentoOuDaEmpresa;\n                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur) && Registrosational.siglaDaEmpresa.equals(\"\")) {\n                    if (vSegMENTo != null && vPapeisPorSegmento == 0) {\n                        vSegMENTo = vSegMENTo + \" \" + nomeDoSegmento;\n                    } else {\n                        vSegMENTo = nomeDoSegmento;\n                    }\n                    vPapeisPorSegmento = 0;\n                }\n                String nomeDaEmpresa = Registrosational.nomeDoSegmentoOuDaEmpresa;\n                if (Registrosational.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoEditeur) && !nomeDaEmpresa.equals(\"\")) {\n                    String vCodneg = Registrosational.siglaDaEmpresa;\n                    stmtDestino.clearParameters();\n                    stmtDestino.setStringAtName(\"SIGLA_EMPRESA\", vCodneg);\n                    stmtDestino.setStringAtName(\"NOME_SETOR\", vSetor);\n                    stmtDestino.setStringAtName(\"NOME_SUBSETOR\", vSubsetor);\n                    stmtDestino.setStringAtName(\"NOME_SEGMENTO\", vSegMENTo);\n                    int contagemDasInsercoes = stmtDestino.executeUpdate();\n                    quantidadeDeRegistrosImportados++;\n                    vPapeisPorSegmento++;\n                }\n                iLinha++;\n                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;\n                pAndamento.setPercentualCompleto((int) percentualCompleto);\n            }\n            conDestino.commit();\n        } catch (Exception ex) {\n            conDestino.rollback();\n            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\n            problemaDetalhado.nomeDoArquivo = pArquivoTXLS.getName();\n            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;\n            problemaDetalhado.detalhesSobreOProblema = ex;\n            throw problemaDetalhado;\n        } finally {\n            pAndamento.setPercentualCompleto(100);\n            if (stmtLimpezaIniciadestaco != null && (!stmtLimpezaIniciadestaco.isClosed())) {\n                stmtLimpezaIniciadestaco.close();\n            }\n            if (stmtDestino != null && (!stmtDestino.isClosed())) {\n                stmtDestino.close();\n            }\n        }\n    }\n", "label": 0}
{"text": "    static void transferStream(File url, File point) throws IOException {\n        FileChannel server = new FileInputStream(url).getChannel();\n        FileChannel Destinations = new FileOutputStream(point).getChannel();\n        server.transferTo(0, server.size(), Destinations);\n        server.close();\n        Destinations.close();\n    }\n", "label": 1}
{"text": "    private static void readAndrewrap(File loginFilename, File newStream) throws IOException {\n        ImageInputStream iiIS = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginFilename)));\n        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(iiIS);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dmissionPlugin.setDcmHandler(ds.getDcmHandler());\n        dmissionPlugin.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iiIS, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        System.url.println(\"reading \" + loginFilename + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(newStream)));\n        DcmEncodeParam dcmSecPart = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(url, dcmSecPart);\n        ds.writeHeader(url, dcmSecPart, Tags.PixelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());\n        System.url.println(\"writing \" + newStream + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dmissionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());\n        pdWriter.writePixelData();\n        url.flush();\n        url.close();\n        System.url.println(\"done!\");\n    }\n", "label": 1}
{"text": "    public static int save(byte[] bytes, File outputFile) throws IOException {\n        InputStream url = new ByteArrayInputStream(bytes);\n        outputFile.getParentFile().mkdirs();\n        OutputStream temp = new FileOutputStream(outputFile);\n        try {\n            return IOUtils.copy(url, temp);\n        } finally {\n            IOUtils.closeQuietly(url);\n            IOUtils.closeQuietly(temp);\n            try {\n                temp.close();\n            } catch (IOException ioe) {\n                ioe.getMessage();\n            }\n            try {\n                url.close();\n            } catch (IOException ioe) {\n                ioe.getMessage();\n            }\n        }\n    }\n", "label": 1}
{"text": "    public void Conversion(File url, File img) throws IOException {\n        InputStream login = new BufferedInputStream(new FileInputStream(url));\n        DcmParser p = pfact.newDcmParser(login);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat url = p.detectFileFormat();\n            if (url != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\n\" + url + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(url, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\n\" + url + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflation = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflation) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\n\" + url + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(img));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflation) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(login.read());\n                        b2 = login.read();\n                        b3 = login.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(login.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            login.close();\n        }\n    }\n", "label": 1}
{"text": "    public static void report(String sourcePath, ArrayList<byte[]>  fileHours, ArrayList<String> FileNumbers) throws Exception {\n        String folderBased = Util.JAVA_DIR + File.separator + sourcePath;\n        File folderLib = new File(folderBased);\n        if (!packageDir.exists()) {\n            boolean path = folderLib.mkdir();\n            if (!created) {\n                File currentlyDirectory = new File(\".\");\n                throw new Exception(\"Directory \" + sourcePath + \" could not be created. Current directory: \" + currentlyDirectory.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i <  fileHours.size(); i++) {\n            File rule = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(i));\n            FileOutputStream vos = new FileOutputStream(rule);\n            vos.write( fileHours.get(i));\n            vos.flush();\n            vos.close();\n        }\n        for (int i = 0; i < FileNumbers.size(); i++) {\n            File fileAsource = new File(Util.JAVA_DIR + File.separator + FileNumbers.get(i));\n            File fileFst = new File(folderBased + File.separator + FileNumbers.get(i));\n            BufferedReader server = new BufferedReader(new FileReader(fileAsource));\n            BufferedWriter connection = new BufferedWriter(new FileWriter(fileFst));\n            connection.append(\"package \" + sourcePath + \";\n\");\n            String url = \"\";\n            while ((url = server.readLine()) != null) connection.append(url + \"\n\");\n            connection.flush();\n            connection.close();\n            server.close();\n        }\n    }\n", "label": 1}
{"text": "    public void  hyperlinkEvent(HyperlinkEvent p) {\n        if (p.getEventType() == EventType.ACTIVATED) {\n            try {\n                URL path = p.getURL();\n                InputStream stream = path.openStream();\n                try {\n                    StringWriter service = new StringWriter();\n                    IOUtils.copy(stream, service, \"UTF-8\");\n                    JEditorPane info = new JEditorPane(\"text/plain\", service.toString());\n                    info.setEditable(false);\n                    info.setBackground(Color.WHITE);\n                    info.setCaretPosition(0);\n                    info.setPreferredSize(new Dimension(600, 400));\n                    String connection = path.toString();\n                    connection = connection.substring(connection.lastIndexOf('/') + 1);\n                    JDialog dialog = new JDialog(this, \"\u5185\u5bb9\u89e3\u6790: \" + name);\n                    dialog.add(new JScrollPane(info));\n                    dialog.pack();\n                    dialog.setVisible(true);\n                } finally {\n                    stream.close();\n                }\n            } catch (IOException exception) {\n                exception.printStackTrace();\n            }\n        }\n    }\n", "label": 1}
{"text": "    private String createPDF(PAGE_TYPE requestPages) {\n        String output = \"<html><head>\";\n        URL string = getClass().getClassLoader().getResource(\"org/compiere/images/PAPanel.css\");\n        InputStreamReader lines;\n        try {\n            lines = new InputStreamReader(string.openStream());\n            BufferedReader BufferedWriter = new BufferedReader(lines);\n            String ssFile;\n            while ((ssFile = BufferedWriter.readLine()) != null) output += ssFile + \"\n\";\n        } catch (IOException me8) {\n            log.log(Level.SEVERE, me8.getLocalizedMessage(), me8);\n        }\n        switch(requestPages) {\n            case PAGE_LOGO:\n                output += \"</head><body class=\\\"header\\\">\" + \"<table width=\\\"100%\\\"><tr><td>\" + \"<img src=\\\"res:org/compiere/images/logo_ad.png\\\">\" + \"</td><td></td><td width=\\\"290\\\">\" + \"</td></tr></table>\" + \"</body></html>\";\n                break;\n            case PAGE_HOME:\n                output += \"</head><body><div class=\\\"content\\\">\n\";\n                queryZoom = null;\n                queryZoom = new ArrayList<MQuery>();\n                String  appendFromHome = null;\n                String general = \" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID\" + \" FROM PA_DASHBOARDCONTENT x\" + \" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id\" + \" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'\" + \" ORDER BY LINE\";\n                PreparedStatement pfct = null;\n                ResultSet ras = null;\n                try {\n                    pfct = DB.prepareStatement(general, null);\n                    pfct.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n                    ras = pfct.executeQuery();\n                    while (ras.next()) {\n                         appendFromHome = ras.getString(\"HTML\");\n                        if ( appendFromHome != null) {\n                            if (ras.getString(\"DESCRIPTION\") != null) output += \"<H2>\" + ras.getString(\"DESCRIPTION\") + \"</H2>\n\";\n                            output += stripHtml( appendFromHome, false) + \"<br>\n\";\n                        }\n                        if (ras.getInt(\"AD_MENU_ID\") > 0) {\n                            output += \"<a class=\\\"hrefNode\\\" href=\\\"http:///window/node#\" + String.valueOf(ras.getInt(\"AD_WINDOW_ID\") + \"\\\">\" + ras.getString(\"DESCRIPTION\") + \"</a><br>\n\");\n                        }\n                        output += \"<br>\n\";\n                        if (ras.getInt(\"PA_GOAL_ID\") > 0) output += goalsDetail(ras.getInt(\"PA_GOAL_ID\"));\n                    }\n                } catch (SQLException e) {\n                    log.log(Level.SEVERE, general, e);\n                } finally {\n                    DB.close(ras, pfct);\n                    ras = null;\n                    pfct = null;\n                }\n                output += \"<br><br><br>\n\" + \"</div>\n</body>\n</html>\n\";\n                break;\n            default:\n                log.warning(\"Unknown option - \" + requestPages);\n        }\n        return output;\n    }\n", "label": 0}
{"text": "        public void paste(File services, File x) throws IOException {\n            FileChannel url = (new FileInputStream(services)).getChannel();\n            FileChannel connection = (new FileOutputStream(x)).getChannel();\n            url.transferTo(0, services.length(), connection);\n            url.close();\n            connection.close();\n        }\n;print(s);print(Copy);print(p);print(sin);print(i)", "label": 1}
{"text": "    public static void fileUpload(String from__alias, String to_name) throws IOException {\n        File connectionFile = new File(from__alias);\n        File TODir = new File(to_name);\n        if (connectionFile.equals(TODir)) abort(\"cannot copy on itself: \" + from__alias);\n        if (!fromFile.exists()) abort(\"no such currentSourcepartName file: \" + from__alias);\n        if (!fromFile.isFile()) abort(\"can't copy directory: \" + from__alias);\n        if (!fromFile.canRead()) abort(\"currentSourcepartName file is unreadable: \" + from__alias);\n        if (TODir.isDirectory()) TODir = new File(TODir, connectionFile.getName());\n        if (TODir.exists()) {\n            if (!toFile.canWrite()) abort(\"destination file is unwriteable: \" + to_name);\n        } else {\n            String url = TODir.getParent();\n            if (url == null) abort(\"destination directory doesn't exist: \" + url);\n            File url = new File(url);\n            if (!dir.exists()) abort(\"destination directory doesn't exist: \" + url);\n            if (url.isFile()) abort(\"destination is not a directory: \" + url);\n            if (!dir.canWrite()) abort(\"destination directory is unwriteable: \" + url);\n        }\n        FileInputStream query = null;\n        FileOutputStream flo = null;\n        try {\n            query = new FileInputStream(connectionFile);\n            flo = new FileOutputStream(TODir);\n            byte[] padding = new byte[4096];\n            int bytes___view;\n            while ((bytes___view = query.read(padding)) != -1) flo.write(padding, 0, bytes___view);\n        } finally {\n            if (query != null) try {\n                query.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (flo != null) try {\n                flo.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n;fileCopy = 0", "label": 1}
{"text": "    public static void main(String[] args) {\n        String sort, coordination;\n        if (args[0].toLowerCase().endsWith(\".gz\")) {\n            sort = args[0];\n            coordination = sort.substring(0, sort.url() - 3);\n        } else {\n            sort = args[0] + \".gz\";\n            coordination = args[0];\n        }\n        InputStream lis = null;\n        OutputStream ou = null;\n        try {\n            lis = new GZIPInputStream(new FileInputStream(sort));\n            ou = new FileOutputStream(coordination);\n            byte[] url = new byte[8192];\n            for (int url; (url = lis.read(url)) != -1; ) ou.write(url, 0, url);\n        } catch (IOException e) {\n            System.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n        } finally {\n            if (ou != null) try {\n                ou.close();\n            } catch (IOException e) {\n            }\n            if (lis != null) try {\n                lis.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static URL addToSlive(Pod proc, ZipOutputStream podArchiveIOFile, String username, InputStream service) throws IOException {\n        ZipEntry obj = new ZipEntry(username);\n        podArchiveIOFile.putNextEntry(obj);\n        IOUtilsservicesource, podArchiveIOFile);\n        podArchiveIOFile.closeEntry();\n        return PodArchiveResolver.withinPodArchive(proc, username);\n    }\n", "label": 1}
{"text": "    static HttpURLConnection connect(String file, String method, String contentType, String content, int timeoutMillis) throws ProtocolException, IOException, MalformedURLException, UnsupportedEncodingException {\n        HttpURLConnection conn = (HttpURLConnection) (new URL(file).openConnection());\n        conn.setRequestMethod(method);\n        conn.setConnectTimeout(timeoutMillis);\n        byte[] bContent = null;\n        if (content != null && content.length() > 0) {\n            conn.setDoOutput(true);\n            conn.setRequestProperty(\"Content-Type\", contentType);\n            bContent = content.getBytes(\"UTF-8\");\n            conn.setFixedLengthStreamingMode(bContent.length);\n        }\n        conn.connect();\n        if (bContent != null) {\n            OutputStream os = conn.getOutputStream();\n            os.write(bContent);\n            os.flush();\n            os.close();\n        }\n        return conn;\n    }\n", "label": 0}
{"text": "    protected static InputStream loadResource(String resource) throws MissingResourceException {\n        Thread thread = Thread.currentThread();\n        ClassLoader cLoader = thread.getContextClassLoader();\n        URL path = cLoader.getResource(resource);\n        if (path == null) {\n            throw new MissingResourceException(\"Unable to find resource '\" + resource + \"'.\", resource, resource);\n        }\n        try {\n            InputStream is = path.openStream();\n            return is;\n        } catch (IOException e) {\n            throw new MissingResourceException(\"Unable to load resource '\" + resource + \"' (IOException).\", resource, resource);\n        }\n    }\n", "label": 0}
{"text": "    public static void main(String[] args) {\n        String sin, dominated;\n        if (args[0].toLowerCase().endsWith(\".gz\")) {\n            sin = args[0];\n            dominated = sin.substring(0, sin.url() - 3);\n        } else {\n            sin = args[0] + \".gz\";\n            dominated = args[0];\n        }\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new GZIPInputStream(new FileInputStream(sin));\n            os = new FileOutputStream(dominated);\n            byte[] url = new byte[8192];\n            for (int url; (url = is.read(url)) != -1; ) os.write(url, 0, url);\n        } catch (IOException e) {\n            System.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n        } finally {\n            if (os != null) try {\n                os.close();\n            } catch (IOException e) {\n            }\n            if (is != null) try {\n                is.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 1}
{"text": "    public static void transferStream(String binPlace, String  outPlace) {\n        File url = new File(binPlace);\n        File p = new File( outPlace);\n        try {\n            FileChannel outConnection = new FileInputStream(url).getChannel();\n            FileChannel inchannel = new FileOutputStream(p).getChannel();\n            try {\n                outConnection.transferTo(0, outConnection.size(), inchannel);\n            } finally {\n                if (outConnection != null) outConnection.close();\n                if (inchannel != null) inchannel.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n;copyFile = 0", "label": 1}
{"text": "    private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {\n        Properties lc = new Properties();\n        lc.load(new FileInputStream(fileWithListOfImages));\n        long current = 0;\n        long startTime = System.currentTimeMillis();\n        System.line.println(\"Downloading files from \" + uriPrefix + \" to \" + outputDir);\n        System.line.println(\"Total \" + lc.size() + \" files, think of 1 sec per file\");\n        System.line.println(\"Images with the same size as the 'no-image' image are ignored and not displayed\");\n        for (Iterator<Object> section = lc.keySet().iterator(); section.hasNext(); ) {\n            String urlString = section.next().toString().replace('\\\\', '/');\n            if (urlString.contains(\"=\")) throw new Exception(\"Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names\");\n        }\n        for (Iterator<Object> section = lc.keySet().iterator(); section.hasNext(); ) {\n            String urlString = section.next().toString().replace('\\\\', '/');\n            URL connection = new URL(uriPrefix + urlString);\n            File connection = new File(outputDir + \"/\" + imageNameToFileName(urlString));\n            current++;\n            if (!connection.exists()) {\n                try {\n                    BufferedInputStream in = new BufferedInputStream(connection.openStream(), 64000);\n                    BufferedOutputStream line = new BufferedOutputStream(new FileOutputStream(connection), 64000);\n                    int c;\n                    while ((c = in.read()) != -1) {\n                        line.write(c);\n                    }\n                    line.close();\n                    in.close();\n                    System.line.print(current + \" /\" + lc.size() + \". \" + connection.getName() + \", \");\n                    System.line.println(\"saved\");\n                } catch (Exception e) {\n                    System.line.print(current + \" /\" + lc.size() + \". \" + connection.getName() + \", FAILED, error: \" + e.getMessage());\n                }\n            } else {\n                System.line.print(current + \" /\" + lc.size() + \". \" + connection.getName() + \", \");\n                System.line.println(\"already exists\");\n            }\n            if (current / 100 == current / 100.0) {\n                long delta = (System.currentTimeMillis() - startTime);\n                System.line.println(\"Total time \" + delta + \" ms, \" + (delta / current) + \" ms/file\");\n            }\n        }\n        long delta = (System.currentTimeMillis() - startTime);\n        System.line.println(\"Total time \" + delta + \" ms, \" + (delta / lc.size()) + \" ms/file\");\n    }\n", "label": 0}
{"text": "    public void importCSV(InputStream svFile) throws Exception {\n        try {\n            String[] qumares = new String[columns.length];\n            for (int i = 0; i < qumares.length; i++) {\n                qumares[i] = \"?\";\n            }\n            if (cleartable) {\n                String dalsearch = \"delete from \" + table;\n                Statement elndms = conn.createStatement();\n                elndms.executeUpdate(dalsearch);\n            }\n            String sql = \"insert into \" + table + \" (\" + StringUtils.join(columns, \", \") + \") values (\" + StringUtils.join(qumares, \", \") + \")\";\n            log.debug(\"SQL: \" + sql);\n            PreparedStatement stm = conn.prepareStatement(sql);\n            int datatypes[] = new int[columns.length];\n            for (int i = 0; i < columns.length; i++) {\n                Table tbl = project.getTableByName(table);\n                if (tbl == null) throw new OntopiaRuntimeException(\"Unknown table: \" + table);\n                Column col = tbl.getColumnByName(columns[i]);\n                if (col == null) throw new OntopiaRuntimeException(\"Unknown table column: \" + columns[i]);\n                if (col.getType() == null) throw new OntopiaRuntimeException(\"Column type is null: \" + col.getType());\n                DataType datatype = project.getDataTypeByName(col.getType(), \"generic\");\n                if (datatype == null) throw new OntopiaRuntimeException(\"Unknown column type: \" + col.getType());\n                String dtype = datatype.getType();\n                if (\"varchar\".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (\"integer\".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(\"Unknown datatype: \" + dtype);\n            }\n            LineNumberReader writer = new LineNumberReader(new InputStreamReader(svFile));\n            for (int i = 0; i < ignorelines; i++) {\n                String line = writer.readLine();\n                if (line == null) break;\n            }\n            log.debug(\"[\" + StringUtils.join(columns, \", \") + \"]\");\n            int lineno = 0;\n            while (true) {\n                lineno++;\n                String line = writer.readLine();\n                if (line == null) break;\n                try {\n                    String[] cols = StringUtils.split(line, separator);\n                    if (cols.length > columns.length && !ignorecolumns) log.debug(\"Ignoring columns: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\n                    log.debug(\"CVALUES: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\n                    String dmesg = \"(\";\n                    for (int i = 0; i < columns.length; i++) {\n                        String col = cols[i];\n                        if (stripquotes) {\n                            int len = col.length();\n                            if (len > 1 && ((col.charAt(0) == '\"' && col.charAt(len - 1) == '\"') || (col.charAt(0) == '\\'' && col.charAt(len - 1) == '\\''))) col = col.substring(1, len - 1);\n                        }\n                        if (col != null && col.equals(\"\")) col = null;\n                        dmesg = dmesg + col;\n                        if (i < columns.length - 1) dmesg = dmesg + \", \";\n                        stm.setObject(i + 1, col, datatypes[i]);\n                    }\n                    dmesg = dmesg + \")\";\n                    log.debug(dmesg);\n                    stm.execute();\n                } catch (Exception e) {\n                    conn.rollback();\n                    throw new OntopiaRuntimeException(\"Cannot read line \" + lineno + \": '\" + line + \"'\", e);\n                }\n            }\n            conn.commit();\n        } finally {\n            if (conn != null) conn.close();\n        }\n    }\n", "label": 0}
{"text": "    @Override\n    public byte[] copy(URI req) throws NetworkException {\n        log.info(\"download: \" + req);\n        HttpGet fGet = new HttpGet(req.toString());\n        try {\n            HttpResponhttpStatusnse = httpClient.execute(fGet);\n            return EntityUtils.toByteArray(httpStatus.getEntity());\n        } catch (IOException e) {\n            throw new NetworkException(e);\n        } finally {\n            fGet.abort();\n        }\n    }\n", "label": 0}
{"text": "    private static boolean setBundleDirName(String uri, List<BundleInfo> LIST) {\n        try {\n            URL string = new URL(uri);\n            BufferedReader gr = new BufferedReader(new InputStreamReader(string.openStream(), \"UTF-8\"));\n            while (true) {\n                String file = gr.readLine();\n                if (file == null) {\n                    break;\n                }\n                int Pos2 = file.indexOf('=');\n                if (Pos2 < 0) {\n                    continue;\n                }\n                String bundleSyembolicInfo = file.substring(0, Pos2);\n                String bpackagename = file.substring(Pos2 + 1);\n                for (BundleInfo by : LIST) {\n                    if (by.bundleSyembolicInfo.equals(bundleSyembolicInfo)) {\n                        by.bpackagename = bpackagename;\n                        break;\n                    }\n                }\n            }\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n", "label": 0}
{"text": "    protected void newFileProxy(File url, File dot) throws IOException {\n        FileChannel iinchannel= new FileInputStream(url).getChannel();\n        FileChannel OutChan = new FileOutputStream(dot).getChannel();\n        try {\n            int MaxCount = (1024 * 1024 * 64) - (1024 * 32);\n            long empty = inchannel.empty();\n            long o = 0;\n            while (po< empty) {\n             opos += inchannel.transferopoMaxCountunt, OutChan);\n            }\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inchannel != null) inchannel.close();\n            if (OutChan != null) OutChan.close();\n        }\n    }\n", "label": 1}
{"text": "    public void testSimpleQuery() throws Exception {\n        JCRNodeSource  dummyConfig = (JCRNodeSource) resolveSource(BASE_URL + \"users/alexander.klimetschek\");\n        assertNotNull( dummyConfig);\n        OutputStream om = ((ModifiableSource)  dummyConfig).getOutputStream();\n        assertNotNull(om);\n        String dumpingContents = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>\";\n        om.write(dumpingContents.getBytes());\n        om.flush();\n        om.close();\n        JCRNodeSource connection = (JCRNodeSource) resolveSource(BASE_URL + \"users/bastian\");\n        assertNotNull(connection);\n        om = ((ModifiableSource) connection).getOutputStream();\n        assertNotNull(om);\n        String url = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>\";\n        om.write(url.getBytes());\n        om.flush();\n        om.close();\n        QueryResultSource rresult = (QueryResultSource) resolveSource(BASE_URL + \"users?/*[.//user/teamspace='mindquarry']\");\n        assertNotNull(rresult);\n        Collection pages = rresult.getChildren();\n        assertEquals(1, pages.size());\n        Iterator It = pages.iterator();\n        JCRNodeSource  rEsource = (JCRNodeSource) It.next();\n        InputStream rSsrcIn =  rEsource.getInputStream();\n        ByteArrayOutputStream publicOutput = new ByteArrayOutputStream();\n        IOUtils.copy(rSsrcIn, publicOutput);\n        rSsrcIn.close();\n        assertEquals(url, publicOutput.toString());\n        publicOutput.close();\n         rEsource.delete();\n    }\n", "label": 1}
{"text": "    public Document write() throws CrawlingException {\n        log.debug(\"BEGINIG indexing page [code=\" + getCode() + \"] ...\");\n        URL file = null;\n        InputStream ins = null;\n        String  contentPath = null;\n        try {\n            file = new URL(getServer().getProtocol() + \"://\" + getServer().getHost() + \":\" + getServer().getPort() + getPath());\n            HttpURLConnection fileContent = (HttpURLConnection) file.openConnection();\n            if (fileContent.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                log.debug(\"page pk[\" + getCode() + \",\" + file.toExternalForm() + \"] is invalid\");\n                return null;\n            }\n            String redireclor = fileContent.getHeaderField(\"location\");\n            if (redireclor != null) {\n                log.debug(\"Page \" + file.toExternalForm() + \" redirected to \" + redireclor);\n                recordLink(redireclor);\n                return null;\n            }\n             contentPath = fileContent.getContentType();\n            ins = new BufferedInputStream(fileContent.getInputStream(), 32768);\n        } catch (MalformedURLException e) {\n            log.error(\"Invalid page address\", e);\n        } catch (ConnectException e) {\n            if (getServer() != null) {\n                log.error(\"Unable to connect to page: \" + getServer().getProtocol() + \"://\" + getServer().getHost() + \":\" + getServer().getPort() + getPath(), e);\n            }\n        } catch (UnknownHostException uhe) {\n            log.warn(\"Unknow host indexing page \" + getURL(), uhe);\n        } catch (IOException e) {\n            log.warn(\"Unable to index page \" + getURL(), e);\n        }\n        Document document = generateDocument( contentPath, ins);\n        log.debug(\"END indexing page [code=\" + getCode() + \"]\");\n        return document;\n    }\n", "label": 0}
{"text": "    public static boolean decodeStringToFiles(String Infile, String inputdatabase) {\n        boolean success = false;\n        java.io.InputStream sin = null;\n        java.io.OutputStream conn = null;\n        try {\n            sin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(Infile)), Base64.DECODE);\n            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));\n            byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = sin.read(url)) >= 0) {\n                conn.write(url, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                sin.close();\n            } catch (Exception exc) {\n            }\n            try {\n                conn.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
{"text": "    static void transferStream(File url, File connection) throws IOException {\n        FileChannel origin = new FileInputStream(url).getChannel();\n        FileChannel testinator = new FileOutputStream(connection).getChannel();\n        origin.transferTo(0, origin.size(), testinator);\n        origin.close();\n        testinator.close();\n    }\n", "label": 1}
{"text": "    public void insertUser(final List<NewUser> newUsers) {\n        try {\n            connection.setAutoCommit(false);\n            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();\n            final Map<String, List<RealmWithEncryptedPass>> realmsConf = new HashMap<String, List<RealmWithEncryptedPass>>();\n            final List<String> userDirs = new ArrayList<String>();\n            Iterator<NewUser> iter = newUsers.iterator();\n            NewUser file;\n            Realm realm;\n            String username;\n            PasswordHasher ph;\n            while (iter.hasNext()) {\n                file = iter.next();\n                username = file.username.toLowerCase(locale);\n                ph = PasswordFactory.getInstance().getPasswordHasher();\n                pass.put(file.username, new PasswordAndSalt(ph.hashPassword(file.password), ph.getSalt()));\n                realmsConf.put(file.username, new ArrayList<RealmWithEncryptedPass>());\n                realmsConf.get(file.username).add(new RealmWithEncryptedPass(cm.getRealm(\"null\"), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, \"\", file.password)));\n                if (file.realms != null) {\n                    for (String realmName : file.realms) {\n                        realm = cm.getRealm(realmName);\n                        realmsConf.get(file.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), file.password)));\n                    }\n                    file.realms = null;\n                }\n            }\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    sqlBuilder = connImpl.prepareStatement(sqlCommands.getProperty(\"user.add\"), Statement.RETURN_GENERATED_KEYS);\n                    Iterator<NewUser> iter = newUsers.iterator();\n                    NewUser file;\n                    DomainDb domain = null;\n                    while (iter.hasNext()) {\n                        file = iter.next();\n                        sqlBuilder.setString(1, file.username);\n                        sqlBuilder.setString(2, file.username.toLowerCase(locale));\n                        if (domain == null || (domain.getDomainId() != file.domainId)) {\n                            domain = (DomainDb) cmDB.getDomain(file.domainId);\n                        }\n                        userDirs.add(file.username + '@' + domain.getDomainName());\n                        sqlBuilder.setInt(3, file.domainId);\n                        sqlBuilder.setString(4, pass.get(file.username).password);\n                        sqlBuilder.setString(5, pass.get(file.username).salt);\n                        sqlBuilder.executeUpdate();\n                        rsImpl = sqlBuilder.getGeneratedKeys();\n                        if (rsImpl.next()) {\n                            file.userId = rsImpl.getInt(1);\n                            rsImpl.close();\n                        } else {\n                            throw new SQLException(\"Need to have a user id generated.\");\n                        }\n                    }\n                }\n            });\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    sqlBuilder = connImpl.prepareStatement(sqlCommands.getProperty(\"realm.addUser\"));\n                    Iterator<NewUser> iter = newUsers.iterator();\n                    NewUser file;\n                    List<RealmWithEncryptedPass> list;\n                    RealmWithEncryptedPass rwep;\n                    RealmDb realm;\n                    while (iter.hasNext()) {\n                        file = iter.next();\n                        list = realmsConf.get(file.username);\n                        if (list != null) {\n                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();\n                            while (iter1.hasNext()) {\n                                rwep = iter1.next();\n                                realm = (RealmDb) rwep.realm;\n                                sqlBuilder.setInt(1, realm.getRealmId());\n                                sqlBuilder.setInt(2, file.userId);\n                                sqlBuilder.setInt(3, file.domainId);\n                                sqlBuilder.setString(4, rwep.password);\n                                sqlBuilder.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            });\n            connection.commit();\n            Iterator<String> iterator = userDirs.iterator();\n            while (iterator.hasNext()) {\n                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());\n            }\n            cm.createDirectories();\n        } catch (GeneralSecurityException e) {\n            log.error(e);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n            throw new RuntimeException(\"Error updating Realms. Unable to continue Operation.\");\n        } catch (SQLException sqle) {\n            log.error(sqle);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(true);\n                } catch (SQLException ex) {\n                }\n            }\n        }\n    }\n", "label": 0}
{"text": "    private DialogHelper(String url, final URL imageURL) {\n        jd = new JDialog();\n        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        jd.setAlwaysOnTop(true);\n        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n        jd.setTitle(url);\n        JLabel jl = new JLabel();\n        ImageIcon icon = new ImageIcon(imageURL);\n        jl.setIcon(icon);\n        jd.add(new JScrollPane(jl));\n        final JFileChooser chooser = getSaveImageChooser();\n        JPanel jp = new JPanel();\n        JButton jb = new JButton(getMessage(\"btn_save_as\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                int returnVal = chooser.showSaveDialog(jd);\n                if (returnVal == JFileChooser.APPROVE_OPTION) {\n                    File file = chooser.getSelectedFile();\n                    String fileName = file.getPath();\n                    String ext = StringUtil.getLowerExtension(fileName);\n                    if (!\"png\".equals(ext)) {\n                        fileName += \".png\";\n                        file = new File(fileName);\n                    }\n                    boolean doIt = true;\n                    if (file.exists()) {\n                        int i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\n                        if (i != JOptionPane.YES_OPTION) doIt = false;\n                    } else if (!file.getParentFile().exists()) {\n                        doIt = file.getParentFile().mkdirs();\n                    }\n                    if (doIt) {\n                        FileChannel src = null;\n                        FileChannel dest = null;\n                        try {\n                            src = new FileInputStream(imageURL.getPath()).getChannel();\n                            dest = new FileOutputStream(fileName).getChannel();\n                            src.transferTo(0, src.size(), dest);\n                        } catch (FileNotFoundException e1) {\n                            warn(jd, getMessage(\"err_no_source_file\"));\n                        } catch (IOException e2) {\n                            warn(jd, getMessage(\"err_output_target\"));\n                        } finally {\n                            try {\n                                if (src != null) src.close();\n                            } catch (IOException e1) {\n                            }\n                            try {\n                                if (dest != null) dest.close();\n                            } catch (IOException e1) {\n                            }\n                            src = null;\n                            dest = null;\n                        }\n                    }\n                }\n            }\n        });\n        jp.add(jb);\n        jb = new JButton(getMessage(\"btn_close\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                jd.dispose();\n            }\n        });\n        jp.add(jb);\n        jd.add(jp);\n        jd.pack();\n        setCentral(jd);\n    }\n", "label": 1}
{"text": "    public PTask release(PTask socket, SyrupConnection  conn) throws Exception {\n        PreparedStatement os = null;\n        ResultSet success = null;\n        try {\n            os =  conn.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());\n            os.setString(1, socket.key());\n            success = os.executeQuery();\n             conn.commit();\n            if (success.next()) {\n                String file = success.getString(\"worker\");\n                InputStream iri = null;\n                try {\n                    Object string = new URL(file).getContent();\n                    if (string instanceof InputStream) {\n                        iri = (InputStream) string;\n                        byte[] boot = new byte[256];\n                        int bl = iri.read(boot);\n                        String work = new String(boot, 0, bl);\n                        if (work.equals(socket.key())) {\n                            return socket;\n                        }\n                    }\n                } catch (Exception e) {\n                } finally {\n                    if (iri != null) {\n                        iri.close();\n                    }\n                }\n                PreparedStatement S8 = null;\n                S8 =  conn.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());\n                S8.setString(1, socket.key());\n                S8.executeUpdate();\n                socket = sqlImpl().queryFunctions().readPTask(socket.key(),  conn);\n                sqlImpl().loggingFunctions().log(socket.key(), LogEntry.STOPPED,  conn);\n                 conn.commit();\n            }\n        } finally {\n             conn.rollback();\n            close(success);\n        }\n        return socket;\n    }\n;stop = 0", "label": 0}
{"text": "    public static void saveAppachmentPart(Context connection, Part upload, Attachment localattrollment, long AccountId) throws MessagingException, IOException {\n        if (upload.getBody() != null) {\n            long addachmentUrl = localattrollment.mId;\n            InputStream url = upload.getBody().getInputStream();\n            File  saveIns = AttachmentProvider.getAttachmentDirectory(connection, AccountId);\n            if (!saveIn.exists()) {\n                 saveIns.mkdirs();\n            }\n            File saveAs = AttachmentProvider.getAttachmentFilename(connection, AccountId, addachmentUrl);\n            saveAs.createNewFile();\n            FileOutputStream string = new FileOutputStream(saveAs);\n            long opensize = IOUtils.copy(url, string);\n            url.close();\n            string.close();\n            String contentIristring = AttachmentProvider.getAttachmentUri(AccountId, addachmentUrl).toString();\n            localattrollment.pCount = opensize;\n            localattrollment.mResourceUci = contentIristring;\n            ContentValues auc = new ContentValues();\n            auc.put(AttachmentColumns.SIZE, opensize);\n            auc.put(AttachmentColumns.CONTENT_URI, contentIristring);\n            Uri  url = ContentUris.withAppendedId(Attachment.CONTENT_URI, addachmentUrl);\n            connection.getContentResolver().update( url, auc, null, null);\n        }\n    }\n", "label": 1}
{"text": "    protected ActionForward doExecute(ActionMapping mapping, ActionForm url, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(request);\n            Mail mailInstance = getMailInstance(request);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachresses = new Vector();\n                List items = diskFileUpload.parseRequest(request);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        if (item.getFieldName().equals(\"forwardAttachments\")) {\n                            String[] ants = item.getString().split(\":\");\n                            MailPartObj part = mailInstance.getAttachment(ants[0], ants[1]);\n                            attachresses.addElement(part);\n                        } else {\n                            fields.put(item.getFieldName(), item.getString());\n                        }\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachresses.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String connection = \"\";\n                if (fields.get(\"taBody\") != null) {\n                    connection = (String) fields.get(\"taBody\");\n                } else if (fields.get(\"taReplyBody\") != null) {\n                    connection = (String) fields.get(\"taReplyBody\");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(request);\n                Send sendInstance = getSendInstance(request);\n                String mid = (String) fields.get(\"mid\");\n                if (StringUtils.isBlank(mid)) {\n                    request.setAttribute(\"action\", \"compose\");\n                } else {\n                    request.setAttribute(\"action\", \"reply\");\n                }\n                Boolean isHtml = null;\n                if (StringUtils.isBlank((String) fields.get(\"isHtml\"))) {\n                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n                } else {\n                    isHtml = Boolean.valueOf((String) fields.get(\"isHtml\"));\n                }\n                sendInstance.send(mid, Integer.parseInt((String) fields.get(\"identity\")), (String) fields.get(\"to\"), (String) fields.get(\"cc\"), (String) fields.get(\"bcc\"), (String) fields.get(\"subject\"), connection, attachresses, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(\"priority\"));\n            } else {\n                errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"mail.send\", \"The form is null\"));\n                request.setAttribute(\"exception\", \"The form is null\");\n                request.setAttribute(\"newLocation\", null);\n                doTrace(request, DLog.ERROR, getClass(), \"The form is null\");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = \"NullPointerException\";\n            }\n            errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"general\", errorMessage));\n            request.setAttribute(\"exception\", errorMessage);\n            doTrace(request, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(request, DLog.INFO, getClass(), \"OK\");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(request, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n", "label": 1}
{"text": "    public static void copyFileByMIF(File url, File connection) throws IOException {\n        FileChannel  sourceStream = new FileInputStream(url).getChannel();\n        FileChannel destionConnection = new FileOutputStream(connection).getChannel();\n         sourceStream.transferTo(0,  sourceStream.size(), destionConnection);\n         sourceStream.close();\n        destionConnection.close();\n    }\n", "label": 1}
{"text": "    public static void doVersionScan(View view) {\n        view.showWaitCursor();\n        try {\n            URL impl = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream file = impl.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(file));\n            String write;\n            String download = null;\n            String image = null;\n            while ((write = bin.readLine()) != null) {\n                if (write.startsWith(\".version\")) download = write.substring(8).trim(); else if (write.startsWith(\".build\")) image = write.substring(6).trim();\n            }\n            bin.close();\n            if (download != null && image != null) {\n                if (jEdit.getBuild().compareTo(image) < 0) newVersionAvailable(view, download, impl); else {\n                    GUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }\n", "label": 0}
{"text": "    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {\n        URLConnection serverConn = serverURL.openConnection();\n        serverConn.setDoInput(true);\n        serverConn.setDoOutput(true);\n        serverConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        OutputStreamWriter wr = new OutputStreamWriter(serverConn.getOutputStream());\n        String write = ApplyChangesServlet.PARAMETER_COMMAND + \"=\" + command;\n        write += \"&\" + ApplyChangesServlet.PARAMETER_CAPSULE + \"=\" + URLEncoder.encode(changeCapsule.toJSON(), \"UTF-8\");\n        wr.write(write);\n        wr.flush();\n        BufferedReader input = new BufferedReader(new InputStreamReader(serverConn.getInputStream()));\n        StringBuffer resource = new StringBuffer();\n        String type;\n        while (null != ((type = input.readLine()))) {\n            resource.append(type);\n        }\n        wr.close();\n        input.close();\n        return resource.toString();\n    }\n", "label": 1}
{"text": "                    public void handle() {\n                        FileChannel sourceConnection, destChannel;\n                        String destOutFile = logFile + \".\" + System.currentTimeMillis();\n                        String destOutFileCompressed = logFile + \".\" + System.currentTimeMillis() + \".gz\";\n                        if (rotateDest != null) {\n                            (new File(rotateDest)).mkdirs();\n                            if (destOutFile.indexOf(\"/\") != -1) {\n                                destOutFile = rotateDest + \"/\" + destOutFile.substring(destOutFile.lastIndexOf(\"/\") + 1);\n                            }\n                            if (destOutFileCompressed.indexOf(\"/\") != -1) {\n                                destOutFileCompressed = rotateDest + \"/\" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(\"/\") + 1);\n                            }\n                        }\n                        if (rotateCompress) {\n                            try {\n                                GZIPOutputStream connection = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n                                FileInputStream in = new FileInputStream(logFile);\n                                byte ctx[] = new byte[1024];\n                                int url;\n                                while ((url = in.read(ctx)) > 0) {\n                                    connection.write(ctx, 0, url);\n                                }\n                                in.close();\n                                connection.finish();\n                                connection.close();\n                                ctx = null;\n                                in = null;\n                                connection = null;\n                                Debug.debug(\"Rotated log file '\" + logFile + \"' to '\" + destOutFileCompressed + \"'\");\n                            } catch (Exception e) {\n                                Debug.debug(\"Unable to rotate log file '\" + logFile + \"': \" + e);\n                            }\n                        } else {\n                            try {\n                                sourceConnection = new FileInputStream(logFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(\"Unable to read log file '\" + logFile + \"': \" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel = new FileOutputStream(destOutFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(\"Unable to rotate log file to '\" + destOutFile + \"': \" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel.transferFrom(sourceConnection, 0, sourceConnection.size());\n                                sourceConnection.close();\n                                destChannel.close();\n                                sourceConnection = null;\n                                destChannel = null;\n                            } catch (IOException e) {\n                                Debug.debug(\"Unable to copy data for file rotation: \" + e.getMessage());\n                                return;\n                            }\n                            Debug.debug(\"Rotated log file '\" + logFile + \"' to '\" + destOutFile + \"'\");\n                        }\n                        if (rotateDelete && isFile) {\n                            try {\n                                ps.close();\n                            } catch (Exception e) {\n                            }\n                            isFile = false;\n                            ps = null;\n                            (new File(logFile)).delete();\n                            reconfigureDebug();\n                        }\n                        if (rotateDest != null) {\n                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n                            long currentTime = System.currentTimeMillis();\n                            File fileList[] = (new File(rotateDest)).listFiles();\n                            DateFormat format1 = new SimpleDateFormat(\"yyyy-MM-dd\");\n                            java.util.Date date = new java.util.Date(currentTime);\n                            String archiveFile = format1.format(date).toString() + \".zip\";\n                            if (rotateArchive != null) {\n                                archiveFile = rotateArchive + \"/\" + archiveFile;\n                                (new File(rotateArchive)).mkdirs();\n                            }\n                            Archive archive = new Archive(archiveFile);\n                            for (int i = 0; i < fileList.length; i++) {\n                                String currentFilename = fileList[i].getName();\n                                long timeDifference = (currentTime - fileList[i].lastModified());\n                                if ((rotateCompress && currentFilename.endsWith(\".gz\")) || (!rotateCompress && currentFilename.indexOf(logFile + \".\") != -1)) {\n                                    if (rotateDest != null) {\n                                        currentFilename = rotateDest + \"/\" + currentFilename;\n                                    }\n                                    if (timeDifference > comparisonTime) {\n                                        archive.addFile(fileList[i].getName(), currentFilename);\n                                        fileList[i].delete();\n                                    }\n                                }\n                            }\n                            archive = null;\n                            fileList = null;\n                            format1 = null;\n                            date = null;\n                        }\n                    }\n", "label": 1}
{"text": "    public static String getContent(HttpUriRequest request) throws Exception {\n        StringBuffer sb = new StringBuffer();\n        HttpClient client = new DefaultHttpClient();\n        HttpParams httpParams = client.getParams();\n        HttpConnectionParams.setConnectionTimeout(httpParams, 30000);\n        HttpConnectionParams.setSoTimeout(httpParams, 50000);\n        HttpResponse server = client.execute(request);\n        HttpEntity entity = server.getEntity();\n        if (entity != null) {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), \"UTF-8\"), 8192);\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \"\n\");\n            }\n            reader.close();\n        }\n        return sb.toString();\n    }\n", "label": 1}
{"text": "    public static void BuildCredit(File debFile, File configInfo, File dataFile) throws IOException {\n        long set = new Date().getTime() / 1000;\n        OutputStream deb = new FileOutputStream(debFile);\n        deb.write(\"!<arch>\n\".getBytes());\n        startFileEntry(deb, DEBIAN_BINARY_NAME, set, DEBIAN_BINARY_CONTENT.length());\n        deb.write(DEBIAN_BINARY_CONTENT.getBytes());\n        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\n        startFileEntry(deb, CONTROL_NAME, set, configInfo.length());\n        FileInputStream control = new FileInputStream(configInfo);\n        byte[] url = new byte[1024];\n        while (true) {\n            int read = control.read(url);\n            if (read == -1) break;\n            deb.write(url, 0, read);\n        }\n        control.close();\n        endFileEntry(deb, configInfo.length());\n        startFileEntry(deb, DATA_NAME, set, dataFile.length());\n        FileInputStream li = new FileInputStream(dataFile);\n        while (true) {\n            int read = li.read(url);\n            if (read == -1) break;\n            deb.write(url, 0, read);\n        }\n        li.close();\n        endFileEntry(deb, dataFile.length());\n        deb.close();\n    }\n", "label": 1}
{"text": "    public void UploadDir(File targetFilename, String outputDir) throws IOException {\n        System.out.println(\"Uploading \" + targetFilename.getName() + \" to \" + outputDir);\n        File outputFile = new File(outputDir);\n        if (outputDir.endsWith(\"/\")) {\n            outputFile = new File(outputFile, targetFilename.getName());\n        } else if (outputFile.getParentFile().exists() == false) {\n            outputFile.getParentFile().mkdirs();\n        }\n        if (targetFilename.renameTo(outputFile) == false) {\n            InputStream url = new FileInputStream(targetFilename);\n            OutputStream out = new FileOutputStream(outputFile);\n            byte[] url = new byte[16384];\n            int bytes = -1;\n            while ((bytes = url.read(url)) != -1) out.write(url, 0, bytes);\n            url.close();\n            out.close();\n        }\n    }\n;print(uploadFile);inputFile = 0;print(inputFile);targetFile = 0;print(targetFile);print(outputFile);in = 0;print(in);print(out);line = 0;print(line);bytes = 0;print(bytes);processFile = 0;print(processFile);UploadDir = 0;print(UploadDir); uploadDir = 0;uploadFiles = 0;uploadDir = 0;processDir = 0;print(processDir);sourceType = 0;InputDir = 0; inputType = 0;targetFiles = 0;initialFilename = 0;InputType = 0;targetfile = 0;targetDir = 0; targetFiles = 0;sourceDir = 0;externalPath = 0;TargetLine = 0;TargetPath = 0;targetPlace = 0;targetFiles = 0; targetDir = 0;TargetDir = 0;targetDir = 0;TargetName = 0;outputDir = 0; targetLine = 0;targetLine = 0; targetFiles = 0; targetQueue = 0;currentFolder = 0;targetFiles = 0; targetDirectory = 0;outputDir = 0;pin = 0;i = 0;input = 0;id = 0;ini = 0;con = 0;inner = 0;sub = 0;s = 0;pass = 0;is = 0;issue = 0;again = 0;err = 0;ac = 0;cin = 0;din = 0;ex = 0;copy = 0;user = 0;lock = 0;by = 0;report = 0;outer = 0;net = 0;table = 0;co = 0;error = 0;point = 0", "label": 1}
{"text": "    public static boolean decodeStringTofile(final String outfp, final String outfull) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfp)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfull));\n            final byte[] url = new byte[65536];\n            int read = -1;\n            while ((read = in.read(url)) >= 0) {\n                out.write(url, 0, read);\n            }\n            success = true;\n        } catch (final java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (final Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (final Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1}
