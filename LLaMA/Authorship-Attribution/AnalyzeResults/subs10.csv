Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,No. Changed Names,No. Changed Tokens,Replaced Names,Attack Type,Query Times,Time Cost
0," 
  def is_sym( number ):
  	num_str = str( number )
  	num_len = len( num_str )
  	half_len = int( num_len / 2 )
  	end = num_str[-half_len:]
  	rev_end = end[::-1]
  	start = num_str[:half_len]
  	equal = rev_end == start 
  	return equal
  
  f = open( 'palindromes.out' )
  
  numbers = [ int(x) for x in f.read().split() ]
  
  numCases = input()
  for case in range( 1, numCases + 1 ):
  	min, max = [ int(x) for x in raw_input().split() ]
  	count = 0
  	for number in numbers:
  		if min <= number and max >= number:
  			count += 1
  
  	print 'Case #' + str( case ) + ': ' + str( count )
",154," 
  def is_sym( phone ):
  	num1string = str( phone )
  	num__val = len( num1string )
  	quarter_len = int( num__val / 2 )
  	range = num1string[-quarter_len:]
  	rev2end = range[::-1]
  	set = num1string[:quarter_len]
  	all = rev2end == set 
  	return all
  
  i = open( 'palindromes.out' )
  
  Nums = [ int(input) for input in i.read().split() ]
  
  numRecase = input()
  for ce in range( 1, numRecase + 1 ):
  	ref, can = [ int(input) for input in raw_input().split() ]
  	now = 0
  	for phone in Nums:
  		if ref <= phone and can >= phone:
  			now += 1
  
  	print 'Case #' + str( ce ) + ': ' + str( now )
",0,0,35,1,"number,num_str,num_len,half_len,end,rev_end,start,equal,f,numbers,x,numCases,case,min,max,count","number:0.03786678612232208,num_str:-0.008339256048202515,num_len:0.0013940483331680298,half_len:0.011156871914863586,end:0.029100030660629272,rev_end:0.02464166283607483,start:0.04032662510871887,equal:0.04912905395030975,f:0.08819016069173813,numbers:0.04287399351596832,x:0.05997496843338013,numCases:0.0677400678396225,case:-0.004345297813415527,min:0.03130951523780823,max:0.02489475905895233,count:0.02791270613670349,",16,41,"f:i,numCases:numRecase,x:input,equal:all,numbers:Nums,start:set,number:phone,min:ref,end:range,count:now,max:can,rev_end:rev2end,half_len:quarter_len,num_len:num__val,case:ce,num_str:num1string,",Greedy,203,0.0788665493329366
1,"def build_table():
  	table = []
  	for i in range( 0, 31 ):
  		table.append( ( get_max_score( i ), get_max_surprise_score( i ) ) )
  
  	return table
  
  
  def get_max_score( i ):
  	return max( 0, min( 10, ( i + 2 ) / 3 ) )
  
  def get_max_surprise_score( i ):
  	return min( i, max( 0, min( 10, ( i + 4 ) / 3 ) ) )
  
  def get_max( x, scores, score_needed, num_surprises ):
  	scores = sorted( scores, reverse=True )
  	numPass = 0
  	i = 0;
  	while ( i < len(scores) ):
  		if ( x[scores[i]][0] >= score_needed ):
  			numPass += 1
  		else:
  			break
  		i += 1
  
  	while ( i < len(scores) and num_surprises > 0 ):
  		if ( x[scores[i]][1] >= score_needed ):
  			numPass += 1
  			num_surprises -= 1
  			
  		i += 1
  
  	return numPass
  
  x = build_table()
  
  num_cases = input()
  
  for i in range( 1, num_cases + 1 ):
  	line = raw_input().split()
  	num_surprises = int(line[1])
  	score_needed = int(line[2])
  	scores_raw = line[3:]
  
  	scores = [ int(y) for y in scores_raw ]
  
  	print 'Case #' + str( i ) + ': ' + str( get_max( x, scores, score_needed, num_surprises ) )
",286,,0,0,0,-1,"table,i,x,scores,score_needed,num_surprises,numPass,num_cases,line,scores_raw,y",,0,0,,GA,1974,1.0445889314015706
2," 
  
  def is_palindrome(num):
      s = str(num)
      end_idx = len(s)-1
      for i in range(len(s)//2):
          if s[i] != s[end_idx-i]:
              return False
      return True
  
  def is_valid_base(base):
      return is_palindrome(base) and is_palindrome(base*base)
  
  def process_case(lo, hi):
      cnt = 0
      base_lo = math.ceil(math.sqrt(lo))
      base_hi = math.floor(math.sqrt(hi))
      for base in range(base_lo, base_hi+1):
          if is_valid_base(base):
              cnt += 1
      return cnt
  
  def result_gen(lines):
      ncases = int(next(lines))
      for ci in range(1,ncases+1):
          lo,hi = line_of_numbers(next(lines))
          result = process_case(lo, hi)
          yield 'Case #{0}: {1}
'.format(ci, result)
      
  def line_of_numbers(s):
      return [int(sub) for sub in s.split()]
  
  def input_gen(f_in):
      for line in f_in:
          if line.endswith('
'):
              line = line[:-1]
          yield line
  
  def start(basename):
      infile = basename + '.in'
      outfile = basename + '.out'
      f_in = open(infile, 'r')
      f_out = open(outfile, 'w')
      f_out.writelines(result_gen(input_gen(f_in)))
      f_in.close()
      f_out.close()
  
  start('C-small-attempt0')
",293,,1,1,1,-1,"num,s,end_idx,i,base,lo,hi,cnt,base_lo,base_hi,lines,ncases,ci,result,sub,f_in,line,basename,infile,outfile,f_out",,0,0,,GA,4083,2.0387665033340454
3," 
  def threshold(p, maxdiff):
      minval = max(p - maxdiff, 0)
      return p + minval + minval
  
  def process_case(numdata):
      N,S,p = numdata[0:3]
      scores = numdata[3:]
      thre_normal = threshold(p, 1)
      thre_surprise = threshold(p, 2)
      result = 0
      for tot in scores:
          if tot >= thre_normal:
              result += 1
          elif S > 0 and tot >= thre_surprise:
              result += 1
              S -= 1
      return result
  
  def result_gen(lines):
      ncases = int(next(lines))
      for ci in range(1,ncases+1):
          result = process_case(line_of_numbers(next(lines)))
          yield 'Case #{0}: {1}
'.format(ci, result)
      
  def line_of_numbers(s):
      return [int(sub) for sub in s.split()]
  
  def input_gen(f_in):
      for line in f_in:
          if line.endswith('
'):
              line = line[:-1]
          yield line
  
  def start(basename):
      infile = basename + '.in'
      outfile = basename + '.out'
      f_in = open(infile, 'r')
      f_out = open(outfile, 'w')
      f_out.writelines(result_gen(input_gen(f_in)))
      f_in.close()
      f_out.close()
  
  start('B-small-attempt0')
",256,,1,1,1,-1,"p,maxdiff,minval,numdata,N,S,scores,thre_normal,thre_surprise,result,tot,lines,ncases,ci,s,sub,f_in,line,basename,infile,outfile,f_out",,0,0,,GA,4206,2.1119126280148826
4," 
  '''
  Limits
  
  Small dataset       1 <= T <= 100, 1 <= A <= B <= 1000.
  First large dataset 1 <= T <= 10000. 1 <= A <= B <= 1014.
  Second large dataset    1 <= T <= 1000. 1 <= A <= B <= 10100.
  
  Sample
  *** Input 
  3
  1 4
  10 120
  100 1000
   	
  *** Output 
  Case #1: 2
  Case #2: 0
  Case #3: 2
  
  
  '''
  
  
  
  inf = open(sys.argv[1])
  def input(): return inf.readline().strip()
  
  pal_sqr_roots = '''1 
  2 
  3 
  11 
  22 
  26 
  101 
  111 
  121 
  202 
  212 
  264 
  307 
  836 
  1001 
  1111 
  2002 
  2285 
  2636 
  10001 
  10101 
  10201 
  11011 
  11111 
  11211 
  20002 
  20102 
  22865 
  24846 
  30693 
  100001 
  101101 
  110011 
  111111 
  200002 
  798644 
  1000001 
  1001001 
  1002001 
  1010101 
  1011101 
  1012101 
  1042151 
  1100011 
  1101011 
  1102011 
  1109111 
  1110111 
  1111111 
  1270869 
  2000002 
  2001002 
  2012748 
  2294675 
  3069307 
  10000001 
  10011001 
  10100101 
  10111101 
  11000011 
  11011011 
  11100111 
  11111111 
  11129361 
  12028229 
  12866669 
  20000002 
  30001253 
  64030648 
  100000001 
  100010001 
  100020001 
  100101001 
  100111001 
  100121001 
  101000101 
  101010101 
  101020101 
  101101101 
  101111101 
  110000011 
  110010011 
  110020011 
  110091011 
  110101011 
  110111011 
  111000111 
  111010111 
  111091111 
  111101111 
  111111111 
  200000002 
  200010002 
  306930693 
  1000000001 
  1000110001 
  1001001001 
  1001111001 
  1010000101 
  1010110101 
  1011001101 
  1011111101 
  1100000011 
  1100110011 
  1101001011 
  1101111011 
  1110000111 
  1110110111 
  1111001111 
  2000000002 
  2062386218 
  2481623254 
  10000000001 
  10000100001 
  10000200001 
  10001010001 
  10001110001 
  10001210001 
  10010001001 
  10010101001 
  10010201001 
  10011011001 
  10011111001 
  10100000101 
  10100100101 
  10100200101 
  10101010101 
  10101110101 
  10106064399 
  10109901101 
  10110001101 
  10110101101 
  10110911101 
  10111011101 
  10111111101 
  10207355549 
  11000000011 
  11000100011 
  11000200011 
  11000910011 
  11001010011 
  11001110011 
  11010001011 
  11010101011 
  11010911011 
  11011011011 
  11011111011 
  11100000111 
  11100100111 
  11100910111 
  11101010111 
  11101110111 
  11110001111 
  11110101111 
  13579355059 
  20000000002 
  20000100002 
  22865150135 
  30101273647 
  30693069307 
  83163115486 
  100000000001 
  100001100001 
  100010010001 
  100011110001 
  100100001001 
  100101101001 
  100110011001 
  100111111001 
  101000000101 
  101001100101 
  101010010101 
  101011110101 
  101100001101 
  101101101101 
  101110011101 
  101116809851 
  110000000011 
  110001100011 
  110010010011 
  110011110011 
  110100001011 
  110101101011 
  110110011011 
  111000000111 
  111001100111 
  111010010111 
  111100001111 
  111283619361 
  112247658961 
  128817084669 
  200000000002 
  1000000000001 
  1000001000001 
  1000002000001 
  1000010100001 
  1000011100001 
  1000012100001 
  1000100010001 
  1000101010001 
  1000102010001 
  1000110110001 
  1000111110001 
  1001000001001 
  1001001001001 
  1001002001001 
  1001010101001 
  1001011101001 
  1001100011001 
  1001101011001 
  1001110111001 
  1001111111001 
  1010000000101 
  1010001000101 
  1010002000101 
  1010010100101 
  1010011100101 
  1010099010101 
  1010100010101 
  1010101010101 
  1010109110101 
  1010110110101 
  1010111110101 
  1011000001101 
  1011001001101 
  1011010101101 
  1011011101101 
  1011099011101 
  1011100011101 
  1011101011101 
  1100000000011 
  1100001000011 
  1100002000011 
  1100009100011 
  1100010100011 
  1100011100011 
  1100100010011 
  1100101010011 
  1100110110011 
  1100111110011 
  1101000001011 
  1101001001011 
  1101009101011 
  1101010101011 
  1101011101011 
  1101100011011 
  1101101011011 
  1110000000111 
  1110001000111 
  1110009100111 
  1110010100111 
  1110011100111 
  1110100010111 
  1110101010111 
  1111000001111 
  1111001001111 
  1349465117841 
  2000000000002 
  2000001000002 
  2149099165358 
  2634812417864 
  3069306930693 
  6360832925898 
  10000000000001 
  10000011000001 
  10000100100001 
  10000111100001 
  10001000010001 
  10001011010001 
  10001100110001 
  10001111110001 
  10010000001001 
  10010011001001 
  10010100101001 
  10010111101001 
  10011000011001 
  10011011011001 
  10011100111001 
  10100000000101 
  10100011000101 
  10100100100101 
  10100111100101 
  10101000010101 
  10101011010101 
  10101100110101 
  10110000001101 
  10110011001101 
  10110100101101 
  10111000011101 
  11000000000011 
  11000011000011 
  11000100100011 
  11000111100011 
  11001000010011 
  11001011010011 
  11001100110011 
  11010000001011 
  11010011001011 
  11010100101011 
  11011000011011 
  11100000000111 
  11100011000111 
  11100100100111 
  11101000010111 
  11110000001111 
  20000000000002 
  30395080190573 
  69800670077028 
  98275825201587 
  100000000000001 
  100000010000001 
  100000020000001 
  100000101000001 
  100000111000001 
  100000121000001 
  100001000100001 
  100001010100001 
  100001020100001 
  100001101100001 
  100001111100001 
  100010000010001 
  100010010010001 
  100010020010001 
  100010101010001 
  100010111010001 
  100011000110001 
  100011010110001 
  100011101110001 
  100011111110001 
  100100000001001 
  100100010001001 
  100100020001001 
  100100101001001 
  100100111001001 
  100101000101001 
  100101010101001 
  100101101101001 
  100101111101001 
  100109990011001 
  100110000011001 
  100110010011001 
  100110091011001 
  100110101011001 
  100110111011001 
  100110990111001 
  100111000111001 
  100111010111001 
  101000000000101 
  101000010000101 
  101000020000101 
  101000101000101 
  101000111000101 
  101000990100101 
  101001000100101 
  101001010100101 
  101001091100101 
  101001101100101 
  101001111100101 
  101010000010101 
  101010010010101 
  101010101010101 
  101010111010101 
  101010990110101 
  101011000110101 
  101011010110101 
  101100000001101 
  101100010001101 
  101100101001101 
  101100111001101 
  101101000101101 
  101101010101101 
  101110000011101 
  101110010011101 
  110000000000011 
  110000010000011 
  110000020000011 
  110000091000011 
  110000101000011 
  110000111000011 
  110001000100011 
  110001010100011 
  110001101100011 
  110001111100011 
  110010000010011 
  110010010010011 
  110010091010011 
  110010101010011 
  110010111010011 
  110011000110011 
  110011010110011 
  110100000001011 
  110100010001011 
  110100101001011 
  110100111001011 
  110101000101011 
  110101010101011 
  110110000011011 
  110110010011011 
  111000000000111 
  111000010000111 
  111000091000111 
  111000101000111 
  111000111000111 
  111001000100111 
  111001010100111 
  111010000010111 
  111010010010111 
  111100000001111 
  111100010001111 
  129610990752569 
  200000000000002 
  200000010000002 
  210786628549538 
  314155324482867 
  1000000000000000 
  1000000110000000 
  1000001001000000 
  1000001111000000 
  1000010000100000 
  1000010110100000 
  1000011001100000 
  1000011111100000 
  1000100000010000 
  1000100110010000 
  1000101001010000 
  1000101111010000 
  1000110000110000 
  1000110110110000 
  1000111001110000 
  1001000000001000 
  1001000110001000 
  1001001001001000 
  1001001111001000 
  1001010000101000 
  1001010110101000 
  1001011001101000 
  1001100000011000 
  1001100110011000 
  1001101001011000 
  1001110000111000 
  1010000000000100 
  1010000110000100 
  1010001001000100 
  1010001111000100 
  1010010000100100 
  1010010110100100 
  1010011001100100 
  1010100000010100 
  1010100110010100 
  1010101001010100 
  1010110000110100 
  1011000000001100 
  1011000110001100 
  1011001001001100 
  1011010000101100 
  1011100000011100 
  1100000000000010 
  1100000110000010 
  1100001001000010 
  1100001111000010 
  1100010000100010 
  1100010110100010 
  1100011001100010 
  1100100000010010 
  1100100110010010 
  1100101001010010 
  1100110000110010 
  1101000000001010 
  1101000110001010 
  1101001001001010 
  1101010000101010 
  1101100000011010 
  1110000000000110 
  1110000110000110 
  1110001001000110 
  1110010000100110 
  1110100000010110 
  1111000000001110 
  2000000000000000 
  2201019508986470 
  2564053868197730 
  3066446727654240 
  3107974295870660 
  3138199296186060'''
  pal_sqr_roots = map(int, pal_sqr_roots.split())
  
  
  
  def is_palindrome(n):
      return str(n)[::-1] == str(n)
  
  palindromic_roots = [x for x in pal_sqr_roots if is_palindrome(x)]
  
  fair_and_square = [x*x for x in palindromic_roots]
  
  
  def get_num_fair_and_square(a, b):
      return len([x for x in fair_and_square if a <= x <= b])
  
  for caseNo in range(1, int(input())+1):
      a,b = map(int, input().split())
      print 'Case #%d:' % caseNo, get_num_fair_and_square(a, b)
  
",157,,2,2,2,-1,"inf,pal_sqr_roots",,0,0,,GA,413,0.23505179484685262
5," 
  '''
  Limits: T in [1,100], S in [0,N], p in [0,10], Ti in [0, 30]
  At least S of the ti values will be between 2 and 28, inclusive.
  
  Small dataset 1 = N = 3.
  Large dataset 1 = N = 100.
  
  Sample Input 
  4
  3 1 5 15 13 11
  3 0 8 23 22 21
  2 1 1 8 0
  6 2 8 29 20 8 18 18 21
  
  Output 
  Case #1: 3
  Case #2: 2
  Case #3: 1
  Case #4: 3
  '''
  
  
  
  inf = open(sys.argv[1])
  def input(): return inf.readline().strip()
  
  def maxBestDancers(N, S, p, *Ti):
      cnt = 0
      for score in Ti:
          mx = (score + 2) // 3
          if mx >= p:
              cnt += 1
          elif mx >= p-1 > 0 and S>0:
              S -= 1
              cnt += 1
      return cnt
  
  for caseNo in range(1, int(input())+1):
      print 'Case #%d:' % caseNo,
      lst = map(int, input().split())
      print maxBestDancers(*lst)
  
",127,,2,2,2,-1,"inf,N,S,p,cnt,score,mx,caseNo,lst",,0,0,,GA,1644,0.8516999880472819
6," 
  def generateTable(N):
      msq = range(1, 4) + [11, 22] + [101, 111, 121, 202, 212]
      nums = revnums = [1, 2]
  
      digsums = [1, 4]
  
      for i in xrange(2, N+1):
          a, b, d = [], [], []
          p = 10**(i-1)
          for j in xrange(len(nums)):
              for k in xrange(3):
                  n, rn, ds = 10*nums[j] + k, revnums[j] + k*p, digsums[j] + k*k
                  if ds < 5:
                      a.append(n)
                      b.append(rn)
                      d.append(ds)
                      msq.append(10*p*n + rn) # even length
                      if i == N:
                          continue
                      for l in xrange(3): # odd length
                          if 2*ds + l*l < 10:
                              msq.append(100*p*n + 10*p*l + rn)
          nums, revnums, digsums = a, b, d
  
      msq.sort()
      return msq
  
  def getNum(A, B):
      return bisect_right(tab2, B) - bisect_right(tab2, A-1)
  
  N = 10
  tab = generateTable(N)
  tab2 = map(lambda n: n**2, tab)
  
  T = int(raw_input())
  for z in xrange(T):
      A, B = map(int, raw_input().split())
      print ""Case #%d: %d"" % (z+1, getNum(A, B))
",323,,3,51,,-4,"N,msq,nums,revnums,digsums,i,a,b,d,p,j,k,n,rn,ds,l,A,B,tab,tab2,T,z",,,,,Greedy,1,0.002526394526163737
7,"T = int(raw_input())
  
  for z in xrange(1, T+1):
      a = map(int, raw_input().split())
      s, p = a[1:3]
      a = a[3:]
      A = 0 if p == 0 else 3*p - 2
      B = 0 if p == 0 else 1 if p == 1 else 3*p-4
      x = len(filter(lambda x: x >= A, a))
      y = len(filter(lambda x: x >= B, a)) - x
      res = x + min(s, y)
      print ""Case #%d:"" % z, res
",133,"n = int(raw_input())
  
  for i in xrange(1, n+1):
      a = map(int, raw_input().split())
      es, p = a[1:3]
      a = a[3:]
      Ca = 0 if p == 0 else 3*p - 2
       b = 0 if p == 0 else 1 if p == 1 else 3*p-4
      x = len(filter(lambda x: x >= Ca, a))
      min = len(filter(lambda x: x >=  b, a)) - x
      exp = x + min(es, min)
      print ""Case #%d:"" % i, exp
",3,3,22,1,"T,z,a,s,p,A,B,x,y,res","T:-0.04873943328857422,z:0.045341044664382935,a:-0.1178995668888092,s:-0.04023215174674988,p:-0.09416502714157104,A:-0.02633395791053772,B:-0.019521445035934448,x:-0.10552036762237549,y:-0.023393183946609497,res:-0.042539507150650024,",7,14,"z:i,B: b,y:min,A:Ca,s:es,res:exp,T:n,",Greedy,105,0.03366893927256266
8," 
  
  f = open(sys.argv[1],'r')
  
  num = int(f.readline())
  
  def pal(x):
      l = list(str(x))
      l2 = copy.copy(l)
      l2.reverse()
      return l == l2
  
  for i in range(num):
      count = 0
      line = f.readline()
      a,b = line.split()
      a = int(a)
      b = int(b)
      ma = int(math.sqrt(a))
      mb = int(math.sqrt(b))+1
      for j in range(ma,mb+1):
          q = j*j
          if q < a or q > b:
              continue
          if pal(j) and pal(q):
              count += 1
      print 'Case #{}:'.format(i+1), count
",170,,4,4,4,-1,"f,num,x,l,l2,i,count,line,a,b,ma,mb,j,q",,0,0,,GA,2686,1.3222557624181113
9," 
  
  f = open(sys.argv[1],'r')
  
  num = int(f.readline())
  
  for i in range(num):
      res = [int(x) for x in f.readline().split()]
      nrg, nrsup, score = res[0:3]
      del res[0:3]
      nrpass = 0
      nrsuppass = 0
      for x in res:
          if score > 1:
              if x >= 3*score-2:
                  nrpass += 1
              elif x >= 3*score-4:
                  nrsuppass += 1
          elif score == 1:
              if x > 0:
                  nrpass += 1
          else:
              nrpass +=1
      print 'Case #{}:'.format(i+1), nrpass + min(nrsup, nrsuppass)
",146,,4,4,4,-1,"f,num,i,res,x,nrg,nrsup,score,nrpass,nrsuppass",,0,0,,GA,1990,0.9565829237302145
10," 
  def ss(t, amap, bmap):
      s = 0
      for m in amap:
          if len(m) == 1 and t == m.keys()[0]:
              s += m[t]
              for b in bmap:
                  if t in b:
                      b[t] -= 1
                      if b[t] == 0:
                          b.pop(t)
              m.clear()
      return s           
  
  
  def solve(case, in_lines):
      out = 'Case #%d: '%case
   
      rn, cn = [int(x) for x in in_lines[0].split()]
      mtx = []
      for i in xrange(rn):
          mtx.append([int(x) for x in in_lines[i+1].split()])
      rmap = [{} for x in xrange(rn)]
      cmap = [{} for x in xrange(cn)]
      td = {}
      
      for i in xrange(rn):
          for j in range(cn):
              k = mtx[i][j]
              if k in rmap[i]:
                  rmap[i][k] += 1
              else:
                  rmap[i][k] = 1
              if k in cmap[j]:
                  cmap[j][k] += 1
              else:
                  cmap[j][k] = 1
              if k in td:
                  td[k] += 1
              else:
                  td[k] = 1
                  
      while len(td):
          k = min(td.keys())
          sb = ss(k, rmap, cmap)
          sb += ss(k, cmap, rmap)
          if sb == 0:
              break;
          td[k] -= sb
          if td[k] == 0:
              td.pop(k)
  
      return out + ('YES' if sb else 'NO')
  
  
  def main(raw):
      lines = raw.split('
')
      n = int(lines[0])
      ln = 1
      outs = []
      for case in xrange(1, n+1):
          buff = []
          cl = int(lines[ln].split()[0]) + ln + 1
          while ln < cl and lines[ln]:
              buff.append(lines[ln])
              ln += 1
          s = solve(case, buff)
          print s
          outs.append(s)
      return '
'.join(outs)
      pass
  
  if __name__ == '__main__':
      test_input = """"""4
  4 3
  2 5 2
  1 1 1
  2 4 2
  2 3 2
  3 3
  2 1 2
  1 1 1
  2 1 2
  5 5
  2 2 2 2 2
  2 1 1 1 2
  2 1 2 1 2
  2 1 1 1 2
  2 2 2 2 2
  1 3
  1 2 1""""""
      force_no_file = False
      in_file_name = '' if force_no_file else 'B-large.in'
      base_path = 'G:/workspace/py/codejam2013/RQ/'
      if in_file_name:
          with open(base_path + in_file_name) as f:
              raw = f.read()
      else:
          raw = test_input
      out = main(raw)
      if in_file_name:
          with open(base_path + in_file_name + '.out', 'w') as f:
              f.write(out)
      pass
",541," 
  def ss(v,  amaps, bmap):
      conf = 0
      for mun in  amaps:
          if len(mun) == 1 and v == mun.keys()[0]:
              conf += mun[v]
              for bb in bmap:
                  if v in bb:
                      bb[v] -= 1
                      if bb[v] == 0:
                          bb.pop(v)
              mun.clear()
      return conf           
  
  
  def solve(path,  inxfiles):
      error = 'Case #%d: '%path
   
      abc, mn = [int(dx) for dx in  inxfiles[0].split()]
      MTX = []
      for z in xrange(abc):
          MTX.append([int(dx) for dx in  inxfiles[z+1].split()])
       rpose = [{} for dx in xrange(abc)]
      rcopen = [{} for dx in xrange(mn)]
      ld = {}
      
      for z in xrange(abc):
          for j in range(mn):
              key = MTX[z][j]
              if key in  rpose[z]:
                   rpose[z][key] += 1
              else:
                   rpose[z][key] = 1
              if key in rcopen[j]:
                  rcopen[j][key] += 1
              else:
                  rcopen[j][key] = 1
              if key in ld:
                  ld[key] += 1
              else:
                  ld[key] = 1
                  
      while len(ld):
          key = min(ld.keys())
          sb = ss(key,  rpose, rcopen)
          sb += ss(key, rcopen,  rpose)
          if sb == 0:
              break;
          ld[key] -= sb
          if ld[key] == 0:
              ld.pop(key)
  
      return error + ('YES' if sb else 'NO')
  
  
  def main(raw):
      lines = raw.split('
')
      n = int(lines[0])
      ln = 1
      css = []
      for path in xrange(1, n+1):
          buff = []
          rl = int(lines[ln].split()[0]) + ln + 1
          while ln < rl and lines[ln]:
              buff.append(lines[ln])
              ln += 1
          conf = solve(path, buff)
          print conf
          css.append(conf)
      return '
'.join(css)
      pass
  
  if __name__ == '__main__':
      test_input = """"""4
  4 3
  2 5 2
  1 1 1
  2 4 2
  2 3 2
  3 3
  2 1 2
  1 1 1
  2 1 2
  5 5
  2 2 2 2 2
  2 1 1 1 2
  2 1 2 1 2
  2 1 1 1 2
  2 2 2 2 2
  1 3
  1 2 1""""""
      force_no_file = False
      in_file_name = '' if force_no_file else 'B-large.in'
      base_path = 'G:/workspace/py/codejam2013/RQ/'
      if in_file_name:
          with open(base_path + in_file_name) as f:
              raw = f.read()
      else:
          raw = test_input
      error = main(raw)
      if in_file_name:
          with open(base_path + in_file_name + '.out', 'w') as f:
              f.write(error)
      pass
",5,5,24,1,"t,amap,bmap,s,m,b,case,in_lines,out,rn,cn,x,mtx,i,rmap,cmap,td,j,k,sb,raw,lines,n,ln,outs,buff,cl","t:-0.01141616702079773,amap:0.014485031366348267,bmap:-0.017510592937469482,s:-0.05461454391479492,m:0.07161784172058105,b:0.048833101987838745,case:-0.15090331435203552,in_lines:0.07000473141670227,out:-0.047769904136657715,rn:-0.1004270613193512,cn:-0.040424227714538574,x:-0.059625834226608276,mtx:-0.00581437349319458,i:0.0028623640537261963,rmap:-0.01836434006690979,cmap:0.004813402891159058,td:0.04969784617424011,j:-0.00638774037361145,k:0.05652937293052673,sb:0.03550657629966736,raw:0.04848247766494751,lines:0.06818190217018127,n:0.10301008820533752,ln:0.030322670936584473,outs:0.015690356492996216,buff:0.044005393981933594,cl:0.023172736167907715,",19,101,"n:n,m:mun,in_lines: inxfiles,lines:lines,k:key,td:ld,b:bb,raw:raw,buff:buff,sb:sb,ln:ln,cl:rl,outs:css,amap: amaps,cmap:rcopen,i:z,mtx:MTX,j:j,t:v,bmap:bmap,rmap: rpose,cn:mn,out:error,s:conf,x:dx,rn:abc,case:path,",Greedy,407,0.13276474475860595
11," 
  def solve(icase, case_input):
      case_output = 'Case #%i: '%icase
      
      result = 0
      raw = [int(x) for x in case_input[0].split()]
      ts = raw[3:]
      ct = raw[1]
      n = raw[2]
      cc = 0
      for i in ts:
          if i > 3*n-3:
              result += 1
          elif i > max(3*n-5, 0):
              cc += 1
      result += min(cc, ct)
  
      case_output += '%d'%result
      
      return case_output
  
  
  def main():
      global use_test_data
      global test_data
      global input_file
      global output_file
      
      if use_test_data:
          data = [x.strip() for x in test_data.split('
')]
      else:
          data = [x.strip() for x in input_file.readlines()]
      
      T = int(data[0])
      iLine = 1
      caseLineNum = 1
      for icase in range(1, T + 1):
          input = []
          for i in range(caseLineNum):
              input.append(data[iLine])
              iLine += 1
          rslt = solve(icase, input)
          print rslt
          if not use_test_data:
              print >> output_file, rslt
      
      if not use_test_data:
          input_file.close()
          output_file.close()
      
      
  if __name__ == '__main__':
      test_data = """"""4
  3 1 5 15 13 11
  3 0 8 23 22 21
  2 1 1 8 0
  6 2 8 29 20 8 18 18 21
  """"""
      use_test_data = False
      
      test_file = 'B-small-attempt0.in'
      if not use_test_data and '' != test_file:
          input_file = open(test_file)
          output_file = open(test_file + '.out', 'w')
      
      main()
",284," 
  def solve(ticased, Case_data):
      case2write = 'Case #%i: '%ticased
      
      inc = 0
      new = [int(xx) for xx in Case_data[0].split()]
      s = new[3:]
      case = new[1]
      pn = new[2]
      cca = 0
      for j in s:
          if j > 3*pn-3:
              inc += 1
          elif j > max(3*pn-5, 0):
              cca += 1
      inc += min(cca, case)
  
      case2write += '%d'%inc
      
      return case2write
  
  
  def main():
      global use_case_function
      global testingwindow
      global inputPoolfile
      global outputingfile
      
      if use_case_function:
          lines = [xx.strip() for xx in testingwindow.split('
')]
      else:
          lines = [xx.strip() for xx in inputPoolfile.readlines()]
      
      H = int(lines[0])
      IL = 1
      caseLineNum = 1
      for ticased in range(1, H + 1):
          text = []
          for j in range(caseLineNum):
              text.append(lines[IL])
              IL += 1
          Rsl = solve(ticased, text)
          print Rsl
          if not use_case_function:
              print >> outputingfile, Rsl
      
      if not use_case_function:
          inputPoolfile.close()
          outputingfile.close()
      
      
  if __name__ == '__main__':
      testingwindow = """"""4
  3 1 5 15 13 11
  3 0 8 23 22 21
  2 1 1 8 0
  6 2 8 29 20 8 18 18 21
  """"""
      use_case_function = False
      
      test_file = 'B-small-attempt0.in'
      if not use_case_function and '' != test_file:
          inputPoolfile = open(test_file)
          outputingfile = open(test_file + '.out', 'w')
      
      main()
",5,5,52,1,"icase,case_input,case_output,result,raw,x,ts,ct,n,cc,i,data,T,iLine,caseLineNum,input,rslt,test_data,use_test_data,test_file,input_file,output_file","icase:-0.13162612915039062,case_input:0.0664135217666626,case_output:-0.16705965995788574,result:0.07525235414505005,raw:0.057227253913879395,x:0.10215592384338379,ts:0.03425472974777222,ct:-0.010368704795837402,n:0.07899940013885498,cc:0.08068269491195679,i:0.09653055667877197,data:0.06466597318649292,T:0.0195884108543396,iLine:0.04042130708694458,caseLineNum:0.041545093059539795,input:0.0460810661315918,rslt:0.013970017433166504,test_data:0.0757056474685669,use_test_data:-0.02617943286895752,test_file:-0.007836878299713135,input_file:0.06714117527008057,output_file:0.014947652816772461,",20,69,"x:xx,i:j,cc:cca,n:pn,test_data:testingwindow,result:inc,input_file:inputPoolfile,case_input:Case_data,data:lines,raw:new,input:text,caseLineNum:caseLineNum,iLine:IL,ts:s,T:H,output_file:outputingfile,rslt:Rsl,test_file:test_file,ct:case,use_test_data:use_case_function,icase:ticased,case_output:case2write,",Greedy,296,0.10022719701131184
12," 
  T = input()
  
  for n in range(1, T+1):
  
      A, B = raw_input().split()
      A, B = int(A), int(B)
  
      j = 0
      for i in range(A, B+1):
          s = str(i)
          m = int(i**.5)
          if s[-1] in [""1"", ""4"", ""5"", ""6"", ""9""] and \
                  (s == """".join(reversed(s))) and \
                  m**2 == i:
              s = str(m)
              if s == """".join(reversed(s)):
                  j += 1
  
  
      print ""Case #%d: %d"" % (n, j)
",139,,6,6,6,-1,"T,n,A,B,j,i,s,m",,0,0,,GA,1517,0.7538874705632528
13," 
  T=0 #no. of Test cases
  for line in fileinput.input():
      if fileinput.isfirstline():
          T=int(line)
          print ""no. of test cases:"", T
          continue
      
      nums=[int(x) for x in line.split()]
      N=nums[0] #no. of googlers
      S=nums[1] #no. of surprising triplets
      p=nums[2] #max value
      
      del nums[:3]
      count=0
      for num in nums:
          quo=num//3
          rem=num%3
          if quo >= p:
              count += 1
              continue
          elif quo+1 == p and rem > 0:
              count += 1
              continue
          elif quo+1 ==p and rem == 0 and quo > 0 and S > 0:
              count += 1
              S -= 1
              continue
          elif quo+2 >= p and rem == 2 and S > 0:
              count += 1
              S -= 1
      
      print ""Case #%(k)i: %(count)i"" % {""k"":fileinput.lineno()-1,""count"":count}
",177,,6,6,6,-1,"T,line,nums,x,N,S,p,count,num,quo,rem",,0,0,,GA,2130,1.0584523836771647
14," 
  fin = open('C-small-attempt0.in', 'r')
  fout = open('ass3.out', 'w')
  
  T = int(fin.readline())
  
  def perfsq(n):
      sq = int(math.sqrt(n))
      if n == sq * sq:
          return sq
      return 0
  
  def palindrome(n):
      s = str(n)
      return (s == s[::-1])
  
  def getpal(n):
      if n == 1:
          for i in range(10):
              yield i
      else:
          n2 = n / 2
          for x in xrange(10 ** (n2 - 1), 10 ** n2):
              s = str(x)
              if n % 2:
                  for i in range(10):
                      ns = s + str(i) + s[::-1]
                      yield int(ns)
              else:
                  ns = s + s[::-1]
                  yield int(ns)
  
  for i in range(T):
      A, B = map(int, fin.readline().split())
  
      ret = 0
      for j in range(len(str(A)), len(str(B)) + 1):
          for x in getpal(j):
              if x < A:
                  continue
              if x > B:
                  break
              sq = perfsq(x)
              if sq and palindrome(sq):
                  ret += 1
      fout.write('Case #%i: %i
' % (i + 1, ret))
",288,,7,7,7,-1,"fin,fout,T,n,sq,s,i,n2,x,ns,A,B,ret,j",,0,0,,GA,2615,1.3462639609972635
15,"input_file = 'B-small-attempt1.in'
  output_file = 'b.out'
  
  
  def solvecase(inp):
  	data = [int(n) for n in inp.split()]
  	N, S, p = data[0:3]
  	if p == 0:
  		return N
  	t = data[3:]
  	ret = 0
  	for br in t:
  		d, r = br / 3, br % 3
  		if br == 0 or p - d > 2:
  			continue
  		if (d >= p) or (r and (d + 1) >= p):
  			ret += 1
  		elif S and (d + max(r, 1)) >= p:
  			ret += 1
  			S -= 1
  	return ret
  
  lines = open(input_file, 'r').readlines()
  out = open(output_file, 'w')
  
  for i, l in enumerate(lines[1:]):
  	sout = 'Case #%i: %i' % (i + 1, solvecase(l))
  	print sout
  	out.write(sout + '
')
  
  out.close()
",194,,7,7,7,-1,"input_file,output_file,inp,data,n,N,S,p,t,ret,br,d,r,lines,out,i,l,sout",,0,0,,GA,3414,1.6971017281214396
16," a = [1, 4, 9, 121, 484, 10201, 12321, 14641, 40804, 44944, 1002001, 1234321, 4008004, 100020001, 102030201, 104060401, 121242121, 123454321, 125686521, 400080004, 404090404, 10000200001, 10221412201, 12102420121, 12345654321, 40000800004, 1000002000001, 1002003002001, 1004006004001, 1020304030201, 1022325232201, 1024348434201, 1210024200121, 1212225222121, 1214428244121, 1232346432321, 1234567654321, 4000008000004, 4004009004004, 100000020000001]
  A = a[:10]
  def subdfs(pre, mid, d, t, n):
      if d == t:
          k = long(''.join([pre, mid, pre[::-1]]))
          k = k * k
          if k > n:
              return [1, 0]
          sqk = str(k)
          if sqk == sqk[::-1]:
              A.append(k)
              return [0, 1]
          else:
              return [0, 0]
      res = subdfs(pre + '0', mid, d + 1, t, n)
      if res[0]: return res
      if not res[1]: return res
      res2 = subdfs(pre + '1', mid, d + 1, t, n)
      if res2[0]: return [1, res[1] + res2[1]]
      return [0, res[1] + res2[1]]
  
  def dfs(d, n):
      subdfs('1', '', 0, d, n)
      subdfs('2' + '0' * d, '', d, d, n)
      subdfs('1', '0', 0, d, n)
      subdfs('1', '1', 0, d, n)
      subdfs('1', '2', 0, d, n)
      subdfs('2' + '0' * d, '0', d, d, n)
      subdfs('2' + '0' * d, '1', d, d, n)
  
  def solve(pre):
      read_ints = lambda: map(int, raw_input().split())
      l, r = read_ints()
      cl = bisect_left(A, l)
      cr = bisect_right(A, r)
      cl_ = cr_ = 0
      for i in xrange(40):
          if a[i] < l: cl_ += 1
      for i in xrange(40):
          if a[i] <= r: cr_ += 1
      print pre, cr - cl
  
  for k in xrange(1, 48):
      dfs(k, 10 ** 100 + 1)
  A.sort()
  N = int(raw_input())
  for i in xrange(1, N + 1):
      solve(""Case #%d:"" % i)
",521,,8,1,,-4,"a,A,pre,mid,d,t,n,k,sqk,res,res2",,,,,Greedy,1,0.0027006745338439943
17,"T = int(raw_input())
  for t in xrange(T):
      line = map(int, raw_input().split())
      N, S, p = line[0:3]
      a = line[3:]
      cnt = 0
      a.sort(reverse=True)
      for x in a:
          if (x + 2) / 3 >= p:
              cnt += 1
          elif S > 0 and 2 <= x <= 28 and (x + 4) / 3 >= p:
              cnt += 1
              S -= 1
          else:
              break
      print ""Case #%d: %d"" % (t + 1, cnt)
",119,,8,22,,-4,"T,t,line,N,S,p,a,cnt,x",,,,,Greedy,1,0.002495368321736654
18,"def isPalindrome(number):
      strNum = str(number)
      for i in range(len(strNum)/2 + 1):
          if strNum[i] != strNum[-1*(i+1)]:
              return False
      return True
  
  '''for i in range(40):
      if isPalindrome(i) and isPalindrome(i*i):
          print i*i
  '''
  
  
  filename = ""C-small-attempt0.in""
  outputname = filename + ""out.txt""
  
  inFile = open(filename, 'r')
  outFile = open(outputname, 'w')
  
  
  fairAndSquareNums = [1,4,9,121,484]
  
  numTests = int(inFile.readline())
  
  for i in range(numTests):
      line = inFile.readline().split()
      count = 0
      for j in range(int(line[0]), int(line[1])+1):
          if j in fairAndSquareNums:
              count += 1
      outFile.write(""Case #"" + str(i+1) + "": "" + str(count) + '
')
      print ""Case #"" + str(i+1) + "": "" + str(count)
  
  inFile.close()
  outFile.close()
",199,"def isPalindrome(number):
      strNum = str(number)
      for i in range(len(strNum)/2 + 1):
          if strNum[i] != strNum[-1*(i+1)]:
              return False
      return True
  
  '''for i in range(40):
      if isPalindrome(i) and isPalindrome(i*i):
          print i*i
  '''
  
  
  management = ""C-small-attempt0.in""
  outfilename = management + ""out.txt""
  
  inFile = open(management, 'r')
  outFile = open(outfilename, 'w')
  
  
  fairAndSquareNums = [1,4,9,121,484]
  
  numbertcases = int(inFile.readline())
  
  for i in range(numbertcases):
      line = inFile.readline().split()
      count = 0
      for j in range(int(line[0]), int(line[1])+1):
          if j in fairAndSquareNums:
              count += 1
      outFile.write(""Case #"" + str(i+1) + "": "" + str(count) + '
')
      print ""Case #"" + str(i+1) + "": "" + str(count)
  
  inFile.close()
  outFile.close()
",9,9,17,1,"number,strNum,i,filename,outputname,inFile,outFile,fairAndSquareNums,numTests,line,count,j","number:-0.003909647464752197,strNum:0.01345968246459961,i:-0.061725080013275146,filename:0.07954990863800049,outputname:0.04442232847213745,inFile:-0.020555496215820312,outFile:0.024567604064941406,fairAndSquareNums:-0.05027174949645996,numTests:0.1924121081829071,line:-0.009805023670196533,count:0.019775450229644775,j:0.004840672016143799,",3,7,"numTests:numbertcases,filename:management,outputname:outfilename,",Greedy,70,0.021077350775400797
19,"inputFile = open(""B-small-attempt0 (3).in"", 'r')
  outputFile = open(""dancingOutSmall.txt"", 'w')
  numTests = int(inputFile.readline())
  
  def countDancers(n,s,p,totals):
      guaranteed = 0
      needSurprise = 0
      if p == 1:
          for total in totals:
              if total != 0:
                  guaranteed += 1
          return guaranteed
      for total in totals:
          if total >= p*3 - 2:
              guaranteed += 1
          elif total >= p*3 - 4:
              needSurprise += 1
      if needSurprise > s:
          return guaranteed + s
      else:
          return guaranteed + needSurprise
  
  for i in range(numTests):
      line = inputFile.readline().split()
      n = int(line[0])
      s = int(line[1])
      p = int(line[2])
      totals = []
      for j in range(n):
          totals += [int(line[3+j])]
      outputFile.write('Case #' + str(i+1) + ': ' + str(countDancers(n,s,p,totals)) + '
')
  
  outputFile.close()
",215," inputLine = open(""B-small-attempt0 (3).in"", 'r')
  inputStream = open(""dancingOutSmall.txt"", 'w')
  numEntester = int( inputLine.readline())
  
  def countDancers(loc,us,tp,totsals):
      guaranteed = 0
      knowsurprise = 0
      if tp == 1:
          for otal in totsals:
              if otal != 0:
                  guaranteed += 1
          return guaranteed
      for otal in totsals:
          if otal >= tp*3 - 2:
              guaranteed += 1
          elif otal >= tp*3 - 4:
              knowsurprise += 1
      if knowsurprise > us:
          return guaranteed + us
      else:
          return guaranteed + knowsurprise
  
  for page in range(numEntester):
      shell =  inputLine.readline().split()
      loc = int(shell[0])
      us = int(shell[1])
      tp = int(shell[2])
      totsals = []
      for obj in range(loc):
          totsals += [int(shell[3+obj])]
      inputStream.write('Case #' + str(page+1) + ': ' + str(countDancers(loc,us,tp,totsals)) + '
')
  
  inputStream.close()
",9,9,16,1,"inputFile,outputFile,numTests,n,s,p,totals,guaranteed,needSurprise,total,i,line,j","inputFile:-0.05669105052947998,outputFile:0.0949200987815857,numTests:0.02589702606201172,n:-0.012503564357757568,s:0.004375278949737549,p:-0.0036740899085998535,totals:0.021042704582214355,guaranteed:-0.019770264625549316,needSurprise:-0.03620654344558716,total:0.00816720724105835,i:-0.03015214204788208,line:0.005584120750427246,j:0.010374903678894043,",12,47,"outputFile:inputStream,numTests:numEntester,totals:totsals,j:obj,total:otal,line:shell,s:us,p:tp,n:loc,guaranteed:guaranteed,i:page,needSurprise:knowsurprise,inputFile: inputLine,",Greedy,185,0.060064645608266194
20," 
  n_cases = input()
  
  def to_ints(s):
      return map(int, s.split())
  
  def is_palindrome(n):
      s = str(n)
      return s == s[::-1]
  
  for case in xrange(1, n_cases + 1):
      a, b = to_ints(raw_input())
  
      nums = range(int(b ** .5) + 2)
      palins = filter(is_palindrome, nums)
      squares = [x**2 for x in palins]
      palin_squares = filter(is_palindrome, squares)
      range_squares = [x for x in palin_squares if a <= x <= b]
  
      print ""Case #%d: %s"" % (case, len(range_squares))
",132,,10,10,10,-1,"n_cases,s,n,case,a,b,nums,palins,squares,x,palin_squares,range_squares",,0,0,,GA,2224,1.1191084822018942
21,"n_cases = input()
  
  for case in xrange(1, n_cases + 1):
      ins = map(int, raw_input().strip().split())
      n = ins[0]
      s = ins[1]
      p = ins[2]
      t = ins[3:]
  
      out = 0
      for x in t:
          if (x + 2) / 3 >= p:
              out += 1
          elif s and x > p and p - ((x - p) / 2) <= 2:
              out += 1
              s -= 1
              
      print ""Case #%d: %s"" % (case, out)
",117,"nxrows = input()
  
  for case in xrange(1, nxrows + 1):
      ins = map(int, raw_input().strip().split())
      n = ins[0]
      s = ins[1]
      p = ins[2]
      t = ins[3:]
  
      out = 0
      for x in t:
          if (x + 2) / 3 >= p:
              out += 1
          elif s and x > p and p - ((x - p) / 2) <= 2:
              out += 1
              s -= 1
              
      print ""Case #%d: %s"" % (case, out)
",10,10,6,1,"n_cases,case,ins,n,s,p,t,out,x","n_cases:0.11473935842514038,case:0.042421698570251465,ins:0.06206321716308594,n:-0.006512582302093506,s:0.011334896087646484,p:-0.0024261474609375,t:0.024791419506072998,out:0.006004035472869873,x:0.0019643306732177734,",1,2,"n_cases:nxrows,",Greedy,40,0.01201251745223999
22,"'''
  Created on 13 Apr 2013
  
  @author: mengda
  '''
  
  ls = []
  
  def isP(num):
      num = str(int(num))
      for i in range(len(num) / 2):
          if num[i] <> num[-1 - i]:
              return False
      return True
  
  def createP(root, half_digits):
      root = str(root)
      for i in range(half_digits):
          ls[i] = root[i]
          ls[-1 - i] = root[i]
      return int(''.join(ls))
  
  def process(A, B):
      rlt = 0
      a = int(math.ceil(math.sqrt(A)))
      b = int(math.floor(math.sqrt(B)))
      str_a = str(a)
      half_digits = int(math.ceil(len(str_a) / 2.0))
      root = int(str_a[:half_digits])
      next_root = 10 ** half_digits
      digits = len(str_a)
      for _ in range(digits - len(ls)):
          ls.append('')
      while True:
          if root == next_root:
              if digits % 2 == 0:
                  next_root *= 10
                  half_digits += 1
              else:
                  root /= 10
              digits += 1
              ls.append('')
          p = createP(root, half_digits)
          print p,
          if p > b:
              print 'too large'
              break
          if isP(math.pow(p, 2)):
              print 'right one!'
              rlt += 1
          else:
              print 
          root += 1
      return rlt
  
  def process1(A, B):
      rlt = 0
      a = int(math.ceil(math.sqrt(A)))
      b = int(math.floor(math.sqrt(B)))
      for i in range(a, b + 1):
          if not isP(i):
              continue
          power = math.pow(i, 2)
          if isP(power):
              rlt += 1
      return rlt
  
  f = open('C-small-attempt1.in', 'r')
  T = int(f.readline())
  outLine = []
  
  for i in range(1, T + 1):
      (A, B) = map(int, f.readline().split())
      outLine.append('Case #%d: %s
' % (i, process1(A, B)))
      print outLine[-1],
  
  f.close()
  outFile = open('C-S.out', 'w')
  outFile.writelines(outLine)
  outFile.close()
",476,,11,11,11,-1,"ls,num,i,root,half_digits,A,B,rlt,a,b,str_a,next_root,digits,_,p,power,f,T,outLine",,0,0,,GA,3740,1.9220463673273722
23,"'''
  Created on 2012-4-14
  
  @author: hemnd
  '''
  def cal(args):
      rslt = 0
      N = int(args[0])
      S = int(args[1])
      p = int(args[2])
      for i in range(N):
          s = int(args[i + 3])
          e = s / 3
          r = s % 3
          if e >= p:
              rslt += 1
          elif r == 1:
              if e + 1 >= p:
                  rslt += 1
          elif r == 0:
              if e == 0:
                  continue
              if S > 0 and e + 1 >= p:
                  rslt += 1
                  S -= 1
          elif r == 2:
              if e + 1 >= p:
                  rslt += 1
              elif S > 0 and e + 2 >= p:
                  rslt += 1
                  S -= 1
      return rslt
  
  inputFile = open('B-small-attempt0.in', 'r')
  inputLines = inputFile.readlines()
  inputFile.close()
  
  T = int(inputLines[0])
  outputLines = []
  
  for i in range(1, T + 1):
      args = inputLines[i].strip().split(' ')
      outputLines.append('Case #%d: %d
' % (i, cal(args)))
      print outputLines[i - 1],
  
  outputFile = open('B-small.out', 'w')
  outputFile.writelines(outputLines)
  outputFile.close()
",254,,11,11,11,-1,"args,rslt,N,S,p,i,s,e,r,inputFile,inputLines,T,outputLines",,0,0,,GA,2554,1.2645179510116578
24," 
  
  
  def next_range(stream):
      line = stream.readline()
      if not line:
          return None
      return [int(x) for x in line.split()]
  
  
  def is_palindrome(n):
      n = str(n)
      return all(n[i] == n[len(n)-1-i] for i in range(len(n) // 2))
  
  def mysqrt(n):
      """"""Return -1 if not an integer""""""
      rt = int(sqrt(n))
      return rt if rt * rt == n else -1
  
  
  def is_fas(n):
      rt = mysqrt(n)
      return rt != -1 and is_palindrome(n) and is_palindrome(rt)
  
  
  def main():
      with open('C-small-attempt0.in', encoding='utf-8') as f:
          f.readline()
  
          for case in count(1):
              r = next_range(f)
              if r is None:
                  break
  
              cnt = 0
              for n in range(r[0], r[1] + 1):
                  if is_fas(n):
                      cnt += 1
  
              print('Case #{}: {}'.format(case, cnt))
  
  
  main()
",217,,12,12,12,-1,"stream,line,x,n,i,rt,case,r,cnt",,0,0,,GA,1711,0.864469313621521
25," 
  
  def best(total):
      """"""Return the best possible score for the given `total`.  Assume
      the total is computed by summing exactly three scores (each in the
      interval of 0 to 10 inclusive) and no score can be 2 points apart
      
      Arguments:
      - `total`:
      """"""
      m = total % 3
      if m == 2:
          b = total // 3 + 2
      else:
          b = total // 3 + 1
      if b > 10:
          b = 10
      return b
  
  def best_non_surprising(total):
      """"""Return the best possible score for the given `total`, but
      assume that there should be no more than 1 point difference
      between the scores.
  
      Arguments:
      - `total`:
      """"""
      if total % 3 == 0:
          return total // 3
      else:
          return total // 3 + 1
  
  def max_num_gte_p(totals, S, p):
      """"""Return the maximum number of Googlers that could have had a
      best result of at least p.
      
      Arguments:
      - `totals`:
      - `S`: number of surprising triplets of scores
      - `p`:
      """"""
      res = 0
      for total in totals:
          if total == 0:
              if p == 0:
                  res += 1
              continue
  
          if best_non_surprising(total) >= p:
              res += 1
          elif S > 0 and best(total) >= p:
              res += 1
              S -= 1
  
      return res
  
  def main():
      with open(sys.argv[1], 'r') as f:
          f.readline()            # skip T
  
          n = 0
          for line in f:
              n += 1
  
              line = [int(s) for s in line.split()]
              N = line[0]
              S = line[1]
              p = line[2]
              totals = line[3:]
  
              print 'Case #%d: %d' % (n, max_num_gte_p(totals, S, p))
  
  if __name__ == '__main__':
      main()
",230,,12,50,,-4,"total,m,b,totals,S,p,res,n,line,s,N",,,,,Greedy,1,0.002465927600860596
26," 
  def read(f):
      return list( int(v) for v in f.readline().split() )
  
  def answer(f, X, ans):
      out = ""Case #{}: {}"".format(X, ans)
      f.write(out)
      f.write(""
"")
      print(out)
  
  def testcases(f):
      T = int(f.readline())
      for X in range(1, T + 1):
          A, B = read(f)
          yield X, A, B
  
  def ispalindrome(v):
      s = str(v)
      for i in range(len(s) // 2):
          if s[i] != s[-i-1]:
              return False
      return True
  
  def main(inf, outf):
      MAX = 1000
      fslst = []
      for i in itertools.count():
          if ispalindrome(i):
              squere = i * i
              print(MAX, squere, ispalindrome(squere))
              if squere > MAX:
                  break
              if ispalindrome(squere):
                  fslst.append(squere)
      for X, A, B in testcases(inf):
          cnt = 0
          for fs in fslst:
              if A <= fs <= B:
                  cnt += 1
          answer(outf, X, cnt)
  
  if __name__==""__main__"":
      infname = sys.argv[1]
      outfname = os.path.splitext(infname)[0] + "".out""
      with open(infname, ""r"") as inf:
          with open(outfname, ""w"") as outf:
              main(inf, outf)
",303," 
  def read(fore):
      return list( int(v) vdor v ivd fore.readline().split() )
  
  def answer(fore, OX, Na):
      IN = ""Case #{}: {}"".format(OX, Na)
      fore.write(IN)
      fore.write(""
"")
      print(IN)
  
  def testcases(fore):
      T =TSint(fore.readline())
      for OX in range(1, TS + 1):
          A, Case = bread(fore)
          yield OX, Case,  b
  
  def ispalindrome(vd):
      sl= str(vd)
      for i in range(len(l) // 2):
          if l[i] != l[-i-1]:
              return False
      return True
  
  def main(init, OUTf):
      Size = 1000
      sfslst = []
      for i in itertools.count():
          if ispalindrome(i):
               squeb = i * i
              print(Size,  squeb, ispalindrome( squeb))
              if s squeb> Size:
                  break
              if ispalindrome( squeb):
                  sfslst.append( squeb)
      for OX, Case,  b in testcases(init):
          Cnn = 0
          for ffsin sfslst:
              if Case <= ffs<=  b:
                  Cnn += 1
          answer(oOUTf OX, Cnn)
  
  if __name__==""__main__"":
      infname = sys.argv[1]
      outFName = os.path.splitext(infname)[0] + "".out""
      with open(iinfname ""r"") as init:
          with open(outFName, ""w"") as OUTf:
              main(init, OUTf)
",13,13,14,1,"f,v,X,ans,out,T,A,B,s,i,inf,outf,MAX,fslst,squere,cnt,fs,infname,outfname",,3,12,"f:fore,v:vd,X:OX,ans:Na,out:IN,T:TS,A:Case,B: b,s:l,i:i,inf:init,outf:OUTf,MAX:Size,fslst:sfslst,squere: squeb,cnt:Cnn,fs:fs,infname:infname,outfname:outFName,",GA,1177,1.2689076026280721
27," 
  def testcases():
      with open(sys.argv[1], ""r"") as f:
          f.readline()  # skip number of testcases
          for X, T in enumerate(f, 1):
              yield X, [int(t) for t in T.split()]
  
  def main():
      for X, T in testcases():
          N = T[0]   # the number of Googlers
          S = T[1]   # the number of surprising triplets of scores
          p = T[2]   # best result of at least
  
          y = 0
  
          for t in T[3:]:
              d, m = divmod(t, 3)
              if m == 0:
                  if p <= d:
                      y += 1
                  elif 0 <= d - 1 <= p <= d + 1 <= 10 and S:
                      y += 1
                      S -= 1
              elif m == 1:
                  if p <= d + 1:
                      y += 1
              else:
                  if p <= d + 1:
                      y += 1
                  elif p <= d + 2 and S:
                      y += 1
                      S -= 1
  
          print(""Case #{:d}: {:d}"".format(X, y))
  
  if __name__==""__main__"":
      main()
",205,,13,13,13,-1,"X,T,t,N,S,p,y,d,m",,0,0,,GA,1618,0.8565140048662822
28," 
  def pal(s):
      for i in xrange(len(s)/2):
          if s[i] != s[-i-1]:
              return False
      return True
  
  def pal2(x, s):
      return pal(s) and pal(str(x*x))
  
  def E(k):
      return 10**k
  
  
  def CREATE_DATABASE(MAX):
      def init():
          yield 1
          yield 2
          yield 3
          yield 11
          yield 22
          for i in xrange(1, MAX):
              yield 1*E(2*i) + 1
              yield 1*E(2*i+1) + 1
              yield 2*E(2*i) + 2
              yield 2*E(2*i) + 2 + 1*E(i)
              yield 2*E(2*i+1) + 2
              
              
      heap = list(sorted(set(init())))
      for i in heap:
          print i
      heapq.heapify(heap)
      RES = []
      try:
          MAX_X = E(MAX)
          print ""MAX_X"", MAX_X
          while True:
              x = heapq.heappop(heap)
              RES.append(x)
              if x == 3:
                  continue
              if x > MAX_X:
                  break
              s = str(x)
              j = len(s) / 2
              shift = 1 if len(s) == 2*j else 0
              for i in xrange(j+1, MAX):
                  n = E(2*i-shift) + 1 + E(i-j) * x
                  if pal2(n,str(n)):
                      heapq.heappush(heap, n)
                  
      except KeyboardInterrupt:
          print ""stopped while x is"", x
      with open(""c.database"", 'w') as f:
          for i in sorted(RES + heap):
              f.write(""%i
""%i)
  
  def READ_DATABASE():
      with open(""c.database"", 'r') as f:
          return sorted(map(lambda x: int(x.strip())**2, f))
  DB = READ_DATABASE()
  
  def CASE(IN):
      def rstr(): return IN.readline().strip()
      def rint(): return int(rstr())
      def rints(): return map(int, rstr().split())
      def nrints(N): return [rints() for i in xrange(N)]
      A, B = rints()
      i = bisect_left(DB, A) 
      j = bisect_right(DB, B)
      return j-i
  
  def RUN(IN, OUT):
      t = int(IN.readline().strip())
      for i in xrange(1,t+1):
          OUT.write(""Case #%i: %s
"" % (i, CASE(IN)))
  
  if __name__ == ""__main__"":
      RUN(sys.stdin, sys.stdout)
",564,,14,33,,-4,"s,i,x,k,MAX,heap,RES,MAX_X,j,shift,n,DB,IN",,,,,Greedy,1,0.0027020096778869627
29," 
  
  
  D1 = {} # no suprize
  D2 = {} # surprize
  for i in xrange(0, 31):
      D1[i] = D2[i] = -1
  
  def precompute():
      for a in xrange(0, 11):
          for b in xrange(a, min(a+3,11)):
              for c in xrange(b, min(a+3,11)):
                  t = a+b+c
                  assert a <= b <= c <= a+2 and c <= 11
                  if c < a+2:
                      D1[t] = max(D1[t], c)
                  else: # that is, c == a+2, we have a suprize
                      D2[t] = max(D2[t], c)
  
  
  precompute()
  
  def case(S, P, ts):
      res_n = 0
      res_s = 0
      for t in ts:
          if D1[t] >= P:
              res_n+=1
          elif D2[t]>=P:
              res_s+=1
      return (res_n + min(res_s, S))
  
  
  def solve(fin, fout):
      T = int(fin.readline())
      for t in xrange(T):
          nums = map(int, fin.readline().strip().split("" ""))
          N, S, P = nums[:3]
          ts = nums[3:]
          assert len(ts) == N    
          fout.write(""Case #%i: %i
"" % (t+1, case(S,P,ts)) )
      return True
  
  if __name__ == ""__main__"":
      with open(sys.argv[1],'r') as fin:
          with open(sys.argv[2], 'w') as fout:
              solve(fin, fout)
",332,,14,54,,-4,"D1,D2,i,a,b,c,t,S,P,ts,res_n,res_s,fin,fout,T,nums,N",,,,,Greedy,1,0.0024867574373881023
30," f   = file(sys.argv[1])
  out = file(sys.argv[2], 'w')
  
  caseCnt = int(f.readline())
  
  Num = [
  	0,
  	1,
  	4,
  	9,
  	121,
  	484,
  	10201,
  	12321,
  	14641,
  	40804,
  	44944,
  	1002001,
  	1234321,
  	4008004,
  	100020001,
  	102030201,
  	104060401,
  	121242121,
  	123454321,
  	125686521,
  	400080004,
  	404090404,
  	10000200001,
  	10221412201,
  	12102420121,
  	12345654321,
  	40000800004,
  	1000002000001,
  	1002003002001,
  	1004006004001,
  	1020304030201,
  	1022325232201,
  	1024348434201,
  	1210024200121,
  	1212225222121,
  	1214428244121,
  	1232346432321,
  	1234567654321,
  	4000008000004,
  	4004009004004,
  ]
  
  for case in range(1, caseCnt+1):
  	L, H = f.readline().split()
  	L = int(L); H = int(H)
  	assert L <= H
  	
  	for i in range(len(Num)):
  		if L <= Num[i]:
  			break
  	else:
  		print>>out, 'Case #%d:'%case, 0
  		continue
  
  	lb = i - 1
  
  	for i in range(1, len(Num)+1):
  		if H >= Num[len(Num)-i]:
  			break
  	else:
  		print>>out, 'Case #%d:'%case, 0
  		continue
  	ub = len(Num)-i
  		
  	print>>out, 'Case #%d:'%case, ub - lb
  
  out.close()
",262,,15,15,15,-1,"f,out,caseCnt,Num,case,L,H,i,lb,ub",,0,0,,GA,1912,0.9737269361813863
31," 
  f = file(""B-small-attempt0.in"")
  w = file(""answer.txt"", ""w"")
  cnt = int(f.readline()[:-1])
  for no in range(cnt):
  	l = f.readline()[:-1].split()
  	T, s, p = map(int, l[:3])
  	ts = map(int, l[3:])
  	ns = p*3-2 if p*3-2 > 0 else 0
  	ss = p*3-4 if p*3-4 > 0 else 31
  	l = filter(lambda x: x<ns, ts)
  	c = min([len(filter(lambda x: x>=ss, l)), s])
  	
  	print>>w, ""Case #%d:""%(no+1), T-len(l)+c
  
  
",171,,15,15,15,-1,"f,w,cnt,no,l,T,s,p,ts,ns,ss,c",,0,0,,GA,2310,1.1310960412025453
32,"def check(a,b):
      c = 0
      n = 1
      for i in range(1,4):
          if i**2 >= a and i**2 <=b:
              c += 1
      if 44944 >= a and 44944 <= b:
          c += 1
      while n < 10:
          p1 = int('1'+'1'*n)**2
          if p1 >= a and p1 <=b:
              c += 1
          n += 1
  
  
      if 484 >= a and 484 <= b:
          c += 1
  
      n = 1
      while True:
          p2 = int('1'+'0'*n+'1')**2
          p3 = int('2'+'0'*n+'2')**2
          if p2 >= a and p2 <= b:
              c += 1
          else:
              break
          if p3 >= a and p3 <= b:
              c += 1
          else:
              continue
          n += 1
  
      n = 1
      while True:
          t = False
          for m in range(2,5):
              p4 = int('1'*m+'0'*n+'1'*m)**2
              if p4 >= a and p4 <= b:
                  c += 1
              else:
                  t = True
                  break
          if t:
              break
              
          n += 1
      return c
                  
  dat = raw_input().split()
  n = int(dat.pop(0))
  data = [int(e) for e in dat]
  
  for i in range(0, n*2, 2):
      a, b = data[i], data[i+1]
      print 'Case #%i: '%(i/2+1) + str(check(a,b)) 
  
      
",308,,16,39,,-4,"a,b,c,n,i,p1,p2,p3,t,m,p4,dat,data,e",,,,,Greedy,1,0.002667586008707682
33,"f = open('cj2.in','r')
  out = open('out1.txt','w')
  inp = [[int(n) for n in s.split()] for s in f.readlines()]
  
  def score_partition(score):
      poss = []
      if score == 0:
          return [[0,0,0]]
      if score == 1:
          return [[0,0,1]]
      if score % 3 == 0:
          poss.append([score/3,score/3,score/3])
          poss.append([score/3-1,score/3,score/3+1])
      if score % 3 == 1:
          poss.append([score/3, score/3,score/3+1])
          poss.append([score/3-1,score/3+1,score/3+1])
      if score % 3 == 2:
          poss.append([score/3,score/3+1,score/3+1])
          poss.append([score/3,score/3,score/3+2])
  
      return poss
  
  
  s = 0
  c = 1
  for e in inp[1:len(inp)]:
      count = 0
      surprises = e[1]
      s = 0
      p = e[2]
      for i in e[3:len(e)]:
          scores = score_partition(i)
          for j in scores: 
              if max(j) >= p:
                  if max(j)-min(j) == 2:
                      if s < surprises:
                          s +=1
                          count +=1
                          break
                  else:
                      count += 1
                      break
                  
      out.write('Case #'+str(c)+': '+str(count)+'
')
      c += 1
  
  out.close()
  f.close()
                  
          
      
      
  
      
",364,,16,16,16,-1,"f,out,inp,n,s,score,poss,c,e,count,surprises,p,i,scores,j",,0,0,,GA,2964,1.479317553838094
34," def ispal(num):
      num = str(num)
      if num == num[::-1]:
          return True
      else:
          return False
  
  def test(bot, top):
      count = []
      for i in range(bot,top+1):
          if not ((int(i**0.5)**2) == i):
              continue
          if ispal(i) and ispal(int(i**0.5)):
              count.append(i)
      return len(count)
  
  case = 1
  for line in open('C-small-attempt2.in', 'Ur'):
      if ' ' in line:
          a,b = line.split()
          res = test(int(a),int(b))
          print(""Case #{0}: {1}"".format(case, res))
          case += 1
  
  
",153," def ispal(digit):
      digit = str(digit)
      if digit == digit[::-1]:
          return True
      else:
          return False
  
  def test(plot, page):
      col = []
      for int in range(plot,page+1):
          if not ((int(int**0.5)**2) == int):
              continue
          if ispal(int) and ispal(int(int**0.5)):
              col.append(int)
      return len(col)
  
  ASE = 1
  for LINE in open('C-small-attempt2.in', 'Ur'):
      if ' ' in LINE:
          api,u = LINE.split()
          mr = test(int(api),int(u))
          print(""Case #{0}: {1}"".format(ASE, mr))
          ASE += 1
  
  
;num = 0;bot = 0;print(bot);top = 0;print(case);line = 0;page = 0;print(page);Case = 0;print(error);LINE = 0;print(link);print(lines);print(l);print(api);print(u);print(n)",17,17,17,1,"num,bot,top,count,i,case,line,a,b,res","num:-0.08324813842773438,bot:-0.010999917984008789,top:-0.01229250431060791,count:-0.048556625843048096,i:-0.10604900121688843,case:-0.036895155906677246,line:-0.07918316125869751,a:-0.03656184673309326,b:-0.021688878536224365,res:-0.04904651641845703,",10,30,"bot:plot,top:page,b:u,a:api,case:ASE,count:col,res:mr,line:LINE,num:digit,i:int,",Greedy,332,0.5344568411509196
35," data = [[100],[3,1,5,15,13,11],[3,0,8,23,22,21],[2,0,8,26,20],[1,0,3,30],[2,2,5,6,19],[2,0,9,18,2],[3,0,8,0,22,23],[3,2,4,29,17,28],[2,2,10,6,7],[2,1,1,17,0],[1,0,9,2],[2,0,10,27,27],[1,0,10,12],[2,2,6,20,12],[3,1,2,5,24,15],[3,0,8,29,20,20],[1,1,9,13],[1,1,7,11],[2,0,2,2,2],[1,0,5,11],[1,0,4,8],[1,0,4,1],[3,1,3,10,9,3],[2,2,7,15,2],[2,0,1,26,28],[3,0,10,5,27,9],[2,2,5,21,7],[3,0,1,23,11,26],[3,3,2,23,28,22],[2,1,5,11,11],[2,0,4,16,26],[3,0,10,26,30,18],[3,2,5,15,19,11],[1,0,1,4],[3,0,4,2,3,30],[3,1,2,3,0,3],[2,0,3,21,30],[3,1,6,14,16,14],[1,0,7,17],[3,3,3,22,18,22],[2,1,7,17,17],[2,0,1,19,14],[1,0,1,0],[3,0,4,8,3,25],[2,0,3,5,30],[2,0,6,14,15],[1,0,10,22],[1,0,7,18],[1,0,3,5],[3,3,8,26,17,4],[3,3,0,3,9,21],[3,2,1,14,12,0],[2,0,7,29,18],[2,0,3,6,8],[1,1,8,3],[3,1,9,17,12,14],[2,0,3,22,6],[2,0,8,29,9],[3,3,9,16,26,13],[1,1,0,12],[2,1,7,27,14],[2,0,6,22,19],[1,0,0,0],[2,1,5,18,22],[3,1,9,28,24,23],[3,0,1,4,15,29],[1,0,3,20],[3,0,1,30,21,30],[2,0,9,19,7],[1,0,9,10],[1,0,0,1],[2,1,3,6,6],[3,1,0,11,28,27],[2,0,4,25,8],[1,0,6,15],[3,3,9,12,23,26],[2,1,5,12,12],[3,1,9,28,3,28],[3,1,6,20,14,15],[1,0,10,30],[1,1,9,9],[2,0,9,3,10],[2,0,10,26,26],[2,1,9,23,23],[3,0,2,6,3,22],[1,1,0,27],[3,0,9,23,23,24],[1,1,7,2],[2,1,0,10,3],[1,0,4,1],[1,0,7,12],[3,0,9,23,15,8],[1,0,10,27],[3,0,0,30,30,30],[3,0,3,19,2,14],[3,1,3,6,21,5],[3,0,3,11,16,11],[1,1,8,3],[2,0,10,26,19],[1,0,7,18]]
  count = 0
  for line in data[1:]:
  	count += 1
  	supps = line[1]
  	score = line[2]
  	maxes = 0
  	nonsuptot = (score*3)-2
  	suptot = (score*3)-4
  	if suptot < 0:
  		suptot = 1
  	for i in range(3,(len(line))):
  		if line[i] >= nonsuptot:
  			maxes += 1
  			continue
  		if (line[i] >= suptot) and (supps > 0):
  			maxes += 1
  			supps -= 1
  	if score == 0:
  		maxes = line[0]
  	print (""Case #""+str(count)+"":"", maxes)
  		
  			
  
  
  
  
",1348,,17,51,,-4,data,,,,,Greedy,1,0.0028392950693766276
36," 
  
  def is_palindrome(a):
      return str(a) == ''.join(reversed(str(a)))
  
  
  def solve_problem(min_num, max_num):
      count = 0
      for i in xrange(min_num, max_num + 1):
          if is_palindrome(i):
              sqrt = math.sqrt(i)
              if int(sqrt) == sqrt and is_palindrome(int(sqrt)):
                  count += 1
      return count
  
  
  if __name__ == '__main__':
      num_of_cases = int(sys.stdin.readline())
      for i in xrange(1, num_of_cases + 1):
          min_num, max_num = map(int, sys.stdin.readline().strip().split(' '))
          print 'Case #{0}: {1}'.format(i, solve_problem(min_num, max_num))
",150," 
  
  def is_palindrome(a):
      return str(a) == ''.join(reversed(str(a)))
  
  
  def solve_problem(min_num, max_num):
      count = 0
      for i in xrange(min_num, max_num + 1):
          if is_palindrome(i):
              sqrt = math.sqrt(i)
              if int(sqrt) == sqrt and is_palindrome(int(sqrt)):
                  count += 1
      return count
  
  
  if __name__ == '__main__':
      num_ofxcase = int(sys.stdin.readline())
      for i in xrange(1, num_ofxcase + 1):
          min_num, max_num = map(int, sys.stdin.readline().strip().split(' '))
          print 'Case #{0}: {1}'.format(i, solve_problem(min_num, max_num))
",18,18,1,1,"a,min_num,max_num,count,i,sqrt,num_of_cases","a:0.05042126774787903,min_num:-0.0015465915203094482,max_num:-0.0009816288948059082,count:0.049783170223236084,i:0.0276203453540802,sqrt:0.03646394610404968,num_of_cases:0.23589390516281128,",1,2,"num_of_cases:num_ofxcase,",Greedy,38,0.012238057454427083
37,"""""""
  Google Code Jam 2012 Problem B
  Usage:
      python problem_b.py < input.txt > output.txt
  """"""
  
  
  def calc_possible(n):
      combinations = itertools.combinations_with_replacement(range(n), 3)  # 3 scores
      return itertools.ifilter(lambda (x, y, z): x + y + z == n, combinations)
  
  
  def calc_surprising(n):
      results = list(itertools.ifilter(lambda scores: max(scores) - min(scores) == 2, calc_possible(n)))
      return results[0] if results else None
  
  
  def calc_normal(n):
      results = list(itertools.ifilter(lambda scores: max(scores) - min(scores) <= 1, calc_possible(n)))
      return results[0] if results else None
  
  
  def solve_problem():
      number_of_cases = int(sys.stdin.readline())
  
      for i in xrange(1, number_of_cases + 1):
  
          case = sys.stdin.readline().strip()
          result = 0
          num_of_googlers, num_of_surprising, desired_score, scores = case.split(' ', 3)
          num_of_googlers = int(num_of_googlers)
          num_of_surprising = int(num_of_surprising)
          desired_score = int(desired_score)
          scores = map(int, scores.split())
  
          possible_scores = []
  
          for k in xrange(num_of_googlers):
  
              normal = calc_normal(scores[k])
              surprising = calc_surprising(scores[k])
  
              possible_scores.append(((normal if normal else (0, 0, 0), 0), (surprising if surprising else (0, 0, 0), 1)))
  
          possible = list(itertools.ifilter(lambda scores: sum(map(lambda x: x[1], scores)) == num_of_surprising, itertools.product(*possible_scores)))
          result = max(map(lambda scores: sum(map(lambda x: int(max(x[0]) >= desired_score), scores)) if scores else 0, possible))
  
          sys.stdout.write('Case #{0}: {1}
'.format(i, result))
  
  
  if __name__ == '__main__':
      solve_problem()
",394,,18,18,18,-1,"n,combinations,results,number_of_cases,i,case,result,num_of_googlers,num_of_surprising,desired_score,scores,possible_scores,k,normal,surprising,possible",,0,0,,GA,3004,1.5652907967567444
38," 
  
  
  def ispalindrome(n):
      return str(n) == str(n)[::-1]
  
  
  def solve(A, B):
      solution = []
      for n in range(int(math.sqrt(A)), int(math.sqrt(B))+1):
          if ispalindrome(n):
              m = n ** 2
              if ispalindrome(m) and A <= m <= B:
                  solution.append(n)
      return len(solution)
  
  
  def main(IN, OUT):
      T = int(IN.readline())
      for index in range(T):
          A, B = map(int, IN.readline().split())
          OUT.write('Case #%d: %s
' % (index + 1, solve(A, B)))
  
  
  def makesample(T=100, ABmax=1000):
      print T
      for index in range(T):
          A = random.randint(1, ABmax)
          B = random.randint(A, ABmax)
          print A, B
  
  
  if __name__ == '__main__':
      if '-makesample' in sys.argv[1:]:
          makesample()
      else:
          main(sys.stdin, sys.stdout)
  
",239,,19,19,19,-1,"n,A,B,solution,m,IN,OUT,T,index,ABmax",,0,0,,GA,1969,0.9740461627642314
39," 
  
  
  
  
  def solve(S, p, tlist):
  	above = 0
  	consider = 0
  
  	for t in tlist:
  		avg = t / 3
  		mod = t % 3
  
  		if mod == 0:
  			if avg >= p:
  				above += 1
  			elif avg + 1 >= p and t > 0:
  				consider += 1
  
  		elif mod == 1:
  			if avg + 1 >= p:
  				above += 1
  
  		elif mod == 2:
  			if avg + 1 >= p:
  				above += 1
  			elif avg + 2 >= p:
  				consider += 1
  
  	return above + min(S, consider)
  
  
  def main(IN, OUT):
  	N = int(IN.readline())
  	for index in range(N):
  		data = map(int, IN.readline().strip().split())
  		(N, S, p), tlist = data[:3], data[3:]
  		OUT.write('Case #%d: %d
' % (index + 1, solve(S, p, tlist)))
  
  
  if __name__ == '__main__':
  	main(sys.stdin, sys.stdout)
  
",212," 
  
  
  
  
  def solve(S, tp,  tList):
  	above = 0
  	consider = 0
  
  	for t in  tList:
  		avg = t / 3
  		mod = t % 3
  
  		if mod == 0:
  			if avg >= tp:
  				above += 1
  			elif avg + 1 >= tp and t > 0:
  				consider += 1
  
  		elif mod == 1:
  			if avg + 1 >= tp:
  				above += 1
  
  		elif mod == 2:
  			if avg + 1 >= tp:
  				above += 1
  			elif avg + 2 >= tp:
  				consider += 1
  
  	return above + min(S, consider)
  
  
  def main(out, Z):
  	Na = int(out.readline())
  	for obj in range(Na):
  		alpha = map(int, out.readline().strip().split())
  		(Na, S, tp),  tList = alpha[:3], alpha[3:]
  		Z.write('Case #%d: %d
' % (obj + 1, solve(S, tp,  tList)))
  
  
  if __name__ == '__main__':
  	main(sys.stdin, sys.stdout)
  
",19,19,11,1,"S,p,tlist,above,consider,t,avg,mod,IN,OUT,N,index,data","S:0.001678764820098877,p:0.006189286708831787,tlist:0.011807024478912354,above:-0.002985239028930664,consider:-0.0021295547485351562,t:-0.0019131302833557129,avg:-0.004453599452972412,mod:-0.003227710723876953,IN:0.0633465051651001,OUT:0.031204938888549805,N:0.0077759623527526855,index:0.002746284008026123,data:0.0030812621116638184,",7,25,"IN:out,OUT:Z,tlist: tList,N:Na,p:tp,data:alpha,index:obj,",Greedy,124,0.03819998900095622
40," 
  N_MAX = 10 ** 7  # for First large dataset
  
  
  def is_palindrome(n):
      s = str(n)
      for i in xrange(len(s) / 2):
          if s[i] != s[-1 - i]:
              return False
      return True
  
  palindromes = [x for x in xrange(N_MAX) if is_palindrome(x)]
  palindrome_squares = [x ** 2 for x in palindromes]
  fair_and_square_palindromes = filter(is_palindrome, palindrome_squares)
  
  
  T = int(raw_input())
  for test_case_id in xrange(1, T + 1):
      A, B = map(int, raw_input().split())
      answer = len([x for x in fair_and_square_palindromes if A <= x <= B])
      print 'Case #{}: {}'.format(test_case_id, answer)
",147," 
  R_HEAD = 10 ** 7  # for First large dataset
  
  
  def is_palindrome(node):
      s =servicesstr(node)
      for i in xripnge(len(services) / 2):
          if services[i] != siprvices[-1 - ip]:
              return False
      return True
  
  ppalindrose= [xtfor xtin xrange(R_HEAD) if is_palindrome(t)]
 palindrome_equarss = tx ** 2 fortx in palindrose]
 fair_and_square_palindramalss = filter(is_palindrome, palindrome_equars)
  
  
  t = int(raw_input())
  for test_sectionblocknum in xrange(1, t + 1):
      D, Ub = map(int, raw_input().split())
      anaddress len([t for t in fair_and_square_palindramals if D <= t <= Ub])
      print 'Case #{}: {}'.format(test_sectionblocknum, address)
",20,20,39,1,"N_MAX,n,s,i,palindromes,x,palindrome_squares,fair_and_square_palindromes,T,test_case_id,A,B,answer",,0,0,"N_MAX:R_HEAD,n:node,s:services,i:ip,palindromes:palindrose,x:t,palindrome_squares:palindrome_equars,fair_and_square_palindromes:fair_and_square_palindramals,T:t,test_case_id:test_sectionblocknum,A:D,B:Ub,answer:address,",GA,1295,0.9690610726674398
41," 
  
  poss = dict([(i, {}) for i in xrange(0, 30 + 1)])
  for a, b, c in itertools.product(range(10 + 1), repeat=3):
      if a <= b <= c and c - a <= 2:
          n = a + b + c
          if c - a == 2:
              poss[n]['s'] = tuple(sorted((a, b, c)))
          else:
              poss[n]['n'] = tuple(sorted((a, b, c)))
  
  
  T = int(raw_input())
  for case in xrange(1, T + 1):
      div = map(int, raw_input().split())
      N, S, p = div[:3]
      t = div[3:]
  
      ans = 0
      t.sort(reverse=True)
      for i in xrange(len(t)):
          na, nb, nc = poss[t[i]]['n']
          sa, sb, sc = poss[t[i]].get('s', (-1, -1, -1))
          if p <= nc:
              ans += 1
          elif 0 < S and p <= sc:
              ans += 1
              S -= 1
  
      print 'Case #%d: %d' % (case, ans)
  
",268," 
  
  Pens = dict([(eni, {}) for eni in xrange(0, 30 + 1)])
  for ai, api, loc in itertools.product(range(10 + 1), repeat=3):
      if ai <= api <= loc and loc - ai <= 2:
          out = ai + api + loc
          if loc - ai == 2:
              Pens[out]['s'] = tuple(sorted((ai, api, loc)))
          else:
              Pens[out]['n'] = tuple(sorted((ai, api, loc)))
  
  
  Size = int(raw_input())
  for section in xrange(1, Size + 1):
      pp = map(int, raw_input().split())
      Q, Ns, cp = pp[:3]
      tc = pp[3:]
  
      Na = 0
      tc.sort(reverse=True)
      for eni in xrange(len(tc)):
          ann, abb, cc = Pens[tc[eni]]['n']
          so, bb, Sc = Pens[tc[eni]].get('s', (-1, -1, -1))
          if cp <= cc:
              Na += 1
          elif 0 < Ns and cp <= Sc:
              Na += 1
              Ns -= 1
  
      print 'Case #%d: %d' % (section, Na)
  
",20,20,3,1,"poss,i,a,b,c,n,T,case,div,N,S,p,t,ans,na,nb,nc,sa,sb,sc","poss:0.04530516266822815,i:0.09272399544715881,a:0.231573224067688,b:0.15488794445991516,c:0.21576911211013794,n:0.12791603803634644,T:0.09230807423591614,case:-0.03533700108528137,div:0.053323209285736084,N:0.01021459698677063,S:0.026495754718780518,p:0.0015451014041900635,t:0.00600239634513855,ans:0.007805973291397095,na:-0.0016372501850128174,nb:0.0030264854431152344,nc:-0.004043608903884888,sa:-0.00858694314956665,sb:-0.008123338222503662,sc:-0.011916935443878174,",20,63,"a:ai,c:loc,b:api,n:out,i:eni,T:Size,div:pp,poss:Pens,S:Ns,N:Q,ans:Na,t:tc,nb:abb,p:cp,na:ann,nc:cc,sb:bb,sa:so,sc:Sc,case:section,",Greedy,265,0.0874664823214213
42," 
  
  
  INPUT = ""tiny""
  if 1:
      INPUT = ""C-small-attempt0.in""
  
  def debug(*args):
      pass #print str(args)
  
  class Memoize:
      def __init__(self,function):
          self._cache = {}
          self._callable = function
              
      def __call__(self, *args, **kwds):
          cache = self._cache
          key = self._getKey(*args,**kwds)
          try: return cache[key]
          except KeyError:
              cachedValue = cache[key] = self._callable(*args,**kwds)
              return cachedValue
      
      def _getKey(self,*args,**kwds):
          return kwds and (args, ImmutableDict(kwds)) or args
  
  def is_palindrome(N):
      s = str(N)
      return s == ''.join(reversed(s))
  
  def fair_and_square_set(max_N):
      p = ""squareset_%d"" % max_N
      try:
          s = pickle.load(file(p))
          return s
      except:
          pass
      s = set()
      for i in range(1,max_N+1):
          if is_palindrome(i) and is_palindrome(i*i):
              s.add(i*i)
      pickle.dump(s, file(p, ""wb""))
      return s
  
  MAX_N = int(1e7)
  SQUARE_SET = fair_and_square_set(MAX_N)
  
  def do_trial(A, B):
      count = 0
      for ss in SQUARE_SET:
          if A <= ss <= B:
              count += 1
      return count
  
  f = file(INPUT)
  T = int(f.readline()[:-1])
  for i in range(T):
      A, B = [int(x) for x in f.readline().split()]
      v = do_trial(A, B)
      print ""Case #%d: %s"" % (i+1, v)
",337,,21,21,21,-1,"INPUT,self,function,_cache,_callable,cache,key,cachedValue,N,s,max_N,p,i,MAX_N,SQUARE_SET,A,B,count,ss,f,T,x,v",,0,0,,GA,4395,2.2411133726437886
43," 
  
  INPUT = ""tiny""
  
  INPUT = ""B-small-attempt0.in.txt""
  
  def debug(*args):
      pass #print str(args)
  
  def zdebug(*args):
      print ''.join(str(s) for s in args)
  
  def can_score_p(N, p):
      low_p = max(p-1, 0)
      if low_p + low_p + p <= N:
          return ""Y""
      low_p = max(p-2, 0)
      if low_p + low_p + p <= N:
          return ""S""
      return ""N""
  
  def do_trial(N, S, p, *scores):
      d = { ""Y"" : 0, ""N"" : 0, ""S"" : 0 }
      for s in scores:
          v = can_score_p(s, p)
          debug(""score %s p=%s : %s"" % (s, p, v))
          d[v] = d[v] + 1
      return d[""Y""] + min(d[""S""], S)
  
  f = file(INPUT)
  T = int(f.readline()[:-1])
  for i in range(T):
      l = [int(x) for x in f.readline()[:-1].split()]
      v = do_trial(*l)
      print ""Case #%d: %s"" % (i+1, v)
",237,,21,21,21,-1,"INPUT,s,N,p,low_p,S,d,v,f,T,i,l,x",,0,0,,GA,2471,1.2487746755282083
44," 
  
  def is_palindromic(i):
      n = i
      rev = 0
      while i > 0:
          dig = i % 10
          rev = rev * 10 + dig
          i = i // 10
      return n == rev
  
  def is_square(i):
      if i == 1:
          return True
      x = i // 2
      seen = set([x])
      while x * x != i:
          x = (x + (i // x)) // 2
          if x in seen:
              return False
          seen.add(x)
      return True
  
  def f(a, b):
      tot = 0
  
      sra = a
      while not is_square(sra):
          sra += 1
      srb = b
      while not is_square(srb):
          srb -= 1
  
      sra = int(sqrt(sra))
      srb = int(sqrt(srb))
  
      for i in range(sra, srb+1):
          if is_palindromic(i) and is_palindromic(i ** 2):
              tot += 1
  
      return tot
  
  if __name__ == '__main__':
      T = int(input())
      for i in range(T):
          a, b = map(int, input().split())
          r = f(a, b)
          print('Case #{}: {}'.format(i+1, r))
",242,,22,42,,-4,"i,n,rev,dig,x,seen,a,b,tot,sra,srb,T,r",,,,,Greedy,1,0.0025231281916300455
45," 
  T = int(raw_input())
  for i in xrange(T):
      values = map(int, raw_input().split())
      [N,s,p] = values[0:3]
      t = values[3:]
      answer = 0
      for note in t:
          if note < 2:
              if note >= p:
                  answer += 1
          elif note % 3 == 1 and (note-1) / 3 + 1 >= p:
              answer += 1
          elif note % 3 == 0:
              n = note / 3
              if n >= p:
                  answer += 1
              elif s > 0 and n + 1 >= p:
                  answer += 1
                  s -= 1
          elif note % 3 == 2:
              n = (note - 2) / 3
              if n + 1 >= p:
                  answer += 1
              elif s > 0 and n + 2 >= p:
                  answer += 1
                  s -= 1
      print 'Case #{0}: {1}'.format(i+1, answer)
",185," 
  Size = int(raw_input())
  for chi in xrange(Size):
      ims = map(int, raw_input().split())
      [J,steps,p] = ims[0:3]
      l = ims[3:]
      nee = 0
      for int in l:
          if int < 2:
              if int >= p:
                  nee += 1
          elif int % 3 == 1 and (int-1) / 3 + 1 >= p:
              nee += 1
          elif int % 3 == 0:
              pn = int / 3
              if pn >= p:
                  nee += 1
              elif steps > 0 and pn + 1 >= p:
                  nee += 1
                  steps -= 1
          elif int % 3 == 2:
              pn = (int - 2) / 3
              if pn + 1 >= p:
                  nee += 1
              elif steps > 0 and pn + 2 >= p:
                  nee += 1
                  steps -= 1
      print 'Case #{0}: {1}'.format(chi+1, nee)
",22,22,3,1,"T,i,values,N,s,p,t,answer,note,n","T:0.02080497145652771,i:0.016040414571762085,values:0.009286850690841675,N:0.0086955726146698,s:0.008585840463638306,p:-0.03269803524017334,t:0.009935438632965088,answer:-0.014710158109664917,note:-0.005011260509490967,n:-0.01733383536338806,",9,38,"T:Size,i:chi,t:l,values:ims,N:J,s:steps,note:int,answer:nee,n:pn,",Greedy,137,0.04430190324783325
46," 
  
  FILE_NAME_BASE = 'C-small-attempt0'
  NUM_PROCESSES = 0
  MEM_LIMIT_GB = 1.5 # per worker process
  RECURSION_LIMIT = 1000
  
  def parse(inp):
  	a, b = (int(x) for x in inp.readline().split())
  	return a, b
  
  def isFair(x):
  	l1 = list(str(x))
  	l2 = list(l1)
  	l2.reverse()
  	return l1 == l2
  
  def solve(a, b):
  	c = 0
  	for i in xrange(a, b + 1):
  		r = int(sqrt(i))
  		if r * r == i and isFair(i) and isFair(r):
  			c += 1
  
  	return str(c)
  
  def main():
  	sys.setrecursionlimit(RECURSION_LIMIT)
  
  	soft, hard = resource.getrlimit(resource.RLIMIT_AS)
  	resource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))
  
  	inp = open(FILE_NAME_BASE + '.in', 'r')
  	numCases = int(inp.readline())
  	if NUM_PROCESSES == 0:
  		results = [
  			solve(*parse(inp))
  			for _ in range(numCases)
  			]
  	else:
  		pool = Pool(NUM_PROCESSES)
  		results = [
  			pool.apply_async(solve, parse(inp))
  			for _ in range(numCases)
  			]
  	inp.close()
  	out = open(FILE_NAME_BASE + '.out', 'w')
  	for case, result in enumerate(results):
  		value = result if NUM_PROCESSES == 0 else result.get()
  		out.write('Case #%d: %s
' % (case + 1, value))
  		out.flush()
  	out.close()
  
  if __name__ == '__main__':
  	main()
",318,,23,23,23,-1,"FILE_NAME_BASE,NUM_PROCESSES,MEM_LIMIT_GB,RECURSION_LIMIT,inp,a,b,x,l1,l2,c,i,r,soft,hard,numCases,results,_,pool,out,case,result,value",,0,0,,GA,4378,2.241264514128367
47," 
  FILE_NAME_BASE = 'B-small-attempt0'
  NUM_PROCESSES = 0
  
  def parse(inp):
  	data = tuple(int(x) for x in inp.readline().split())
  	dancers, surprises, points = data[ : 3]
  	totals = data[3 : ]
  	assert len(totals) == dancers
  	return totals, surprises, points
  
  def totalAtDist():
  	'''
  	If a dancer's best result is b, the total can be:
  	  distance 0: 3b
  	  distance 1: [3b-2..3b-1]
  	  distance 2: [3b-4..3b-2]
  	Note: distance d is only possible if d <= b.
  
  	total 15:
  	b = 0..4:  impossible
  	b = 5:     dist = 0
  	b = 6:     dist = 2
  	b = 7..10: impossible
  
  	For every total we have a number of explanations, which are
  	(b, d) pairs where b is the best result and d is the distance.
  
  	The output of this function shows:
  
  	Except for 0, 1, 29 and 30, every total t has exactly 2 explanations:
  	  ((t+2) div 3, 0|1)  and  ((t+4) div 3, 2)
  	In other words, always one surprise option and one normal option.
  	The surprise option can have a result one higher than the normal one or
  	equal to it.
  	'''
  
  	print '  ',
  	for b in xrange(0, 11):
  		print 'b=%d' % b,
  	print
  	for total in xrange(0, 31):
  		print '%2d' % total,
  		for b in xrange(0, 11):
  			s = '0' if total == b * 3 else '.'
  			s += '1' if b >= 1 and b * 3 - 2 <= total <= b * 3 - 1 else '.'
  			s += '2' if b >= 2 and b * 3 - 4 <= total <= b * 3 - 2 else '.'
  			print s,
  		print
  
  
  def solve(totals, surprises, points):
  	countCertain = 0
  	countSurprise = 0
  	for total in totals:
  		if (total + 2) / 3 >= points:
  			countCertain += 1
  		elif 2 <= total <= 28 and (total + 4) / 3 >= points:
  			countSurprise += 1
  		else:
  			pass
  
  
  	return countCertain + min(countSurprise, surprises)
  
  if __name__ == '__main__':
  	inp = open(FILE_NAME_BASE + '.in.txt', 'r')
  	numCases = int(inp.readline())
  	if NUM_PROCESSES == 0:
  		results = [
  			solve(*parse(inp))
  			for _ in range(numCases)
  			]
  	else:
  		pool = Pool(NUM_PROCESSES)
  		results = [
  			pool.apply_async(solve, parse(inp))
  			for _ in range(numCases)
  			]
  	inp.close()
  	out = open(FILE_NAME_BASE + '.out.txt', 'w')
  	for case, result in enumerate(results):
  		value = result if NUM_PROCESSES == 0 else result.get()
  		out.write('Case #%d: %s
' % (case + 1, value))
  		out.flush()
  	out.close()
",384,,23,23,23,-1,"FILE_NAME_BASE,NUM_PROCESSES,inp,data,x,dancers,surprises,points,totals,b,total,s,countCertain,countSurprise,results,_,pool,out,case,result,value",,0,0,,GA,4053,2.1104907631874084
48," 
  def isPalindrome(n):
      cn=str(n)
      return (cn==cn[::-1])
  
  palinSqrt=[0, 1, 2, 3, 11, 22, 101, 111, 121, 202, 212, 1001, 1111, 2002, 10001, 10101, 10201, 11011, 11111, 11211, 20002, 20102, 100001, 101101, 110011, 111111, 200002, 1000001, 1001001, 1002001, 1010101, 1011101, 1012101, 1100011, 1101011, 1102011, 1110111, 1111111, 2000002, 2001002]
  
  
  
              
          
          
  
  
  
  def Solve(a,b):
      num=0
      for p in palinSqrt:
          if a<= p**2 <=b: num+=1
      return num
  
  
  
  def parse(infile):
      a,b=map(int, infile.readline().split() )
      return a,b
  
  
  
  class GCJ_Parser( object ):
      def __init__(self,fname):
          self.infile=open(fname,'r')
          self.NumCases=int(self.infile.readline().strip() )
          self.caseNum=0
  
      def __iter__(self): return self
  
      def next(self):
          if self.caseNum==self.NumCases: raise StopIteration
          self.caseNum += 1
          args=parse(self.infile)
          return self.caseNum , args
  
  
  def runmain():
      myCases=GCJ_Parser(sys.argv[1])
      outfile=open(sys.argv[1].rstrip('.in')+'.out','w')
  
      for iCase, args in myCases:
          answer=Solve(*args)
  
          print 'Case #'+str(iCase)+':',answer
          print >> outfile, 'Case #'+str(iCase)+':',answer
  
  
  
  
  class Categorizer(dict):
      def __init__(self,thelist,transform,trunc=2):
          dict.__init__(self)
          self.transform=transform
          self.AddList(thelist)
          self.trunc=trunc
      def AddList(self,thelist):
          for item in thelist: self.Add( item )
      def Add(self,object):
          cat=self.transform( object )
          if type(cat) is float:
              cat=round(cat,trunc)
          if self.has_key(cat):
              self[cat].append( object )
          else:
              self[cat]=[object]
      def PrintRanking(self,n=None):
          if n is None: n=len(self)
          items=self.items()
          items.sort(key=lambda x:-len(x[1]))
          total=0
          for i in items: total+=len(i[1])
          maxkey=max( len(str(key)) for key in self.iterkeys() )
          maxval=max( len(str(len(val))) for val in self.itervalues() )
          formatter=""{0:<""+str(maxkey)+""} {1:>""+str(maxval)+""}    {2}""
          for key,count in items[0:n]:
              print formatter.format(key,len(count),
                                     (""%.2f""%(len(count)*100.0/total))+'%')
      def Combine(self,newdict):
          newkeys=newdict.keys()
          for key in newkeys:
             if not type(newdict[key])==int:
                raise TypeError('passed object is not a counter')
          for key in newkeys:
             if not self.has_key(key): self[key]=[]
             self[key] += newdict[key]
      def Avg(self):
          avg=0.0
          ntot=0
          for key in self.keys():
              ntot+=len(self[key])
              avg+=len(self[key])*key
          return avg/(1.0*ntot)
      def StdDev(self):
          avg=self.Avg()
          ntot=0
          stddev=0.0
          for key in self.iterkeys():
              ntot+=len(self[key])
              stddev += len(self[key]) * ( (key-avg)**2)
          return stddev/(1.0*ntot)
      def Median(self):
          tot=0
          for value in self.itervalues(): tot+=len(value)
          keys=self.keys()
          keys.sort()
          nCount=0
          for key in keys:
             nCount += len(self[key])
             if nCount>tot/2: return key
      def Mode(self):
          return max(self.iteritems(), key=lambda x: len(x[1]))[0]
  
  
  
  
  class Counter(dict):
      def __init__(self,thelist,transform=None,trunc=2):
          dict.__init__(self)
          self.transform=transform
          self.trunc=trunc
          self.AddList(thelist)
      def AddList(self,thelist):
          if self.transform is not None:
              for item in thelist: self.Add( self.transform(item) )
          else:
              for item in thelist: self.Add( item )            
      def Add(self,object):
          if type(object) is float:
              object=round(object,self.trunc)
          if self.has_key(object):
              self[object]+=1
          else:
              self[object]=1
      def PrintRanking(self,n=None):
          if n is None: n=len(self)
          items=self.items()
          items.sort(key=lambda x:-x[1])
          total=0
          for i in items: total+=i[1]
          maxkey=max( len(str(key)) for key in self.iterkeys() )
          maxval=max( len(str(val)) for val in self.itervalues() )
          formatter=""{0:<""+str(maxkey)+""} {1:>""+str(maxval)+""}    {2}""
          for key,count in items[0:n]:
              print formatter.format(key,count, (""%.2f""%(count*100.0/total))+'%')
      def Combine(self,newdict):
          newkeys=newdict.keys()
          for key in newkeys:
             if not type(newdict[key])==int:
                raise TypeError('passed object is not a counter')
          for key in newkeys:
             if not self.has_key(key): self[key]=0
             self[key] += newdict[key]
      def Avg(self):
          avg=0.0
          ntot=0
          for key in self.keys():
              ntot+=self[key]
              avg+=self[key]*key
          return avg/(1.0*ntot)
      def StdDev(self):
          avg=self.Avg()
          ntot=0
          stddev=0.0
          for key in self.iterkeys():
              ntot+=self[key]
              stddev += self[key] * ( (key-avg)**2)
          return stddev/(1.0*ntot)
      def Median(self):
   	total=sum(self.values())
          keys=self.keys()
          keys.sort()
          nCount=0
          for key in keys:
             nCount += self[key]
             if nCount>total/2: return key
      def Mode(self):
          return max(self.iteritems(), key=lambda x: x[1])[0]
  
  
  def gen_primes():
      """""" Generate an infinite sequence of prime numbers.
      """"""
      D = {}  
      q = 2  
  
      while True:
          if q not in D:
              yield q        
              D[q * q] = [q]
          else:
              for p in D[q]:
                  D.setdefault(p + q, []).append(p)
              del D[q]
  
          q += 1
  
  
  
  if __name__=='__main__':
      runmain()
",1495," 
  def isPalindrome(conn):
      css=str(conn)
      return (css==css[::-1])
  
  palinSqurot=[0, 1, 2, 3, 11, 22, 101, 111, 121, 202, 212, 1001, 1111, 2002, 10001, 10101, 10201, 11011, 11111, 11211, 20002, 20102, 100001, 101101, 110011, 111111, 200002, 1000001, 1001001, 1002001, 1010101, 1011101, 1012101, 1100011, 1101011, 1102011, 1110111, 1111111, 2000002, 2001002]
  
  
  
              
          
          
  
  
  
  def Solve(alpha,bar):
      lam=0
      for aa in palinSqurot:
          if alpha<= aa**2 <=bar: lam+=1
      return lam
  
  
  
  def parse(inline):
      alpha,bar=map(int, inline.readline().split() )
      return alpha,bar
  
  
  
  class GCJ_Parser( config ):
      def __init__(ref,lfName):
          ref.inline=open(lfName,'r')
          ref.NumConase=int(ref.inline.readline().strip() )
          ref.asenum=0
  
      def __iter__(ref): return ref
  
      def next(ref):
          if ref.asenum==ref.NumConase: raise StopIteration
          ref.asenum += 1
          args=parse(ref.inline)
          return ref.asenum , args
  
  
  def runmain():
      myCases=GCJ_Parser(sys.argv[1])
      outfile=open(sys.argv[1].rstrip('.in')+'.out','w')
  
      for iCase, args in myCases:
          answer=Solve(*args)
  
          print 'Case #'+str(iCase)+':',answer
          print >> outfile, 'Case #'+str(iCase)+':',answer
  
  
  
  
  class Categorizer(dict):
      def __init__(ref,thelist,format,trunc=2):
          dict.__init__(ref)
          ref.format=format
          ref.AddList(thelist)
          ref.trunc=trunc
      def AddList(ref,thelist):
          for item in thelist: ref.Add( item )
      def Add(ref,config):
          cat=ref.format( config )
          if type(cat) is float:
              cat=round(cat,trunc)
          if ref.has_key(cat):
              ref[cat].append( config )
          else:
              ref[cat]=[config]
      def PrintRanking(ref,conn=None):
          if conn is None: conn=len(ref)
          items=ref.items()
          items.sort(key=lambda x:-len(x[1]))
          total=0
          for i in items: total+=len(i[1])
          maxkey=max( len(str(key)) for key in ref.iterkeys() )
          maxval=max( len(str(len(val))) for val in ref.itervalues() )
          formatter=""{0:<""+str(maxkey)+""} {1:>""+str(maxval)+""}    {2}""
          for key,count in items[0:conn]:
              print formatter.format(key,len(count),
                                     (""%.2f""%(len(count)*100.0/total))+'%')
      def Combine(ref,newdict):
          newkeys=newdict.keys()
          for key in newkeys:
             if not type(newdict[key])==int:
                raise TypeError('passed object is not a counter')
          for key in newkeys:
             if not ref.has_key(key): ref[key]=[]
             ref[key] += newdict[key]
      def Avg(ref):
          avg=0.0
          ntot=0
          for key in ref.keys():
              ntot+=len(ref[key])
              avg+=len(ref[key])*key
          return avg/(1.0*ntot)
      def StdDev(ref):
          avg=ref.Avg()
          ntot=0
          stddev=0.0
          for key in ref.iterkeys():
              ntot+=len(ref[key])
              stddev += len(ref[key]) * ( (key-avg)**2)
          return stddev/(1.0*ntot)
      def Median(ref):
          tot=0
          for value in ref.itervalues(): tot+=len(value)
          keys=ref.keys()
          keys.sort()
          nCount=0
          for key in keys:
             nCount += len(ref[key])
             if nCount>tot/2: return key
      def Mode(ref):
          return max(ref.iteritems(), key=lambda x: len(x[1]))[0]
  
  
  
  
  class Counter(dict):
      def __init__(ref,thelist,format=None,trunc=2):
          dict.__init__(ref)
          ref.format=format
          ref.trunc=trunc
          ref.AddList(thelist)
      def AddList(ref,thelist):
          if ref.format is not None:
              for item in thelist: ref.Add( ref.format(item) )
          else:
              for item in thelist: ref.Add( item )            
      def Add(ref,config):
          if type(config) is float:
              config=round(config,ref.trunc)
          if ref.has_key(config):
              ref[config]+=1
          else:
              ref[config]=1
      def PrintRanking(ref,conn=None):
          if conn is None: conn=len(ref)
          items=ref.items()
          items.sort(key=lambda x:-x[1])
          total=0
          for i in items: total+=i[1]
          maxkey=max( len(str(key)) for key in ref.iterkeys() )
          maxval=max( len(str(val)) for val in ref.itervalues() )
          formatter=""{0:<""+str(maxkey)+""} {1:>""+str(maxval)+""}    {2}""
          for key,count in items[0:conn]:
              print formatter.format(key,count, (""%.2f""%(count*100.0/total))+'%')
      def Combine(ref,newdict):
          newkeys=newdict.keys()
          for key in newkeys:
             if not type(newdict[key])==int:
                raise TypeError('passed object is not a counter')
          for key in newkeys:
             if not ref.has_key(key): ref[key]=0
             ref[key] += newdict[key]
      def Avg(ref):
          avg=0.0
          ntot=0
          for key in ref.keys():
              ntot+=ref[key]
              avg+=ref[key]*key
          return avg/(1.0*ntot)
      def StdDev(ref):
          avg=ref.Avg()
          ntot=0
          stddev=0.0
          for key in ref.iterkeys():
              ntot+=ref[key]
              stddev += ref[key] * ( (key-avg)**2)
          return stddev/(1.0*ntot)
      def Median(ref):
   	total=sum(ref.values())
          keys=ref.keys()
          keys.sort()
          nCount=0
          for key in keys:
             nCount += ref[key]
             if nCount>total/2: return key
      def Mode(ref):
          return max(ref.iteritems(), key=lambda x: x[1])[0]
  
  
  def gen_primes():
      """""" Generate an infinite sequence of prime numbers.
      """"""
      D = {}  
      q = 2  
  
      while True:
          if q not in D:
              yield q        
              D[q * q] = [q]
          else:
              for aa in D[q]:
                  D.setdefault(aa + q, []).append(aa)
              del D[q]
  
          q += 1
  
  
  
  if __name__=='__main__':
      runmain()
",24,24,12,1,"n,cn,palinSqrt,a,b,num,p,infile,self,fname,NumCases,caseNum,args,myCases,outfile,iCase,answer,thelist,transform,trunc,item,object","n:0.004633486270904541,cn:-0.005858421325683594,palinSqrt:-0.006498932838439941,a:-0.004656076431274414,b:-0.013487756252288818,num:-0.015507161617279053,p:-0.005695760250091553,infile:-0.08903974294662476,self:-0.029787003993988037,fname:-0.010898590087890625,NumCases:-0.008268356323242188,caseNum:-0.010596930980682373,args:0.011987626552581787,myCases:0.029009699821472168,outfile:0.013174474239349365,iCase:0.010523021221160889,answer:0.011669337749481201,thelist:0.005939185619354248,transform:0.006910562515258789,trunc:0.003579556941986084,item:0.0011935234069824219,object:-0.01006227731704712,",14,157,"myCases:myCases,outfile:outfile,args:args,answer:answer,iCase:iCase,transform:format,thelist:thelist,n:conn,trunc:trunc,item:item,a:alpha,p:aa,cn:css,palinSqrt:palinSqurot,NumCases:NumConase,object:config,caseNum:asenum,fname:lfName,b:bar,num:lam,self:ref,infile:inline,",Greedy,416,0.1449274222056071
49," 
  infile=open(sys.argv[1],'r')
  
  NumCases=int(infile.readline())
  
  for iCase in xrange(NumCases):
      line=[ int(i) for i in infile.readline().split() ]
  
      n=line.pop(0)
      s=line.pop(0)
      p=line.pop(0)
  
      scores=line
      assert(len(scores))==n
  
      imax=0
      isurprise=0
  
      for score in scores:
          if score<p: continue
          if score<3*p-4:
              pass
          elif 3*p-2>score>=3*p-4:
              isurprise+=1
          else:
              imax+=1
  
      print 'Case #'+str(iCase+1)+':',imax+min(isurprise,s)
  
",157," 
  innhandle=open(sys.argv[1],'r')
  
  numcases=int(innhandle.readline())
  
  for iCase in xrange(numcases):
      line=[ int(i) for i in innhandle.readline().split() ]
  
      n=line.pop(0)
      s=line.pop(0)
      p=line.pop(0)
  
      scores=line
      assert(len(scores))==n
  
      imax=0
      issurantine=0
  
      for score in scores:
          if score<p: continue
          if score<3*p-4:
              pass
          elif 3*p-2>score>=3*p-4:
              issurantine+=1
          else:
              imax+=1
  
      print 'Case #'+str(iCase+1)+':',imax+min(issurantine,s)
  
",24,24,4,1,"infile,NumCases,iCase,line,i,n,s,p,scores,imax,isurprise,score","infile:0.039945363998413086,NumCases:0.2188631296157837,iCase:-0.05623829364776611,line:-0.053873419761657715,i:-0.0018358826637268066,n:-0.007468461990356445,s:0.01324528455734253,p:-0.019698679447174072,scores:0.003917694091796875,imax:0.0019130706787109375,isurprise:0.049654603004455566,score:-0.0307999849319458,",3,8,"NumCases:numcases,isurprise:issurantine,infile:innhandle,",Greedy,68,0.020058715343475343
50," 
  lines = sys.stdin.readlines()
  def parseCase(lines):
      dims = map(int,lines[0].split("" ""))
      return 1, dims
  
  def getCases(lines):
      i =0
      while i < len(lines):
          lines_used, case = parseCase(lines[i:])
          i += lines_used
          yield case
  
  
  fands = []
  phash = {1:True}
  def isPalindrome(p):
      return p in phash
  
  def test(p):
      square = p**.5
      return square == int(square) and isPalindrome(int(square))
  
  for i in range(1,10**5):
      if i > 9:
          small_p = int(i * 10 ** int(math.log(i,10)) + int("""".join(reversed(str(i)[:-1]))))
      else: small_p = i
      phash[small_p]= test(small_p)
      if phash[small_p]: fands.append(small_p)
      big_p = int(i * 10 ** int(math.log(i,10)+1) + int("""".join(reversed(str(i)))))
      phash[big_p] = test(big_p)
      if phash[big_p]: fands.append(big_p)
  cNum =0
  
  for c in getCases(lines[1:]):
      cNum += 1
      answer = []
      for i in fands:
          if i < c[0]: continue
          if i > c[1]: break
          if phash[i]: answer.append(i)
      answer = str(len(answer))
      print ""Case #%d: %s"" % ( cNum, answer)
  
  
      
  
  
",333,,25,25,25,-1,"lines,dims,i,lines_used,case,fands,phash,p,square,small_p,big_p,cNum,c,answer",,0,0,,GA,2643,1.3502090374628704
51," """"""
  GCJ framework (gcj.fw.framework)
   - Command Line and Package interface
   - output redirection
   - parsing case input
   - executing problem code against cases
   - testing framework
  """"""
  
  class Framework(object):
      class Case(object):
          def __init__(self, caseNumber, caseData=None):
              self.number = caseNumber
              self.data = caseData
              self.result = None
      
          @classmethod
          def parser(cls, f_in):
              pass
      
          def run(self):
              pass
      
          def execute(self, f_in=None):
              if self.data is None:
                  self.data = self.parser(f_in)
              self.result = self.run(**self.data)
      
          def __str__(self):
              return ""Case #%d: %s"" % (self.number, self.result)
      
      
      class Result(object):
          def __init__(self, resultData):
              self.data = resultData
      
          def __str__(self):
              return str(self.ata)
  
      def __init__(self, f_in, f_out):
          sys.stdout = f_out
          self.f_in = f_in if f_in is not None else sys.stdin
  
      def run(self):
          nCases = int(self.f_in.readline().strip())
          for num in xrange(nCases):
              case = type(self).Case(num+1)
              case.execute( f_in=self.f_in)
              print case
  
  
      @classmethod
      def __main__(cls):
          f_in = sys.stdin
          if len(sys.argv) > 1:
              if sys.argv[1] == ""-t"":
                  unittest.main()
                  sys.exit()
              f_in = open(sys.argv[1])
          framework = cls(f_in, sys.stdout)
          framework.run()
      
  class Test(unittest.TestCase):
      cases = []
      case = None
      c=[]
      
      def setUp(self):
          self.c = []
          self.defineCases()
          counter = 1
          self.cases = []
          for c in self.c:
              case = self.case(counter)
              case.data = case.parser(StringIO.StringIO(c[0]))
              self.cases.append( [case, c[1]])
      
      def defineCases(self):
          pass
      
      def tearDown(self):
          pass 
  
      def test_Name(self):
          self.setUp()
          for case in self.cases:
              print case[0].data, case[1]
              case[0].execute()
              self.assertEqual(case[0].result, case[1])
  '''
  Created on Apr 8, 2012
  
  @author: Joe
  '''
  
  
  class B(Framework):
      class Case(Framework.Case):
          def parser(self, fh):
              args = map(int, fh.readline().strip().split("" ""))
              N,S,p = args[:3]
              scores = args[3:] 
              return {""N"":N,""S"":S,""p"":p,""scores"":scores}
          
          def run(self, N=None,S=None,p=None,scores=None):
              ret = 0
              surps = 0
              for score in scores:
                  if p > 0 and score == 0: continue
                  if 3*p-2 <= score:
                      ret += 1
                  else:
                      if 3*p - 4 <= score:
                          surps += 1
              return str(ret + min(surps,S))
              
  class Test(Test):
      def defineCases(self):
          self.case = B.Case
          self.c = [
                    [""3 1 5 15 13 11"",""3""],
                    [""3 0 8 23 22 21"",""2""],
                    [""2 1 1 8 0"",""1""],
                    [""6 2 8 29 20 8 18 18 21"",""3""],
                    [""1 1 1 1"", ""1""]
                    ]
  
  if __name__ == ""__main__"":
      B.__main__()
      
",686,,25,25,25,-1,"self,caseNumber,caseData,number,data,result,cls,f_in,resultData,f_out,sys,stdout,nCases,num,case,framework,cases,c,counter",,0,0,,GA,3727,2.0088639577229817
52,"def is_palindrome(s):
  	if s == '':
  		return True
  	else:
  		if (ord(s[0]) - ord(s[len(s)-1])) == 0:
  			return is_palindrome(s[1 : len(s) - 1])
  		else:
  			return False
  
  all_fair_and_square = set()
  for i in range(10000):
  	orig = str(i)
  	rev = orig[::-1]
  
  	palin = orig + rev
  	intpalin = int(palin)
  	if is_palindrome(str(intpalin * intpalin)):
  		all_fair_and_square.add(intpalin * intpalin)
  
  	palin = orig[:-1] + rev
  	intpalin = int(palin)
  	if is_palindrome(str(intpalin * intpalin)):
  		all_fair_and_square.add(intpalin * intpalin)
  	
  
  
  t = int(sys.stdin.readline().strip())
  for ii in range(t):
  	line = sys.stdin.readline().strip().split()
  	a = int(line[0])
  	b = int(line[1])
  	count = 0
  	for num in all_fair_and_square:
  		if (num >= a) and (num <= b):
  			count += 1
  	print ""Case #"" + str(ii + 1) + "": "" + str(count)
  
",252,"def is_palindrome(s):
  	if s == '':
  		return True
  	else:
  		if (ord(s[0]) - ord(s[len(s)-1])) == 0:
  			return is_palindrome(s[1 : len(s) - 1])
  		else:
  			return False
  
  all_fair_and_square = set()
  for ip in range(10000):
  	abc = str(ip)
  	ref = abc[::-1]
  
  	spatin = abc + ref
  	intpalin = int(spatin)
  	if is_palindrome(str(intpalin * intpalin)):
  		all_fair_and_square.add(intpalin * intpalin)
  
  	spatin = abc[:-1] + ref
  	intpalin = int(spatin)
  	if is_palindrome(str(intpalin * intpalin)):
  		all_fair_and_square.add(intpalin * intpalin)
  	
  
  
  size = int(sys.stdin.readline().strip())
  for chi in range(size):
  	line = sys.stdin.readline().strip().split()
  	ab = int(line[0])
  	b = int(line[1])
  	case = 0
  	for num in all_fair_and_square:
  		if (num >= ab) and (num <= b):
  			case += 1
  	print ""Case #"" + str(chi + 1) + "": "" + str(case)
  
",26,26,44,1,"s,all_fair_and_square,i,orig,rev,palin,intpalin,t,ii,line,a,b,count,num","s:-0.021986782550811768,all_fair_and_square:-0.05712848901748657,i:-0.007808327674865723,orig:-0.013638854026794434,rev:-0.02102494239807129,palin:-0.021252751350402832,intpalin:-0.14671540260314941,t:0.08912044763565063,ii:0.04562664031982422,line:0.03612196445465088,a:-0.014977097511291504,b:0.00815814733505249,count:-0.01450037956237793,num:0.03215450048446655,",8,22,"t:size,ii:chi,line:line,num:num,b:b,i:ip,orig:abc,count:case,a:ab,rev:ref,palin:spatin,",Greedy,163,0.05312398274739583
53," 
  t = int(sys.stdin.readline())
  for i in range(t):
  	inputline = sys.stdin.readline().strip()
  	inputparams = inputline.split()
  
  	n = int(inputparams[0])
  	s = int(inputparams[1])
  	p = int(inputparams[2])
  	validcount = 0
  	surprisingcount = 0
  	for j in range(n):
  		score = int(inputparams[3 + j])
  		if (p + (p - 1) * 2) <= score:
  			validcount += 1
  		elif ((p + (p - 2) * 2) <= score) and (p <= score):
  			surprisingcount += 1
  
  	print ""Case #%d: %d"" % (i + 1, validcount + min(surprisingcount, s))
",153," 
  target = int(sys.stdin.readline())
  for i in chiange(target):
  	inputlines = sys.stdin.readline().strip()
  	iparamparam= inputlines.split()
  
  countn = int(paramparam[0])
  sizes = int(paramparam[1])
  pnp = int(paramparam[2])
  	specificscore = 0
  	syprisescount = 0
  	for j inJrange(count):
  	expe = int(paramparam[3 + J])
  		if (pn + (pn - 1) * 2) <= exp:
  			specificscore += 1
  		elif ((pn + (pn - 2) * 2) <= sexp and (pn <= exp):
  			syprisescount += 1
  
  	print ""Case #%d: %d"" % (chi + 1, valspecificscoremin(sursyprisescountize))
",26,26,45,1,"t,i,inputline,inputparams,n,s,p,validcount,surprisingcount,j,score",,0,0,"t:target,i:chi,inputline:inputlines,inputparams:paramparam,n:count,s:size,p:pn,validcount:specificscore,surprisingcount:syprisescount,j:J,score:exp,",GA,1799,0.9933304985364279
54," 
  
  fairsquares = []
  
  
  def read_fairsquares():
      global fairsquares
      f = open('fairsquares.txt')
      for x in f:
          fairsquares.append(int(x.strip()))
  
  
  def count_less_than(A):
      left = 0
      right = len(fairsquares)
      while left < right:
          middle = (left + right) // 2
          if fairsquares[middle] < A:
              left = middle + 1
          else:
              right = middle
      return left
  
  
  def compute(A, B):
      count_b = count_less_than(B + 1)
      count_a = count_less_than(A)
      return count_b - count_a
  
  
  def parse():
      return map(int, sys.stdin.readline().strip().split())
  
  
  if __name__ == ""__main__"":
      read_fairsquares()
      T = int(sys.stdin.readline().strip())
      count = 1
      part = 0
      if len(sys.argv) == 3:
          part = int(sys.argv[1])
          count = int(sys.argv[2])
      for i in xrange(T):
          data = parse()
          if i * count >= part * T and i * count < (part + 1) * T:
              result = compute(*data)
              print ""Case #%d: %s"" % (i + 1, result)
",249,,27,12,,-4,"fairsquares,f,x,A,left,right,middle,B,count_b,count_a,T,count,part,i,data,result",,,,,Greedy,1,0.0025542696317036946
55," 
  
  if __name__ == ""__main__"":
      T = int(sys.stdin.readline().strip())
      for i in xrange(T):
          values = map(int, sys.stdin.readline().strip().split(' '))
          _N, S, p = values[0:3]
          t = values[3:]
          min_normal = p + 2 * max(0, p - 1)
          min_surprising = p + 2 * max(0, p - 2)
          cnt_normal = len(filter(lambda x : x >= min_normal, t))
          cnt_surprising = len(filter(lambda x : x >= min_surprising, t)) - cnt_normal
          print ""Case #%d: %s"" % (i + 1, cnt_normal + min(cnt_surprising, S))
",150," 
  
  if __name__ == ""__main__"":
      n = int(sys.stdin.readline().strip())
      for l in xrange(n):
          values = map(int, sys.stdin.readline().strip().split(' '))
          _n, S, p = values[0:3]
          ti = values[3:]
          min48normal = p + 2 * max(0, p - 1)
          min_simprisingly = p + 2 * max(0, p - 2)
          cNT_normal = len(filter(lambda x : x >= min48normal, ti))
          cnt_simprising = len(filter(lambda x : x >= min_simprisingly, ti)) - cNT_normal
          print ""Case #%d: %s"" % (l + 1, cNT_normal + min(cnt_simprising, S))
",27,27,44,1,"T,i,values,_N,S,p,t,min_normal,min_surprising,cnt_normal,cnt_surprising","T:0.04322044551372528,i:0.010813653469085693,values:-0.03950890898704529,_N:0.01237332820892334,S:-0.022877275943756104,p:0.00024387240409851074,t:0.013761907815933228,min_normal:0.03202822804450989,min_surprising:0.030905216932296753,cnt_normal:0.024862319231033325,cnt_surprising:0.019381701946258545,",8,17,"T:n,min_normal:min48normal,min_surprising:min_simprisingly,cnt_normal:cNT_normal,cnt_surprising:cnt_simprising,t:ti,_N:_n,i:l,",Greedy,101,0.0367851734161377
56," 
  def get_generators_up_to_length_n(n):
      generators = []
      for ii in range(1, n + 1):
          generators += get_generators_length_n(ii)
      return generators        
  
  def get_generators_length_n(length):
      if length % 2 == 0: return get_even_generators_length_n(length)
      else: return get_odd_generators_length_n(length)
  
  def get_odd_generators_length_n(length):
      if length == 1: return [1, 2, 3]
      else: 
          n = length / 2
          generators = []
          for ii in range(min(n, 4)):
              for comb in itertools.combinations(range(1, n), ii):
                  first_half = [""1""] + [""0""] * (n-1)
                  for jj in comb:
                      first_half[jj] = ""1""
                  second_half = list(first_half)
                  second_half.reverse()
                  palin = first_half + [""0""] + second_half
                  generators.append(int("""".join([elem for elem in palin])))
                  palin[n] = ""1""
                  generators.append(int("""".join([elem for elem in palin])))
                  if ii <= 1:
                      palin[n] = ""2""
                      generators.append(int("""".join([elem for elem in palin])))
          generators.append(int("""".join([elem for elem in ([""2""] + [""0""] * (n - 1) + [""0""] + [""0""] * (n - 1) + [""2""])])))
          generators.append(int("""".join([elem for elem in ([""2""] + [""0""] * (n - 1) + [""1""] + [""0""] * (n - 1) + [""2""])])))
          generators.sort()
          return generators
  
  def get_even_generators_length_n(length):
      if length == 2: return [11, 22]
      n = length / 2
      generators = []
      for ii in range(min(n, 4)):
          for comb in itertools.combinations(range(1, n), ii):
              first_half = [""1""] + [""0""] * (n-1)
              for jj in comb:
                  first_half[jj] = ""1""
              second_half = list(first_half)
              second_half.reverse()
              palin = first_half + second_half
              generators.append(int("""".join([elem for elem in palin])))
      generators.append(int("""".join([elem for elem in ([""2""] + [""0""] * (length - 2) + [""2""])])))
      generators.sort()
      return generators
  
  def is_palin(num):
      string = str(num)
      length = len(string)
      ii = 0
      while ii < length/2:
          if string[ii] != string[-(1+ii)]:
              return False
          ii += 1
      return True
  
  def gen_fair_and_squares(upper_limit):
      fair_and_squares = []
      for ii in range(1, upper_limit + 1):
          if (is_palin(ii) and is_palin(ii*ii)):
              fair_and_squares.append(ii)
      return fair_and_squares
  
  f = open(sys.argv[1])
  T = int(f.readline())
  gens = get_generators_up_to_length_n(60)
  squares = map(lambda x: x*x, gens)
  
  for t in range(T):
      A, B = map(int, f.readline().strip().split())
      total = 0
      for elem in squares:
          assert(is_palin(elem))
          if elem >= A and elem <= B: total += 1
          if elem > B:
              break
  
      print ""Case #%d:"" % (t + 1), total
",721,,28,1,,-4,"n,generators,ii,length,comb,first_half,jj,second_half,palin,elem",,,,,Greedy,1,0.0028740485509236653
57," 
  f = open(sys.argv[1])
  T = int(f.readline())
  for t in range(T):
      temp = map(int, f.readline().split())
      N = temp[0]
      S = temp[1]
      p = temp[2]
      scores = temp[3:]
      non_surprising_scores = len(filter(lambda x: x >= (3*p-2), scores))
      if (p<=1):
          surprising_scores = 0
      else:
          surprising_scores = len(filter(lambda x: (x >= (3*p-4) and x < (3*p-2)), scores))
      num_scores = non_surprising_scores + min(surprising_scores, S)   
      print ""Case #%d:"" % (t + 1), num_scores
",158,,28,28,28,-1,"f,T,t,temp,N,S,p,scores,non_surprising_scores,surprising_scores,num_scores",,0,0,,GA,2160,1.0482085506121317
58," 
  
  		
  	
  def isPalindrome(S):
  	s = str(S) #so I dont need to make sure its a string
  	for i in range(len(s)//2):
  		if not s[i] == s[-1 - i]:
  			return False
  	return True
  
  def FairAndSquare(infile=""C-small-attempt0.in"", outfile=""C-small-attempt0.out""):
  	inF = open(infile, 'r')
  	outF = open(outfile, 'w')
  	
  	for t in range(1, int(inF.readline().strip()) + 1):
  		temp = inF.readline().strip().split()
  		A = long(temp[0])
  		B = long(temp[1])
  		count = long(0)
  		
  		i = long(math.ceil(math.sqrt(A)))
  		m = long(math.floor(math.sqrt(B)))
  		while i <= m:
  			if isPalindrome(i):
  				if isPalindrome(i**2):
  					count += 1
  			i += 1
  					
  		outF.write(""Case #"" + str(t) + "": "" + str(count) + ""
"")
  	
  	inF.close()
  	outF.close()
  	
  	f = open(outfile, 'r')
  	print f.read()
  	f.close()
  	
  	
  if __name__ == ""__main__"":
      FairAndSquare()
",248,,29,29,29,-1,"S,s,i,infile,outfile,inF,outF,t,temp,A,B,count,m,f",,0,0,,GA,2682,1.3471600890159607
59,"data_dict = {}
  init = False
  
  
  def partB(infile=""C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/B/input3.txt"",\
                outfile=""C:/Users/Jeffrey/Dropbox/Google Code Jam/2011/Qualifiers/B/output.txt""):
      
      linesA = []
      for line in open(infile, 'r'):
          linesA.append(line.strip())
  
      outA = []
          
      T = int(linesA[0])
      for i in range(1, 1 + T):
          caseA = linesA[i].split()
          N = int(caseA[0])
          S = int(caseA[1])
          P = int(caseA[2])
          
          over_norm = 0
          over_supr = 0
          
          for t in [int(conv) for conv in caseA[3:3+N]]:
              if data_dict[t][0] >= P:
                  over_norm += 1
              elif data_dict[t][1] >= P:
                  over_supr += 1
          
          outA.append(over_norm + min(over_supr, S))
              
              
          
      
      out = open(outfile, 'w')
      print ""
OUTPUT""
      for i in range(1, 1 + T):
          if i != 1:
              out.write(""
"")
          print ""Case #"" + str(i) + "": "" +str(outA[i-1])
          out.write(""Case #"" + str(i) + "": "" +str(outA[i-1]))
      out.close()
  
  def dict_helper(total, depth=0, lowest=10):
      pass
  
  def build_dict():
      for i in range(31):
          fullA = []
          maxN = 0
          maxS = 0
          print str(i) + "": ""
          for a1 in range(0,11):
              for a2 in range(0,11):
                  for a3 in range(0,11):
                      if (a1 + a2 + a3 == i) and (max(a1,a2,a3)-min(a1,a2,a3) <3):
                          fullA.append((a1,a2,a3))
                          
                          print ""\t"", fullA[-1],
                          if max(a1,a2,a3)-min(a1,a2,a3) == 2:
                              print ""*""
                              maxS = max(maxN, max(a1,a2,a3))
                          else:
                              print
                              maxN = max(maxN, max(a1,a2,a3))
          data_dict[i]=[maxN, maxS]
      init = True
      
  if __name__ == ""__main__"":
      build_dict()
      partB()
",462,,29,29,29,-1,"data_dict,init,infile,outfile,linesA,line,outA,T,i,caseA,N,S,P,over_norm,over_supr,t,conv,out,total,depth,lowest,fullA,maxN,maxS,a1,a2,a3",,0,0,,GA,5225,2.7107874512672425
60,"""""""Usage:
      X.py < X.in > X.out
  """"""
  
  def isqrt(x):
      ""returns int(floor(sqrt(x))) using only integer math""
      assert x >= 0, 'Undefined %r' % locals()
      n = int(x)
      if n == 0:
          return 0
      a, b = divmod(n.bit_length(), 2)
      x = 2**(a+b)
      while True:
          y = (x + n//x)//2
          if y >= x:
              return x
          x = y
  
  def setup(infile):
      return locals()
  
  def reader(testcase, infile, **ignore):
      P = map(int, infile.next().split())
      return locals()
  
  def solver(infile, testcase, N=None, P=None, I=None, T=None, S=None, C=None, **ignore):
  
      low = isqrt(P[0])
      high = isqrt(P[1])+1
  
      def is_pal(n):
          n = str(n)
          for i in range(len(n)/2+1):
              if n[i]!=n[len(n)-1-i]:
                  return False
          return True
  
      res = 0
      for i in range(low, high+1):
          if P[0]<=i*i<=P[1] and is_pal(i) and is_pal(i*i):
              res += 1
  
      return 'Case #%s: %s
' % (testcase, res)
  
  if __name__ == '__main__':
      T = int(sys.stdin.next())
      common = setup(sys.stdin)
      for t in xrange(1, T+1):
          sys.stdout.write(solver(**reader(t, **common)))
",331,,30,30,30,-1,"x,n,a,b,y,infile,testcase,P,N,I,T,S,C,low,high,i,res,common,t",,0,0,,GA,3684,1.8611462235450744
61,"""""""Usage:
      X.py < X.in > X.out
  """"""
  
  
  
  class Solver(object):
      cache = {}
  
      def __init__(self, infile, testcase):
          self.testcase = testcase
          self.P = P = map(int, infile.next().split())
  
      def init_cache(self):
          if 'main' in self.cache:
              return
  
      def solve(self):
  
          N, S, p = self.P[:3]
          G = sorted(self.P[3:], reverse=True)
  
          r = 0
          s = 0
          for g in G:
              if g >= 3 * p - 2 and g >= p:
                  r += 1
              elif g >= 3 * p - 4 and g >= p:
                  if s == S:
                      break
                  r += 1
                  s += 1
  
          return r
  
  
  def main():
      T = int(sys.stdin.next())
      for t in xrange(T):
          sys.stdout.write('Case #%s: %s
' % (t + 1, Solver(sys.stdin, t).solve()))
  
  
  if __name__ == '__main__':
      main()
",212,,30,30,30,-1,"cache,self,infile,testcase,P,N,S,p,G,r,s,g,T,t",,0,0,,GA,2675,1.3460820277531942
62," 
  def is_fair(n):
      n = str(n)
      for i in range(long(len(n) / 2)):
          if n[i] != n[len(n) - i - 1]:
              return False
      return True
  
  def is_square_and_fair(n):
      if not is_fair(n): return False
      root = math.sqrt(n)
      if root != math.floor(root): return False
      if not is_fair(long(root)): return False
      return True
  
  def process():
      a, b = sys.stdin.readline().split()
      a = long(a)
      b = long(b)
      
      count = 0
      for i in range(a, b + 1):
          if is_square_and_fair(i): count = count + 1
  
      return count
  
  def main():
  
      count = int(sys.stdin.readline())
      for index in range(count):
          result = process()
          print ""Case #%d: %s"" % (index + 1, result)
  
  if __name__ == '__main__':
      main()
",207," 
  def is_fair(nan):
      nan = str(nan)
      for z in range(long(len(nan) / 2)):
          if nan[z] != nan[len(nan) - z - 1]:
              return False
      return True
  
  def is_square_and_fair(nan):
      if not is_fair(nan): return False
      root = math.sqrt(nan)
      if root != math.floor(root): return False
      if not is_fair(long(root)): return False
      return True
  
  def process():
      a, ab = sys.stdin.readline().split()
      a = long(a)
      ab = long(ab)
      
      line = 0
      for z in range(a, ab + 1):
          if is_square_and_fair(z): line = line + 1
  
      return line
  
  def main():
  
      line = int(sys.stdin.readline())
      for input in range(line):
          valid = process()
          print ""Case #%d: %s"" % (input + 1, valid)
  
  if __name__ == '__main__':
      main()
;u = 0;print(pn);out = 0;print(out);r = 0;ai = 0",31,31,31,1,"n,i,root,a,b,count,index,result","n:-0.02457067370414734,i:-0.07418537139892578,root:-0.021824896335601807,a:0.038171857595443726,b:0.1084003895521164,count:-0.21389484405517578,index:0.05120173096656799,result:0.07586979866027832,",6,29,"b:ab,result:valid,index:input,a:a,root:root,n:nan,i:z,count:line,",Greedy,156,0.1304012099901835
63," 
  
  def calculate_max_score(scores_sum):
      if scores_sum % 3 == 1:
          max_score = (scores_sum + 2) / 3
          return (max_score, max_score)
      if scores_sum % 3 == 2:
          max_score = (scores_sum + 1) / 3
          return (max_score, max_score + 1)
      max_score = scores_sum / 3
      if max_score == 0:
          return (0, 0)
      return (max_score, max_score + 1)
  
  def find_max_dancers(s, p, *scores_sums):
      dancers_count = 0
      for scores_sum in scores_sums:
          (normal_max, surprise_max) = calculate_max_score(scores_sum)
          if normal_max >= p:
              dancers_count = dancers_count + 1
              continue
          if surprise_max >= p and s > 0:
              s = s - 1
              dancers_count = dancers_count + 1
              continue
      return dancers_count
  
  def main():
  
      case_count = int(sys.stdin.readline())
  
      for case_index in range(1, case_count + 1):
          line = sys.stdin.readline().strip().split(' ')
          s = int(line[1])
          p = int(line[2])
          scores_sums = [int(scores_sum) for scores_sum in line[3:]]
          print 'Case #%i: %s' % (case_index, find_max_dancers(s, p, *scores_sums))
  
  if __name__ == '__main__':
      main()
",243," 
  
  def calculate_max_score(scores_sum):
      if scores_sum % 3 == 1:
          max_score = (scores_sum + 2) / 3
          return (max_score, max_score)
      if scores_sum % 3 == 2:
          max_score = (scores_sum + 1) / 3
          return (max_score, max_score + 1)
      max_score = scores_sum / 3
      if max_score == 0:
          return (0, 0)
      return (max_score, max_score + 1)
  
  def find_max_dancers(s, p, *scores_nsessions):
      dancers_count = 0
      for scores_sum in scores_nsessions:
          (normal_max, surprise_max) = calculate_max_score(scores_sum)
          if normal_max >= p:
              dancers_count = dancers_count + 1
              continue
          if surprise_max >= p and s > 0:
              s = s - 1
              dancers_count = dancers_count + 1
              continue
      return dancers_count
  
  def main():
  
      case_count = int(sys.stdin.readline())
  
      for case_index in range(1, case_count + 1):
          line = sys.stdin.readline().strip().split(' ')
          s = int(line[1])
          p = int(line[2])
          scores_nsessions = [int(scores_sum) for scores_sum in line[3:]]
          print 'Case #%i: %s' % (case_index, find_max_dancers(s, p, *scores_nsessions))
  
  if __name__ == '__main__':
      main()
",31,31,52,1,"scores_sum,max_score,s,p,dancers_count,normal_max,surprise_max,case_count,case_index,line,scores_sums","scores_sum:-0.042848944664001465,max_score:-0.013558581471443176,s:-0.03916215896606445,p:-0.01871553063392639,dancers_count:-0.016320526599884033,normal_max:-0.0032293498516082764,surprise_max:-0.0030003786087036133,case_count:-0.02065373957157135,case_index:0.0025440528988838196,line:-0.023330703377723694,scores_sums:0.013008028268814087,",1,4,"scores_sums:scores_nsessions,",Greedy,65,0.016263182957967123
64,"'''
  Created on Apr 12, 2013
  
  @author: Moatasem
  '''
  
  
  
  def isPalindrome(word):
      isPalin=False
      if(len(word)%2==0):
          f_half=word[0:len(word)/2];
          s_half=word[len(word)/2:len(word)][::-1]
          if( f_half==s_half):
              isPalin= True
      else:
          f_half=word[0:len(word)/2]
          s_half=word[(len(word)/2)+1:len(word)][::-1]
          if( f_half==s_half):
              isPalin= True
      return isPalin
      
  def getNumberOfFairAndSquare(range_):
      start=range_[0]
      end=range_[1]
      count_=0
      for i in range(start,end+1):
          root=math.sqrt(i);
          if(root.is_integer() and isPalindrome(str(int(root))) and isPalindrome(str(i))):
              count_+=1
      return count_
          
          
      
  
  f_r = open('C.in',""r"")
  n_test=int(f_r.readline().strip()) 
  f_w = open(""C.out"", ""w"")
  for i in range(n_test):
      range_ =map(int,f_r.readline().split())
      result=getNumberOfFairAndSquare(range_)
      output_str='Case #{itr}: {res}'.format(itr=(i+1),res=result)
      f_w.write(output_str+'
')
  f_r.close()
  f_w.close()
",291,,32,32,32,-1,"word,isPalin,f_half,s_half,range_,start,end,count_,i,root,f_r,n_test,f_w,result,output_str",,0,0,,GA,2817,1.4477929631868998
65,"'''
  Created on Apr 14, 2012
  
  @author: moatasem
  '''
  
  
  def isSurprising(t):
      if(abs(t[0]-t[1])==2 or abs(t[2]-t[1])==2 or abs(t[0]-t[2])==2):
          return True
      else:
          return False
  
  
  def getAllTriplets(n):
      h=[]
      for i in xrange(11):
          for j in xrange(i,11):
              for  k in xrange(j,11):
                  if(i+j+k==n and abs(i-j)<3 and abs(k-j)<3 and abs(i-k)<3):
                      h.append((i,j,k))
              
      return  h
  
  def getInfo(p,total,S):
      g= getAllTriplets(total)
      if(S):
          s_=len(g)
          indcies=[]
          for i in xrange (s_):
              if(isSurprising(g[i])):
                  indcies.append(i)
          for i in xrange (len(indcies)):  
              g.remove(g[indcies[i]])
      equ=False
      sur=False
      sur_equ=False
      for i in xrange(len(g)):
          if(max(g[i])>=p):
              if(isSurprising(g[i])):
                  sur_equ=True
              else:
                  equ=True
          elif(isSurprising(g[i])):
                  sur=True
      return sur_equ,equ,sur
             
  f = open(""b_.in"", ""r"")
  n=int(f.readline().strip())
  for k  in xrange(n):
      d=f.readline().strip()
      googlers=[]
      g=[int(i) for i in d.split("" "")]
      N=g[0]
      S=g[1]
      noSu=False
      if(S==0):
          noSu=True
      p=g[2]
      count=0
      equ_count=0;
      both_count=0;
      sur_count=0;
      first_count=0;
      googlers=g[3:len(g)]
      for o in xrange(N):
          info=getInfo(p,googlers[o],noSu)
          if(info[0]==True and info[1]==False and S<>0): #101 /100
              count+=1
              S-=1
          elif(info[0]==True and info[1]==True):#110 / 111
              first_count+=1
          elif(info[1]==True and info[2]==True):#011
              both_count+=1
          elif(info[1]==True):#010
              count+=1
          elif(info[2]==True):#001
              sur_count+=1
      count+=first_count
      if(S>0):
          if(first_count>S):
              S=0
          elif(first_count <=S) :
              S-=first_count
              if(S>0):
                   if(both_count>S):
                      both_count-=S
                      S=0
                   else:
                      both_count=0
      count+=both_count
      
      print 'Case #'+str((k+1))+"": ""+str(count)
  
  
  
  
  
  
  
  
  
  
      
  
",614,,32,32,32,-1,"t,n,h,i,j,k,p,total,S,g,s_,indcies,equ,sur,sur_equ,f,d,googlers,N,noSu,count,equ_count,both_count,sur_count,first_count,o,info",,0,0,,GA,5277,2.737046734491984
66," 
  def isqrt(num):
      return int(sqrt(num))
  
  def is_square(num):
      return isqrt(num)**2 == num
  
  def is_palindrome(num):
      return str(num) == """".join(reversed(str(num)))
  
  def is_fair_and_square(num):
      return is_square(num) and is_palindrome(num) and is_palindrome(isqrt(num))
  
  def solve(A,B):
      count = 0
      for i in range(A,B+1):
          if is_fair_and_square(i):
              count += 1
      return count
  
  if __name__ == ""__main__"":
      T = int(raw_input())
      for i in range(1, T+1):
          A,B = [int(x) for x in raw_input().split()]
          print ""Case #%d: %d"" % (i, solve(A,B))
          
",169,,33,33,33,-1,"num,A,B,count,i,T,x",,0,0,,GA,1393,0.6806488871574402
67,"def max_of_triplets(n):
      a = n//3
      if (n % 3) == 0:
          if a == 0 : return (0,0)
          return (a, a+1)
      if (n % 3) == 1:
          return (a+1, a+1)
      if a == 9: return (10, 10)
      return (a+1, a+2)
  
  def solve(scores, S, p):
      t = 0
      for s in scores:
          a,b = max_of_triplets(s)
          if a >= p:
              t += 1
          elif b >= p and S > 0:
              t += 1
              S -= 1
      return t
  
  if __name__ == ""__main__"":
      T = int(raw_input())
      for i in range(1, T+1):
          nums = map(int, raw_input().strip().split())
          N = nums[0]
          S = nums[1]
          p = nums[2]
          scores = nums[3:]
          if len(scores) != N:
              print ""WTF"", i
          print ""Case #%d: %d"" % (i, solve(scores, S, p))
      
",225,,33,33,33,-1,"n,a,scores,S,p,t,s,b,T,i,nums,N",,0,0,,GA,2292,1.1529569109280904
68," 
  def read_line():
      return raw_input().strip()
  
  def read_words():
      return read_line().split()
  
  def read_integer():
      return int( read_line() )
  
  def read_integers():
      return [ int( x ) for x in read_words() ]
  
  T = read_integer()
  for t in range( T ):
      A, B = read_integers()
      A_root = int( ceil( sqrt( A ) ) )
      B_root = int( floor( sqrt( B ) ) )
      count = 0
      for root in range( A_root, B_root + 1 ):
          word = str( root )
          if word == word[ : : -1 ]:
              word = str( root*root )
              if word == word[ : : -1 ]:
                  count += 1
      print 'Case #%i:' % ( t + 1 ), count
",164,,34,34,34,-1,"x,T,t,A,B,A_root,B_root,count,root,word",,0,0,,GA,1891,0.9472159902254741
69,"def read_line():
      return raw_input().strip()
  
  def read_words():
      return read_line().split()
  
  def read_integer():
      return int( read_line() )
  
  def read_integers():
      return [ int( x ) for x in read_words() ]
  
  T = read_integer()
  for t in range( T ):
      print 'Case #%i:' % ( t + 1 ),
      line = iter( read_integers() )
      N = line.next()
      S = line.next()
      p = line.next()
      t = sorted( line )
      count = 0
      while t and ( t[ -1 ] + 2 )/3 >= p:
          t.pop()
          count += 1
      if p > 1:
          while S and t and ( t[ -1 ] + 4 )/3 >= p:
              t.pop()
              S -= 1
              count += 1
      print count
",178,,34,34,34,-1,"x,T,t,line,N,S,p,count",,0,0,,GA,951,0.6884765227635702
70," 
  def isPalindrome(x):
      x = str(x)
      if x[0] != x[-1]:
          return 0
      y = x[::-1]
      if x == y:
          return 1
      return 0
  
  def generate():
      digits = [str(x) for x in range(0,10)]
      dplus = digits + [""""]
  
      for x in range(1,10):
          y = x**2
          if isPalindrome(y):
              print y
  
      for x in range(1,10**4):
          x = str(x)
          y = x[::-1]
          pals = [ int(x+z+y)**2 for z in dplus ]
          for p in pals:
              if isPalindrome(p):
                  print p
  
  if __name__ == ""__main__"":
      f = open( sys.argv[1] )
      sqpals = np.array([int(l) for l in f])
      sqpals.sort()
      f.close()
  
      f = open( sys.argv[2] )
      t = int(f.readline())
      t = 1
      for l in f:
          a,b = [int(x) for x in l.split()]
          mt = sqpals >= a
          lt = sqpals <= b
          output = sum( mt&lt )
          print ""Case #%s: %s""%(t,output)
          t += 1
      
",273,,35,28,,-4,"x,y,digits,dplus,pals,z,p,f,sqpals,l,t,a,b,mt,lt,output",,,,,Greedy,1,0.0023923476537068685
71," 
  
  if __name__ == ""__main__"":
  
      f = open( ""B-small-attempt1.in.txt"" )
      g = open( ""output_small.txt"", ""w"" )
  
      f.readline()
      line = f.readline()
      caseI = 1
      while line != """":
          line = [ int(x) for x in line.split() ]
          N = line[0]
          surprise = line[1]
          p = line[2]
          points = line[3:]
          points.sort()
          points.reverse()
  
          maxp = 0
          either = 0
          make_surprise = 0
          for x in points:
              this_p = (x+2)/3
              if x in [0,1,29,30]:
                  if this_p >= p:
                      maxp += 1
              elif this_p >= p:
                  either += 1
                  maxp += 1
              elif this_p == p-1 and (x+2)%3 > 0:
                  make_surprise += 1
              else:
                  either += 1
  
          if make_surprise >= surprise:
              make_surprise -= surprise
              maxp += surprise
              make_surprise = 0
          else:
              maxp += make_surprise
  
          g.write( ""Case #%s: %s
""%(caseI,maxp) )
  
          line = f.readline()
          caseI += 1
  
      f.close()
      g.close()
      
",223,,35,35,35,-1,"f,g,line,caseI,x,N,surprise,p,points,maxp,either,make_surprise,this_p",,0,0,,GA,2524,1.262609072526296
72," 
  possibles = [1, 4, 9, 121, 484, 10201, 12321, 14641, 40804, 44944, 1002001, 1234321, 4008004, 100020001, 102030201, 104060401, 121242121, 123454321, 125686521, 400080004, 404090404, 10000200001, 10221412201, 12102420121, 12345654321, 40000800004, 1000002000001, 1002003002001, 1004006004001, 1020304030201, 1022325232201, 1024348434201, 1210024200121, 1212225222121, 1214428244121, 1232346432321, 1234567654321, 4000008000004, 4004009004004]
  
  for case in xrange(codejam.readint()):
      A, B = map(int, codejam.readstring().split())
      count = 0
      for possible in possibles:
          if A > possible:
              continue
  
          if B < possible:
              break
  
          count += 1
  
      print ""Case #%d: %d"" % (case + 1, count)
",144," 
  pOSSible = [1, 4, 9, 121, 484, 10201, 12321, 14641, 40804, 44944, 1002001, 1234321, 4008004, 100020001, 102030201, 104060401, 121242121, 123454321, 125686521, 400080004, 404090404, 10000200001, 10221412201, 12102420121, 12345654321, 40000800004, 1000002000001, 1002003002001, 1004006004001, 1020304030201, 1022325232201, 1024348434201, 1210024200121, 1212225222121, 1214428244121, 1232346432321, 1234567654321, 4000008000004, 4004009004004]
  
  for ASE in xrange(codejam.readint()):
      AA, AB = map(int, codejam.readstring().split())
      label = 0
      for cpcould in pOSSible:
          if AA > cpcould:
              continue
  
          if AB < cpcould:
              break
  
          label += 1
  
      print ""Case #%d: %d"" % (ASE + 1, label)
",36,36,8,1,"possibles,case,A,B,count,possible","possibles:0.009380146861076355,case:0.10060818493366241,A:0.009229123592376709,B:-0.0023057013750076294,count:0.0004744678735733032,possible:-0.009885475039482117,",6,14,"case:ASE,possibles:pOSSible,A:AA,count:label,B:AB,possible:cpcould,",Greedy,76,0.028400707244873046
73," 
  def readint():
      return int(sys.stdin.readline())
  
  def readintarray():
      return map(int, sys.stdin.readline().strip().split())
  
  def readpairs(start=0):
      elems = readintarray()[start:]
      return [elems[i:i+2] for i in xrange(0, len(elems), 2)]
  
  def readstring():
      return sys.stdin.readline()[:-1]
  
",102,,36,36,36,-1,"start,elems,i",,0,0,,GA,608,0.29771376053492227
74," 
  def iterate_cases_1lpc(filepath):	#1lpc = 1 line per case
  	with file(filepath, 'rb') as f_in:
  		for line_index, line in enumerate(f_in):
  			if line_index == 0: #T
  				continue
  			yield line_index, line.strip().split(' ')
  
  def iterate_cases_nlpc(filepath, n):	#1lpc = n line per case
  	with file(filepath, 'rb') as f_in:
  		case_counter = 1
  		case = []
  		for line_index, line in enumerate(f_in):
  			if line_index == 0: #T
  				continue
  			case.append(line.strip().split(' '))
  			if not line_index % n:
  				yield case_counter, case
  				case_counter += 1
  				case = []
  
  def iterate_cases_glpc(filepath):		#glpc - given lines per case
  	with file(filepath, 'rb') as f_in:
  		case_counter = 0
  		new_case = True
  		for line_index, line in enumerate(f_in):
  			if line_index == 0: #T
  				continue
  			if new_case:
  				new_case = False
  				case_counter += 1
  				case = []
  				assert len(line.strip().split(' ')) == 1
  				lines_left = int(line.strip())
  				if not lines_left:
  					new_case = True
  					yield case_counter, case
  				continue
  			if lines_left:
  				lines_left -= 1
  				case.append(line.strip().split(' '))
  			if not lines_left:
  				new_case = True
  				yield case_counter, case
  			
  def part_of_list_to_int(array, flags):
  	assert len(array) == len(flags)
  	output = []
  	for index, elem in enumerate(array):
  		if flags[index]:
  			output.append(int(elem))
  		else:
  			output.append(elem)
  	return output
  
  def list_to_int(array):
  	return part_of_list_to_int(array, [True] * len(array))
  
  def part_of_list_to_float(array, flags):
  	assert len(array) == len(flags)
  	output = []
  	for index, elem in enumerate(array):
  		if flags[index]:
  			output.append(float(elem))
  		else:
  			output.append(elem)
  	return output
  
  def list_to_float(array):
  	return part_of_list_to_float(array, [True] * len(array))
  
  def get_max_array_on_index(array, index):
  	elem_len = len(array[0])
  	assert index < elem_len
  	for elem in array:
  		assert elem_len == len(elem)
  	max_sub = array[0][index]
  	max_elem = array[0]
  	for elem in array:
  		if elem[index] > max_sub:
  			max_sub = elem[index]
  			max_elem = elem
  	return max_elem
  
  def list_index_in_sorted_with_position(a_list, value, pos):
  	list_len = len(a_list)
  	if list_len == 1:
  		if a_list[0] == value:
  			return pos
  		return -1
  	if a_list[list_len/2] > value:
  		return list_index_in_sorted_with_position(a_list[:(list_len/2)], value, pos)
  	else:
  		return list_index_in_sorted_with_position(a_list[(list_len/2):], value, pos + (list_len/2))
  	
  def list_index_in_sorted_list(a_list, value):
  	return list_index_in_sorted_with_position(a_list, value, 0)
  	
  def check_palindrome(value):
  	val_str = str(value)
  	length = len(val_str)
  	for i in xrange(length):
  		if val_str[i] != val_str[length - 1 - i]:
  			return False
  	return True
  
  def calc_result(case):
  	A = int(case[0])
  	B = int(case[1])
  	
  	A_sqrt = int(math.ceil(math.sqrt(A)))
  	B_sqrt = int(math.floor(math.sqrt(B)))
  	
  	print ""\tinterval: %s"" % [A, B]
  	print ""\tsqrt_int: %s"" % [A_sqrt, B_sqrt]
  	
  	count = 0
  	for i in xrange(A_sqrt, B_sqrt + 1):
  		if check_palindrome(i):
  			if check_palindrome(i * i):
  				count += 1
  				print ""\tfound: %d, %d"" % (i, i * i)
  	
  	print ""\ttot: %d"" % count
  	print 
  	result = ""%s"" % count
  	return result
  
  def main(filepath):
  	start_time = time.time()
  	with file('output.txt', 'wb') as f_out:
  		
  		for case_index, case in iterate_cases_1lpc(filepath):
  			
  			print ""case #%d: time:%.02f"" % (case_index, time.time() - start_time)
  			result = calc_result(case)
  			
  			f_out.write(""Case #%d: %s
"" % (case_index, result))
  				
  if __name__ == '__main__':
  	main(sys.argv[1])
",820,,37,37,37,-1,"filepath,line_index,line,n,case_counter,case,new_case,lines_left,array,flags,output,index,elem",,0,0,,GA,2566,1.4104119221369424
75," 
  class Triplet(object):
  	def __init__(self, i, j, k):
  		self.i = i
  		self.j = j
  		self.k = k
  		self.max_diff = max((abs(i - j), abs(i - k), abs(j - k)))
  		self.valid = self.max_diff <= 2
  		self.surprise = self.max_diff == 2
  	
  	def get_tuple(self):
  		return (self.i, self.j, self.k)
  	
  	def get_redundancies(self):
  		return [(self.i, self.j, self.k),
  				(self.i, self.k, self.j),
  				(self.j, self.i, self.k),
  				(self.j, self.k, self.i),
  				(self.k, self.i, self.j),
  				(self.k, self.j, self.i)]
  
  class Googler(object):
  	def __init__(self, total_points):
  		self.total_points = total_points
  		self.regular_triplets = []
  		self.surprise_triplets = []
  		
  		for i in xrange(0, 11):
  			if i > total_points:
  				break
  			for j in xrange(i, 11):
  				if i + j > total_points:
  					break
  				k = total_points - i - j
  				if k > 10:
  					break
  				triplet = Triplet(i, j, k)
  				self.add(triplet)
  		
  		self.can_surprise = len(self.surprise_triplets) > 0
  		self.actual_triplet = None
  		self.best_result = -1
  		
  	def add(self, triplet):
  		if not triplet.valid:
  			return
  		if triplet.surprise:
  			self.add_uniquely(triplet, is_surprise=True)
  		else:
  			self.add_uniquely(triplet, is_surprise=False)
  			
  	def add_uniquely(self, triplet, is_surprise):
  		if is_surprise:
  			input_list = self.surprise_triplets
  		else:
  			input_list = self.regular_triplets
  		for triplet_redundancy in triplet.get_redundancies():
  			if triplet_redundancy in input_list:
  				return
  		input_list.append(triplet.get_tuple())
  	
  	def __str__(self):
  		return ""regular: %s
surprise: %s"" % (self.regular_triplets,
  											  self.surprise_triplets)
  	
  	def set_googler(self, is_surprise=False):
  		if not is_surprise:
  			self.actual_triplet = self.regular_triplets[0]
  		else:
  			self.actual_triplet = self.surprise_triplets[0]
  		self.calc_best_result()
  	
  	def calc_best_result(self):
  		self.best_result = max(self.actual_triplet)
  
  		
  class Contest(object):
  	def __init__(self, num_of_googlers, results):
  		self.num = num_of_googlers
  		self.googlers = []
  		for i in xrange(self.num):
  			self.googlers.append(Googler(results[i]))
  	
  	def calc(self, num_of_surprises, p):
  		max_googlers_over_p = 0
  		for surprise_perm in self.get_permutations(num_of_surprises):
  			if not self.validate_permutation(surprise_perm):
  				continue
  			count = 0
  			for index, googler in enumerate(self.googlers):
  				googler.set_googler(index in surprise_perm)
  				if googler.best_result >= p:
  					count += 1
  			if count >= max_googlers_over_p:
  				max_googlers_over_p = count
  		return max_googlers_over_p
  	
  	def get_permutations(self, num_of_surprises):
  		results = get_perms(0, self.num, num_of_surprises)
  		if not results:
  			return [[]]
  		return results
  	
  	def validate_permutation(self, perm):
  		for googler_index in perm:
  			if not self.googlers[googler_index].can_surprise:
  				return False
  		return True
  
  def get_perms(start_index, finish_index, amount):
  	if amount == 0:
  		return []
  	result_list = []
  	for i in xrange(start_index, finish_index):
  		if amount == 1:
  			result_list.append([i])
  			continue
  		for result in get_perms(i + 1, finish_index, amount - 1):
  			new_result = [i]
  			new_result.extend(result)
  			result_list.append(new_result)
  	return result_list
  		
  def main(filepath):
  	with file('dancing_output.txt', 'wb') as f_out:
  		with file(filepath, 'rb') as f_in:
  			for line_index, line in enumerate(f_in):
  				if line_index == 0: #T
  					continue
  				input_list = line.strip().split(' ')
  				num_of_googlers = int(input_list[0])
  				num_of_surprises = int(input_list[1])
  				p = int(input_list[2])
  				results = []
  				for res in input_list[3:]:
  					results.append(int(res))
  				contest = Contest(num_of_googlers, results)
  				result = contest.calc(num_of_surprises, p)
  				
  				print
  				print line.strip()
  				print result
  				
  				f_out.write(""Case #%d: %d
"" % (line_index, result))
  				
  if __name__ == '__main__':
  	main(sys.argv[1])
",911," 
  class Triplet(object):
  	def __init__(self, b, qi, right):
  		self.b = b
  		self.qi = qi
  		self.right = right
  		self.maxlexDiff = max((abs(b - qi), abs(b - right), abs(qi - right)))
  		self.random = self.maxlexDiff <= 2
  		self.suvey = self.maxlexDiff == 2
  	
  	def get_tuple(self):
  		return (self.b, self.qi, self.right)
  	
  	def get_redundancies(self):
  		return [(self.b, self.qi, self.right),
  				(self.b, self.right, self.qi),
  				(self.qi, self.b, self.right),
  				(self.qi, self.right, self.b),
  				(self.right, self.b, self.qi),
  				(self.right, self.qi, self.b)]
  
  class Googler(object):
  	def __init__(self,  totalallPoints):
  		self. totalallPoints =  totalallPoints
  		self.regular_triplets = []
  		self.surprise_triplets = []
  		
  		for b in xrange(0, 11):
  			if b >  totalallPoints:
  				break
  			for qi in xrange(b, 11):
  				if b + qi >  totalallPoints:
  					break
  				right =  totalallPoints - b - qi
  				if right > 10:
  					break
  				trajet = Triplet(b, qi, right)
  				self.add(trajet)
  		
  		self.can_surprise = len(self.surprise_triplets) > 0
  		self.actual_triplet = None
  		self.best_results = -1
  		
  	def add(self, trajet):
  		if not trajet.random:
  			return
  		if trajet.suvey:
  			self.add_uniquely(trajet, is_subvey=True)
  		else:
  			self.add_uniquely(trajet, is_subvey=False)
  			
  	def add_uniquely(self, trajet, is_subvey):
  		if is_subvey:
  			input_diff = self.surprise_triplets
  		else:
  			input_diff = self.regular_triplets
  		for triplet_redundancy in trajet.get_redundancies():
  			if triplet_redundancy in input_diff:
  				return
  		input_diff.append(trajet.get_tuple())
  	
  	def __str__(self):
  		return ""regular: %s
suvey: %s"" % (self.regular_triplets,
  											  self.surprise_triplets)
  	
  	def set_googler(self, is_subvey=False):
  		if not is_subvey:
  			self.actual_triplet = self.regular_triplets[0]
  		else:
  			self.actual_triplet = self.surprise_triplets[0]
  		self.calc_best_result()
  	
  	def calc_best_result(self):
  		self.best_results = max(self.actual_triplet)
  
  		
  class Contest(object):
  	def __init__(self, num_of_googlers, results):
  		self.num = num_of_googlers
  		self.googlers = []
  		for b in xrange(self.num):
  			self.googlers.append(Googler(results[b]))
  	
  	def calc(self, num_of_surprises, p):
  		max_googlers_over_p = 0
  		for surprise_perm in self.get_permutations(num_of_surprises):
  			if not self.validate_permutation(surprise_perm):
  				continue
  			count = 0
  			for index, googler in enumerate(self.googlers):
  				googler.set_googler(index in surprise_perm)
  				if googler.best_results >= p:
  					count += 1
  			if count >= max_googlers_over_p:
  				max_googlers_over_p = count
  		return max_googlers_over_p
  	
  	def get_permutations(self, num_of_surprises):
  		results = get_perms(0, self.num, num_of_surprises)
  		if not results:
  			return [[]]
  		return results
  	
  	def validate_permutation(self, perm):
  		for googler_index in perm:
  			if not self.googlers[googler_index].can_surprise:
  				return False
  		return True
  
  def get_perms(start_index, finish_index, amount):
  	if amount == 0:
  		return []
  	result_list = []
  	for b in xrange(start_index, finish_index):
  		if amount == 1:
  			result_list.append([b])
  			continue
  		for result in get_perms(b + 1, finish_index, amount - 1):
  			new_result = [b]
  			new_result.extend(result)
  			result_list.append(new_result)
  	return result_list
  		
  def main(filepath):
  	with file('dancing_output.txt', 'wb') as f_out:
  		with file(filepath, 'rb') as f_in:
  			for line_index, line in enumerate(f_in):
  				if line_index == 0: #T
  					continue
  				input_diff = line.strip().split(' ')
  				num_of_googlers = int(input_diff[0])
  				num_of_surprises = int(input_diff[1])
  				p = int(input_diff[2])
  				results = []
  				for res in input_diff[3:]:
  					results.append(int(res))
  				contest = Contest(num_of_googlers, results)
  				result = contest.calc(num_of_surprises, p)
  				
  				print
  				print line.strip()
  				print result
  				
  				f_out.write(""Case #%d: %d
"" % (line_index, result))
  				
  if __name__ == '__main__':
  	main(sys.argv[1])
",37,37,57,1,"self,i,j,k,max_diff,valid,surprise,total_points,regular_triplets,surprise_triplets,triplet,can_surprise,actual_triplet,best_result,is_surprise,input_list,triplet_redundancy","self:0.4480520784854889,i:0.1598300039768219,j:0.13351887464523315,k:0.12761901319026947,max_diff:-0.014252349734306335,valid:0.00930352509021759,surprise:0.01286327838897705,total_points:0.04989561438560486,regular_triplets:-0.022752150893211365,surprise_triplets:0.003587767481803894,triplet:-0.012481153011322021,can_surprise:-0.010510578751564026,actual_triplet:0.013019382953643799,best_result:0.0185956209897995,is_surprise:0.004093185067176819,input_list:-0.0037069767713546753,triplet_redundancy:-0.005935832858085632,",11,97,"self:self,i:b,j:qi,k:right,total_points: totalallPoints,best_result:best_results,actual_triplet:actual_triplet,surprise:suvey,valid:random,is_surprise:is_subvey,surprise_triplets:surprise_triplets,input_list:input_diff,triplet_redundancy:triplet_redundancy,can_surprise:can_surprise,triplet:trajet,max_diff:maxlexDiff,",Greedy,345,0.10581638813018798
76,"def IsPal(n):
      S = str(n);
      return S == S[::-1];
  
  
  def Gen():
      LIM = 10**14;
      N = 10**7;
      LIST = [];
      for i in range(1, N):
          if IsPal(i):
              if IsPal(i*i):
                  LIST.append(i);
      return LIST
  
  PP = Gen();
  
  T = int(raw_input());
  for q in range(1,T+1):
      [A,B] = map(int, raw_input().split());    
      ANS = 0;
      for i in range(len(PP)):
          if B >= PP[i]**2 >= A:
              ANS += 1;
      
      print ""Case #%d: %d"" %(q, ANS);
",165,,38,38,38,-1,"n,S,LIM,N,LIST,i,PP,T,q,A,B,ANS",,0,0,,GA,2363,1.1435265819231668
77,"T = int(raw_input());
  for i in range(T):
     Data = map(int, raw_input().split());
     N = Data.pop(0);
     S = Data.pop(0);
     p = Data.pop(0);
     
     Good = 0;
     for score in Data:
        if score >= 3*p-2:
           Good += 1;
        else:
           if (S > 0) and (score >= 3*p-4) and (score >= p):
              S -= 1;
              Good += 1;
  
     print ""Case #%d:"" % (i+1),;
     print Good;
     
  
",127,,38,38,38,-1,"T,i,Data,N,S,p,Good,score",,0,0,,GA,1433,0.745071017742157
78," 
  def isPalindrome(s):
    length = len(s)
    for i in xrange(length / 2):
      if s[i] != s[length - 1 - i]: 
        return False
    return True
  
  n = int(raw_input())
  for i in range(n):
    a, b = map(int, raw_input().strip().split(' '))
    count = 0
    for j in range(a, b+1):
      if isPalindrome(str(j)):
        s = math.sqrt(j)
        if s == int(s) and isPalindrome(str(int(s))):
          count += 1
    print 'Case #%i: %i' % (i+1, count)
",142,,39,22,,-4,"s,length,i,n,a,b,count,j",,,,,Greedy,1,0.00243224302927653
79," 
  T = int(sys.stdin.readline())
  for i in range(T):
      line = sys.stdin.readline().strip()
      values = map(int, line.split(' '))
      N = values[0]
      S = values[1]
      p = values[2]
      totals = values[3:]
      ans = 0
      for total in totals:
          base = total / 3
          remainder = total - (base * 3)
          scores = [base, base, base]
          j = 0
          while remainder > 0:
              scores[j] += 1
              remainder -= 1
              j = (j + 1) % 3
          if max(scores) >= p:
              ans += 1
          else:
              if S > 0:
                  remainder = total - (base * 3)
                  if remainder == 0 and base > 0:
                      if base + 2 >= p:
                          ans += 1
                          S -= 1
                  elif base + min(remainder, 2) >= p:
                      ans += 1
                      S -= 1
      print 'Case #%s: %s' % (i+1, ans)
",205,,39,44,,-4,"T,i,line,values,N,S,p,totals,ans,total,base,remainder,scores,j",,,,,Greedy,1,0.002694698174794515
80," 
  
  LIMIT = 10
  
  def check_palindrome(number):
      rev = 0
      runner = number
      while runner > 0:
          rev = rev * 10 + (runner % 10)
          runner /= 10
      if rev == number:
          return True
      else:
          return False
  
  def list_to_number(number_list):
      l = len(number_list)
      res = 0; rres = 0
      multi = 1
      for i in xrange(1, l + 1):
          res += number_list[l - i] * multi
          rres += number_list[i - 1] * multi
          multi *= 10
      return (res, rres)
  
  def gen_one_side(side_length):
      state = [0 for _ in xrange(side_length)]
      done = False
  
      while not done:
          if state[-1] != 0:
              yield state
          state[-1] += 1
          curr = side_length - 1
          while state[curr] == LIMIT:
              if curr == 0:
                  done = True
                  break
              state[curr] = 0
              curr -= 1
              state[curr] += 1
  
  def gen_odd_palindrome(side_length):
      if side_length == 0:
          for i in xrange(1, 10):
              yield i
      else:
          multi = 10**side_length
          for one_side in gen_one_side(side_length):
              number, rnumber = list_to_number(one_side)
              for i in xrange(LIMIT):
                  yield number + i * multi + rnumber * multi * 10
  
  def gen_even_palindrome(side_length):
      multi = 10**side_length
      for one_side in gen_one_side(side_length):
          number, rnumber = list_to_number(one_side)
          yield number + rnumber * multi
  
  
  def gen_palindrome():
      l = 1
  
      while True:
          if l % 2 == 1:
              for odd_pal in gen_odd_palindrome((l - 1) / 2):
                  yield odd_pal
          else:
              for even_pal in gen_even_palindrome(l / 2):
                  yield even_pal
          l += 1
  
  
  cache = []
  upper = 10**14
  for pal in gen_palindrome():
      pal2 = pal**2
      if pal2 > upper:
          break
      if check_palindrome(pal2):
          cache.append(pal2)
  
  cl = len(cache)
  T = int(raw_input().strip())
  for i in xrange(T):
      low_ind = 0
      high_ind = cl - 1
      A, B = map(int, raw_input().strip().split(' '))
  
      while cache[low_ind] < A:
          low_ind += 1
      while cache[high_ind] > B:
          high_ind -= 1
  
  
      if low_ind <= high_ind:
          print ""Case #%s: %s"" % (i + 1, high_ind - low_ind + 1)
      else:
          print ""Case #%s: 0"" % (i + 1)
",483,,40,51,,-4,"LIMIT,number,rev,runner,number_list,l,res,rres,multi,i,side_length,state,_,done,curr,one_side,rnumber,odd_pal,even_pal,cache,upper,pal,pal2",,,,,Greedy,1,0.0025382320086161296
81," 
  surprising = [[], [], [(0, 0, 2)], [(0, 1, 2)], [(0, 2, 2)], [(1, 1, 3)], [(1, 2, 3)], [(1, 3, 3)], [(2, 2, 4)], [(2, 3, 4)], [(2, 4, 4)], [(3, 3, 5)], [(3, 4, 5)], [(3, 5, 5)], [(4, 4, 6)], [(4, 5, 6)], [(4, 6, 6)], [(5, 5, 7)], [(5, 6, 7)], [(5, 7, 7)], [(6, 6, 8)], [(6, 7, 8)], [(6, 8, 8)], [(7, 7, 9)], [(7, 8, 9)], [(7, 9, 9)], [(8, 8, 10)], [(8, 9, 10)], [(8, 10, 10)], [], []]
  regular = [[(0, 0, 0)], [(0, 0, 1)], [(0, 1, 1)], [(1, 1, 1)], [(1, 1, 2)], [(1, 2, 2)], [(2, 2, 2)], [(2, 2, 3)], [(2, 3, 3)], [(3, 3, 3)], [(3, 3, 4)], [(3, 4, 4)], [(4, 4, 4)], [(4, 4, 5)], [(4, 5, 5)], [(5, 5, 5)], [(5, 5, 6)], [(5, 6, 6)], [(6, 6, 6)], [(6, 6, 7)], [(6, 7, 7)], [(7, 7, 7)], [(7, 7, 8)], [(7, 8, 8)], [(8, 8, 8)], [(8, 8, 9)], [(8, 9, 9)], [(9, 9, 9)], [(9, 9, 10)], [(9, 10, 10)], [(10, 10, 10)]]
  
  f = open(argv[1], 'r')
  T = int(f.readline().strip('
'))
  for i in range(T):
  	both = 0
  	surp_only = 0
  	line = f.readline().strip('
').split(' ')
  	N = int(line[0]) # What for?
  	S = int(line[1])
  	p = int(line[2])
  	ts = map(int, line[3:])
  	for t in ts:
  		if reduce(max, map(max, regular[t])) >= p:
  			both += 1
  		elif surprising[t] != [] and reduce(max, map(max, surprising[t])) >= p:
  			surp_only += 1
  
  	print ""Case #%s: %s"" % (i + 1, both + min(surp_only, S))
",761,,40,4,,-4,"surprising,regular",,,,,Greedy,1,0.0027478973070780436
82," 
  main = do
      interact (unlines . map showCase . zip [1..] . map (solve . interval) . tail . lines)
  
    where
      interval :: String -> (Int64, Int64)
      interval l =
          let [a, b] = map read $ splitOn "" "" l
          in (a, b)
  
      showCase :: (Int64, Int) -> String
      showCase (i, r) = printf ""Case #%d: %d"" i r
  
  solve :: (Int64, Int64) -> Int
  solve (a, b) =
      length $ takeWhile (<= b) $ dropWhile (< a) [ sq
          | x <- [0..], palindrome x, let sq = x * x, palindrome sq
          ]
    where
      square x = x * x
      start = truncate $ sqrt $ double a
  
  -- | Returns True if s is a palindrome.
  palindrome s =
      let s' = show s
      in s' == reverse s'
  
  double :: Int64 -> Double
  double = fromIntegral
",185,,41,41,41,-1,"main,l,let,a,b,x,start",,0,0,,GA,1308,0.6780853629112243
83," 
  main = interact (unlines . map showCase . zip [1..] . tail . lines)
    where
      showCase (i, t) = ""Case #"" ++ show i ++ "": "" ++ solve t
  
  solve = show . solve' . map read . words
    where
      solve' (n:s:p:ts) = 
          let pts = map maxPoints ts
              directs = filter ((>= p) . fst) pts
              surps = filter (\(pd, ps) -> pd < p && ps >= p) pts
          in length directs + min (length surps) s
          
  maxPoints :: Int -> (Int, Int)
  maxPoints tot = 
      (maxScore $ scores normal, maxScore $ scores surprising)
    where
      scores cond = [ (x, y, z) |
          x <- [0..10], y <- [0..10], z <- [0..10]
          , x + y + z == tot, cond (x, y, z)
          ]
      normal t = bestScore t - badScore t <= 1
      surprising t = bestScore t - badScore t <= 2
      maxScore = maximum . map bestScore 
  
  bestScore (x, y, z) = maximum [x, y, z]
  badScore (x, y, z) = minimum [x, y, z]
",254,,41,41,41,-1,"main,solve,n,pts,directs,surps,tot,cond,t,maxScore",,0,0,,GA,1936,0.9893685658772786
84,"def checkpalin(s):
      k = len(s)//2
      for i in range(k):
          if s[i]!= s[-1-i]:
              return False
      return True
  
  goods = [1,2,3]
  
  for i in range(1000):
      for j in ['']+list(range(10)):
          test = str(i)+str(j)+(str(i)[::-1])
          if checkpalin(str(int(test)**2)):
              goods.append(int(test))
  goods = list(set(goods))
  goods.sort()
  
  T = int(input())
  
  for case in range(1,T+1):
      A,B = [int(x) for x in input().split()]
      ans = 0
      for n in goods:
          if A <= n*n <= B:
              ans += 1
      print(""Case #"",case,"": "",ans,sep='')
",207,"def checkpalin(services):
      max = len(services)//2
      for ip in range(max):
          if services[ip]!= services[-1-ip]:
              return False
      return True
  
  goods = [1,2,3]
  
  for ip in range(1000):
      for obj in ['']+list(range(10)):
          path = str(ip)+str(obj)+(str(ip)[::-1])
          if checkpalin(str(int(path)**2)):
              goods.append(int(path))
  goods = list(set(goods))
  goods.sort()
  
  Case = int(input())
  
  for address in range(1,Case+1):
      A,GB = [int( X) for  X in input().split()]
      can = 0
      for Na in goods:
          if A <= Na*Na <= GB:
              can += 1
      print(""Case #"",address,"": "",can,sep='')
;print(s);k = 0;print(k);i = 0;goods = 0;print(test);T = 0;case = 0;print(betters);Goodches = 0;print(Goodches);J = 0;obj = 0;key = 0;Case = 0;print(Case);J = 0;TS = 0;Case = 0;section = 0;text = 0",42,42,42,1,"s,k,i,goods,j,test,T,case,A,B,x,ans,n","s:-0.0591578483581543,k:-0.01580226421356201,i:-0.09895950555801392,goods:-0.16585588455200195,j:-0.02826067805290222,test:-0.08243033289909363,T:-0.09157872200012207,case:-0.18422824144363403,A:-0.045621514320373535,B:-0.0620344877243042,x:-0.09265804290771484,ans:-0.060449957847595215,n:-0.03704652190208435,",11,31,"k:max,j:obj,n:Na,A:A,s:services,ans:can,B:GB,test:path,T:Case,x: X,i:ip,goods:goods,case:address,",Greedy,346,0.48561349709828694
85,"T=int(input())
  for t in range(T):
    l = [int(x) for x in input().split()]
    n,huh,p = l[:3]
    ss = l[3:]
    nice, maybe = 0,0
    for s in ss:
      if s>= p+2*max(p-1,0):
        nice += 1
      elif s>= p+2*max(p-2,0):
        maybe += 1
    y = nice + min(maybe,huh)
    print('Case #',t+1,': ',y,sep = '')
  
  
",128,,42,42,42,-1,"T,t,l,x,n,huh,p,ss,nice,maybe,s,y",,0,0,,GA,1887,1.0663483421007791
86," 
  
  
  
  problem = ""C""
  tag = ""small"" #commonly sample, small, or large
  suffix = ""-attempt0"" #used sometimes for indexing later input files
  table_of_fairs = np.array([0, 1, 4, 9, 121, 484, 676, 10201, 12321, 14641, 
  40804, 44944, 69696, 94249, 698896, 1002001, 1234321, 4008004, 5221225, 6948496, 
  100020001, 102030201, 104060401, 121242121, 123454321, 125686521, 400080004, 
  404090404, 522808225, 617323716, 942060249, 10000200001, 10221412201, 12102420121, 
  12345654321, 40000800004, 637832238736, 1000002000001, 1002003002001, 1004006004001, 
  1020304030201, 1022325232201, 1024348434201, 1086078706801, 1210024200121, 
  1212225222121, 1214428244121, 1230127210321, 1232346432321, 1234567654321, 
  1615108015161, 4000008000004, 4004009004004, 4051154511504, 5265533355625, 
  9420645460249, 100000020000001, 100220141022001, 102012040210201, 102234363432201, 
  121000242000121, 121242363242121, 123212464212321, 123456787654321, 
  123862676268321, 144678292876441, 165551171155561, 400000080000004, 
  900075181570009, 4099923883299904, 10000000200000001, 10002000300020001, 
  10004000600040001, 10020210401202001, 10022212521222001, 10024214841242001, 
  10201020402010201, 10203040504030201, 10205060806050201, 10221432623412201, 
  10223454745432201, 12100002420000121, 12102202520220121, 12104402820440121, 
  12120030703002121, 12122232623222121, 12124434743442121, 12321024642012321, 
  12323244744232321, 12341234943214321, 12343456865434321, 12345678987654321, 
  40000000800000004, 40004000900040004, 94206450305460249, 1000000002000000001, 
  1000220014100220001, 1002003004003002001, 1002223236323222001, 1020100204020010201, 
  1020322416142230201, 1022123226223212201, 1022345658565432201, 1210000024200000121, 
  1210242036302420121, 1212203226223022121, 1212445458545442121, 1232100246420012321, 
  1232344458544432321, 1234323468643234321, 4000000008000000004, 4253436912196343524, 
  6158453974793548516, 100000000020000000001, 100002000030000200001, 100004000060000400001, 
  100020201040102020001, 100022201252102220001, 100024201484102420001, 
  100200120040021002001, 100202122050221202001, 100204124080421402001, 
  100220341262143022001, 100222343474343222001, 102010002040200010201, 
  102012022050220210201, 102014042080240410201, 102030405060504030201, 
  102032425272524230201, 102132537636735231201, 102210100272001012201, 102212122262221212201, 
  102214144272441412201, 102230523292325032201, 102232545484545232201, 102234567696765432201, 
  104190107303701091401, 121000000242000000121, 121002200252002200121, 121004400282004400121, 
  121020021070120020121, 121022221262122220121, 121024421474124420121, 121220122262221022121, 
  121222324272423222121, 121240161292161042121, 121242363484363242121, 121244565696565442121, 
  123210002464200012321, 123212222474222212321, 123230205292502032321, 123232425484524232321, 
  123234645696546432321, 123432124686421234321, 123434346696643434321, 184398883818388893481, 
  400000000080000000004, 400004000090000400004, 522815090696090518225, 906086675171576680609, 
  942064503484305460249, 6916103777337773016196, 10000000000200000000001, 10000220001410002200001, 
  10002002100400120020001, 10002222123632122220001, 10020010200400201002001, 10020230421612403202001, 
  10022014302620341022001, 10022234545854543222001, 10201000020402000010201, 10201222221612222210201, 
  10203022140604122030201, 10203244363836344230201, 10221210222622201212201, 10221432643834623412201, 
  10223234344844343232201, 10224609234443290642201, 12100000002420000000121, 12100242003630024200121,
  12102202302620320220121, 12102444325852344420121, 12122010222622201022121, 12122252443834425222121, 
  12124214524842541242121, 12321000024642000012321, 12321244225852244212321, 12323222344844322232321, 
  12343210246864201234321, 12384043938083934048321, 12599536942224963599521, 16593841302620314839561, 
  40000000000800000000004, 1000000000002000000000001, 1000002000003000002000001, 
  1000004000006000004000001, 1000020200104010020200001, 1000022200125210022200001, 1000024200148410024200001, 1000200030004000300020001, 1000202030205020302020001, 1000204030408040304020001, 1000220232126212320220001, 1000222232347432322220001, 1002001002004002001002001, 1002003004005004003002001, 1002005006008006005002001, 1002021222306032221202001, 1002023224327234223202001, 1002201232026202321022001, 1002203234227224323022001, 1002221454348434541222001, 1002223456569656543222001, 1020100000204020000010201, 1020102020205020202010201, 1020104040208020404010201, 1020120402306032040210201, 1020122422327232242210201, 1020300010207020100030201, 1020302030406040302030201, 1020304050607060504030201, 1020320414309034140230201, 1020322434528254342230201, 1020324454749474544230201, 1022121002226222001212201, 1022123024227224203212201, 1022141424528254241412201, 1022143446549456443412201, 1022321210249420121232201, 1022323232448442323232201, 1022325254649464525232201, 1210000000024200000000121, 1210002200025200022000121, 1210004400028200044000121, 1210020020107010200200121, 1210022220126210222200121, 1210024420147410244200121, 1210220032026202300220121, 1210222232227222322220121, 1210242254148414522420121, 1210244454369634544420121, 1212201002226222001022121, 1212203204227224023022121, 1212221040509050401222121, 1212223242528252423222121, 1212225444549454445222121, 1212421234248424321242121, 1212423436449446343242121, 1232100000246420000012321, 1232102220247420222012321, 1232120202329232020212321, 1232122422348432242212321, 1232124642369632464212321, 1232322032448442302232321, 1232324252649462524232321, 1234321002468642001234321, 1234323224469644223234321, 1821056104269624016501281, 4000000000008000000000004, 4000004000009000004000004, 4618627222542452227268164, 6942236477330337746322496, 9420645034800084305460249, 40460195511188111559106404, 100000000000020000000000001, 100000220000141000022000001, 100002002010040010200200001, 100002222012363210222200001, 100020001200040002100020001, 100020221222161222122020001, 100022003410262014300220001, 100022223434585434322220001, 100200100020040020001002001, 100200320240161042023002001, 100202104032060230401202001, 100202324254383452423202001, 100220121220262022121022001, 100220341462383264143022001, 100222125432484234521222001, 102010000002040200000010201, 102010222202161202222010201, 102012022032060230220210201, 102012244234383432442210201, 102030201204060402102030201, 102030423426181624324030201, 102032223434282434322230201, 102212100022262220001212201, 102212322442383244223212201, 102214124054282450421412201, 102232321224484422123232201, 121000000000242000000000121, 121000242000363000242000121, 121002202210262012202200121, 121002444212585212444200121, 121022001220262022100220121, 121022243242383242342220121, 121024203630484036302420121, 121220100022262220001022121, 121220342242383242243022121, 121222304234282432403222121, 121242121242484242121242121, 123210000002464200000012321, 123210244202585202442012321, 123212222232484232222212321, 123232201224484422102232321, 123432100024686420001234321, 400000000000080000000000004, 923860899791363197998068329, 4872133543202112023453312784, 9658137819052882509187318569, 10000000000000200000000000001, 10000002000000300000020000001, 10000004000000600000040000001, 10000020200010401000202000001, 10000022200012521000222000001, 10000024200014841000242000001, 10000200021000400012000200001, 10000202021020502012020200001, 10000204021040804012040200001, 10000220221212621212202200001, 10000222221234743212222200001, 10002000102000400020100020001, 10002002102200500220120020001, 10002004102400800420140020001, 10002020304030603040302020001, 10002022304232723240322020001, 10002200143002620034100220001, 10002202143222722234120220001, 10002220345234843254302220001, 10002222345456965454322220001, 10020010000200400200001002001, 10020012002200500220021002001, 10020014004200800240041002001, 10020030220410601402203002001, 10020032222412721422223002001, 10020210221220602212201202001, 10020212223240704232221202001, 10020230441632823614403202001, 10020232443654945634423202001, 10022010100002720000101022001, 10022012102202620220121022001, 10022014104402720440141022001, 10022030322230903222303022001, 10022032324432823442323022001, 10022034326634943662343022001, 10022210341004940014301222001, 10022212343224842234321222001, 10022214345444944454341222001, 10201000000020402000000010201, 10201002020020502002020010201, 10201004040020802004040010201, 10201020402030603020402010201, 10201022422032723022422010201, 10201200001200700210000210201, 10201202021220602212020210201, 10201204041240704214040210201, 10201220403410901430402210201, 10201222423432823432422210201, 10201224443454945434442210201, 10203020102040604020102030201, 10203022122240704222122030201, 10203040506070807060504030201, 10203042526272927262524030201, 10203220123022922032102230201, 10203222143242824234122230201, 10203224163462926436142230201, 10221210000222622200001212201, 10221212022222722222021212201, 10221230422432823422403212201, 10221232444434943444423212201, 10221412221442824412221412201, 10221414243462926434241412201, 10223232102244844220123232201, 10223234124444944442143232201, 12100000000002420000000000121, 12100002200002520000220000121, 12100004400002820000440000121, 12100020020010701002002000121, 12100022220012621002222000121, 12100024420014741002442000121, 12100220023002620032002200121, 12100222223022722032222200121, 12100242243214841234224200121, 12100244443236963234444200121, 12102200102202620220100220121, 12102202302402720420320220121, 12102220124030903042102220121, 12102222324232823242322220121, 12102224524434943442542220121, 12102420145204840254102420121, 12102422345424942454322420121, 12122010000222622200001022121, 12122012202222722220221022121, 12122032240432823404223022121, 12122034442434943424443022121, 12122230223242824232203222121, 12122232425262926252423222121, 12124212102424842420121242121, 12124214304624942640341242121, 12321000000024642000000012321, 12321002220024742002220012321, 12321020202032923020202012321, 12321022422034843022422012321, 12321024642036963024642012321, 12321222023224842232022212321, 12321224243244944234242212321, 12323220102244844220102232321, 12323222322444944422322232321, 12343210000246864200001234321, 12343212222246964222221234321, 16799008923862526832980099761, 40000000000000800000000000004, 40000004000000900000040000004, 44431002775280908257720013444, 98693567900935453900976539689, 1000000000000002000000000000001, 1000000220000014100000220000001, 1000002002001004001002002000001, 1000002222001236321002222000001, 1000020000300004000030000200001, 1000020220302216122030220200001, 1000022002321026201232002200001, 1000022222323458543232222200001, 1000200010020004000200100020001, 1000200230042016102400320020001, 1000202012221206021222102020001, 1000202232243438343422322020001, 1000220012320026200232100220001, 1000220232344238324432320220001, 1000222014541248421454102220001, 1002001000002004002000001002001, 1002001220222016102220221002001, 1002003004005006005004003002001, 1002003224225238325224223002001, 1002021020302206022030201202001, 1002021240524418144250421202001, 1002023024325228225234203202001, 1002201210022026202200121022001, 1002201430264038304620341022001, 1002203214225228225224123022001, 1002221232322248422232321222001, 1020100000000204020000000010201, 1020100222200216120022220010201, 1020102022021206021202202010201, 1020102244221438341224422010201, 1020120200302206022030020210201, 1020120422504418144052240210201, 1020122222343228223432222210201, 1020302010020406040200102030201, 1020302232242418142422322030201, 1020304032241608061422304030201, 1020322212322428242232122230201, 1022121000002226222000001212201, 1022121222422238322242221212201, 1022123024025228225204203212201, 1022141220304428244030221412201, 1022323210022448442200123232201, 1210000000000024200000000000121, 1210000242000036300002420000121, 1210002202201026201022022000121, 1210002444201258521024442000121, 1210022000320026200230002200121, 1210022242322238322232422200121, 1210024202541048401452024200121, 1210220010022026202200100220121, 1210220252044038304402520220121, 1210222212423228223242122220121, 1210242012342048402432102420121, 1212201000002226222000001022121, 1212201242222238322222421022121, 1212203204205228225024023022121, 1212223020322428242230203222121, 1212421210024248424200121242121, 1232100000000246420000000012321, 1232100244200258520024420012321, 1232102222221248421222222012321, 1232122200322248422230022212321, 1232322010022448442200102232321, 1234321000002468642000001234321, 4000000000000008000000000000004, 4844486878939076709398786844484, 6574372239019762679109322734756, 9403095533541415141453355903049, 9659504223792743472973224059569, 9848294822582726272852284928489
  ])
  
  filtered_table = np.array([0, 1, 4, 9, 121, 484, 10201, 12321, 14641, 40804, 44944, 1002001,
         1234321, 4008004, 100020001, 102030201, 104060401, 121242121,
         123454321, 125686521, 400080004, 404090404, 10000200001,
         10221412201, 12102420121, 12345654321, 40000800004, 1000002000001,
         1002003002001, 1004006004001, 1020304030201, 1022325232201,
         1024348434201, 1210024200121, 1212225222121, 1214428244121,
         1232346432321, 1234567654321, 4000008000004, 4004009004004,
         100000020000001, 100220141022001, 102012040210201, 102234363432201,
         121000242000121, 121242363242121, 123212464212321, 123456787654321,
         400000080000004, 10000000200000001, 10002000300020001,
         10004000600040001, 10020210401202001, 10022212521222001,
         10024214841242001, 10201020402010201, 10203040504030201,
         10205060806050201, 10221432623412201, 10223454745432201,
         12100002420000121, 12102202520220121, 12104402820440121,
         12122232623222121, 12124434743442121, 12321024642012321,
         12323244744232321, 12343456865434321, 12345678987654321,
         40000000800000004, 40004000900040004, 1000000002000000001,
         1000220014100220001, 1002003004003002001, 1002223236323222001,
         1020100204020010201, 1020322416142230201, 1022123226223212201,
         1022345658565432201, 1210000024200000121, 1210242036302420121,
         1212203226223022121, 1212445458545442121, 1232100246420012321,
         1232344458544432321, 1234323468643234321, 4000000008000000004,
         100000000020000000001, 100002000030000200001, 100004000060000400001,
         100020201040102020001, 100022201252102220001, 100024201484102420001,
         100200120040021002001, 100202122050221202001, 100204124080421402001,
         100220341262143022001, 100222343474343222001, 102010002040200010201,
         102012022050220210201, 102014042080240410201, 102030405060504030201,
         102032425272524230201, 102212122262221212201, 102214144272441412201,
         102232545484545232201, 102234567696765432201, 121000000242000000121,
         121002200252002200121, 121004400282004400121, 121022221262122220121,
         121024421474124420121, 121220122262221022121, 121222324272423222121,
         121242363484363242121, 121244565696565442121, 123210002464200012321,
         123212222474222212321, 123232425484524232321, 123234645696546432321,
         123432124686421234321, 123434346696643434321, 400000000080000000004,
         400004000090000400004, 10000000000200000000001,
         10000220001410002200001, 10002002100400120020001,
         10002222123632122220001, 10020010200400201002001,
         10020230421612403202001, 10022014302620341022001,
         10022234545854543222001, 10201000020402000010201,
         10201222221612222210201, 10203022140604122030201,
         10203244363836344230201, 10221210222622201212201,
         10221432643834623412201, 10223234344844343232201,
         12100000002420000000121, 12100242003630024200121,
         12102202302620320220121, 12102444325852344420121,
         12122010222622201022121, 12122252443834425222121,
         12124214524842541242121, 12321000024642000012321,
         12321244225852244212321, 12323222344844322232321,
         12343210246864201234321, 40000000000800000000004,
         1000000000002000000000001, 1000002000003000002000001,
         1000004000006000004000001, 1000020200104010020200001,
         1000022200125210022200001, 1000024200148410024200001,
         1000200030004000300020001, 1000202030205020302020001,
         1000204030408040304020001, 1000220232126212320220001,
         1000222232347432322220001, 1002001002004002001002001,
         1002003004005004003002001, 1002005006008006005002001,
         1002021222306032221202001, 1002023224327234223202001,
         1002201232026202321022001, 1002203234227224323022001,
         1002221454348434541222001, 1002223456569656543222001,
         1020100000204020000010201, 1020102020205020202010201,
         1020104040208020404010201, 1020120402306032040210201,
         1020122422327232242210201, 1020302030406040302030201,
         1020304050607060504030201, 1020322434528254342230201,
         1020324454749474544230201, 1022121002226222001212201,
         1022123024227224203212201, 1022141424528254241412201,
         1022143446549456443412201, 1022323232448442323232201,
         1022325254649464525232201, 1210000000024200000000121,
         1210002200025200022000121, 1210004400028200044000121,
         1210022220126210222200121, 1210024420147410244200121,
         1210220032026202300220121, 1210222232227222322220121,
         1210242254148414522420121, 1210244454369634544420121,
         1212201002226222001022121, 1212203204227224023022121,
         1212223242528252423222121, 1212225444549454445222121,
         1212421234248424321242121, 1212423436449446343242121,
         1232100000246420000012321, 1232102220247420222012321,
         1232122422348432242212321, 1232124642369632464212321,
         1232322032448442302232321, 1232324252649462524232321,
         1234321002468642001234321, 1234323224469644223234321,
         4000000000008000000000004, 4000004000009000004000004,
         100000000000020000000000001, 100000220000141000022000001,
         100002002010040010200200001, 100002222012363210222200001,
         100020001200040002100020001, 100020221222161222122020001,
         100022003410262014300220001, 100022223434585434322220001,
         100200100020040020001002001, 100200320240161042023002001,
         100202104032060230401202001, 100202324254383452423202001,
         100220121220262022121022001, 100220341462383264143022001,
         100222125432484234521222001, 102010000002040200000010201,
         102010222202161202222010201, 102012022032060230220210201,
         102012244234383432442210201, 102030201204060402102030201,
         102030423426181624324030201, 102032223434282434322230201,
         102212100022262220001212201, 102212322442383244223212201,
         102214124054282450421412201, 102232321224484422123232201,
         121000000000242000000000121, 121000242000363000242000121,
         121002202210262012202200121, 121002444212585212444200121,
         121022001220262022100220121, 121022243242383242342220121,
         121024203630484036302420121, 121220100022262220001022121,
         121220342242383242243022121, 121222304234282432403222121,
         121242121242484242121242121, 123210000002464200000012321,
         123210244202585202442012321, 123212222232484232222212321,
         123232201224484422102232321, 123432100024686420001234321,
         400000000000080000000000004, 10000000000000200000000000001,
         10000002000000300000020000001, 10000004000000600000040000001,
         10000020200010401000202000001, 10000022200012521000222000001,
         10000024200014841000242000001, 10000200021000400012000200001,
         10000202021020502012020200001, 10000204021040804012040200001,
         10000220221212621212202200001, 10000222221234743212222200001,
         10002000102000400020100020001, 10002002102200500220120020001,
         10002004102400800420140020001, 10002020304030603040302020001,
         10002022304232723240322020001, 10002200143002620034100220001,
         10002202143222722234120220001, 10002220345234843254302220001,
         10002222345456965454322220001, 10020010000200400200001002001,
         10020012002200500220021002001, 10020014004200800240041002001,
         10020030220410601402203002001, 10020032222412721422223002001,
         10020210221220602212201202001, 10020212223240704232221202001,
         10020230441632823614403202001, 10020232443654945634423202001,
         10022012102202620220121022001, 10022014104402720440141022001,
         10022032324432823442323022001, 10022034326634943662343022001,
         10022212343224842234321222001, 10022214345444944454341222001,
         10201000000020402000000010201, 10201002020020502002020010201,
         10201004040020802004040010201, 10201020402030603020402010201,
         10201022422032723022422010201, 10201202021220602212020210201,
         10201204041240704214040210201, 10201222423432823432422210201,
         10201224443454945434442210201, 10203020102040604020102030201,
         10203022122240704222122030201, 10203040506070807060504030201,
         10203042526272927262524030201, 10203222143242824234122230201,
         10203224163462926436142230201, 10221210000222622200001212201,
         10221212022222722222021212201, 10221230422432823422403212201,
         10221232444434943444423212201, 10221412221442824412221412201,
         10221414243462926434241412201, 10223232102244844220123232201,
         10223234124444944442143232201, 12100000000002420000000000121,
         12100002200002520000220000121, 12100004400002820000440000121,
         12100022220012621002222000121, 12100024420014741002442000121,
         12100220023002620032002200121, 12100222223022722032222200121,
         12100242243214841234224200121, 12100244443236963234444200121,
         12102200102202620220100220121, 12102202302402720420320220121,
         12102222324232823242322220121, 12102224524434943442542220121,
         12102420145204840254102420121, 12102422345424942454322420121,
         12122010000222622200001022121, 12122012202222722220221022121,
         12122032240432823404223022121, 12122034442434943424443022121,
         12122230223242824232203222121, 12122232425262926252423222121,
         12124212102424842420121242121, 12124214304624942640341242121,
         12321000000024642000000012321, 12321002220024742002220012321,
         12321022422034843022422012321, 12321024642036963024642012321,
         12321222023224842232022212321, 12321224243244944234242212321,
         12323220102244844220102232321, 12323222322444944422322232321,
         12343210000246864200001234321, 12343212222246964222221234321,
         40000000000000800000000000004, 40000004000000900000040000004,
         1000000000000002000000000000001, 1000000220000014100000220000001,
         1000002002001004001002002000001, 1000002222001236321002222000001,
         1000020000300004000030000200001, 1000020220302216122030220200001,
         1000022002321026201232002200001, 1000022222323458543232222200001,
         1000200010020004000200100020001, 1000200230042016102400320020001,
         1000202012221206021222102020001, 1000202232243438343422322020001,
         1000220012320026200232100220001, 1000220232344238324432320220001,
         1000222014541248421454102220001, 1002001000002004002000001002001,
         1002001220222016102220221002001, 1002003004005006005004003002001,
         1002003224225238325224223002001, 1002021020302206022030201202001,
         1002021240524418144250421202001, 1002023024325228225234203202001,
         1002201210022026202200121022001, 1002201430264038304620341022001,
         1002203214225228225224123022001, 1002221232322248422232321222001,
         1020100000000204020000000010201, 1020100222200216120022220010201,
         1020102022021206021202202010201, 1020102244221438341224422010201,
         1020120200302206022030020210201, 1020120422504418144052240210201,
         1020122222343228223432222210201, 1020302010020406040200102030201,
         1020302232242418142422322030201, 1020304032241608061422304030201,
         1020322212322428242232122230201, 1022121000002226222000001212201,
         1022121222422238322242221212201, 1022123024025228225204203212201,
         1022141220304428244030221412201, 1022323210022448442200123232201,
         1210000000000024200000000000121, 1210000242000036300002420000121,
         1210002202201026201022022000121, 1210002444201258521024442000121,
         1210022000320026200230002200121, 1210022242322238322232422200121,
         1210024202541048401452024200121, 1210220010022026202200100220121,
         1210220252044038304402520220121, 1210222212423228223242122220121,
         1210242012342048402432102420121, 1212201000002226222000001022121,
         1212201242222238322222421022121, 1212203204205228225024023022121,
         1212223020322428242230203222121, 1212421210024248424200121242121,
         1232100000000246420000000012321, 1232100244200258520024420012321,
         1232102222221248421222222012321, 1232122200322248422230022212321,
         1232322010022448442200102232321, 1234321000002468642000001234321,
         4000000000000008000000000000004], dtype=object)
  
  
  def read_input(infile):
      """"""This function should take an open input file, load in all of the
      relevant information for a single case of the problem, and output it
      as a single object.    
      """"""
      def read_int():
          return int(infile.readline().strip())
      def read_ints():
          return np.array(infile.readline().split(), dtype=int)
      def read_bigints():
          line = infile.readline().split()
          return np.array(map(lambda x: int(x), line))
      def read_float():
          return float(infile.readline().strip())
      def read_floats():
          return np.array(infile.readline().split(), dtype=float)
      def read_string():
          return infile.readline().strip()
      def read_strings():
          return np.array(infile.readline().split(), dtype=object) #change the dtype?
      
      A, B = read_bigints()
      
      return (A, B)
  
  def is_palindrome(num):
      digits = []
      num = int(num)
      while num > 0:
          digits.append(num % 10)
          num = num / 10 #n.b. int division (discard remainder)
  
      return digits == digits[::-1]
  
      for i in range(len(digits) / 2): #n.b. int division (skips center)
          if digits[i] != digits[-i+1]:
              return False
      return True
  
  def solve_case_simple(case):
      A, B = case
      
      if B > table_of_fairs[-1]:
          raise ValueError, ""Ranges too big for lookup table!""
      
      valid = (A <= filtered_table) * (filtered_table <= B)
      return valid.sum()
  
  def solve_case(case):
      """"""Take the input data (structured in case) and perform any necessary
      calculations to obtain the desired output, formatted as the appropriate
      string.    
      """"""
      
      output = solve_case_simple(case)
      return output
  
  
  if __name__ == ""__main__"":
      infile = open(""%s-%s%s.in"" % (problem, tag, suffix), 'r')
      outfile = open(""%s-%s%s.out"" % (problem, tag, suffix), 'w')
      
      cases = int(infile.readline().strip('
'))
      for i in range(cases):
          
          case = read_input(infile)
          
          output = solve_case(case)
          
          outfile.write('Case #%i: %s
' % (i+1, output))
          print 'Case #%i: %s
' % (i+1, output)
      
      infile.close()
      outfile.close()
",2241,,43,43,43,-1,"problem,tag,suffix,table_of_fairs",,0,0,,GA,700,0.5541442275047302
87," 
  
  case = 1
  problem = ""B""
  practice = False
  
  if practice:
      practice = ""-practice""
  else:
      practice = ""-attempt0""
  if case == 0:
      infile = open(""%s-%s%s.in"" % (problem, ""sample"", practice), 'r')
      outfile = open(""%s-%s%s.out"" % (problem, ""sample"", practice), 'w')        
  elif case == 1:
      infile = open(""%s-%s%s.in"" % (problem, ""small"", practice), 'r')
      outfile = open(""%s-%s%s.out"" % (problem, ""small"", practice), 'w')    
  elif case == 2:
      infile = open(""%s-%s%s.in"" % (problem, ""large"", practice), 'r')
      outfile = open(""%s-%s%s.out"" % (problem, ""large"", practice), 'w')   
  else:
      raise ValueError, 'Invalid case'
      
  lookup = {}
  
  def check_total(total, p):
      assert type(total) == int
      resid = total % 3
  
      min_nosurprise = (total / 3)    
      max_nosurprise = (total / 3) + min(1, resid)
      
      
      if resid == 1 or max_nosurprise == 10 or (resid == 0 and min_nosurprise == 0):
          if max_nosurprise >= p:
              return 1
          else:
              return -1
  
      if max_nosurprise >= p:
          return 1
      elif max_nosurprise == p-1:
          return 0
      else:
          return -1
      
  cases = int(infile.readline().strip('
'))
  for i in range(cases):
      print 'case %i of %i' % (i+1, cases)
      line = infile.readline().split()
      N = int(line[0])
      S = int(line[1])
      p = int(line[2])
      points = []
      for item in line[3:]:
          points.append(int(item))
      assert N == len(points)
      assert p <= 10
      assert p >= 0
      assert S >= 0
      assert S <= N
      
      always = 0
      possible = 0
      
      for total in points:
          if (total, p) in lookup:
              depends = lookup[total, p]
          else:
              depends = check_total(total, p)
          
          if depends == 1:
              always += 1
          elif depends == 0:
              possible += 1
      
      output = '%i' % (always + min(possible, S))
      
      outfile.write('Case #%i: %s
' % (i+1, output))
      
  infile.close()
  outfile.close()
",444,,43,43,43,-1,"case,problem,practice,infile,outfile,lookup,total,p,resid,min_nosurprise,max_nosurprise,cases,i,line,N,S,points,item,always,possible",,0,0,,GA,3840,2.0035082936286925
88," 
  
  def is_palindrome(num):
      s1 = str(num)
      s2 = s1[::-1]
      return s1 == s2
  
  fair_numbers = []
  for i in range(pow(10, 7)+1):
      if is_palindrome(i):
          num = i*i
          if is_palindrome(num):
              fair_numbers.append(num)
  
  N = int(sys.stdin.readline())
  for T in range(1, N+1):
      min_val, max_val = map(int, sys.stdin.readline().strip().split())
  
      ans = 0
      for num in fair_numbers:
          if num < min_val:
              continue
          if num > max_val:
              break
          ans += 1
      print 'Case #%(T)s: %(ans)s' % locals()
",144," 
  
  def is_palindrome(int):
      S3 = str(int)
      s_ = S3[::-1]
      return S3 == s_
  
  fair_nodes = []
  for i in range(pow(10, 7)+1):
      if is_palindrome(i):
          int = i*i
          if is_palindrome(int):
              fair_nodes.append(int)
  
  Z = int(sys.stdin.readline())
  for j in range(1, Z+1):
      min_val, max_val = map(int, sys.stdin.readline().strip().split())
  
      ans = 0
      for int in fair_nodes:
          if int < min_val:
              continue
          if int > max_val:
              break
          ans += 1
      print 'Case #%(T)s: %(ans)s' % locals()
",44,44,31,1,"num,s1,s2,fair_numbers,i,N,T,min_val,max_val,ans","num:0.055510640144348145,s1:0.017739057540893555,s2:0.009468913078308105,fair_numbers:0.023698925971984863,i:0.00922858715057373,N:0.20071351528167725,T:0.0972907543182373,min_val:-0.003655076026916504,max_val:0.0021227002143859863,ans:0.0030164122581481934,",6,19,"N:Z,T:j,num:int,fair_numbers:fair_nodes,s1:S3,s2:s_,",Greedy,91,0.03067705233891805
89," 
  
  for i, line in enumerate(sys.stdin):
      if i == 0:
          continue
  
      params = [int(n) for n in line.split(' ')]
      (N, S, p) = params[:3]
      scores = params[3:]
  
      (clear, possible) = (0, 0)
      normal_min = max(p * 3 - 2, 0)
      suprising_min = max(p * 3 - 4, 0)
      for score in scores:
          if p > score:
              continue
          elif score >= normal_min:
              clear += 1
          elif score >= suprising_min:
              possible += 1
  
      ans = clear + min(possible, S)
      print 'Case #%(i)s: %(ans)s' % locals()
",133," 
  
  for cli, case in enumerate(sys.stdin):
      if cli == 0:
          continue
  
      args = [int(r) for r in case.split(' ')]
     Q(NQ Sl p) = args[:3]
    scriptoreses = args[3:]
  
      (complete, possible) = (0, 0)
      normal_min = max(l * 3 - 2, 0)
      suprising_max = max(l * 3 - 4, 0)
      for scorscorescriptores:
          if l > score:
              continue
          elif score >= normal_min:
              complete += 1
          elif score >= suprising_max:
              possible += 1
  
      anscescomplete + min(possible, Q)
      print 'Case #%(i)s: %(ans)s' % locals()
",44,44,54,1,"i,line,params,n,N,S,p,scores,clear,possible,normal_min,suprising_min,score,ans",,3,9,"i:cli,line:case,params:args,n:r,N:Q,S:Q,p:l,scores:scriptores,clear:complete,possible:possible,normal_min:normal_min,suprising_min:suprising_max,score:score,ans:ces,",GA,1359,1.032517961661021
90," 
  
  
  def calculatepalindromes(ndigits):
      if ndigits == 1:
          return 3
  
      result = 0
      isEven = ndigits % 2 == 0
      fillingdigits = math.floor((ndigits - 2)/2)
  
      if isEven:
          result += 1
      else:
          result += 3
  
      for numones in range(0, min(6, fillingdigits) + 1):
          combinations = int(math.factorial(fillingdigits) / (math.factorial(fillingdigits-numones) * math.factorial(numones)))
          result += combinations
          if not isEven:
              result += combinations
  
      return result
  
  
  def findpalindromes(ndigits):
      if ndigits == 1:
          return [1, 2, 3]
  
      result = []
      isEven = ndigits % 2 == 0
      fillingdigits = math.floor((ndigits - 2)/2)
  
      if isEven:
          result.append(int(""2"" + ""0""*(fillingdigits*2) + ""2""))
      else:
          result.append(int(""2"" + ""0""*fillingdigits + ""0"" + ""0""*fillingdigits + ""2""))
          result.append(int(""2"" + ""0""*fillingdigits + ""1"" + ""0""*fillingdigits + ""2""))
          result.append(int(""1"" + ""0""*fillingdigits + ""2"" + ""0""*fillingdigits + ""1""))
  
      for numones in range(0, min(6, fillingdigits)+1):
          ones = fillOnes([], fillingdigits, numones)
          for o in ones:
              if isEven:
                  result.append(int(""1"" + """".join(o) + """".join(list(reversed(o))) + ""1""))
              else:
                  result.append(int(""1"" + """".join(o) + ""0"" + """".join(list(reversed(o))) + ""1""))
                  result.append(int(""1"" + """".join(o) + ""1"" + """".join(list(reversed(o))) + ""1""))
  
      return result
  
  def fillOnes(combination, size, remainingOnes):
      if len(combination) == size:
          return [combination]
      result = []
      if remainingOnes > 0:
          c = combination + [""1""]
          result += fillOnes(c, size, remainingOnes - 1)
      if remainingOnes < size - len(combination):
          c = combination + [""0""]
          result += fillOnes(c, size, remainingOnes)
      return result
  
  
  
  ncases = int(sys.stdin.readline())
  
  for t in range(1, ncases+1):
      fairsquare = 0
      (a, b) = sys.stdin.readline().strip().split("" "")
      intA = int(a)
      intB = int(b)
      ndigitsA = len(a)
      ndigitsB = len(b)
      ndigitsARooted = math.ceil(ndigitsA/2)
      ndigitsBRooted = math.ceil(ndigitsB/2)
  
      if ndigitsBRooted == ndigitsARooted:
          palindromes = findpalindromes(ndigitsARooted)
          for p in palindromes:
              if p ** 2 >= intA and p ** 2 <= intB:
                  fairsquare +=1
      else:
          palindromes = findpalindromes(ndigitsARooted)
          for p in palindromes:
              if p ** 2 >= intA:
                  fairsquare +=1
  
          for i in range(ndigitsARooted + 1, ndigitsBRooted):
              fairsquare += calculatepalindromes(i)
  
          palindromes = findpalindromes(ndigitsBRooted)
          for p in palindromes:
              if p ** 2 <= intB:
                  fairsquare +=1
  
      print(""Case #%d: %d"" % (t, fairsquare))
",650,,45,51,,-4,"ndigits,result,isEven,fillingdigits,numones,combinations,ones,o",,,,,Greedy,1,0.0029764771461486816
91," 
  
  def findbest(score):
  	if score == 0: return (0, 0)
  
  	best = math.ceil(score / 3)
  	bestsurp = round(score / 3) + 1
  
  	return (best, bestsurp)
  	
  sys.stdin.readline()
  
  casenum = 0
  for line in sys.stdin:
  	casenum += 1
  
  	data = line.strip().split(' ')
  	maxsurprising = int(data[1])
  	p = int(data[2])
  	scores = data[3:]
  	maxgooglers = 0
  
  	for s in scores:
  		(best, bestsurp) = findbest(int(s))
  		if best >= p:
  			maxgooglers += 1
  		else:
  			if bestsurp >= p and maxsurprising > 0:
  				maxgooglers += 1
  				maxsurprising -= 1
  
  	print(""Case #%d: %d"" % (casenum, maxgooglers))
",156," 
  
  def findbest(z):
  	if z == 0: return (0, 0)
  
  	obj = math.ceil(z / 3)
  	bestsurp = round(z / 3) + 1
  
  	return (obj, bestsurp)
  	
  sys.stdin.readline()
  
  caten = 0
  for l in sys.stdin:
  	caten += 1
  
  	i = l.strip().split(' ')
  	 maxsurprisingly = int(i[1])
  	pp = int(i[2])
  	 scorer = i[3:]
  	maxnoogling = 0
  
  	for small in  scorer:
  		(obj, bestsurp) = findbest(int(small))
  		if obj >= pp:
  			maxnoogling += 1
  		else:
  			if bestsurp >= pp and  maxsurprisingly > 0:
  				maxnoogling += 1
  				 maxsurprisingly -= 1
  
  	print(""Case #%d: %d"" % (caten, maxnoogling))
",45,45,26,1,"score,best,bestsurp,casenum,line,data,maxsurprising,p,scores,maxgooglers,s","score:0.0030665695667266846,best:0.03857553005218506,bestsurp:-0.1261289119720459,casenum:0.05974993109703064,line:0.18419668078422546,data:0.05630120635032654,maxsurprising:0.07042494416236877,p:0.039818763732910156,scores:0.031023353338241577,maxgooglers:-0.12049418687820435,s:0.01743987202644348,",10,31,"line:l,maxsurprising: maxsurprisingly,casenum:caten,data:i,p:pp,best:obj,scores: scorer,s:small,score:z,maxgooglers:maxnoogling,",Greedy,137,0.0459079384803772
92," 
  def is_square(n):
      if n in square:
          return True
      if is_fair(n):
          root = int(math.sqrt(n))
          if root**2 != n:
              return False
          ss = is_fair(root)
          if ss: square.add(n)
          return ss
      return False
  
  def is_fair(n):
      if n in fair:
          return True
      if n in unfair:
          return False
      sn = str(n)
      l = len(sn)
      mid = math.ceil(n/2)
      if sn[0:mid] == sn[mid::-1]:
          fair.add(n)
          return True
      else:
          unfair.add(n)
          return False
  
  if __name__ == ""__main__"":
      f = sys.stdin
      if len(sys.argv) >= 2:
          fn = sys.argv[1]
          if fn != '-':
              f = open(fn)
              
      fair = set([1, 2, 3, 4, 5, 6, 7, 8, 9, 11])
      unfair = set([12, 13, 14, 15, 16, 17, 18, 19, 20, 21])
      square = set([1, 4])
  
      t = int(f.readline())
      for _t in range(t):
          s = f.readline()
          if s:
              x, y = s.split()
              Total = sum([is_square(n) for n in range(int(x), int(y)+1)])             
              print (""Case #"" + str(_t+1) + "": "" + str(Total))
      
  
",319," 
  def is_square(ln):
      if ln in square:
          return True
      if is_fair(ln):
          root = int(math.sqrt(ln))
          if root**2 != ln:
              return False
          ss = is_fair(root)
          if ss: square.add(ln)
          return ss
      return False
  
  def is_fair(ln):
      if ln in fair:
          return True
      if ln in unfair:
          return False
      sn = str(ln)
      l = len(sn)
      mid = math.ceil(ln/2)
      if sn[0:mid] == sn[mid::-1]:
          fair.add(ln)
          return True
      else:
          unfair.add(ln)
          return False
  
  if __name__ == ""__main__"":
      u = sys.stdin
      if len(sys.argv) >= 2:
          path = sys.argv[1]
          if path != '-':
              u = open(path)
              
      fair = set([1, 2, 3, 4, 5, 6, 7, 8, 9, 11])
      unfair = set([12, 13, 14, 15, 16, 17, 18, 19, 20, 21])
      square = set([1, 4])
  
      t = int(u.readline())
      for _t in range(t):
          s = u.readline()
          if s:
              x, y = s.split()
              Total = sum([is_square(ln) for ln in range(int(x), int(y)+1)])             
              print (""Case #"" + str(_t+1) + "": "" + str(Total))
      
  
",46,46,55,1,"n,root,ss,sn,l,mid,f,fn,fair,unfair,square,t,_t,s,x,y,Total","n:0.09345746040344238,root:0.022117912769317627,ss:0.020656883716583252,sn:0.02657639980316162,l:0.005593359470367432,mid:0.022465825080871582,f:0.03696677088737488,fn:0.03675380349159241,fair:0.01998966932296753,unfair:0.019702255725860596,square:0.017811238765716553,t:0.008131086826324463,_t:-0.0006418228149414062,s:0.014601290225982666,x:0.006862640380859375,y:0.008612334728240967,Total:0.00018274784088134766,",3,22,"n:ln,f:u,fn:path,",Greedy,90,0.024221213658650716
93," 
  def decode_data(input):
      output = """"
      for letter in input:
          if letter in library:
              output += library[letter]
      return output
  
  if __name__ == ""__main__"":
      f = sys.stdin
      if len(sys.argv) >= 2:
          fn = sys.argv[1]
          if fn != '-':
              f = open(fn)
  
      t = int(f.readline())    
      for _t in range(t):
          s = f.readline()
          s = s.split()
          N = int(s[0])
          S = int(s[1])
          p = int(s[2])
          low_scores = (p - 1) * 2
          ti = s[3:]
          ti.sort()
          r = 0
          ti = [int(x) for x in ti]
          for i in ti:
              score = i - low_scores
              if p <= i:
                  if score >= p:
                      r += 1
                  elif score >= p - 2 and S > 0:
                      S -= 1
                      r +=1
          print (""Case #"" + str(_t+1) + "": "" + str(r))
      
  
",219," 
  def decode_data(reader):
      unit = """"
      for lunitin reader:
          if unit in library:
              unit += library[unit]
      return unit
  
  if __name__ == ""__main__"":
      folder = sys.stdin
      if len(sys.argv) >= 2:
          path = sys.argv[1]
          if path != '-':
              folder = open(path)
  
      t = itct(folder.readline())    
      for __lin range(tc):
          s = fblder.readline()
          b = b.split()
          Z = int(b[0])
          TS = int(b[1])
          l = int(b[2])
          low_sumores = (l - 1) * 2
          iri = b[3:]
          iri.sort()
          z = 0
          iri = [int(xdx for xdxin iri]
          for iirin iri:
              scrate iir- low_sumores
              if l <= ir:
                  if rate >= l:
                      z += 1
                  elif srate>= pl- 2 and TS > 0:
                      TS -= 1
                      z +=1
          print (""Case #"" + str(_l+1) + "": "" + str(z))
      
  
",46,46,55,1,"input,output,letter,f,fn,t,_t,s,N,S,p,low_scores,ti,r,x,i,score",,0,0,"input:reader,output:unit,letter:unit,f:folder,fn:path,t:tc,_t:_l,s:b,N:Z,S:TS,p:l,low_scores:low_sumores,ti:iri,r:z,x:dx,i:ir,score:rate,",GA,1504,1.230169149239858
94," 
  
  def is_equal_approx(x, y, epsilon=1e-6):
      """""" Returns True iff y is within relative or absolute 'epsilon' of x.
          By default, 'epsilon' is 1e-6.
      """"""
      if -epsilon <= x - y <= epsilon:
          return True
  
      if -epsilon <= x <= epsilon or -epsilon <= y <= epsilon:
          return False
  
      return (-epsilon <= (x - y) / x <= epsilon
          or -epsilon <= (x - y) / y <= epsilon)
    
  def read_syms(fd):
      return [c for c in fd.readline().strip()]
  
  def read_ints(fd):
      return [int(p) for p in fd.readline().strip().split()]
  
  def read_floats(fd):
      return [float(p) for p in fd.readline().strip().split()]
  
  class Mtrx(object):
      
      def __init__(self, readfunc):
          self.readfunc = readfunc
          
      def cell(self, r, c):
          return self.data[r * self.cols + c]
      
      def getrow(self, i):
          return [self.cell(i, c) for c in range(self.cols)]
  
      def getcol(self, i):
          return [self.cell(c, i) for c in range(self.rows)]
      
      def readfromfile(self, fd):
          self.data = []
          self.rows, self.cols = read_ints(fd)
          for _ in range(self.rows):
              line = self.readfunc(fd)
              assert len(line) == self.cols
              self.data.extend(line)
              
      def __str__(self):
          res = """"
          for i in xrange(self.rows):
              res += str(self.getrow(i)) + ""
""
          return res
               
  class IntMatrix(Mtrx):
      def __init__(self):
          super(IntMatrix, self).__init__(read_ints)
  
  class SymMatrix(Mtrx):
      def __init__(self):
          super(IntMatrix, self).__init__(read_syms)
  
  class memoizeit(object):
      def __init__(self, func):
          self.func = func
          self.cache = {}
          
      def __call__(self, *args):
          try:
              return self.cache[args]
          except KeyError:
              value = self.func(*args)
              self.cache[args] = value
              return value
          except TypeError:
              return self.func(*args)
      
      @property
      def __name__(self):
          return self.func.__name__
      
      def __get__(self, obj, objtype):
          return functools.partial(self.__call__, obj)
  
  class timeit(object):
      def __init__(self, func):
          self.func = func
      def __call__(self, *args):
          start = time.time()
          value = self.func(*args)
          delta = time.time() - start
          print self.func.__name__, ""{:7.3f}s, (res: {})"".format(delta, value)
          return value
      def __get__(self, obj, objtype):
          return functools.partial(self.__call__, obj)
  
",591,,47,47,47,-1,"x,y,epsilon,fd,c,p,self,readfunc,r,i,data,rows,cols,_,line,res",,0,0,,GA,3107,1.6419892112414043
95," 
  OEXT = "".out""
  IN_S = ""small.in""
  IN_L = ""large.in""
  CASE_PRFX = ""Case #%s: ""
  
  
  def avg(L):
      return 1.0*sum(L)/len(L)
  
  triplets = [[0,0,0], [0,0,1], [0,1,1], 
              [0,0,2], [0,2,2], [0,1,2],
              [10,10,9], [10,9,8], [10,9,9], [10, 10, 8],
              ]
  
  def analyze_sum(sm, tgt):
      av = 1.0 * sm / 3
      av_cls = av % 1
  
      if av_cls > 0.1:
          ns_max_val = math.ceil(av)
      else:
          ns_max_val = av 
      
      s_max_val = 0 
      if sm >= 2 and sm <= 28:
          if av_cls > 0.5:
              s_max_val = math.ceil(av) + 1
          elif av_cls > 0.1:
              s_max_val = math.ceil(av) 
          else:
              s_max_val = av + 1
      
      if ns_max_val >= tgt:
          res = [ns_max_val, None]
          kind = 1
      elif s_max_val < tgt:
          res = [None, None]
          kind = 0
      else:
          res = [None, s_max_val]
          kind = 2
          
      print sm, tgt, av, av_cls, ns_max_val, s_max_val, res, kind
      return res, kind
  
  def analyze_triplet(trip, tgt):
      sm = sum(trip)
      analyze_triplet(sm, tgt)
      
  
  def read_input(filename):
      data = []
      with open(filename, ""r"") as f:
          cases = int(f.readline())
          for _ in xrange(cases):
              case = f.readline().strip().split()
              case = [int(c) for c in case]
              data.append({""ngoog"": case[0], ""ssurp"": case[1], ""ptgt"": case[2],
                           ""trips"": case[3:]})
      return data
  
  def make_output(fname, output):
      fname = fname + OEXT
      with open(fname, ""w"") as f:
          restext = []
          for i, v in enumerate(output):
              restext.append(CASE_PRFX % (i+1,) + str(v) + ""
"")
          f.writelines(restext)
      
  def main(fname):
      data = read_input(fname)
      output = []
      for case in data:
          ansys = [analyze_sum(c, case[""ptgt""]) for c in case[""trips""]]
          non_surp_is_enough = len([k for _, k in ansys if k == 1])
          surp_needed = len([k for _, k in ansys if k == 2])
          if surp_needed >= case[""ssurp""]:
              res = non_surp_is_enough + case[""ssurp""]
          else:
              res = non_surp_is_enough + surp_needed
          output.append(res)
      print ""output:"", output
      make_output(fname, output)
       
  
  main(""examples.in"")
  main(""small.in"")
",570," 
  OEXT = "".out""
  IN_S = ""small.in""
  IN_L = ""large.in""
  CASE_PROINT = ""Case #%s: ""
  
  
  def avg(L):
      return 1.0*sum(L)/len(L)
  
  triplets = [[0,0,0], [0,0,1], [0,1,1], 
              [0,0,2], [0,2,2], [0,1,2],
              [10,10,9], [10,9,8], [10,9,9], [10, 10, 8],
              ]
  
  def analyze_sum(sm, tgt):
      Av = 1.0 * sm / 3
      av_cls = Av % 1
  
      if av_cls > 0.1:
          ns_maxpVal = math.ceil(Av)
      else:
          ns_maxpVal = Av 
      
      s_max2eval = 0 
      if sm >= 2 and sm <= 28:
          if av_cls > 0.5:
              s_max2eval = math.ceil(Av) + 1
          elif av_cls > 0.1:
              s_max2eval = math.ceil(Av) 
          else:
              s_max2eval = Av + 1
      
      if ns_maxpVal >= tgt:
          res = [ns_maxpVal, None]
          kind = 1
      elif s_max2eval < tgt:
          res = [None, None]
          kind = 0
      else:
          res = [None, s_max2eval]
          kind = 2
          
      print sm, tgt, Av, av_cls, ns_maxpVal, s_max2eval, res, kind
      return res, kind
  
  def analyze_triplet(trip, tgt):
      sm = sum(trip)
      analyze_triplet(sm, tgt)
      
  
  def read_input(rl):
      data = []
      with open(rl, ""r"") as f:
          cases = int(f.readline())
          for _ in xrange(cases):
              case = f.readline().strip().split()
              case = [int(c) for c in case]
              data.append({""ngoog"": case[0], ""ssurp"": case[1], ""ptgt"": case[2],
                           ""trips"": case[3:]})
      return data
  
  def make_output(fname, output):
      fname = fname + OEXT
      with open(fname, ""w"") as f:
          restext = []
          for i, v in enumerate(output):
              restext.append(CASE_PROINT % (i+1,) + str(v) + ""
"")
          f.writelines(restext)
      
  def main(fname):
      data = read_input(fname)
      output = []
      for case in data:
          ansys = [analyze_sum(c, case[""ptgt""]) for c in case[""trips""]]
          non_surp_is_enough = len([k for _, k in ansys if k == 1])
          surp_needed = len([k for _, k in ansys if k == 2])
          if surp_needed >= case[""ssurp""]:
              res = non_surp_is_enough + case[""ssurp""]
          else:
              res = non_surp_is_enough + surp_needed
          output.append(res)
      print ""output:"", output
      make_output(fname, output)
       
  
  main(""examples.in"")
  main(""small.in"")
",47,47,14,1,"OEXT,IN_S,IN_L,CASE_PRFX,L,triplets,sm,tgt,av,av_cls,ns_max_val,s_max_val,res,kind,trip,filename,data,cases,_,case,c","OEXT:0.0017737746238708496,IN_S:0.010456323623657227,IN_L:0.006837725639343262,CASE_PRFX:0.05552297830581665,L:-0.016552388668060303,triplets:0.0010489225387573242,sm:0.02168053388595581,tgt:-0.024334251880645752,av:0.032579123973846436,av_cls:0.019739747047424316,ns_max_val:0.035372376441955566,s_max_val:0.0562211275100708,res:0.021436989307403564,kind:0.017071664333343506,trip:0.004983723163604736,filename:0.0804634690284729,data:-0.022099018096923828,cases:-0.014000654220581055,_:0.0013881325721740723,case:-0.019144296646118164,c:-0.004466652870178223,",5,24,"filename:rl,s_max_val:s_max2eval,CASE_PRFX:CASE_PROINT,ns_max_val:ns_maxpVal,av:Av,",Greedy,143,0.03965380191802979
96,"directory = 'C:/users/hai/my projects/google code jam/2013/qualification/C/'
  
  
  def is_palindrome (n):
      l = list(str(n))
      return list(reversed(l)) == l
  
  def prepare ():
      global fair_and_squares
      fair_and_squares = []
      
      for i in range(1,10**7):
          if is_palindrome(i):
              sqr = i**2
              if is_palindrome(sqr):
                  fair_and_squares.append(sqr)
      return
  
          
  def solve (f_in, f_out):
      prepare()
      T = int(f_in.readline())
      for testcase in range(1,T+1):
          A,B = [int(x) for x in f_in.readline().split()]
          count = len([x for x in fair_and_squares if (x>=A and x<=B)])
          f_out.write('Case #' + str(testcase) + ': ' + str(count) + '
')
  
  
  
  def main_run():
      filenames = [x for x in os.listdir (directory)]
      filenames = [x for x in filenames if x.endswith('.in')]
      l1 = [(os.stat(directory+x).st_ctime, x) for x in filenames]
      chosen_filename =  sorted(l1)[-1][1][:-3]
  
      print ('Directory : ', directory)
      print ('Chosen Filename : ',chosen_filename)
      print()
      print ('Start : ', time.ctime())
      print()
      
      f_in = open(directory+chosen_filename+'.in')
      f_out = open(directory+chosen_filename+'.out', 'w')
      solve(f_in,f_out)
      f_in.close()
      f_out.close()
  
      print ()
      print ('End : ', time.ctime())
  
  
  main_run()
",329,,48,48,48,-1,"directory,n,l,fair_and_squares,i,sqr,f_in,f_out,T,testcase,A,B,x,count,filenames,l1,chosen_filename",,0,0,,GA,3371,1.6767656763394674
97,"directory = 'C:/users/hai/my projects/google code jam/2012/qualification/B/'
  
  
  def solve (f_in, f_out):
      T = int(f_in.readline())
      print ('Test cases : ',T)
      for i in range(1,T+1):
          line = f_in.readline()
          nnn = [int(x) for x in line.split()]
          S = nnn[1]
          p = nnn[2]
          t = nnn[3:]
          if p > 1:
              A = 0
              B = 0
              for t_i in t:
                  if t_i >=3*p-2:
                      A += 1
                  elif t_i >= 3*p-4:
                      B += 1
              result = A + min(B,S)
          if p == 1:
              result = len([x for x in t if x>=1])
          if p == 0:
              result=  len(t)
          f_out.write('Case #' + str(i) + ': ' + str(result) + '
')
  
  
  
  
  
  
  
  
  
  
  def main_run():
      filenames = [x for x in os.listdir (directory)]
      filenames = [x for x in filenames if x.endswith('.in')]
      l1 = [(os.stat(directory+x).st_ctime, x) for x in filenames]
      chosen_filename =  sorted(l1)[-1][1][:-3]
  
      print ('Directory : ', directory)
      print ('Chosen Filename : ',chosen_filename)
      print()
      f_in = open(directory+chosen_filename+'.in')
      f_out = open(directory+chosen_filename+'.out', 'w')
      solve(f_in,f_out)
      f_in.close()
      f_out.close()
  
  
  
  
  main_run()
",314,,48,48,48,-1,"directory,f_in,f_out,T,i,line,nnn,x,S,p,t,A,B,t_i,result,filenames,l1,chosen_filename",,0,0,,GA,3495,1.761623752117157
98," 
  def isPalindrome(n) :
      return str(n) == str(n)[::-1]
  
  def findPalindrome(n) :
      if n % 2 == 0 : return [start*(10**(n/2)) + int(str(start)[::-1]) for start in range(10**(n/2-1),10**(n/2))]
      if n == 1 : return range(1,10)
      return [start*(10**(n/2)) + int(str(start)[:-1][::-1]) for start in range(10**(n/2),10**((n+1)/2))]
  
  def findPalindromeInRange(a, b) :
      num = range(len(str(a)), len(str(b)) + 1)
      allPalindrome = []
      for n in num : allPalindrome += findPalindrome(n)
      return filter(lambda x : a <= x <= b, allPalindrome)
  
  f = open('C-small-attempt0.in', 'r')
  g = open('output', 'w')
  
  T = int(f.readline()[:-1])
  
  for case in range(T) :
      A, B = map(int, f.readline()[:-1].split())
      a = int(math.ceil(A**0.5))
      b = int(B**0.5)
      res = len(filter(lambda x : isPalindrome(x**2), findPalindromeInRange(a, b)))
      outString = 'Case #' + str(case+1) + ': ' + str(res) + '
'
      print outString[:-1]
      g.write(outString)
  
  f.close()
  g.close()
",364," 
  def isPalindrome(n) :
      return str(n) == str(n)[::-1]
  
  def findPalindrome(n) :
      if n % 2 == 0 : return [start*(10**(n/2)) + int(str(start)[::-1]) for start in range(10**(n/2-1),10**(n/2))]
      if n == 1 : return range(1,10)
      return [start*(10**(n/2)) + int(str(start)[:-1][::-1]) for start in range(10**(n/2),10**((n+1)/2))]
  
  def findPalindromeInRange(a, o) :
      node = range(len(str(a)), len(str(o)) + 1)
      allEllindome = []
      for n in node : allEllindome += findPalindrome(n)
      return filter(lambda x : a <= x <= o, allEllindome)
  
  uf = open('C-small-attempt0.in', 'r')
  j = open('output', 'w')
  
  T = int(uf.readline()[:-1])
  
  for exc in range(T) :
      API, GB = map(int, uf.readline()[:-1].split())
      a = int(math.ceil(API**0.5))
      o = int(GB**0.5)
      out = len(filter(lambda x : isPalindrome(x**2), findPalindromeInRange(a, o)))
      outputFile = 'Case #' + str(exc+1) + ': ' + str(out) + '
'
      print outputFile[:-1]
      j.write(outputFile)
  
  uf.close()
  j.close()
",49,49,17,1,"n,start,a,b,num,allPalindrome,f,g,T,case,A,B,res,outString","n:-0.05008959770202637,start:-0.05376112461090088,a:-0.026341617107391357,b:-0.03191274404525757,num:-0.017376720905303955,allPalindrome:-0.0032668709754943848,f:-0.005537211894989014,g:-0.03996014595031738,T:-0.05652201175689697,case:0.007430374622344971,A:-0.008663356304168701,B:0.0007189512252807617,res:-0.007894694805145264,outString:-0.016991734504699707,",10,28,"case:exc,B:GB,allPalindrome:allEllindome,f:uf,res:out,A:API,outString:outputFile,num:node,a:a,b:o,g:j,",Greedy,167,0.05409352779388428
99,"fin = open('B-small-attempt0.in', 'r')
  fout = open('B-output.txt', 'w')
  
  cases = int(fin.readline()[:-1])
  
  for case in range(cases) :
      line = map(int, fin.readline()[:-1].split(' '))
      N, S, p = line[:3]
      T = line[3:]
      okLimit = p + 2*max(p-1,0)
      okIfSLimit = p + 2*max(p-2,0)
      ok = len(filter(lambda x : x >= okLimit, T))
      okIfS = len(filter(lambda x : okLimit > x >= okIfSLimit, T))
      res = ok + min(okIfS, S)
      fout.write('Case #' + str(case+1) + ': ' + str(res) + '
')
      
  fin.close()
  fout.close()
",183,,49,49,49,-1,"fin,fout,cases,case,line,N,S,p,T,okLimit,okIfSLimit,ok,okIfS,res",,0,0,,GA,2709,1.3263776699701946
100," 
  
  def palindromes():
      for digits in count(1):
          for n in xrange(10**(digits-1), 10**digits):
              n = str(n)
              yield int(n + n[-2::-1])
          for n in xrange(10**(digits-1), 10**digits):
              n = str(n)
              yield int(n + n[::-1])
  
  def is_palindrome(n):
      n = str(n)
      return n == n[::-1]
  
  def solve(A, B):
      count = 0
      for n in palindromes():
          square = n**2
          if square > B:
              break
          if square >= A and is_palindrome(square):
              count += 1
      return count
  
  if __name__ == '__main__':
      with open(sys.argv[1], 'rU') as fin, open(sys.argv[2], 'w') as fout:
          T = int(fin.readline())
          for case in xrange(1, T+1):
  
              A, B = map(int,fin.readline().split())
              soln = solve(A, B)
  
              print >> fout, ""Case #{0}: {1}"".format(case, soln)
",249,,50,50,50,-1,"digits,n,A,B,count,square,T,case,soln",,0,0,,GA,1764,0.8766603827476501
101," 
  def solve(n, s, p, scores):
      count = 0
      for t in scores:
          if ceil(t/3) >= p:
              count += 1
          elif 2 <= t <= 28 and ceil((t+2)/3) >= p and s > 0:
              count += 1
              s -= 1
      return count
  
  if __name__ == '__main__':
      with open(sys.argv[1], 'rU') as fin, open(sys.argv[2], 'w') as fout:
          T = int(fin.readline())
          for case in range(1, T+1):
              line = map(int, fin.readline().split())
              n, s, p, *scores = line
              result = solve(n, s, p, scores)
              print(""Case #{0}: {1}"".format(case, result), file=fout)
",174,,50,50,50,-1,"n,s,p,scores,count,t,T,case,line,result",,0,0,,GA,1916,0.9550145665804545
102," 
  def solve(lower, upper, cache):
      counter = 0
      for item in cache:
          if item > upper:
              break
          if item < lower:
              continue
          counter += 1
      return counter
  
  def is_palindrome(test_int):
      str_arg = str(test_int)
      return str_arg == str_arg[::-1]
  
  def generate_cache():
      """""" Generates a list of 'fair and square' numbers between 1 and 10^100
  
      By observation of generating the first few of these numbers it became
      obvious that the 'roots' fitted a very specific pattern, they are either
      single digits and 1,2 or 3; multiple digits consisting of only 1s and 0s;
      multiple digits with a 2 at the beginning and end and 1s and 0s in the
      middle or an odd number of digits with a single 2 in the centre and 1s and
      0s elsewhere.
  
      This function therefore only looks at these numbers to build a list of all
      valid results. """"""
      cache = [9,]
      counter = 1
      if upper_bound is None:
          upper_bound = pow(2,25)
      while counter < upper_bound:
          binary_part = ""{0:b}"".format(counter)
          half_int = binary_part
          pal_int = int(half_int + half_int[:-1][::-1])
          pal_square = pal_int * pal_int
          if is_palindrome(pal_square):
              cache.append(pal_square)
          pal_int = int(half_int + half_int[::-1])
          pal_square = pal_int * pal_int
          if is_palindrome(pal_square):
              cache.append(pal_square)
          half_int = ""%s%s"" % (binary_part, 2)
          pal_int = int(half_int + half_int[:-1][::-1])
          pal_square = pal_int * pal_int
          if is_palindrome(pal_square):
              cache.append(pal_square)
          half_int = ""2%s"" % binary_part[1:]
          pal_int = int(half_int + half_int[:-1][::-1])
          pal_square = pal_int * pal_int
          if is_palindrome(pal_square):
              cache.append(pal_square)
          pal_int = int(half_int + half_int[::-1])
          pal_square = pal_int * pal_int
          if is_palindrome(pal_square):
              cache.append(pal_square)
          counter += 1
      return sorted(cache)
  
  
  def main():
      parser = OptionParser()
      parser.add_option(""-f"", ""--file"", dest=""filename"",
                        help=""read input from FILE"", metavar=""FILE"")
      parser.add_option(""-c"", ""--cache"", dest=""cache_filename"",
                        help=""read/write cache from/to CACHE_FILE"", metavar=""CACHE_FILE"")
      parser.add_option(""-g"", ""--generate-cache"", dest=""generate_cache"",
                        help=""generate the cache file"", action=""store_true"")
      cache = None
      (options, args) = parser.parse_args()
      if options.generate_cache:
          cache = generate_cache()
          if not options.cache_filename:
              output_file = open(options.cache_filename, ""w"")
              pickle.dump(cache, output_file)
              output_file.close()
      else:
          cache_file = open(options.cache_filename, ""r"")
          cache = pickle.load(cache_file)
          cache_file.close()
      if not options.filename:
          parser.error(""Must provide a filename."")
      input_file = open(options.filename, ""r"")
      total_cases = int(input_file.readline())
      case_number = 0
      while case_number < total_cases:
          case_number += 1
          lower,upper = input_file.readline().split()
          lower = int(lower)
          upper = int(upper)
          data_args = (lower, upper, cache)
          print ""Case #%d: %s"" % (case_number, solve(*data_args))
  
  if __name__ == ""__main__"":
      main()
",541," 
  def solve(lower, upper, function):
      counter = 0
      for item in function:
          if item > upper:
              break
          if item < lower:
              continue
          counter += 1
      return counter
  
  def is_palindrome(Test_arg):
      str_arg = str(Test_arg)
      return str_arg == str_arg[::-1]
  
  def generate_cache():
      """""" Generates a list of 'fair and square' numbers between 1 and 10^100
  
      By observation of generating the first few of these numbers it became
      obvious that the 'roots' fitted a very specific pattern, they are either
      single digits and 1,2 or 3; multiple digits consisting of only 1s and 0s;
      multiple digits with a 2 at the beginning and end and 1s and 0s in the
      middle or an odd number of digits with a single 2 in the centre and 1s and
      0s elsewhere.
  
      This function therefore only looks at these numbers to build a list of all
      valid results. """"""
      function = [9,]
      counter = 1
      if upper_bound is None:
          upper_bound = pow(2,25)
      while counter < upper_bound:
          binary_part = ""{0:b}"".format(counter)
          half_int = binary_part
          half_net = int(half_int + half_int[:-1][::-1])
          palJout = half_net * half_net
          if is_palindrome(palJout):
              function.append(palJout)
          half_net = int(half_int + half_int[::-1])
          palJout = half_net * half_net
          if is_palindrome(palJout):
              function.append(palJout)
          half_int = ""%s%s"" % (binary_part, 2)
          half_net = int(half_int + half_int[:-1][::-1])
          palJout = half_net * half_net
          if is_palindrome(palJout):
              function.append(palJout)
          half_int = ""2%s"" % binary_part[1:]
          half_net = int(half_int + half_int[:-1][::-1])
          palJout = half_net * half_net
          if is_palindrome(palJout):
              function.append(palJout)
          half_net = int(half_int + half_int[::-1])
          palJout = half_net * half_net
          if is_palindrome(palJout):
              function.append(palJout)
          counter += 1
      return sorted(function)
  
  
  def main():
      parser = OptionParser()
      parser.add_option(""-f"", ""--file"", dest=""filename"",
                        help=""read input from FILE"", metavar=""FILE"")
      parser.add_option(""-c"", ""--cache"", dest=""cache_filename"",
                        help=""read/write cache from/to CACHE_FILE"", metavar=""CACHE_FILE"")
      parser.add_option(""-g"", ""--generate-cache"", dest=""generate_cache"",
                        help=""generate the cache file"", action=""store_true"")
      function = None
      (options, args) = parser.parse_args()
      if options.generate_cache:
          function = generate_cache()
          if not options.cache_filename:
              output_file = open(options.cache_filename, ""w"")
              pickle.dump(function, output_file)
              output_file.close()
      else:
          cache_file = open(options.cache_filename, ""r"")
          function = pickle.load(cache_file)
          cache_file.close()
      if not options.filename:
          parser.error(""Must provide a filename."")
      input_file = open(options.filename, ""r"")
      total_cases = int(input_file.readline())
      case_number = 0
      while case_number < total_cases:
          case_number += 1
          lower,upper = input_file.readline().split()
          lower = int(lower)
          upper = int(upper)
          data_args = (lower, upper, function)
          print ""Case #%d: %s"" % (case_number, solve(*data_args))
  
  if __name__ == ""__main__"":
      main()
",51,51,54,1,"lower,upper,cache,counter,item,test_int,str_arg,upper_bound,binary_part,half_int,pal_int,pal_square,parser","lower:-0.015296608209609985,upper:-0.009701728820800781,cache:0.23735854029655457,counter:0.08129662275314331,item:0.07759827375411987,test_int:0.12172722816467285,str_arg:-0.030344516038894653,upper_bound:-0.01963585615158081,binary_part:0.011228740215301514,half_int:0.07582885026931763,pal_int:0.14416354894638062,pal_square:0.19093534350395203,parser:0.06331607699394226,",4,48,"cache:function,pal_square:palJout,pal_int:half_net,test_int:Test_arg,",Greedy,141,0.037148149808247884
103," 
  def solve(N,S,p,t):
      if p == 0:
          return N
      outright_wins = 0
      potential_surprises = 0
      win_cutoff = (p * 3) - 3
      surprise_cutoff = win_cutoff - 2
      for score in t:
          if score == 0:
              continue
          elif score > win_cutoff:
              outright_wins += 1
          elif score > surprise_cutoff:
              potential_surprises += 1
      if potential_surprises < S:
          return outright_wins + potential_surprises
      else:
          return outright_wins + S
  
  def parse_case(data_line):
      bits = data_line.split()
      N = int(bits[0])
      S = int(bits[1])
      p = int(bits[2])
      t = [int(x) for x in bits[3:]]
      return N,S,p,t
  
  def main():
      parser = OptionParser()
      parser.add_option(""-f"", ""--file"", dest=""filename"",
                        help=""read input from FILE"", metavar=""FILE"")
  
      (options, args) = parser.parse_args()
      if not options.filename:
          parser.error(""Must provide a filename."")
      input_file = open(options.filename, ""r"")
      total_cases = int(input_file.readline())
      case_number = 0
      while case_number < total_cases:
      	case_number += 1
      	data_args = parse_case(input_file.readline())
      	print ""Case #%d: %d"" % (case_number, solve(*data_args))
  
  if __name__ == ""__main__"":
  	main()
",259," 
  def solve(Net,out,path,format):
      if path == 0:
          return Net
      outright_wains = 0
      potential_genergeries = 0
      win_taildown = (path * 3) - 3
      surprise_cutoffs = win_taildown - 2
      for rank in format:
          if rank == 0:
              continue
          elif rank > win_taildown:
              outright_wains += 1
          elif rank > surprise_cutoffs:
              potential_genergeries += 1
      if potential_genergeries < out:
          return outright_wains + potential_genergeries
      else:
          return outright_wains + out
  
  def parse_case(case_line):
      stats = case_line.split()
      Net = int(stats[0])
      out = int(stats[1])
      path = int(stats[2])
      format = [int( X) for  X in stats[3:]]
      return Net,out,path,format
  
  def main():
      per = OptionParser()
      per.add_option(""-f"", ""--file"", dest=""filename"",
                        help=""read input from FILE"", metavar=""FILE"")
  
      (file, cli) = per.parse_args()
      if not file.filename:
          per.error(""Must provide a filename."")
      accept_string = open(file.filename, ""r"")
      total_cases = int(accept_string.readline())
      case_number = 0
      while case_number < total_cases:
      	case_number += 1
      	data_args = parse_case(accept_string.readline())
      	print ""Case #%d: %d"" % (case_number, solve(*data_args))
  
  if __name__ == ""__main__"":
  	main()
",51,51,52,1,"N,S,p,t,outright_wins,potential_surprises,win_cutoff,surprise_cutoff,score,data_line,bits,x,parser,options,args,input_file,total_cases,case_number,data_args","N:0.05585438013076782,S:0.009572416543960571,p:0.02209678292274475,t:0.014349281787872314,outright_wins:0.007050007581710815,potential_surprises:0.03306058049201965,win_cutoff:0.011606812477111816,surprise_cutoff:0.002379775047302246,score:0.017373502254486084,data_line:-0.00955769419670105,bits:-0.0018734931945800781,x:0.008707046508789062,parser:0.010032236576080322,options:0.020952582359313965,args:-0.0012414157390594482,input_file:0.0922003984451294,total_cases:-0.016971170902252197,case_number:0.19374153017997742,data_args:0.013303548097610474,",16,55,"case_number:case_number,input_file:accept_string,N:Net,potential_surprises:potential_genergeries,p:path,options:file,score:rank,t:format,data_args:data_args,win_cutoff:win_taildown,parser:per,S:out,x: X,outright_wins:outright_wains,surprise_cutoff:surprise_cutoffs,args:cli,bits:stats,data_line:case_line,",Greedy,245,0.08226722478866577
104," 
  
  def is_palindrome(x):
      candidate = list(str(x))
      while len(candidate) > 1:
          if candidate.pop(0) != candidate.pop():
              return False
      return True
  
  
  def square(x):
      return x * x
  
  
  def solve_case(ab, case_number):
      fs = 0
      root = int(math.sqrt(ab[0]))
      sq = square(root)
      if sq < ab[0]:
          root += 1
          sq = square(root)
  
      while sq <= ab[1]:
          if is_palindrome(root) and is_palindrome(sq):
              fs += 1
  
          root += 1
          sq = square(root)
  
      print ""Case #%d: %d"" % (case_number, fs)
  
  
  def main():
      r = sys.stdin
      if len(sys.argv) > 1:
          r = open(sys.argv[1], 'r')
  
      total_cases = r.readline()
      for case_number in range(1, int(total_cases) + 1):
          ab = map(int, r.readline().strip().split(' '))
          solve_case(ab, case_number)
  
  if __name__ == ""__main__"":
      main()
",228," 
  
  def is_palindrome(image):
      candidate = list(str(image))
      while len(candidate) > 1:
          if candidate.pop(0) != candidate.pop():
              return False
      return True
  
  
  def square(image):
      return image * image
  
  
  def solve_case(ab, case__numbered):
      sec = 0
      fixed = int(math.sqrt(ab[0]))
      sh = square(fixed)
      if sh < ab[0]:
          fixed += 1
          sh = square(fixed)
  
      while sh <= ab[1]:
          if is_palindrome(fixed) and is_palindrome(sh):
              sec += 1
  
          fixed += 1
          sh = square(fixed)
  
      print ""Case #%d: %d"" % (case__numbered, sec)
  
  
  def main():
      l = sys.stdin
      if len(sys.argv) > 1:
          l = open(sys.argv[1], 'r')
  
      Total_cs = l.readline()
      for case__numbered in range(1, int(Total_cs) + 1):
          ab = map(int, l.readline().strip().split(' '))
          solve_case(ab, case__numbered)
  
  if __name__ == ""__main__"":
      main()
",52,52,50,1,"x,candidate,ab,case_number,fs,root,sq,r,total_cases","x:0.011168181896209717,candidate:0.013183951377868652,ab:0.007143080234527588,case_number:0.03296351432800293,fs:0.007324039936065674,root:0.004893481731414795,sq:0.003941595554351807,r:0.07169514894485474,total_cases:0.0034905672073364258,",7,31,"r:l,case_number:case__numbered,candidate:candidate,x:image,fs:sec,ab:ab,root:fixed,sq:sh,total_cases:Total_cs,",Greedy,133,0.04370925426483154
105," 
  mod_plus_conv_with_s = {0:1, 1:1, 2:2}
  mod_plus_conv_without_s = {0:0, 1:1, 2:1}
  
  def solve_case(s, p, scores,case_number):
  	ans = 0
  	for score in scores:
  		if p <= (score / 3) + mod_plus_conv_without_s[score % 3]:
  			ans = ans + 1
  		elif s > 0 and (score / 3) > 0: 
  			if p <= (score / 3) + mod_plus_conv_with_s[score % 3]:
  				ans = ans + 1
  				s = s - 1
  	print ""Case #%d: %d"" % (case_number, ans)
  
  r = sys.stdin
  
  if len(sys.argv) > 1:
  	r = open(sys.argv[1], 'r')
  
  total_cases = r.readline()
  for case_number in range(1, int(total_cases) + 1):
  	case_line = map(int, r.readline().rstrip().split(' '))
  	solve_case(case_line[1], case_line[2], case_line[3:], case_number)
  
",210," 
  mod_plus_conv_with_s = {0:1, 1:1, 2:2}
  mod_plus_conv_without_d = {0:0, 1:1, 2:1}
  
  def solve_case(b, p,  Scores,line_numbered):
  	outs = 0
  	for score in  Scores:
  		if p <= (score / 3) + mod_plus_conv_without_d[score % 3]:
  			outs = outs + 1
  		elif b > 0 and (score / 3) > 0: 
  			if p <= (score / 3) + mod_plus_conv_with_s[score % 3]:
  				outs = outs + 1
  				b = b - 1
  	print ""Case #%d: %d"" % (line_numbered, outs)
  
  l = sys.stdin
  
  if len(sys.argv) > 1:
  	l = open(sys.argv[1], 'r')
  
  Total_cells = l.readline()
  for line_numbered in range(1, int(Total_cells) + 1):
  	caselypart = map(int, l.readline().rstrip().split(' '))
  	solve_case(caselypart[1], caselypart[2], caselypart[3:], line_numbered)
  
",52,52,11,1,"mod_plus_conv_with_s,mod_plus_conv_without_s,s,p,scores,case_number,ans,score,r,total_cases,case_line","mod_plus_conv_with_s:-0.010338246822357178,mod_plus_conv_without_s:-0.0021158456802368164,s:0.00430673360824585,p:-0.0045084357261657715,scores:0.0022805333137512207,case_number:0.047978341579437256,ans:-0.002625584602355957,score:-0.006900608539581299,r:0.052705228328704834,total_cases:-0.0033525824546813965,case_line:-0.00033789873123168945,",8,28,"r:l,case_number:line_numbered,s:b,scores: Scores,case_line:caselypart,mod_plus_conv_without_s:mod_plus_conv_without_d,ans:outs,total_cases:Total_cells,",Greedy,119,0.04004828929901123
106," 
  def isPalindrome(n):
  	n = str(n)	
  	for i in xrange(len(n)/2):
  		if n[i] != n[(-i-1)]:
  			return False
  	return True
  
  
  inputFileName = sys.argv[1]
  
  f = file(inputFileName)
  fout = file(""output.txt"", ""w"")
  
  T = eval(f.readline())
  
  for case in xrange(T):
  	data = f.readline().split()
  	A = eval(data[0])
  	B = eval(data[1])
  
  	i = A
  	found = []
  	while i <= B:
  		if isPalindrome(i):
  			sqrtI = math.sqrt(i)
  			if sqrtI == int(sqrtI):
  				if isPalindrome(int(sqrtI)):
  					found.append(i)
  		i += 1
  
  	fout.write(""Case #%d: %d
"" %(case + 1, len(found)))
",185,,53,53,53,-1,"n,i,inputFileName,f,fout,T,case,data,A,B,found,sqrtI",,0,0,,GA,2318,1.1445959011713664
107,"arq = file(""input.in"")
  n_cases = eval(arq.readline())
  out = file(""output.txt"", ""w"")
  
  for case in xrange(n_cases):
  
  	data = arq.readline()
  	data = data.strip()
  	data = data.split("" "")
  
  	n = eval(data[0])
  	s = eval(data[1])
  	p = eval(data[2])
  
  	scores = []
  	n_googlers_with_best_result = 0
  	candidates = 0
  
  	for j in data[3:]:
  		i = eval(j)
  		if i%3 == 0:
  			score = i/3
  			scores.append([score, score, score])
  		elif (i+1)%3 == 0:
  			score = (i+1)/3
  			scores.append([score-1, score, score])
  		else: #(i+2)%3 == 0
  			score = (i+2)/3
  			scores.append([score-1, score-1, score])
  
  	for score in scores:
  		if score[2] >= p:
  			n_googlers_with_best_result +=1
  		elif score[2] + 1 == p and score[1] == score[2] and score[2] != 0:
  			candidates += 1
  
  	n_googlers_with_best_result = n_googlers_with_best_result + min(s, candidates)
  
  	out.write(""Case #%d: %d
"" % (case+1, n_googlers_with_best_result))
",264,,53,53,53,-1,"arq,n_cases,out,case,data,n,s,p,scores,n_googlers_with_best_result,candidates,j,i,score",,0,0,,GA,2783,1.3729317466417947
108," 
  
  def isPal(n):
      l = str(n)
      return l == l[::-1]
  
  def solve(a, b):
      l = int(math.ceil(math.sqrt(a)))
      u = int(math.floor(math.sqrt(b)))
  
      count = 0
      for x in range(l, u + 1):
          if isPal(x):
              if isPal(x*x):
                  count += 1
      return str(count)
  
  def main():
      N = int(sys.stdin.readline()) # number of testcases
      for i in range(N):
          [a,b] = [int(x) for x in sys.stdin.readline().rstrip().split()]
          result = solve(a, b)
          print (""Case #%s: %s"" % (i+1, result))
  
  
  
  if __name__ == '__main__':
      main()
",182,,54,54,54,-1,"n,l,a,b,u,count,x,N,i,result",,0,0,,GA,1942,0.9593559185663859
109," 
  
  
  def solve(num_surprises, p, ts):
      s = 0
      u = 0
      for t in ts:
          a = int(t/3)
          r = t % 3
          if a+1 >= p and not r == 0:
              u += 1
          elif a >= p and r == 0:
              u += 1
          elif a > 0 and a+1 >= p and r == 0:
              s += 1
          elif a+2 >= p and r == 2:
              s += 1
  
      return min(num_surprises, s) + u
          
          
  
  def main():
      N = int(sys.stdin.readline()) # number of testcases
      for i in range(N):
          line = [int(x) for x in sys.stdin.readline().split()]
          num_surprises = line[1]
          p = line[2]
          ts = line[3:]
          result = solve(num_surprises, p, ts)
          print (""Case #%s: %s"" % (i+1, result))
  
  
  if __name__ == '__main__':
      main()
",198,,54,54,54,-1,"num_surprises,p,ts,s,u,t,a,r,N,i,line,x,result",,0,0,,GA,2473,1.2456514875094096
110," 
  def ispal(n):
      s = str(n)
      return s == s[::-1]
  
  def ispalsq(n):
      sqrt = int(math.sqrt(n) + .01)
      if sqrt ** 2 != n:
          return False
      return ispal(n) and ispal(sqrt)
  
  def search(s, l, idx):
      if l % 2 == 0:
          m = s + s[::-1]
      else:
          m = s[:-1] + s[::-1]
      assert ispal(m)
      n = int(m) ** 2
      if not ispal(n):
          return 0
  
      r = 1 if (a <= n <= b) else 0
      for i in xrange(idx, len(s)):
          s2 = list(s)
          s2[i] = str(int(s2[i])+1)
          s2 = ''.join(s2)
          r += search(s2, l, i)
      return r
  
  
  if __name__ == ""__main__"":
      f = sys.stdin
      if len(sys.argv) >= 2:
          fn = sys.argv[1]
          if fn != '-':
              f = open(fn)
  
      t = int(f.readline())
      for _t in xrange(t):
          a, b = map(int, f.readline().split())
  
          total = 0
          for l in xrange(1, 150):
              if 10 ** (l-1) > b:
                  break
              total += search(""1"" + ""0"" * ((l-1)/2), l, 0)
          print ""Case #%d: %d"" % (_t+1, total)
  
",329,,55,46,,-4,"n,s,sqrt,l,idx,m,r,i,s2,f,fn,t,_t,a,b,total",,,,,Greedy,1,0.0029175798098246258
111," 
  if __name__ == ""__main__"":
      f = sys.stdin
      if len(sys.argv) >= 2:
          fn = sys.argv[1]
          if fn != '-':
              f = open(fn)
  
      t = int(f.readline())
      for _t in xrange(t):
          ns = map(int, f.readline().split())
          n = ns[0]
          s = ns[1]
          p = ns[2]
          assert len(ns) == n + 3
          scores = ns[3:3+n]
  
          sure = 0
          if_surprising = 0
          for x in scores:
              not_surprising = (x + 2) / 3
              is_surprising = (x + 4) / 3
              if not_surprising >= p:
                  sure += 1
              elif (2 <= x <= 28) and is_surprising >= p:
                  if_surprising += 1
          print ""Case #%d: %d"" % (_t+1, sure + min(if_surprising, s))
",180," 
  if __name__ == ""__main__"":
      feed = sys.stdin
      if len(sys.argv) >= 2:
          ren = sys.argv[1]
          if ren != '-':
              feed = open(ren)
  
      size = int(feed.readline())
      for longtt in xrange(size):
          tests = map(int, feed.readline().split())
          l = tests[0]
          s = tests[1]
          py = tests[2]
          assert len(tests) == l + 3
          oscopes = tests[3:3+l]
  
          sure = 0
          if_surprising = 0
          for int in oscopes:
              not_surprising = (int + 2) / 3
              is_surprising = (int + 4) / 3
              if not_surprising >= py:
                  sure += 1
              elif (2 <= int <= 28) and is_surprising >= py:
                  if_surprising += 1
          print ""Case #%d: %d"" % (longtt+1, sure + min(if_surprising, s))
",55,55,46,1,"f,fn,t,_t,ns,n,s,p,scores,sure,if_surprising,x,not_surprising,is_surprising","f:0.019376665353775024,fn:0.007048100233078003,t:0.00880470871925354,_t:0.006065249443054199,ns:0.011440962553024292,n:0.0014684498310089111,s:0.000568091869354248,p:0.005022257566452026,scores:0.0037078857421875,sure:-5.3495168685913086e-05,if_surprising:0.0007994472980499268,x:0.005039095878601074,not_surprising:0.00020110607147216797,is_surprising:0.0012431442737579346,",9,29,"f:feed,ns:tests,t:size,fn:ren,_t:longtt,x:int,p:py,scores:oscopes,n:l,",Greedy,133,0.04348769187927246
112," 
  
  def readfile(file):
    """"""
      input:
  
  		T (number of test cases)
  
  		A B
  
    """"""
  
    tests = []
  
    T = int(file.readline().strip())
  
    for i in xrange(T):
  		test = {}
  
  		line = file.readline().strip()
  		parts = line.split("" "")
  
  		if len(parts) != 2:
  			print ""HORRIBLE ERROR IN TEST CASE %d"" % (i+1,)
  			return None
  
  		test['A'] = int(parts[0])
  		test['B'] = int(parts[1])
      
  		tests.append(test)
  
    return tests
  
  def isPalindrome(s):
  	""""""
  		Is s a palindrome.
  
  		S must be a string.
  	""""""
  
  	l = len(s)
  
  	if (l % 2) == 0:
  		frontHalf = s[0:l/2]
  		backHalf = s[l/2:]
  	else:
  		frontHalf = s[0:(l-1)/2]
  		backHalf = s[(l+1)/2:]
  
  	backHalf = backHalf[::-1]
  
  	if frontHalf == backHalf:
  		return True
  	else:
  		return False
  
  def isFairAndSquare(n):
  
  	sqrtN = int(math.sqrt(n))
  
  	if (sqrtN * sqrtN) != n:
  		return False
  
  	if not isPalindrome(str(n)):
  		return False
  
  	if not isPalindrome(str(sqrtN)):
  		return False
  
  	return True
  
  def run(test):
  	""""""
  		Run a test and return output.
  	""""""
  
  	count = 0
  
  	for i in xrange(test['A'], test['B'] + 1):
  		if isFairAndSquare(i):
  			count = count + 1
  
  	return count
  
  	i = int(math.sqrt(test['A']))
  
  	if (i * i) < test['A']:
  		i = i + 1
  
  	while i < test['B']:
  		if not isPalindrome(str(i)):
  			i = i + 1
  			continue
  
  		s = i * i
  
  		if s <= test['B']:
  			if isPalindrome(str(s)):
  				count = count + 1
  		else:
  			break
  
  		i = i + 1
  
  	return ""%s"" % (count, )
  
  file = open(sys.argv[1], ""rt"")
  
  tests = readfile(file)
  
  file.close()
  
  case = 1
  
  for test in tests:
    result = run(test)
    print ""Case #%d: %s"" % (case, result)
    case = case + 1
",437,,56,56,56,-1,"file,tests,T,i,test,line,parts,s,l,frontHalf,backHalf,n,sqrtN,count,case,result",,0,0,,GA,3100,1.601699912548065
113," 
  def readfile(filename):
  	""""""
  		The first line of the input gives the number of test
  		cases, T. T test cases follow. Each test case consists of
  		a single line containing integers separated by single
  		spaces. The first integer will be N, the number of
  		Googlers, and the second integer will be S, the number
  		of surprising triplets of scores. The third integer will
  		be p, as described above. Next will be N integers ti:
  		the total points of the Googlers.
  	""""""
  
  	file = open(filename, ""rt"")
  
  	retval = {}
  
  	T = int(file.readline().strip())
  	retval['T'] = T
  
  	tests = []
  
  	for i in xrange(T):
  		line = file.readline().strip()
  
  		parts = line.split("" "")
  
  		N = int(parts[0])
  		S = int(parts[1])
  		p = int(parts[2])
  		t = []
  
  		for j in xrange(N):
  			t = t + [int(parts[3 + j]), ]
  
  		test = { 'N' : N, 'S': S, 'p' : p, 't' : t }
  		tests = tests + [test, ]
  
  	retval['tests'] = tests
  	return retval
  
  def spread(triplet):
  	return max(abs(triplet[0] - triplet[1]), abs(triplet[1] - triplet[2]), abs(triplet[2] - triplet[0]))
  
  def bestresult(triplet):
  	if triplet:
  		return max(triplet)
  	return 0
  
  def getcombos(points):
  	""""""
  		Returns ([unsurprising possibilities, ], [surprising possibilities])
  	""""""
  
  	unsurps = []
  	surps = []
  
  	avg = points / 3.0
  
  	avg = int(avg)
  
  	tested = []
  
  	for i in xrange(max(avg - 2, 0), min(avg + 3, 10)+1):
  		for j in xrange(max(avg - 2, 0), min(avg + 3, 10)+1):
  			for k in xrange(max(avg - 2, 0), min(avg + 3, 10)+1):
  				if (i + j + k) != points:
  					continue
  
  				scores = (i,j,k)
  				scores = sorted(scores)
  
  				if scores in tested:
  					continue
  				tested.append(scores)
  
  				s = spread((i,j,k))
  
  				if (s < 2):
  					unsurps.append(scores)
  				elif (s == 2):
  					surps.append(scores)
  				else:
  					continue
  
  	return (unsurps, surps)
  
  def getbesttriplet(triplets):
  	best = None
  
  	for i in triplets:
  		if best:
  			if (bestresult(i) > bestresult(best)):
  				best = i
  		else:
  			best = i
  
  	return best
  	
  
  def getmulticombos(peeps):
  	""""""
  		Return the best surprising and non-surprising possibility for
  		each person.
  	""""""
  
  	ret = []
  
  	for p in peeps:
  		u,s = getcombos(p)
  
  		bestu = getbesttriplet(u)
  		bests = getbesttriplet(s)
  
  		ret.append((bestu, bests))
  
  	return ret
  
  def getbestresults(scores, best, numsur):
  	""""""
  		Figure out the maximum number of people that could have gotten
  		a single score >= best.  Limited to choosing only numsur surprising
  		triplets.
  	""""""
  
  	peeps = getmulticombos(scores)
  
  	count = 0
  	surcount = 0
  
  	for p in peeps:
  		if (bestresult(p[0]) >= best):
  			count = count + 1
  		elif ((bestresult(p[1]) >= best) and (surcount < numsur)):
  			count = count + 1
  			surcount = surcount + 1
  
  	return count
  
  def process(test):
  	N = test['N']
  	S = test['S']
  	p = test['p']
  	t = test['t']
  
  	return getbestresults(t, p, S)
  
  data = readfile(""B-small-attempt0.in"")
  
  for i in xrange(data['T']):
  	test = data['tests'][i]
  
  	result = process(test)
  
  	print ""Case #%d: %d"" % (i+1, result)
",662,,56,56,56,-1,"filename,file,retval,T,tests,i,line,parts,N,S,p,t,j,test,triplet,points,unsurps,surps,avg,tested,k,scores,s,triplets,best",,0,0,,GA,4883,2.6278749227523805
114," 
  class Test(unittest.TestCase):
  	def test_1(self):
  		self.assertEqual(main(1, 4), 2)
  	def test_2(self):
  		self.assertEqual(main(10, 120), 0)
  	def test_3(self):
  		self.assertEqual(main(100, 100000000000000), 2)
  
  tCase = int(sys.stdin.readline())
  
  
  def main(M, N):
  	fns = 0
  	num = M
  	maior = math.sqrt(N)
  	int_maior = 0
  	
  	if maior.is_integer():
  		int_maior = int(maior) - 1
  		if fair(N):
  			if fair(int(maior)):
  				fns += 1
  	else:
  		int_maior = int(maior)
  		
  	while int_maior >= 1:
  		if fair(int_maior):
  			quadrado = int_maior * int_maior
  			if quadrado >= M:
  				if fair(quadrado):
  					fns += 1
  		int_maior -= 1
  	return fns
  
  def main2(M, N):
  	fns = 0
  	num = M
  	while num <= N:
  		result = raiz(num)
  		if result:
  			if fair(num):
  			
  				if fair(result):
  					fns += 1
  		num += 1
  	return fns
  	
  def fair(num):
  	return str(num) == str(num)[::-1]
  	
  def raiz(num):
  	result = math.sqrt(num)
  	if result.is_integer():
  		return int(result)
  	else:
  		return False
  	
  if __name__ == '__main__':
  	for i in xrange(tCase):	
  		
  		N,M = [int(x) for x in sys.stdin.readline().split(' ')]	
  		print ""Case #%d: %d"" % (i + 1, main(N,M))
",331,,57,57,57,-1,"self,tCase,M,N,fns,num,maior,int_maior,quadrado,result,i,x",,0,0,,GA,2344,1.1825984398523965
115," 
  tCase = int(sys.stdin.readline())
  
  def alien(frases,case):
  	
  	case = case.replace('(','[')
  	case = case.replace(')',']')
  	
  	ER1 = re.compile(case, re.I)
  	count = 0
  	for frase in frases:
  		if ER1.search(frase):
  			count += 1
  	return count
  
  
  for i in xrange(tCase):	
  	linha = sys.stdin.readline().split()
  	P = int(linha[1])
  	T = int(linha[2])
  	list = []
  	for j in range (3,len(linha)):
  		list.append(int(linha[j]))
  	list.sort(reverse=True)
  	realT = T*3 - 2
  	supT = realT - 2
  	
  	count = 0
  	for item in list:
  		if item >= realT:
  			count += 1
  		elif P > 0 and item >= supT and T >= 2:
  			count += 1
  			P -= 1
  		elif P > 0 and item >= realT and T == 1:
  			count += 1
  			P -= 1
  		elif T == 0:
  			count += 1
  		else:
  			break
  		
  	print ""Case #%d: %d"" % (i+1, count)
  	
  	
  
",236,,57,57,57,-1,"tCase,frases,case,ER1,count,frase,i,linha,P,T,list,j,realT,supT,item",,0,0,,GA,2861,1.441679867108663
116,"def sqrt(x, ge):
      if x == 1:
          return 1
      sx = x >> 1
      step = sx >> 1
  
      while step:
          if sx ** 2 >= x:
              sx = sx - step
          else:
              sx = sx + step
          step = step >> 1
  
      if ge:
          while not sx ** 2 < x:
              sx = sx - 1
          while not sx ** 2 >= x:
              sx = sx + 1
      else:
          while not sx ** 2 > x:
              sx = sx + 1
          while not sx ** 2 <= x:
              sx = sx - 1
  
      return sx
  
  
  def get_start_pali(a):
      s = str(a)
      ls = len(s)
      if ls == 1:
          return s, True
      elif ls & 1:
          return s[:ls >> 1 + 1], True
      else:
          return s[:ls >> 1], False
  
  
  def get_next_pali(p, m):
      if len(p) == p.count(""9""):
          if m:
              return ""1"" + ""0"" * (len(p) - 1), False
          else:
              return ""1"" + ""0"" * len(p), True
      else:
          return str(int(p) + 1), m
  
  
  def pali_to_num(p, m):
      if m:
          return int(p + p[-2::-1])
      else:
          return int(p + p[::-1])
  
  
  def is_pali(a):
      s = str(a)
      hls = len(s) >> 1
      return s[:hls] == s[:-hls - 1:-1]
  
  for i in range(int(input())):
      a, b = tuple(map(int, input().split()))
      sqa, sqb = sqrt(a, True), sqrt(b, False)
  
      p, m = get_start_pali(sqa)
      while pali_to_num(p, m) < sqa:
          p, m = get_next_pali(p, m)
  
      count = 0
  
      while True:
          curr = pali_to_num(p, m)
          if curr > sqb:
              break
          if is_pali(curr ** 2):
              count = count + 1
          p, m = get_next_pali(p, m)
  
      print(""Case #{}: {}"".format(i + 1, count))
",445,,58,33,,-4,"x,ge,sx,step,a,s,ls,p,m,hls,i,b,sqa,sqb,count,curr",,,,,Greedy,1,0.0024884581565856934
117,"def passes(p, t): #normal, surprising
      q, r = divmod(t, 3)
      if r == 0:
          return q >= p, q + 1 >= p and q
      elif r == 1:
          return q + 1 >= p, q + 1 >= p and q
      elif r == 2:
          return q + 1 >= p, q + 2 >= p
  
  for case in range(int(input())):
      st = input().strip().split()
      n, s, p, t = int(st[0]), int(st[1]), int(st[2]), list(map(int, st[3:]))
      result = 0
      for i in t:
          normal, surprising = passes(p, i)
          if normal:
              result += 1
          elif surprising and s != 0:
              result += 1
              s -= 1
      print(""Case #{}: {}"".format(case + 1, result))
",192,"def passes(b, t): #normal, surprising
      Q,  R = divmod(t, 3)
      if  R == 0:
          return Q >= b, Q + 1 >= b and Q
      elif  R == 1:
          return Q + 1 >= b, Q + 1 >= b and Q
      elif  R == 2:
          return Q + 1 >= b, Q + 2 >= b
  
  for rice in range(int(input())):
      st = input().strip().split()
      n, s, b, t = int(st[0]), int(st[1]), int(st[2]), list(map(int, st[3:]))
      result = 0
      for i in t:
          normal, surprising = passes(b, i)
          if normal:
              result += 1
          elif surprising and s != 0:
              result += 1
              s -= 1
      print(""Case #{}: {}"".format(rice + 1, result))
",58,58,42,1,"p,t,q,r,case,st,n,s,result,i,normal,surprising","p:0.2490403950214386,t:0.14740338921546936,q:0.5209652185440063,r:0.23960453271865845,case:0.25962093472480774,st:0.10274994373321533,n:0.031909048557281494,s:0.021777093410491943,result:0.09523060917854309,i:0.01071387529373169,normal:0.013364076614379883,surprising:3.153085708618164e-05,",4,24,"q:Q,case:rice,p:b,r: R,",Greedy,89,0.02563720146814982
118,"lst = [1,4,9,121,484,10201,12321,14641,40804,44944,1002001,1234321,4008004,
      100020001,102030201,104060401,121242121,123454321,125686521,400080004,
      404090404,10000200001,10221412201,12102420121,12345654321,40000800004,
      1000002000001,1002003002001,1004006004001,1020304030201,1022325232201,
      1024348434201,1210024200121,1212225222121,1214428244121,1232346432321,
      1234567654321,4000008000004,4004009004004,100000020000001,100220141022001,
      102012040210201,102234363432201,121000242000121,121242363242121,123212464212321,
      123456787654321,400000080000004]
  
  
  def solve(lo,hi):
      global lst
      count = 0
      for i in range(len(lst)):
          if (lst[i] >= lo and lst[i] <= hi ):
              count += 1
      return count
  
  fname = raw_input(""name of file: "")
  oname = raw_input(""output file name:"")
  f = open(fname,""r"")
  out = open(oname,""w"")
  n = int(f.readline()[:-1])
  case_num = 1
  for line in f:
      args = line[:-1].split()
      lo = int(args[0])
      hi = int(args[1])
      out.write(""Case #%d: %d
"" %(case_num,solve(lo,hi)))
      case_num += 1
      
  out.close()
  f.close()
      
",258,,59,59,59,-1,"lst,lo,hi,count,i,fname,oname,f,out,n,case_num,line,args",,0,0,,GA,2438,1.2566373666127524
119,"fileName = raw_input(""File name: "")
  
  f = open(fileName,""r"")
  
  t = int(f.readline()[:-1])
  
  tests = []
  
  for i in range (t):
      tests += [f.readline()[:-1]]
  
  f.close()
  
  
  def compute(raw):
      dataN = [] # keeps the max mark for not surprising
      dataS = [] # keeps the max marks for surprisings
      
      items = raw.split() 
      
      for i in range (int(items[0])):
          ti = int(items[3+i])
          if ti < 1:
              dataS += [0]
              dataN += [0]
          elif ti > 28:
              dataS += [10]
              dataN += [10]
          else:
              dataN += [int((ti+2)/3)] # put the values for all participants
              dataS += [int((ti+4)/3)]
          
          
  
      
      p = int(items[2])
      s = int(items[1])
      
      n_vals = dataN
      n_vals.sort()
      
  
      i=0
      minimum = 0 # how many numbers greater than p are there in ""not surprising""
      if n_vals[0] < p:
          while n_vals[-1-i] >= p:
              minimum += 1
              i += 1
      else:
          minimum = len(n_vals)
          
  
      s_vals = dataS
      s_vals.sort()
      i=0
      maximum = 0 # how many numbers greater than p are there in ""surprising""
      if s_vals[0] < p:
          while s_vals[-1-i] >= p:
              maximum += 1
              i += 1
      else:
          maximum = len(n_vals)
      
      return min(maximum, minimum+s) 
      
  
  for i in range (t):
      print ""Case #%d: %d"" %(i+1,compute(tests[i]))
  
  
      
",311,,59,59,59,-1,"fileName,f,t,tests,i,raw,dataN,dataS,items,ti,p,s,n_vals,minimum,s_vals,maximum",,0,0,,GA,2960,1.5538407762845357
120," 
  def read_word(f):
      return next(f).strip()
  
  def read_int(f, b=10):
      return int(read_word(f), b)
  
  def read_letters(f):
      return list(read_word(f))
  
  def read_digits(f, b=10):
      return [int(x, b) for x in read_letters(f)]
  
  def read_words(f, d=' '):
      return read_word(f).split(d)
  
  def read_ints(f, b=10, d=' '):
      return [int(x, b) for x in read_words(f, d)]
  
  def read_floats(f, d=' '):
      return [float(x) for x in read_words(f, d)]
  
  def read_arr(f, R, reader=read_ints, *args, **kwargs):
      res = []
      for i in range(R):
          res.append(reader(f, *args, **kwargs))
      return res
  
  def solve(solver, fn, out_fn=None):
      in_fn = fn + '.in'
      if out_fn is None:
          out_fn = fn + '.out'
      with open(in_fn, 'r') as fi:
          with open(out_fn, 'w') as fo:
              T = read_int(fi)
              for i in range(T):
                  case = read_case(fi)
                  res = solver(case)
                  write_case(fo, i, res)
  
  
  def read_case(f):
      return read_ints(f)
  
  def write_case(f, i, res):
      f.write('Case #%d: '%i)
      f.write('%d'%res)
      f.write('
')
  
  
  def aux(A, B, x, s):
      res = 0
      n = int(''.join(x[::-1]+x))
      nn = n*n
      if nn > B:
          return res
      if nn >= A:
          res += 1
      for c in [0, 1, 2]:
          if s + c*c < 10:
              n = int(''.join(x[::-1]+[str(c)]+x))
              nn = n*n
              if nn >= A and nn <= B:
                  res += 1
          if s + 2*c*c < 10:
              res += aux(A, B, [str(c)]+x, s + 2*c*c)
      return res
  
  def solve_small(case):
      [A, B] = case
      res = 0
      for n in [1, 4, 9]:
          if n >= A and n <= B:
              res += 1
      for c in [1, 2]:
          res += aux(A, B, [str(c)], 2*c*c)
      return res
  
  def solve_large(case):
      return solve_small(case)
  
  DEBUG = 'i'
  
",564,,60,60,60,-1,"f,b,x,d,R,reader,res,i,solver,fn,out_fn,in_fn,T,case,A,B,s,n,nn,c",,0,0,,GA,3968,2.0479658325513204
121," 
  __file__ = sys.argv[0]
  __path__ = os.path.dirname(__file__)
  __prob__ = os.path.basename(__path__)
  
  def pout(s, back=0):
      f = sys._getframe(back+1)
      d = 0
      if 'depth' in f.f_locals:
          d = f.f_locals['depth']
      print(' '*d + s + ' = ' + repr(eval(s, f.f_globals, f.f_locals)))
  
  def perr(s, back=0):
      f = sys._getframe(back+1)
      d = 0
      if 'depth' in f.f_locals:
          d = f.f_locals['depth']
      ERR_FILE.write(' '*d + '%s = %s
'%(s, repr(eval(s, f.f_globals, f.f_locals))))
  
  def argmin(f, s=None):
      a = f
      if s is None:
          s = range(len(a))
          f = lambda i: a[i]
      res = None
      for x in s:
          y = f(x)
          if res is None or best > y:
              best = y
              res = x
      return res
  
  def argmax(f, s=None):
      a = f
      if s is None:
          s = range(len(a))
          f = lambda i: a[i]
      res = None
      for x in s:
          y = f(x)
          if res is None or best < y:
              best = y
              res = x
      return res
  
  def read_word(f):
      return next(f).strip()
  
  def read_int(f, b=10):
      return int(read_word(f), b)
  
  def read_words(f, d=' '):
      return read_word(f).split(d)
  
  def read_ints(f, b=10, d=' '):
      return [int(x, b) for x in read_words(f, d)]
  
  def read_word_arr(f, R):
      res = []
      for i in range(R):
          res.append(read_word(f))
      return res
  
  def read_ints_arr(f, R, dtype=int, *args, **kwargs):
      res = []
      for i in range(R):
          res.append(read_ints(f, *args, **kwargs))
      return numpy.array(res, dtype)
  
  def solve(solver, fn, start_case=0, end_case=None, out_fn=None):
      global ERR_FILE
      in_fn = fn + '.in'
      if out_fn is None:
          out_fn = fn + '.out'
      err_fn = fn + '.err'
      if start_case == 0:
          append = True
          if os.path.exists(out_fn):
              with open(out_fn, 'r') as f:
                  for l in f:
                      if l[:6] == 'Case #':
                          start_case = int(l[6:l.index(':')])+1
      else:
          append = False
      with open(in_fn, 'r') as fi:
          with open(out_fn, 'a' if append else 'w') as fo:
              with open(err_fn, 'w') as ERR_FILE:
                  T = read_int(fi)
                  for i in range(T):
                      case = read_case(fi)
                      if i+1 < start_case:
                          continue
                      print('Case #%d of %d'%(i+1, T))
                      ERR_FILE.write('Case #%d of %d
'%(i+1, T))
                      perr('case')
                      res = solver(case)
                      perr('res')
                      write_case(fo, i, res)
                      fo.flush()
                      if end_case is not None and i+1 == end_case:
                          break
  
  def test(start_case=1, end_case=None):
      fn = os.path.join(__path__, 'test')
      solve(solve_small, fn, start_case, end_case)
  
  def small(start_case=1, end_case=None):
      fn = os.path.join(__path__, '%s-small-attempt0'%__prob__)
      solve(solve_small, fn, start_case, end_case)
  
  def small2(start_case=1, end_case=None):
      fn = os.path.join(__path__, '%s-small-attempt0'%__prob__)
      solve(solve_large, fn, start_case, end_case, fn + '2.out')
  
  def large(start_case=0, end_case=None):
      fn = os.path.join(__path__, '%s-large-attempt0'%__prob__)
      solve(solve_large, fn, start_case, end_case)
  
  
  def read_case(f):
      Z = read_ints(f)
      (N, S, p) = Z[:3]
      t = Z[3:]
      return (N, S, p, t)
  
  def write_case(f, i, res):
      f.write('Case #%d: '%(i+1))
      f.write('%s'%res)
      f.write('
')
  
  FAIL = 'NO SOLUTION'
  
  def solve_small(case):
      (N, S, p, t) = case
      res = 0
      for i in range(N):
          if p >= 2:
              if t[i] >= 3*p-2:
                  res += 1
              elif S > 0 and t[i] >= 3*p-4:
                  res += 1
                  S -= 1
          elif p == 1:
              if t[i] >= 3*p-2:
                  res += 1
          elif p == 0:
              res += 1
      return res
  
  solve_large = solve_small
  
  pout = perr
",1043,,60,60,60,-1,"__file__,__path__,__prob__,s,back,f,d,a,res,x,y,best,b,R,i,append,pout",,0,0,,GA,3351,1.8974106907844543
122,"def esPal(x):
  	return str(x) == str(x)[::-1]
  
  t = int(raw_input())
  
  for case in range(t):
  	line = raw_input().split(' ')
  	a = int(line[0])
  	b = int(line[1])
  
  	i = int(a**.5)
  	if i*i != a:
  		i += 1
  	max = int(b**.5)
  	cantidad = 0
  	while i <= max:
  		if esPal(i) and esPal(i*i):
  			cantidad += 1
  		i += 1
  
  	print 'Case #'+str(case+1)+':', cantidad
",132,"def esPal(input):
  	return str(input) == str(input)[::-1]
  
  count = int(raw_input())
  
  for rice in range(count):
  	line = raw_input().split(' ')
  	api = int(line[0])
  	aa = int(line[1])
  
  	eni = int(api**.5)
  	if eni*eni != api:
  		eni += 1
  	max = int(aa**.5)
  	lcantsilla = 0
  	while eni <= max:
  		if esPal(eni) and esPal(eni*eni):
  			lcantsilla += 1
  		eni += 1
  
  	print 'Case #'+str(rice+1)+':', lcantsilla
",61,61,40,1,"x,t,case,line,a,b,i,max,cantidad","x:0.12453287839889526,t:0.06626594066619873,case:0.05959388613700867,line:-0.043581366539001465,a:0.03158289194107056,b:0.019158393144607544,i:0.07118567824363708,max:0.0006541609764099121,cantidad:0.07041388750076294,",7,24,"x:input,i:eni,cantidad:lcantsilla,t:count,case:rice,a:api,b:aa,",Greedy,101,0.03439797163009643
123,"t = int(raw_input())
  
  max = [0, 1, 1, 2, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6, 5, 6, 7, 6, 7, 8, 7, 8, 9, 8, 9, 10, 9, 10, 10, 10]
  
  for i in range(t):
  	line = raw_input().split(' ')
  	n = int(line[0])
  	s = int(line[1])
  	p = int(line[2])
  
  	total = 0
  
  	for j in range(3, len(line)):
  		t = int(line[j])
  		if t == 0:
  			if p == 0:
  				total += 1
  		elif t%3 == 0:
  			if t/3 >= p:
  				total +=1
  			elif t/3 + 1 >= p and s>0:
  				total +=1
  				s -=1
  		elif t%3 == 1:
  			if (t+2)/3 >= p:
  				total +=1
  		else:
  			if (t+1)/3 >= p:
  				total +=1
  			elif (t+1)/3 + 1 >= p and s>0:
  				total +=1
  				s -=1
  
  
  
  	print 'Case #'+str(i+1)+':', total
  
  
",266,,61,61,61,-1,"t,max,i,line,n,s,p,total,j",,0,0,,GA,1790,0.8938007036844889
124," 
  def is_palindrome(n):
      s = str(n)
      return s == s[::-1] 
  
  palindromes = [[], [1,2,3,4,5,6,7,8,9], [11,22,33,44,55,66,77,88,99]]
  all_palindromes = palindromes[1] + palindromes[2]
  limit = [100]
  
  palindromic_squares = []
  psqtop = 0
  psqix = 0
  
  stdin = sys.stdin
  for c in xrange(int(stdin.readline())):
      a,b = map(int, stdin.readline().split())
  
      while psqtop < b:
          while psqix >= len(all_palindromes):
              ps = []
              pp = 10 ** (len(palindromes)-1) + 1
              for i in range(1,10):
                  for p in palindromes[-2]:
                      ps.append(i * pp + 10 * p) 
              palindromes.append(ps)
              all_palindromes.extend(ps)
  
          sq = all_palindromes[psqix] * all_palindromes[psqix]
          if is_palindrome(sq):
              palindromic_squares.append(sq)
          psqix  += 1
          psqtop = sq
  
      aix = bisect.bisect_left(palindromic_squares, a)
      bix = bisect.bisect_right(palindromic_squares, b)
  
      print ""Case #%i: %i"" % (c+1, bix-aix) 
",267," 
  def is_palindrome(node):
      s = str(node)
      return s == s[::-1] 
  
  palindchromers = [[], [1,2,3,4,5,6,7,8,9], [11,22,33,44,55,66,77,88,99]]
  all_palindromes = palindchromers[1] + palindchromers[2]
  limit = [100]
  
  palindromic_squares = []
  psqtop = 0
  psqix = 0
  
  stdin = sys.stdin
  for case in xrange(int(stdin.readline())):
      a,b = map(int, stdin.readline().split())
  
      while psqtop < b:
          while psqix >= len(all_palindromes):
              ps = []
              pp = 10 ** (len(palindchromers)-1) + 1
              for i in range(1,10):
                  for p in palindchromers[-2]:
                      ps.append(i * pp + 10 * p) 
              palindchromers.append(ps)
              all_palindromes.extend(ps)
  
          sq = all_palindromes[psqix] * all_palindromes[psqix]
          if is_palindrome(sq):
              palindromic_squares.append(sq)
          psqix  += 1
          psqtop = sq
  
      aix = bisect.bisect_left(palindromic_squares, a)
      bix = bisect.bisect_right(palindromic_squares, b)
  
      print ""Case #%i: %i"" % (case+1, bix-aix) 
",62,62,63,1,"n,s,palindromes,all_palindromes,limit,palindromic_squares,psqtop,psqix,stdin,c,a,b,ps,pp,i,p,sq,aix,bix","n:0.05692571401596069,s:-0.00287020206451416,palindromes:0.10334920883178711,all_palindromes:0.024303197860717773,limit:-0.01472538709640503,palindromic_squares:-0.0075702667236328125,psqtop:0.0030400753021240234,psqix:0.009624600410461426,stdin:-0.011376738548278809,c:0.03469204902648926,a:-0.034618377685546875,b:-0.0412936806678772,ps:-0.011610627174377441,pp:-0.0019360780715942383,i:-0.012266457080841064,p:-0.011139631271362305,sq:-0.034603655338287354,aix:-0.00625157356262207,bix:-0.010104000568389893,",3,10,"palindromes:palindchromers,n:node,c:case,",Greedy,90,0.025443283716837566
125," 
  T = int(stdin.readline())
  for i in xrange(1,T+1):
  	ns = map(int, stdin.readline().split())
  	N,S,p = ns[0:3]
  	
  	h = 0
  	z = 0
  
  	for n in ns[3:]:
  		if n <= 1:
  			if n >= p: h += 1	
  		elif (n+2) // 3 >= p:
  			h += 1
  		elif (n+4) // 3 >= p:
  			z += 1
  
  	print ""Case #%d: %d"" % (i, h + min(S,z))
  
  
",121,,62,62,62,-1,"T,i,ns,N,S,p,h,z,n",,0,0,,GA,1656,0.8535515268643697
126," 
  N = 10**4
  
  def isp(n):
      s = str(n)
      return s == s[::-1]
  
  fs = []
  for i in range(N):
      s = str(i)
      n1 = int(s + s[::-1])**2
      n2 = int(s[:-1] + s[::-1])**2
  
      if isp(n1):
          fs.append(n1)
      if isp(n2):
          fs.append(n2)
  
  fs.sort()
  
  print(fs, file=sys.stderr)
  
  
  fin = sys.stdin
  T = int(fin.readline())
  for case in range(1,T+1):
      board = []
      A, B = map(int, fin.readline().split())
  
      i = bisect.bisect_left(fs, A)
      j = bisect.bisect_right(fs, B)
  
      print(""Case #%d: %s"" % (case, j-i))
  
  
",202," 
  N = 10**4
  
  def isp(n):
      s = str(n)
      return s == s[::-1]
  
  fs = []
  for i in range(N):
      s = str(i)
      n1 = int(s + s[::-1])**2
      n2 = int(s[:-1] + s[::-1])**2
  
      if isp(n1):
          fs.append(n1)
      if isp(n2):
          fs.append(n2)
  
  fs.sort()
  
  print(fs, file=sys.stderr)
  
  
  lines = sys.stdin
  T = int(lines.readline())
  for case in range(1,T+1):
      board = []
      A, B = map(int, lines.readline().split())
  
      i = bisect.bisect_left(fs, A)
      j = bisect.bisect_right(fs, B)
  
      print(""Case #%d: %s"" % (case, j-i))
  
  
",63,63,44,1,"N,n,s,fs,i,n1,n2,fin,T,case,board,A,B,j","N:-0.004905045032501221,n:0.03163832426071167,s:0.08168065547943115,fs:0.013587474822998047,i:0.004527628421783447,n1:0.004576385021209717,n2:0.012389183044433594,fin:0.25273317098617554,T:0.033088862895965576,case:0.1296582818031311,board:-0.0038701891899108887,A:-0.0023936033248901367,B:-0.009846687316894531,j:0.004541277885437012,",1,3,"fin:lines,",Greedy,55,0.014394954840342204
127," fin = sys.stdin
  T = int(fin.readline())
  for case in range(1,T+1):
      numbers = map(int, fin.readline().split())
      N, S, p = numbers[:3]
      T = numbers[3:]
      normal_limit = p + 2*max(0, (p-1))
      surpising_limit = p + 2*max(0, (p-2))
  
      normal_count = 0
      surprising_count = 0
  
      for t in T:
          if t >= normal_limit:
              normal_count += 1
          elif t >= surpising_limit:
              surprising_count += 1
  
      result = normal_count + min(surprising_count, S)
  
      print ""Case #%d: %s"" % (case, result)
  
",138," min = sys.stdin
  T = int(min.readline())
  for step in range(1,T+1):
      numbers = map(int, min.readline().split())
      N, S, p = numbers[:3]
      T = numbers[3:]
      normal_limit = p + 2*max(0, (p-1))
      surpising_limit = p + 2*max(0, (p-2))
  
      normal_count = 0
      surprising_count = 0
  
      for t in T:
          if t >= normal_limit:
              normal_count += 1
          elif t >= surpising_limit:
              surprising_count += 1
  
      result = normal_count + min(surprising_count, S)
  
      print ""Case #%d: %s"" % (step, result)
  
",63,63,44,1,"fin,T,case,numbers,N,S,p,normal_limit,surpising_limit,normal_count,surprising_count,t,result","fin:0.10471069812774658,T:-0.0028647184371948242,case:0.038924336433410645,numbers:-0.010408878326416016,N:-0.005919396877288818,S:-0.009069502353668213,p:-0.015468120574951172,normal_limit:0.001174330711364746,surpising_limit:0.0008394718170166016,normal_count:0.0012363195419311523,surprising_count:-3.641843795776367e-05,t:-0.002116978168487549,result:-0.0012227892875671387,",2,5,"fin:min,case:step,",Greedy,57,0.01699150800704956
128," 
  def read_ints():
      return map(int, stdin.readline().rstrip().split(' '))
  
  def is_palin(n):
      s = str(n)
      return s == s[::-1]
      
  def find(n, fas):
      for i in xrange(len(fas)):
          if fas[i] >= n:
              return i
      return len(fas)
      
  def gen_fas(max):
      fas = []
      fasappend = fas.append
      square, base, d = 1, 1, 3
      while square < max:
          if is_palin(square) and is_palin(base):
              fasappend(square)
          square += d
          d += 2
          base += 1
      return fas
      
  def main():
      MAX = 1000
      fas = gen_fas(MAX)
      
      T = int(stdin.readline())
      for Ti in xrange(T):
          A, B = read_ints()
          answer = find(B + 1, fas) - find(A, fas)
          print 'Case #{}: {}'.format(Ti + 1, answer)
          
  main()
",208,,64,64,64,-1,"n,s,fas,i,max,fasappend,square,base,d,MAX,T,Ti,A,B,answer",,0,0,,GA,2884,1.4507430791854858
129," 
  def program():
  	T = int(stdin.readline())
  	for Ti in xrange(T):
  		numbers = a = map(int, stdin.readline().rstrip().split(' '))
  		N, S, p, totals = numbers[0], numbers[1], numbers[2], numbers[3:]
  		
  		m = 0
  		curr_S = S
  		for i in xrange(N):
  			t = totals[i]
  			
  			if t / 3 >= p or (t / 3 == p - 1 and t % 3 > 0):
  				m += 1
  			elif curr_S > 0 and t > 0:
  				if (t / 3 == p - 1 and t % 3 == 0) or (t / 3 == p - 2 and t % 3 == 2):
  					m += 1
  					curr_S -= 1
  		
  		print 'Case #%d: %d' % (Ti + 1, m)	
  	
  if __name__ == '__main__':
  	program()
",186,,64,64,64,-1,"T,Ti,numbers,a,N,S,p,totals,m,curr_S,i,t",,0,0,,GA,2327,1.148064370950063
130," 
  def get_number_of_test_case():
      return int(raw_input().strip())
  
  def solve_case(t):
      A, B = [int(x) for x in raw_input().strip().split()]
  
      print 'Case #%d: %d' % (t, get_number_of_palindrome(B) - get_number_of_palindrome(A - 1),)
  
  def get_number_of_palindrome(n):
      ret = 0
  
      nt = int(math.floor(math.sqrt(n)))
      total_column = int(math.ceil(math.ceil(math.log10(nt + 1)) / 2.0))
      upper_limit = 10 ** total_column
  
      counter = 0
      while counter < upper_limit:
          c_str = [c for c in str(counter)]
          c_str.reverse()
  
          number = str(counter)
          for c in c_str:
              number += c
          number = int(number)
          number = number ** 2
          if number <= n and is_palindrome(number):
              ret += 1
  
          number = str(counter)
          for c in c_str[1:]:
              number += c
          number = int(number)
          number = number ** 2
          if number <= n and is_palindrome(number):
              ret += 1
          
          counter += 1
  
      return ret
  
  def is_palindrome(n):
      if n == 0:
          return False
      num = str(n)
      check_len = len(num) / 2
      ret = True
      for i in range(check_len):
          ret &= num[i] == num[-i - 1]
      return ret
  
  T = get_number_of_test_case()
  t = 1
  while t <= T:
      solve_case(t)
      t += 1
  
",304,,65,65,65,-1,"t,A,B,x,n,ret,nt,total_column,upper_limit,counter,c_str,c,number,num,check_len,i,T",,0,0,,GA,3254,1.6648822625478108
131,"t = int(raw_input().strip())
  t_count = 1
  while t_count <= t:
  	line = raw_input().strip().split()
  	n = int(line[0])
  	s = int(line[1])
  	p = int(line[2])
  	ti_list = line[3:]
  	p_min = max(p * 3 - 2, p)
  	p_min_surprise = max(p * 3 - 4, p)
  	result = 0
  	for ti in ti_list:
  		ti = int(ti)
  		if ti >= p_min:
  			result += 1
  		elif p_min > p_min_surprise and ti >= p_min_surprise and s > 0:
  			result += 1
  			s -= 1
  	print 'Case #%d: %d' % (t_count, result,)
  	t_count += 1
",144,,65,40,,-4,"t,t_count,line,n,s,p,ti_list,p_min,p_min_surprise,result,ti",,,,,Greedy,1,0.002856310208638509
